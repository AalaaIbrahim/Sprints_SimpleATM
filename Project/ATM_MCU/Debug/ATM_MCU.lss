
ATM_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000024e  00800060  000022bc  00002350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000055  008002ae  008002ae  0000259e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000259e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000025fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004b0  00000000  00000000  00002638  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000609c  00000000  00000000  00002ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b25  00000000  00000000  00008b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003051  00000000  00000000  0000a6a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c34  00000000  00000000  0000d6fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001903  00000000  00000000  0000e330  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003413  00000000  00000000  0000fc33  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000388  00000000  00000000  00013046  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
       4:	0c 94 78 0a 	jmp	0x14f0	; 0x14f0 <__vector_1>
       8:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__vector_2>
       c:	0c 94 ca 0a 	jmp	0x1594	; 0x1594 <__vector_3>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 ea 0c 	jmp	0x19d4	; 0x19d4 <__vector_5>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__vector_11>
      30:	0c 94 31 0b 	jmp	0x1662	; 0x1662 <__vector_12>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	4e 41       	sbci	r20, 0x1E	; 30
      56:	4e 49       	Address 0x00000056 is out of bounds.
.word	0xffff	; ????

00000057 <pstr_inity>:
      57:	49 4e 49 54 59                                      INITY

0000005c <pstr_inf>:
      5c:	49 4e 46                                            INF

0000005f <pwr_m10>:
      5f:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      6f:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000077 <pwr_p10>:
      77:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      87:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000090 <__ctors_end>:
      90:	11 24       	eor	r1, r1
      92:	1f be       	out	0x3f, r1	; 63
      94:	cf e5       	ldi	r28, 0x5F	; 95
      96:	d8 e0       	ldi	r29, 0x08	; 8
      98:	de bf       	out	0x3e, r29	; 62
      9a:	cd bf       	out	0x3d, r28	; 61

0000009c <__do_copy_data>:
      9c:	12 e0       	ldi	r17, 0x02	; 2
      9e:	a0 e6       	ldi	r26, 0x60	; 96
      a0:	b0 e0       	ldi	r27, 0x00	; 0
      a2:	ec eb       	ldi	r30, 0xBC	; 188
      a4:	f2 e2       	ldi	r31, 0x22	; 34
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
      a8:	05 90       	lpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ae 3a       	cpi	r26, 0xAE	; 174
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
      b2:	23 e0       	ldi	r18, 0x03	; 3
      b4:	ae ea       	ldi	r26, 0xAE	; 174
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a3 30       	cpi	r26, 0x03	; 3
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 29 09 	call	0x1252	; 0x1252 <main>
      c6:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <TriggerCallBack>:
************************************************************************************************************/


void TriggerCallBack(void)
{
	TriggerState = TRIGGER;
      ce:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
      d2:	08 95       	ret

000000d4 <timer_ovfCount>:
 * RETURN			: void
 */

void timer_ovfCount(void)
{
	global_u8OVFCounter++;
      d4:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <global_u8OVFCounter>
      d8:	8f 5f       	subi	r24, 0xFF	; 255
      da:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <global_u8OVFCounter>
      de:	08 95       	ret

000000e0 <APP_Init>:
}
void APP_Init(void)
{
	
	//(void)HButton_Init(DIO_PINB_2);
	(void)KEYPAD_init();
      e0:	0e 94 e5 05 	call	0xbca	; 0xbca <KEYPAD_init>
	(void)HTimer_enInit();
      e4:	0e 94 b4 05 	call	0xb68	; 0xb68 <HTimer_enInit>
	(void)HTimer_enCBF(timer_ovfCount);
      e8:	8a e6       	ldi	r24, 0x6A	; 106
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	0e 94 c6 05 	call	0xb8c	; 0xb8c <HTimer_enCBF>
	(void)HLCD_vidInit();
      f0:	0e 94 9f 07 	call	0xf3e	; 0xf3e <HLCD_vidInit>
	(void)HSPI_MasterInit();
      f4:	0e 94 a5 04 	call	0x94a	; 0x94a <HSPI_MasterInit>
	(void)H_EXTINT_create(EXTINT0,RISING_EDGE,TriggerCallBack);
      f8:	47 e6       	ldi	r20, 0x67	; 103
      fa:	50 e0       	ldi	r21, 0x00	; 0
      fc:	62 e0       	ldi	r22, 0x02	; 2
      fe:	80 e0       	ldi	r24, 0x00	; 0
     100:	0e 94 ce 05 	call	0xb9c	; 0xb9c <H_EXTINT_create>
	/*(void)SwICU_Init();*/
	(void)BUZ_Init(&st_g_Buzzer);
     104:	8c e6       	ldi	r24, 0x6C	; 108
     106:	91 e0       	ldi	r25, 0x01	; 1
     108:	0e 94 8d 04 	call	0x91a	; 0x91a <BUZ_Init>
	(void)HButton_ExtIntInit(DIO_PINB_2);
     10c:	8a e0       	ldi	r24, 0x0A	; 10
     10e:	0e 94 86 04 	call	0x90c	; 0x90c <HButton_ExtIntInit>
	(void)H_EXTINT_create(EXTINT2, RISING_EDGE,EXTINT_FUNC);
     112:	4f e8       	ldi	r20, 0x8F	; 143
     114:	51 e0       	ldi	r21, 0x01	; 1
     116:	62 e0       	ldi	r22, 0x02	; 2
     118:	82 e0       	ldi	r24, 0x02	; 2
     11a:	0e 94 ce 05 	call	0xb9c	; 0xb9c <H_EXTINT_create>
     11e:	08 95       	ret

00000120 <APP_Start>:


void APP_Start(void)
{
			
	switch(TriggerState)
     120:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     124:	81 30       	cpi	r24, 0x01	; 1
     126:	79 f1       	breq	.+94     	; 0x186 <APP_Start+0x66>
     128:	18 f0       	brcs	.+6      	; 0x130 <APP_Start+0x10>
     12a:	82 30       	cpi	r24, 0x02	; 2
     12c:	b1 f1       	breq	.+108    	; 0x19a <APP_Start+0x7a>
     12e:	08 95       	ret
	{
		case TRIGGER:
		{
			welcomeFlag = 0;
     130:	10 92 af 02 	sts	0x02AF, r1	; 0x8002af <welcomeFlag>
			if(Get_pin(ATMpin)==PIN_NOT_OK)break;
     134:	82 eb       	ldi	r24, 0xB2	; 178
     136:	92 e0       	ldi	r25, 0x02	; 2
     138:	0e 94 31 02 	call	0x462	; 0x462 <Get_pin>
     13c:	84 30       	cpi	r24, 0x04	; 4
     13e:	09 f4       	brne	.+2      	; 0x142 <APP_Start+0x22>
     140:	ed c0       	rjmp	.+474    	; 0x31c <APP_Start+0x1fc>
			if(ATM_ValidatePIN() == PIN_MATCHED)
     142:	0e 94 6d 03 	call	0x6da	; 0x6da <ATM_ValidatePIN>
     146:	81 11       	cpse	r24, r1
     148:	04 c0       	rjmp	.+8      	; 0x152 <APP_Start+0x32>
			{
				TriggerState = CHECKING;
     14a:	82 e0       	ldi	r24, 0x02	; 2
     14c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     150:	08 95       	ret
                  
			}
			else
			{
				trialsFlag++;
     152:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <__data_end>
     156:	8f 5f       	subi	r24, 0xFF	; 255
     158:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <__data_end>
				/* Lock system if max tries exceeded */
				if(trialsFlag == 3)
     15c:	83 30       	cpi	r24, 0x03	; 3
     15e:	09 f0       	breq	.+2      	; 0x162 <APP_Start+0x42>
     160:	dd c0       	rjmp	.+442    	; 0x31c <APP_Start+0x1fc>
				{
					HLCD_ClrDisplay();
     162:	0e 94 52 08 	call	0x10a4	; 0x10a4 <HLCD_ClrDisplay>
					HLCD_gotoXY(0,4);
     166:	64 e0       	ldi	r22, 0x04	; 4
     168:	80 e0       	ldi	r24, 0x00	; 0
     16a:	0e 94 65 08 	call	0x10ca	; 0x10ca <HLCD_gotoXY>
					HLCD_WriteString("LOCKED");
     16e:	82 e9       	ldi	r24, 0x92	; 146
     170:	91 e0       	ldi	r25, 0x01	; 1
     172:	0e 94 79 08 	call	0x10f2	; 0x10f2 <HLCD_WriteString>
					deinitAtm(&st_g_Buzzer);
     176:	8c e6       	ldi	r24, 0x6C	; 108
     178:	91 e0       	ldi	r25, 0x01	; 1
     17a:	0e 94 ca 02 	call	0x594	; 0x594 <deinitAtm>
					TriggerState = IDLE;
     17e:	83 e0       	ldi	r24, 0x03	; 3
     180:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     184:	08 95       	ret
			//TriggerState = N_TRIGGER;
			break;
		}
		case N_TRIGGER:
		{
			if(welcomeFlag == 0)
     186:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <welcomeFlag>
     18a:	81 11       	cpse	r24, r1
     18c:	c7 c0       	rjmp	.+398    	; 0x31c <APP_Start+0x1fc>
			{
				Welcome();
     18e:	0e 94 c3 01 	call	0x386	; 0x386 <Welcome>
				welcomeFlag = 1;
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <welcomeFlag>
     198:	08 95       	ret
			break;
		}
        case CHECKING:
       {

		get_amount_left(Entered_amount);
     19a:	89 e6       	ldi	r24, 0x69	; 105
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	0e 94 ce 02 	call	0x59c	; 0x59c <get_amount_left>
		if(!strcmp(Entered_amount,Default_Entered_amount))break;
     1a2:	61 e6       	ldi	r22, 0x61	; 97
     1a4:	70 e0       	ldi	r23, 0x00	; 0
     1a6:	89 e6       	ldi	r24, 0x69	; 105
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <strcmp>
     1ae:	89 2b       	or	r24, r25
     1b0:	09 f4       	brne	.+2      	; 0x1b4 <APP_Start+0x94>
     1b2:	b4 c0       	rjmp	.+360    	; 0x31c <APP_Start+0x1fc>
		HLCD_ClrDisplay();
     1b4:	0e 94 52 08 	call	0x10a4	; 0x10a4 <HLCD_ClrDisplay>
		DB_CHECK = DATABASE_checking(CARDpan,Entered_amount,&newAMOUNT);
     1b8:	4c ed       	ldi	r20, 0xDC	; 220
     1ba:	52 e0       	ldi	r21, 0x02	; 2
     1bc:	69 e6       	ldi	r22, 0x69	; 105
     1be:	70 e0       	ldi	r23, 0x00	; 0
     1c0:	8a ee       	ldi	r24, 0xEA	; 234
     1c2:	92 e0       	ldi	r25, 0x02	; 2
     1c4:	0e 94 61 04 	call	0x8c2	; 0x8c2 <DATABASE_checking>
     1c8:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <DB_CHECK>
		switch(DB_CHECK){
     1cc:	82 30       	cpi	r24, 0x02	; 2
     1ce:	09 f4       	brne	.+2      	; 0x1d2 <APP_Start+0xb2>
     1d0:	43 c0       	rjmp	.+134    	; 0x258 <APP_Start+0x138>
     1d2:	28 f4       	brcc	.+10     	; 0x1de <APP_Start+0xbe>
     1d4:	88 23       	and	r24, r24
     1d6:	51 f0       	breq	.+20     	; 0x1ec <APP_Start+0xcc>
     1d8:	81 30       	cpi	r24, 0x01	; 1
     1da:	f9 f0       	breq	.+62     	; 0x21a <APP_Start+0xfa>
     1dc:	08 95       	ret
     1de:	83 30       	cpi	r24, 0x03	; 3
     1e0:	09 f4       	brne	.+2      	; 0x1e4 <APP_Start+0xc4>
     1e2:	59 c0       	rjmp	.+178    	; 0x296 <APP_Start+0x176>
     1e4:	84 30       	cpi	r24, 0x04	; 4
     1e6:	09 f4       	brne	.+2      	; 0x1ea <APP_Start+0xca>
     1e8:	79 c0       	rjmp	.+242    	; 0x2dc <APP_Start+0x1bc>
     1ea:	08 95       	ret
			case APPROVED:
			{
				ATM_ApprovedCard(newAMOUNT);
     1ec:	60 91 dc 02 	lds	r22, 0x02DC	; 0x8002dc <newAMOUNT>
     1f0:	70 91 dd 02 	lds	r23, 0x02DD	; 0x8002dd <newAMOUNT+0x1>
     1f4:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <newAMOUNT+0x2>
     1f8:	90 91 df 02 	lds	r25, 0x02DF	; 0x8002df <newAMOUNT+0x3>
     1fc:	0e 94 df 01 	call	0x3be	; 0x3be <ATM_ApprovedCard>
				HSPI_SendChar(ATM_REQUEST_EJECTED);
     200:	85 e4       	ldi	r24, 0x45	; 69
     202:	0e 94 c0 04 	call	0x980	; 0x980 <HSPI_SendChar>
				strcpy(Entered_amount,Default_Entered_amount);
     206:	61 e6       	ldi	r22, 0x61	; 97
     208:	70 e0       	ldi	r23, 0x00	; 0
     20a:	89 e6       	ldi	r24, 0x69	; 105
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <strcpy>
				TriggerState = N_TRIGGER;
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				break;
     218:	08 95       	ret
			}
			case FRAUD_CARD:
			{
				deinitAtm(&st_g_Buzzer);
     21a:	8c e6       	ldi	r24, 0x6C	; 108
     21c:	91 e0       	ldi	r25, 0x01	; 1
     21e:	0e 94 ca 02 	call	0x594	; 0x594 <deinitAtm>
				HLCD_gotoXY(0, 4);
     222:	64 e0       	ldi	r22, 0x04	; 4
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	0e 94 65 08 	call	0x10ca	; 0x10ca <HLCD_gotoXY>
				HLCD_WriteString("This is a");
     22a:	89 e9       	ldi	r24, 0x99	; 153
     22c:	91 e0       	ldi	r25, 0x01	; 1
     22e:	0e 94 79 08 	call	0x10f2	; 0x10f2 <HLCD_WriteString>
				HLCD_gotoXY(1, 2);
     232:	62 e0       	ldi	r22, 0x02	; 2
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	0e 94 65 08 	call	0x10ca	; 0x10ca <HLCD_gotoXY>
				HLCD_WriteString("Fraud Card");
     23a:	83 ea       	ldi	r24, 0xA3	; 163
     23c:	91 e0       	ldi	r25, 0x01	; 1
     23e:	0e 94 79 08 	call	0x10f2	; 0x10f2 <HLCD_WriteString>
				HTIM0_SyncDelay(1, Seconds);
     242:	42 e0       	ldi	r20, 0x02	; 2
     244:	61 e0       	ldi	r22, 0x01	; 1
     246:	70 e0       	ldi	r23, 0x00	; 0
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	0e 94 0e 05 	call	0xa1c	; 0xa1c <HTIM0_SyncDelay>
				TriggerState = IDLE;
     250:	83 e0       	ldi	r24, 0x03	; 3
     252:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				break;
     256:	08 95       	ret
			}
			case CARD_STOLEN:
			{
				deinitAtm(&st_g_Buzzer);
     258:	8c e6       	ldi	r24, 0x6C	; 108
     25a:	91 e0       	ldi	r25, 0x01	; 1
     25c:	0e 94 ca 02 	call	0x594	; 0x594 <deinitAtm>
				HLCD_gotoXY(0, 4);
     260:	64 e0       	ldi	r22, 0x04	; 4
     262:	80 e0       	ldi	r24, 0x00	; 0
     264:	0e 94 65 08 	call	0x10ca	; 0x10ca <HLCD_gotoXY>
				HLCD_WriteString("This Card ");
     268:	8e ea       	ldi	r24, 0xAE	; 174
     26a:	91 e0       	ldi	r25, 0x01	; 1
     26c:	0e 94 79 08 	call	0x10f2	; 0x10f2 <HLCD_WriteString>
				HLCD_gotoXY(1, 2);
     270:	62 e0       	ldi	r22, 0x02	; 2
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	0e 94 65 08 	call	0x10ca	; 0x10ca <HLCD_gotoXY>
				HLCD_WriteString("is Stolen");
     278:	89 eb       	ldi	r24, 0xB9	; 185
     27a:	91 e0       	ldi	r25, 0x01	; 1
     27c:	0e 94 79 08 	call	0x10f2	; 0x10f2 <HLCD_WriteString>
				HTIM0_SyncDelay(1, Seconds);
     280:	42 e0       	ldi	r20, 0x02	; 2
     282:	61 e0       	ldi	r22, 0x01	; 1
     284:	70 e0       	ldi	r23, 0x00	; 0
     286:	80 e0       	ldi	r24, 0x00	; 0
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	0e 94 0e 05 	call	0xa1c	; 0xa1c <HTIM0_SyncDelay>
				TriggerState = IDLE;
     28e:	83 e0       	ldi	r24, 0x03	; 3
     290:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				break;
     294:	08 95       	ret
			}
			case EXCEED_MAX_DAILY_AMOUNT:
			{
				
				HLCD_gotoXY(0, 4);
     296:	64 e0       	ldi	r22, 0x04	; 4
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	0e 94 65 08 	call	0x10ca	; 0x10ca <HLCD_gotoXY>
				HLCD_WriteString("Max Limit ");
     29e:	83 ec       	ldi	r24, 0xC3	; 195
     2a0:	91 e0       	ldi	r25, 0x01	; 1
     2a2:	0e 94 79 08 	call	0x10f2	; 0x10f2 <HLCD_WriteString>
				HLCD_gotoXY(1, 2);
     2a6:	62 e0       	ldi	r22, 0x02	; 2
     2a8:	81 e0       	ldi	r24, 0x01	; 1
     2aa:	0e 94 65 08 	call	0x10ca	; 0x10ca <HLCD_gotoXY>
				HLCD_WriteString("is Exceeded");
     2ae:	8e ec       	ldi	r24, 0xCE	; 206
     2b0:	91 e0       	ldi	r25, 0x01	; 1
     2b2:	0e 94 79 08 	call	0x10f2	; 0x10f2 <HLCD_WriteString>
				HTIM0_SyncDelay(1, Seconds);
     2b6:	42 e0       	ldi	r20, 0x02	; 2
     2b8:	61 e0       	ldi	r22, 0x01	; 1
     2ba:	70 e0       	ldi	r23, 0x00	; 0
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	0e 94 0e 05 	call	0xa1c	; 0xa1c <HTIM0_SyncDelay>
				HLCD_ClrDisplay();
     2c4:	0e 94 52 08 	call	0x10a4	; 0x10a4 <HLCD_ClrDisplay>
				strcpy(Entered_amount,Default_Entered_amount);
     2c8:	61 e6       	ldi	r22, 0x61	; 97
     2ca:	70 e0       	ldi	r23, 0x00	; 0
     2cc:	89 e6       	ldi	r24, 0x69	; 105
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <strcpy>
				TriggerState = CHECKING;
     2d4:	82 e0       	ldi	r24, 0x02	; 2
     2d6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				break;
     2da:	08 95       	ret
			}
			case INSUFFICIENT_FUND:
			{
				
				HLCD_gotoXY(0, 4);
     2dc:	64 e0       	ldi	r22, 0x04	; 4
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	0e 94 65 08 	call	0x10ca	; 0x10ca <HLCD_gotoXY>
				HLCD_WriteString("INSUFFICIENT ");
     2e4:	8a ed       	ldi	r24, 0xDA	; 218
     2e6:	91 e0       	ldi	r25, 0x01	; 1
     2e8:	0e 94 79 08 	call	0x10f2	; 0x10f2 <HLCD_WriteString>
				HLCD_gotoXY(1, 5);
     2ec:	65 e0       	ldi	r22, 0x05	; 5
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	0e 94 65 08 	call	0x10ca	; 0x10ca <HLCD_gotoXY>
				HLCD_WriteString("FUND");
     2f4:	88 ee       	ldi	r24, 0xE8	; 232
     2f6:	91 e0       	ldi	r25, 0x01	; 1
     2f8:	0e 94 79 08 	call	0x10f2	; 0x10f2 <HLCD_WriteString>
				HTIM0_SyncDelay(1, Seconds);
     2fc:	42 e0       	ldi	r20, 0x02	; 2
     2fe:	61 e0       	ldi	r22, 0x01	; 1
     300:	70 e0       	ldi	r23, 0x00	; 0
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	0e 94 0e 05 	call	0xa1c	; 0xa1c <HTIM0_SyncDelay>
				strcpy(Entered_amount,Default_Entered_amount);
     30a:	61 e6       	ldi	r22, 0x61	; 97
     30c:	70 e0       	ldi	r23, 0x00	; 0
     30e:	89 e6       	ldi	r24, 0x69	; 105
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <strcpy>
				TriggerState = CHECKING;
     316:	82 e0       	ldi	r24, 0x02	; 2
     318:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     31c:	08 95       	ret

0000031e <EXTINT_FUNC>:
	//Uchar8_t arr_g_CardPIN[5];
	//Uchar8_t arr_g_CardPAN[20];

	void Card_Trigger(void)
	{
		u8_g_ReceivePIN = 1;
     31e:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <counter.2216>
     322:	81 11       	cpse	r24, r1
     324:	10 c0       	rjmp	.+32     	; 0x346 <EXTINT_FUNC+0x28>
     326:	64 e6       	ldi	r22, 0x64	; 100
     328:	70 e0       	ldi	r23, 0x00	; 0
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	0e 94 be 05 	call	0xb7c	; 0xb7c <HTimer_vidDelayMs>
     332:	4f e8       	ldi	r20, 0x8F	; 143
     334:	51 e0       	ldi	r21, 0x01	; 1
     336:	61 e0       	ldi	r22, 0x01	; 1
     338:	82 e0       	ldi	r24, 0x02	; 2
     33a:	0e 94 ce 05 	call	0xb9c	; 0xb9c <H_EXTINT_create>
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <counter.2216>
     344:	08 95       	ret
     346:	81 30       	cpi	r24, 0x01	; 1
     348:	e9 f4       	brne	.+58     	; 0x384 <EXTINT_FUNC+0x66>
     34a:	0e 94 c3 05 	call	0xb86	; 0xb86 <HTimer_enStop>
     34e:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <global_u8OVFCounter>
     352:	9f ef       	ldi	r25, 0xFF	; 255
     354:	98 0f       	add	r25, r24
     356:	93 31       	cpi	r25, 0x13	; 19
     358:	18 f4       	brcc	.+6      	; 0x360 <EXTINT_FUNC+0x42>
     35a:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <myState>
     35e:	05 c0       	rjmp	.+10     	; 0x36a <EXTINT_FUNC+0x4c>
     360:	84 31       	cpi	r24, 0x14	; 20
     362:	18 f0       	brcs	.+6      	; 0x36a <EXTINT_FUNC+0x4c>
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <myState>
     36a:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <global_u8OVFCounter>
     36e:	4f e8       	ldi	r20, 0x8F	; 143
     370:	51 e0       	ldi	r21, 0x01	; 1
     372:	62 e0       	ldi	r22, 0x02	; 2
     374:	82 e0       	ldi	r24, 0x02	; 2
     376:	0e 94 ce 05 	call	0xb9c	; 0xb9c <H_EXTINT_create>
     37a:	8a e0       	ldi	r24, 0x0A	; 10
     37c:	0e 94 86 04 	call	0x90c	; 0x90c <HButton_ExtIntInit>
     380:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <counter.2216>
     384:	08 95       	ret

00000386 <Welcome>:
     386:	0e 94 52 08 	call	0x10a4	; 0x10a4 <HLCD_ClrDisplay>
     38a:	60 e0       	ldi	r22, 0x00	; 0
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	0e 94 65 08 	call	0x10ca	; 0x10ca <HLCD_gotoXY>
     392:	8d ee       	ldi	r24, 0xED	; 237
     394:	91 e0       	ldi	r25, 0x01	; 1
     396:	0e 94 79 08 	call	0x10f2	; 0x10f2 <HLCD_WriteString>
     39a:	42 e0       	ldi	r20, 0x02	; 2
     39c:	61 e0       	ldi	r22, 0x01	; 1
     39e:	70 e0       	ldi	r23, 0x00	; 0
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	0e 94 0e 05 	call	0xa1c	; 0xa1c <HTIM0_SyncDelay>
     3a8:	0e 94 52 08 	call	0x10a4	; 0x10a4 <HLCD_ClrDisplay>
     3ac:	60 e0       	ldi	r22, 0x00	; 0
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	0e 94 65 08 	call	0x10ca	; 0x10ca <HLCD_gotoXY>
     3b4:	8c ef       	ldi	r24, 0xFC	; 252
     3b6:	91 e0       	ldi	r25, 0x01	; 1
     3b8:	0e 94 79 08 	call	0x10f2	; 0x10f2 <HLCD_WriteString>
     3bc:	08 95       	ret

000003be <ATM_ApprovedCard>:
     3be:	cf 92       	push	r12
     3c0:	df 92       	push	r13
     3c2:	ef 92       	push	r14
     3c4:	ff 92       	push	r15
     3c6:	6b 01       	movw	r12, r22
     3c8:	7c 01       	movw	r14, r24
     3ca:	64 e0       	ldi	r22, 0x04	; 4
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	0e 94 65 08 	call	0x10ca	; 0x10ca <HLCD_gotoXY>
     3d2:	8d e0       	ldi	r24, 0x0D	; 13
     3d4:	92 e0       	ldi	r25, 0x02	; 2
     3d6:	0e 94 79 08 	call	0x10f2	; 0x10f2 <HLCD_WriteString>
     3da:	62 e0       	ldi	r22, 0x02	; 2
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	0e 94 65 08 	call	0x10ca	; 0x10ca <HLCD_gotoXY>
     3e2:	86 e1       	ldi	r24, 0x16	; 22
     3e4:	92 e0       	ldi	r25, 0x02	; 2
     3e6:	0e 94 79 08 	call	0x10f2	; 0x10f2 <HLCD_WriteString>
     3ea:	42 e0       	ldi	r20, 0x02	; 2
     3ec:	61 e0       	ldi	r22, 0x01	; 1
     3ee:	70 e0       	ldi	r23, 0x00	; 0
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	0e 94 0e 05 	call	0xa1c	; 0xa1c <HTIM0_SyncDelay>
     3f8:	0e 94 52 08 	call	0x10a4	; 0x10a4 <HLCD_ClrDisplay>
     3fc:	64 e0       	ldi	r22, 0x04	; 4
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	0e 94 65 08 	call	0x10ca	; 0x10ca <HLCD_gotoXY>
     404:	82 e2       	ldi	r24, 0x22	; 34
     406:	92 e0       	ldi	r25, 0x02	; 2
     408:	0e 94 79 08 	call	0x10f2	; 0x10f2 <HLCD_WriteString>
     40c:	60 e0       	ldi	r22, 0x00	; 0
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	0e 94 65 08 	call	0x10ca	; 0x10ca <HLCD_gotoXY>
     414:	8c e2       	ldi	r24, 0x2C	; 44
     416:	92 e0       	ldi	r25, 0x02	; 2
     418:	0e 94 79 08 	call	0x10f2	; 0x10f2 <HLCD_WriteString>
     41c:	c7 01       	movw	r24, r14
     41e:	b6 01       	movw	r22, r12
     420:	0e 94 91 08 	call	0x1122	; 0x1122 <HLCD_DisplayFloat>
     424:	42 e0       	ldi	r20, 0x02	; 2
     426:	61 e0       	ldi	r22, 0x01	; 1
     428:	70 e0       	ldi	r23, 0x00	; 0
     42a:	80 e0       	ldi	r24, 0x00	; 0
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	0e 94 0e 05 	call	0xa1c	; 0xa1c <HTIM0_SyncDelay>
     432:	0e 94 52 08 	call	0x10a4	; 0x10a4 <HLCD_ClrDisplay>
     436:	61 e0       	ldi	r22, 0x01	; 1
     438:	80 e0       	ldi	r24, 0x00	; 0
     43a:	0e 94 65 08 	call	0x10ca	; 0x10ca <HLCD_gotoXY>
     43e:	86 e3       	ldi	r24, 0x36	; 54
     440:	92 e0       	ldi	r25, 0x02	; 2
     442:	0e 94 79 08 	call	0x10f2	; 0x10f2 <HLCD_WriteString>
     446:	42 e0       	ldi	r20, 0x02	; 2
     448:	61 e0       	ldi	r22, 0x01	; 1
     44a:	70 e0       	ldi	r23, 0x00	; 0
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	0e 94 0e 05 	call	0xa1c	; 0xa1c <HTIM0_SyncDelay>
     454:	0e 94 52 08 	call	0x10a4	; 0x10a4 <HLCD_ClrDisplay>
     458:	ff 90       	pop	r15
     45a:	ef 90       	pop	r14
     45c:	df 90       	pop	r13
     45e:	cf 90       	pop	r12
     460:	08 95       	ret

00000462 <Get_pin>:
     462:	0f 93       	push	r16
     464:	1f 93       	push	r17
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
     46a:	8c 01       	movw	r16, r24
     46c:	0e 94 52 08 	call	0x10a4	; 0x10a4 <HLCD_ClrDisplay>
     470:	60 e0       	ldi	r22, 0x00	; 0
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	0e 94 65 08 	call	0x10ca	; 0x10ca <HLCD_gotoXY>
     478:	84 e4       	ldi	r24, 0x44	; 68
     47a:	92 e0       	ldi	r25, 0x02	; 2
     47c:	0e 94 79 08 	call	0x10f2	; 0x10f2 <HLCD_WriteString>
     480:	60 e0       	ldi	r22, 0x00	; 0
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	0e 94 65 08 	call	0x10ca	; 0x10ca <HLCD_gotoXY>
     488:	82 e0       	ldi	r24, 0x02	; 2
     48a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <myState>
     48e:	c0 e0       	ldi	r28, 0x00	; 0
     490:	2e c0       	rjmp	.+92     	; 0x4ee <Get_pin+0x8c>
     492:	0e 94 30 07 	call	0xe60	; 0xe60 <KEYPAD_GetButton>
     496:	81 11       	cpse	r24, r1
     498:	17 c0       	rjmp	.+46     	; 0x4c8 <Get_pin+0x66>
     49a:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <myState>
     49e:	81 11       	cpse	r24, r1
     4a0:	26 c0       	rjmp	.+76     	; 0x4ee <Get_pin+0x8c>
     4a2:	82 e0       	ldi	r24, 0x02	; 2
     4a4:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <myState>
     4a8:	f8 01       	movw	r30, r16
     4aa:	ec 0f       	add	r30, r28
     4ac:	f1 1d       	adc	r31, r1
     4ae:	80 e3       	ldi	r24, 0x30	; 48
     4b0:	80 83       	st	Z, r24
     4b2:	d1 e0       	ldi	r29, 0x01	; 1
     4b4:	dc 0f       	add	r29, r28
     4b6:	6c 2f       	mov	r22, r28
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	0e 94 65 08 	call	0x10ca	; 0x10ca <HLCD_gotoXY>
     4be:	8a e2       	ldi	r24, 0x2A	; 42
     4c0:	0e 94 ee 07 	call	0xfdc	; 0xfdc <HLCD_vidWriteChar>
     4c4:	cd 2f       	mov	r28, r29
     4c6:	13 c0       	rjmp	.+38     	; 0x4ee <Get_pin+0x8c>
     4c8:	d8 01       	movw	r26, r16
     4ca:	ac 0f       	add	r26, r28
     4cc:	b1 1d       	adc	r27, r1
     4ce:	e8 2f       	mov	r30, r24
     4d0:	f0 e0       	ldi	r31, 0x00	; 0
     4d2:	e4 59       	subi	r30, 0x94	; 148
     4d4:	fe 4f       	sbci	r31, 0xFE	; 254
     4d6:	80 81       	ld	r24, Z
     4d8:	8c 93       	st	X, r24
     4da:	d1 e0       	ldi	r29, 0x01	; 1
     4dc:	dc 0f       	add	r29, r28
     4de:	6c 2f       	mov	r22, r28
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	0e 94 65 08 	call	0x10ca	; 0x10ca <HLCD_gotoXY>
     4e6:	8a e2       	ldi	r24, 0x2A	; 42
     4e8:	0e 94 ee 07 	call	0xfdc	; 0xfdc <HLCD_vidWriteChar>
     4ec:	cd 2f       	mov	r28, r29
     4ee:	c4 30       	cpi	r28, 0x04	; 4
     4f0:	20 f4       	brcc	.+8      	; 0x4fa <Get_pin+0x98>
     4f2:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <myState>
     4f6:	81 30       	cpi	r24, 0x01	; 1
     4f8:	61 f6       	brne	.-104    	; 0x492 <Get_pin+0x30>
     4fa:	c4 30       	cpi	r28, 0x04	; 4
     4fc:	b0 f4       	brcc	.+44     	; 0x52a <Get_pin+0xc8>
     4fe:	82 e0       	ldi	r24, 0x02	; 2
     500:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <myState>
     504:	0e 94 52 08 	call	0x10a4	; 0x10a4 <HLCD_ClrDisplay>
     508:	60 e0       	ldi	r22, 0x00	; 0
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	0e 94 65 08 	call	0x10ca	; 0x10ca <HLCD_gotoXY>
     510:	83 e5       	ldi	r24, 0x53	; 83
     512:	92 e0       	ldi	r25, 0x02	; 2
     514:	0e 94 79 08 	call	0x10f2	; 0x10f2 <HLCD_WriteString>
     518:	42 e0       	ldi	r20, 0x02	; 2
     51a:	61 e0       	ldi	r22, 0x01	; 1
     51c:	70 e0       	ldi	r23, 0x00	; 0
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	0e 94 0e 05 	call	0xa1c	; 0xa1c <HTIM0_SyncDelay>
     526:	84 e0       	ldi	r24, 0x04	; 4
     528:	01 c0       	rjmp	.+2      	; 0x52c <Get_pin+0xca>
     52a:	83 e0       	ldi	r24, 0x03	; 3
     52c:	df 91       	pop	r29
     52e:	cf 91       	pop	r28
     530:	1f 91       	pop	r17
     532:	0f 91       	pop	r16
     534:	08 95       	ret

00000536 <PIN_checkPinMatching>:
     536:	00 97       	sbiw	r24, 0x00	; 0
     538:	49 f1       	breq	.+82     	; 0x58c <PIN_checkPinMatching+0x56>
     53a:	61 15       	cp	r22, r1
     53c:	71 05       	cpc	r23, r1
     53e:	41 f1       	breq	.+80     	; 0x590 <PIN_checkPinMatching+0x5a>
     540:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <strcmp>
     544:	89 2b       	or	r24, r25
     546:	89 f4       	brne	.+34     	; 0x56a <PIN_checkPinMatching+0x34>
     548:	0e 94 52 08 	call	0x10a4	; 0x10a4 <HLCD_ClrDisplay>
     54c:	8d e5       	ldi	r24, 0x5D	; 93
     54e:	92 e0       	ldi	r25, 0x02	; 2
     550:	0e 94 79 08 	call	0x10f2	; 0x10f2 <HLCD_WriteString>
     554:	2f e3       	ldi	r18, 0x3F	; 63
     556:	82 e4       	ldi	r24, 0x42	; 66
     558:	9f e0       	ldi	r25, 0x0F	; 15
     55a:	21 50       	subi	r18, 0x01	; 1
     55c:	80 40       	sbci	r24, 0x00	; 0
     55e:	90 40       	sbci	r25, 0x00	; 0
     560:	e1 f7       	brne	.-8      	; 0x55a <PIN_checkPinMatching+0x24>
     562:	00 c0       	rjmp	.+0      	; 0x564 <PIN_checkPinMatching+0x2e>
     564:	00 00       	nop
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	08 95       	ret
     56a:	0e 94 52 08 	call	0x10a4	; 0x10a4 <HLCD_ClrDisplay>
     56e:	89 e6       	ldi	r24, 0x69	; 105
     570:	92 e0       	ldi	r25, 0x02	; 2
     572:	0e 94 79 08 	call	0x10f2	; 0x10f2 <HLCD_WriteString>
     576:	2f e3       	ldi	r18, 0x3F	; 63
     578:	82 e4       	ldi	r24, 0x42	; 66
     57a:	9f e0       	ldi	r25, 0x0F	; 15
     57c:	21 50       	subi	r18, 0x01	; 1
     57e:	80 40       	sbci	r24, 0x00	; 0
     580:	90 40       	sbci	r25, 0x00	; 0
     582:	e1 f7       	brne	.-8      	; 0x57c <PIN_checkPinMatching+0x46>
     584:	00 c0       	rjmp	.+0      	; 0x586 <PIN_checkPinMatching+0x50>
     586:	00 00       	nop
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	08 95       	ret
     58c:	82 e0       	ldi	r24, 0x02	; 2
     58e:	08 95       	ret
     590:	82 e0       	ldi	r24, 0x02	; 2
     592:	08 95       	ret

00000594 <deinitAtm>:
     594:	61 e0       	ldi	r22, 0x01	; 1
     596:	0e 94 9b 04 	call	0x936	; 0x936 <BUZ_SetState>
     59a:	08 95       	ret

0000059c <get_amount_left>:
     59c:	df 92       	push	r13
     59e:	ef 92       	push	r14
     5a0:	ff 92       	push	r15
     5a2:	0f 93       	push	r16
     5a4:	1f 93       	push	r17
     5a6:	cf 93       	push	r28
     5a8:	df 93       	push	r29
     5aa:	7c 01       	movw	r14, r24
     5ac:	0e 94 52 08 	call	0x10a4	; 0x10a4 <HLCD_ClrDisplay>
     5b0:	60 e0       	ldi	r22, 0x00	; 0
     5b2:	80 e0       	ldi	r24, 0x00	; 0
     5b4:	0e 94 65 08 	call	0x10ca	; 0x10ca <HLCD_gotoXY>
     5b8:	89 e7       	ldi	r24, 0x79	; 121
     5ba:	92 e0       	ldi	r25, 0x02	; 2
     5bc:	0e 94 79 08 	call	0x10f2	; 0x10f2 <HLCD_WriteString>
     5c0:	60 e0       	ldi	r22, 0x00	; 0
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	0e 94 65 08 	call	0x10ca	; 0x10ca <HLCD_gotoXY>
     5c8:	c7 01       	movw	r24, r14
     5ca:	0e 94 79 08 	call	0x10f2	; 0x10f2 <HLCD_WriteString>
     5ce:	82 e0       	ldi	r24, 0x02	; 2
     5d0:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <myState>
     5d4:	d1 2c       	mov	r13, r1
     5d6:	71 c0       	rjmp	.+226    	; 0x6ba <get_amount_left+0x11e>
     5d8:	0e 94 30 07 	call	0xe60	; 0xe60 <KEYPAD_GetButton>
     5dc:	d8 2f       	mov	r29, r24
     5de:	81 11       	cpse	r24, r1
     5e0:	59 c0       	rjmp	.+178    	; 0x694 <get_amount_left+0xf8>
     5e2:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <myState>
     5e6:	81 11       	cpse	r24, r1
     5e8:	68 c0       	rjmp	.+208    	; 0x6ba <get_amount_left+0x11e>
     5ea:	82 e0       	ldi	r24, 0x02	; 2
     5ec:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <myState>
     5f0:	c0 e0       	ldi	r28, 0x00	; 0
     5f2:	20 c0       	rjmp	.+64     	; 0x634 <get_amount_left+0x98>
     5f4:	c3 30       	cpi	r28, 0x03	; 3
     5f6:	79 f4       	brne	.+30     	; 0x616 <get_amount_left+0x7a>
     5f8:	87 01       	movw	r16, r14
     5fa:	0c 0f       	add	r16, r28
     5fc:	11 1d       	adc	r17, r1
     5fe:	f8 01       	movw	r30, r16
     600:	82 81       	ldd	r24, Z+2	; 0x02
     602:	80 83       	st	Z, r24
     604:	6c 2f       	mov	r22, r28
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	0e 94 65 08 	call	0x10ca	; 0x10ca <HLCD_gotoXY>
     60c:	f8 01       	movw	r30, r16
     60e:	80 81       	ld	r24, Z
     610:	0e 94 ee 07 	call	0xfdc	; 0xfdc <HLCD_vidWriteChar>
     614:	c5 e0       	ldi	r28, 0x05	; 5
     616:	87 01       	movw	r16, r14
     618:	0c 0f       	add	r16, r28
     61a:	11 1d       	adc	r17, r1
     61c:	f8 01       	movw	r30, r16
     61e:	81 81       	ldd	r24, Z+1	; 0x01
     620:	80 83       	st	Z, r24
     622:	6c 2f       	mov	r22, r28
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	0e 94 65 08 	call	0x10ca	; 0x10ca <HLCD_gotoXY>
     62a:	f8 01       	movw	r30, r16
     62c:	80 81       	ld	r24, Z
     62e:	0e 94 ee 07 	call	0xfdc	; 0xfdc <HLCD_vidWriteChar>
     632:	cf 5f       	subi	r28, 0xFF	; 255
     634:	c6 30       	cpi	r28, 0x06	; 6
     636:	f0 f2       	brcs	.-68     	; 0x5f4 <get_amount_left+0x58>
     638:	80 e3       	ldi	r24, 0x30	; 48
     63a:	f7 01       	movw	r30, r14
     63c:	86 83       	std	Z+6, r24	; 0x06
     63e:	66 e0       	ldi	r22, 0x06	; 6
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	0e 94 65 08 	call	0x10ca	; 0x10ca <HLCD_gotoXY>
     646:	f7 01       	movw	r30, r14
     648:	86 81       	ldd	r24, Z+6	; 0x06
     64a:	0e 94 ee 07 	call	0xfdc	; 0xfdc <HLCD_vidWriteChar>
     64e:	d3 94       	inc	r13
     650:	34 c0       	rjmp	.+104    	; 0x6ba <get_amount_left+0x11e>
     652:	c3 30       	cpi	r28, 0x03	; 3
     654:	79 f4       	brne	.+30     	; 0x674 <get_amount_left+0xd8>
     656:	87 01       	movw	r16, r14
     658:	0c 0f       	add	r16, r28
     65a:	11 1d       	adc	r17, r1
     65c:	f8 01       	movw	r30, r16
     65e:	82 81       	ldd	r24, Z+2	; 0x02
     660:	80 83       	st	Z, r24
     662:	6c 2f       	mov	r22, r28
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	0e 94 65 08 	call	0x10ca	; 0x10ca <HLCD_gotoXY>
     66a:	f8 01       	movw	r30, r16
     66c:	80 81       	ld	r24, Z
     66e:	0e 94 ee 07 	call	0xfdc	; 0xfdc <HLCD_vidWriteChar>
     672:	c5 e0       	ldi	r28, 0x05	; 5
     674:	87 01       	movw	r16, r14
     676:	0c 0f       	add	r16, r28
     678:	11 1d       	adc	r17, r1
     67a:	f8 01       	movw	r30, r16
     67c:	81 81       	ldd	r24, Z+1	; 0x01
     67e:	80 83       	st	Z, r24
     680:	6c 2f       	mov	r22, r28
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	0e 94 65 08 	call	0x10ca	; 0x10ca <HLCD_gotoXY>
     688:	f8 01       	movw	r30, r16
     68a:	80 81       	ld	r24, Z
     68c:	0e 94 ee 07 	call	0xfdc	; 0xfdc <HLCD_vidWriteChar>
     690:	cf 5f       	subi	r28, 0xFF	; 255
     692:	01 c0       	rjmp	.+2      	; 0x696 <get_amount_left+0xfa>
     694:	c0 e0       	ldi	r28, 0x00	; 0
     696:	c6 30       	cpi	r28, 0x06	; 6
     698:	e0 f2       	brcs	.-72     	; 0x652 <get_amount_left+0xb6>
     69a:	ed 2f       	mov	r30, r29
     69c:	f0 e0       	ldi	r31, 0x00	; 0
     69e:	e4 59       	subi	r30, 0x94	; 148
     6a0:	fe 4f       	sbci	r31, 0xFE	; 254
     6a2:	80 81       	ld	r24, Z
     6a4:	f7 01       	movw	r30, r14
     6a6:	86 83       	std	Z+6, r24	; 0x06
     6a8:	66 e0       	ldi	r22, 0x06	; 6
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	0e 94 65 08 	call	0x10ca	; 0x10ca <HLCD_gotoXY>
     6b0:	f7 01       	movw	r30, r14
     6b2:	86 81       	ldd	r24, Z+6	; 0x06
     6b4:	0e 94 ee 07 	call	0xfdc	; 0xfdc <HLCD_vidWriteChar>
     6b8:	d3 94       	inc	r13
     6ba:	f5 e0       	ldi	r31, 0x05	; 5
     6bc:	fd 15       	cp	r31, r13
     6be:	28 f0       	brcs	.+10     	; 0x6ca <get_amount_left+0x12e>
     6c0:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <myState>
     6c4:	81 30       	cpi	r24, 0x01	; 1
     6c6:	09 f0       	breq	.+2      	; 0x6ca <get_amount_left+0x12e>
     6c8:	87 cf       	rjmp	.-242    	; 0x5d8 <get_amount_left+0x3c>
     6ca:	df 91       	pop	r29
     6cc:	cf 91       	pop	r28
     6ce:	1f 91       	pop	r17
     6d0:	0f 91       	pop	r16
     6d2:	ff 90       	pop	r15
     6d4:	ef 90       	pop	r14
     6d6:	df 90       	pop	r13
     6d8:	08 95       	ret

000006da <ATM_ValidatePIN>:
	EN_PinState ATM_ValidatePIN(void)
	{
		EN_PinState u8_l_MatchPIN;
		
		/* Request PIN From Card */
		HSPI_SendChar(ATM_REQUEST_PIN);
     6da:	80 e5       	ldi	r24, 0x50	; 80
     6dc:	0e 94 c0 04 	call	0x980	; 0x980 <HSPI_SendChar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6e0:	81 ee       	ldi	r24, 0xE1	; 225
     6e2:	94 e0       	ldi	r25, 0x04	; 4
     6e4:	01 97       	sbiw	r24, 0x01	; 1
     6e6:	f1 f7       	brne	.-4      	; 0x6e4 <ATM_ValidatePIN+0xa>
     6e8:	00 c0       	rjmp	.+0      	; 0x6ea <ATM_ValidatePIN+0x10>
     6ea:	00 00       	nop
		_delay_ms(5);
		HSPI_ReceiveData(CARDpin, 5);
     6ec:	65 e0       	ldi	r22, 0x05	; 5
     6ee:	81 ee       	ldi	r24, 0xE1	; 225
     6f0:	92 e0       	ldi	r25, 0x02	; 2
     6f2:	0e 94 da 04 	call	0x9b4	; 0x9b4 <HSPI_ReceiveData>
		HLCD_ClrDisplay();
     6f6:	0e 94 52 08 	call	0x10a4	; 0x10a4 <HLCD_ClrDisplay>
		HLCD_WriteString("Received ");
     6fa:	86 e8       	ldi	r24, 0x86	; 134
     6fc:	92 e0       	ldi	r25, 0x02	; 2
     6fe:	0e 94 79 08 	call	0x10f2	; 0x10f2 <HLCD_WriteString>
		HLCD_WriteString(CARDpin);
     702:	81 ee       	ldi	r24, 0xE1	; 225
     704:	92 e0       	ldi	r25, 0x02	; 2
     706:	0e 94 79 08 	call	0x10f2	; 0x10f2 <HLCD_WriteString>
     70a:	9f eb       	ldi	r25, 0xBF	; 191
     70c:	27 e2       	ldi	r18, 0x27	; 39
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	91 50       	subi	r25, 0x01	; 1
     712:	20 40       	sbci	r18, 0x00	; 0
     714:	80 40       	sbci	r24, 0x00	; 0
     716:	e1 f7       	brne	.-8      	; 0x710 <ATM_ValidatePIN+0x36>
     718:	00 c0       	rjmp	.+0      	; 0x71a <ATM_ValidatePIN+0x40>
     71a:	00 00       	nop
		_delay_ms(3000);
		
		/* Request PIN From Card */
		HSPI_SendChar(ATM_REQUEST_PAN);
     71c:	87 e4       	ldi	r24, 0x47	; 71
     71e:	0e 94 c0 04 	call	0x980	; 0x980 <HSPI_SendChar>
     722:	81 ee       	ldi	r24, 0xE1	; 225
     724:	94 e0       	ldi	r25, 0x04	; 4
     726:	01 97       	sbiw	r24, 0x01	; 1
     728:	f1 f7       	brne	.-4      	; 0x726 <ATM_ValidatePIN+0x4c>
     72a:	00 c0       	rjmp	.+0      	; 0x72c <ATM_ValidatePIN+0x52>
     72c:	00 00       	nop
		_delay_ms(5);
		HSPI_ReceiveData(CARDpan, 20);
     72e:	64 e1       	ldi	r22, 0x14	; 20
     730:	8a ee       	ldi	r24, 0xEA	; 234
     732:	92 e0       	ldi	r25, 0x02	; 2
     734:	0e 94 da 04 	call	0x9b4	; 0x9b4 <HSPI_ReceiveData>
		//HLCD_WriteString("Received ");
		//HLCD_gotoXY(1,0);
		//HLCD_WriteString(CARDpan);
		//_delay_ms(10000);
		
		u8_l_MatchPIN = PIN_checkPinMatching(CARDpin, ATMpin);
     738:	62 eb       	ldi	r22, 0xB2	; 178
     73a:	72 e0       	ldi	r23, 0x02	; 2
     73c:	81 ee       	ldi	r24, 0xE1	; 225
     73e:	92 e0       	ldi	r25, 0x02	; 2
     740:	0e 94 9b 02 	call	0x536	; 0x536 <PIN_checkPinMatching>
		
		return u8_l_MatchPIN;
	}
     744:	08 95       	ret

00000746 <isBelowMaxDailyAmount>:
};

EN_dataError_t isBelowMaxDailyAmount(Uchar8_t * amount)
{
    EN_dataError_t LOCAL_returnValue = APPROVED;
    Schar8_t state = strcmp(amount,MAX_TRANS_AMOUNT);
     746:	60 e9       	ldi	r22, 0x90	; 144
     748:	72 e0       	ldi	r23, 0x02	; 2
     74a:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <strcmp>
    if( state>0) LOCAL_returnValue = EXCEED_MAX_DAILY_AMOUNT;
     74e:	18 16       	cp	r1, r24
     750:	14 f0       	brlt	.+4      	; 0x756 <isBelowMaxDailyAmount+0x10>

};

EN_dataError_t isBelowMaxDailyAmount(Uchar8_t * amount)
{
    EN_dataError_t LOCAL_returnValue = APPROVED;
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	08 95       	ret
    Schar8_t state = strcmp(amount,MAX_TRANS_AMOUNT);
    if( state>0) LOCAL_returnValue = EXCEED_MAX_DAILY_AMOUNT;
     756:	83 e0       	ldi	r24, 0x03	; 3
    return LOCAL_returnValue;
}
     758:	08 95       	ret

0000075a <isValidPanAccount>:


EN_dataError_t isValidPanAccount(Uchar8_t * pan)
{
     75a:	0f 93       	push	r16
     75c:	1f 93       	push	r17
     75e:	cf 93       	push	r28
     760:	8c 01       	movw	r16, r24
	EN_dataError_t LOCAL_returnValue = FRAUD_CARD;
    Uchar8_t loc_Counter;
    Schar8_t state;
    for(loc_Counter = 0 ; loc_Counter<DB_SIZE;loc_Counter++)
     762:	c0 e0       	ldi	r28, 0x00	; 0
     764:	0c c0       	rjmp	.+24     	; 0x77e <isValidPanAccount+0x24>
    {
     state = strcmp(pan,accountsDB[loc_Counter].primaryAccountNumber);
     766:	89 e1       	ldi	r24, 0x19	; 25
     768:	c8 9f       	mul	r28, r24
     76a:	b0 01       	movw	r22, r0
     76c:	11 24       	eor	r1, r1
     76e:	69 58       	subi	r22, 0x89	; 137
     770:	7f 4f       	sbci	r23, 0xFF	; 255
     772:	c8 01       	movw	r24, r16
     774:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <strcmp>
     if(state == 0 )
     778:	88 23       	and	r24, r24
     77a:	29 f0       	breq	.+10     	; 0x786 <isValidPanAccount+0x2c>
EN_dataError_t isValidPanAccount(Uchar8_t * pan)
{
	EN_dataError_t LOCAL_returnValue = FRAUD_CARD;
    Uchar8_t loc_Counter;
    Schar8_t state;
    for(loc_Counter = 0 ; loc_Counter<DB_SIZE;loc_Counter++)
     77c:	cf 5f       	subi	r28, 0xFF	; 255
     77e:	ca 30       	cpi	r28, 0x0A	; 10
     780:	90 f3       	brcs	.-28     	; 0x766 <isValidPanAccount+0xc>
}


EN_dataError_t isValidPanAccount(Uchar8_t * pan)
{
	EN_dataError_t LOCAL_returnValue = FRAUD_CARD;
     782:	81 e0       	ldi	r24, 0x01	; 1
     784:	01 c0       	rjmp	.+2      	; 0x788 <isValidPanAccount+0x2e>
    for(loc_Counter = 0 ; loc_Counter<DB_SIZE;loc_Counter++)
    {
     state = strcmp(pan,accountsDB[loc_Counter].primaryAccountNumber);
     if(state == 0 )
      {
         LOCAL_returnValue = APPROVED;
     786:	80 e0       	ldi	r24, 0x00	; 0
         break;
      }
    }
	return LOCAL_returnValue;
}
     788:	cf 91       	pop	r28
     78a:	1f 91       	pop	r17
     78c:	0f 91       	pop	r16
     78e:	08 95       	ret

00000790 <isRunningAccount>:


EN_dataError_t isRunningAccount(Uchar8_t * pan)
{
     790:	ef 92       	push	r14
     792:	ff 92       	push	r15
     794:	0f 93       	push	r16
     796:	1f 93       	push	r17
     798:	cf 93       	push	r28
     79a:	7c 01       	movw	r14, r24
	EN_dataError_t LOCAL_returnValue = CARD_STOLEN;
	Uchar8_t loc_Counter;
	Schar8_t state;
	for(loc_Counter = 0 ; loc_Counter<DB_SIZE;loc_Counter++)
     79c:	c0 e0       	ldi	r28, 0x00	; 0
     79e:	1d c0       	rjmp	.+58     	; 0x7da <isRunningAccount+0x4a>
	{
		state = strcmp(pan,accountsDB[loc_Counter].primaryAccountNumber);
     7a0:	0c 2f       	mov	r16, r28
     7a2:	10 e0       	ldi	r17, 0x00	; 0
     7a4:	89 e1       	ldi	r24, 0x19	; 25
     7a6:	80 9f       	mul	r24, r16
     7a8:	b0 01       	movw	r22, r0
     7aa:	81 9f       	mul	r24, r17
     7ac:	70 0d       	add	r23, r0
     7ae:	11 24       	eor	r1, r1
     7b0:	69 58       	subi	r22, 0x89	; 137
     7b2:	7f 4f       	sbci	r23, 0xFF	; 255
     7b4:	c7 01       	movw	r24, r14
     7b6:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <strcmp>
		if(state == 0 )
     7ba:	81 11       	cpse	r24, r1
     7bc:	0d c0       	rjmp	.+26     	; 0x7d8 <isRunningAccount+0x48>
		{
            if(accountsDB[loc_Counter].state == RUNNING)
     7be:	89 e1       	ldi	r24, 0x19	; 25
     7c0:	80 9f       	mul	r24, r16
     7c2:	f0 01       	movw	r30, r0
     7c4:	81 9f       	mul	r24, r17
     7c6:	f0 0d       	add	r31, r0
     7c8:	11 24       	eor	r1, r1
     7ca:	ee 58       	subi	r30, 0x8E	; 142
     7cc:	ff 4f       	sbci	r31, 0xFF	; 255
     7ce:	84 81       	ldd	r24, Z+4	; 0x04
     7d0:	88 23       	and	r24, r24
     7d2:	39 f0       	breq	.+14     	; 0x7e2 <isRunningAccount+0x52>
}


EN_dataError_t isRunningAccount(Uchar8_t * pan)
{
	EN_dataError_t LOCAL_returnValue = CARD_STOLEN;
     7d4:	82 e0       	ldi	r24, 0x02	; 2
     7d6:	06 c0       	rjmp	.+12     	; 0x7e4 <isRunningAccount+0x54>
	Uchar8_t loc_Counter;
	Schar8_t state;
	for(loc_Counter = 0 ; loc_Counter<DB_SIZE;loc_Counter++)
     7d8:	cf 5f       	subi	r28, 0xFF	; 255
     7da:	ca 30       	cpi	r28, 0x0A	; 10
     7dc:	08 f3       	brcs	.-62     	; 0x7a0 <isRunningAccount+0x10>
}


EN_dataError_t isRunningAccount(Uchar8_t * pan)
{
	EN_dataError_t LOCAL_returnValue = CARD_STOLEN;
     7de:	82 e0       	ldi	r24, 0x02	; 2
     7e0:	01 c0       	rjmp	.+2      	; 0x7e4 <isRunningAccount+0x54>
	{
		state = strcmp(pan,accountsDB[loc_Counter].primaryAccountNumber);
		if(state == 0 )
		{
            if(accountsDB[loc_Counter].state == RUNNING)
			LOCAL_returnValue = APPROVED;
     7e2:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	}
	return LOCAL_returnValue;
}
     7e4:	cf 91       	pop	r28
     7e6:	1f 91       	pop	r17
     7e8:	0f 91       	pop	r16
     7ea:	ff 90       	pop	r15
     7ec:	ef 90       	pop	r14
     7ee:	08 95       	ret

000007f0 <isValidAccountAmount>:

EN_dataError_t isValidAccountAmount(Uchar8_t * pan,Uchar8_t * amount,float32_t *newAmount)
{
     7f0:	4f 92       	push	r4
     7f2:	5f 92       	push	r5
     7f4:	6f 92       	push	r6
     7f6:	7f 92       	push	r7
     7f8:	8f 92       	push	r8
     7fa:	9f 92       	push	r9
     7fc:	af 92       	push	r10
     7fe:	bf 92       	push	r11
     800:	cf 92       	push	r12
     802:	df 92       	push	r13
     804:	ef 92       	push	r14
     806:	ff 92       	push	r15
     808:	0f 93       	push	r16
     80a:	1f 93       	push	r17
     80c:	cf 93       	push	r28
     80e:	7c 01       	movw	r14, r24
     810:	cb 01       	movw	r24, r22
     812:	6a 01       	movw	r12, r20
    float32_t Conv_amount = atof(amount);
     814:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <atof>
     818:	4b 01       	movw	r8, r22
     81a:	5c 01       	movw	r10, r24
	EN_dataError_t LOCAL_returnValue = INSUFFICIENT_FUND;
	Uchar8_t loc_Counter;
	Schar8_t state;
	for(loc_Counter = 0 ; loc_Counter<DB_SIZE;loc_Counter++)
     81c:	c0 e0       	ldi	r28, 0x00	; 0
     81e:	3d c0       	rjmp	.+122    	; 0x89a <__stack+0x3b>
	{
		state = strcmp(pan,accountsDB[loc_Counter].primaryAccountNumber);
     820:	0c 2f       	mov	r16, r28
     822:	10 e0       	ldi	r17, 0x00	; 0
     824:	89 e1       	ldi	r24, 0x19	; 25
     826:	80 9f       	mul	r24, r16
     828:	b0 01       	movw	r22, r0
     82a:	81 9f       	mul	r24, r17
     82c:	70 0d       	add	r23, r0
     82e:	11 24       	eor	r1, r1
     830:	69 58       	subi	r22, 0x89	; 137
     832:	7f 4f       	sbci	r23, 0xFF	; 255
     834:	c7 01       	movw	r24, r14
     836:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <strcmp>
		if(state == 0 )
     83a:	81 11       	cpse	r24, r1
     83c:	2d c0       	rjmp	.+90     	; 0x898 <__stack+0x39>
		{
			if(accountsDB[loc_Counter].balance >= Conv_amount)
     83e:	89 e1       	ldi	r24, 0x19	; 25
     840:	80 9f       	mul	r24, r16
     842:	f0 01       	movw	r30, r0
     844:	81 9f       	mul	r24, r17
     846:	f0 0d       	add	r31, r0
     848:	11 24       	eor	r1, r1
     84a:	ee 58       	subi	r30, 0x8E	; 142
     84c:	ff 4f       	sbci	r31, 0xFF	; 255
     84e:	40 80       	ld	r4, Z
     850:	51 80       	ldd	r5, Z+1	; 0x01
     852:	62 80       	ldd	r6, Z+2	; 0x02
     854:	73 80       	ldd	r7, Z+3	; 0x03
     856:	a3 01       	movw	r20, r6
     858:	92 01       	movw	r18, r4
     85a:	c5 01       	movw	r24, r10
     85c:	b4 01       	movw	r22, r8
     85e:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__cmpsf2>
     862:	18 16       	cp	r1, r24
     864:	cc f0       	brlt	.+50     	; 0x898 <__stack+0x39>
            {
              accountsDB[loc_Counter].balance-=Conv_amount;
     866:	a5 01       	movw	r20, r10
     868:	94 01       	movw	r18, r8
     86a:	c3 01       	movw	r24, r6
     86c:	b2 01       	movw	r22, r4
     86e:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <__subsf3>
     872:	29 e1       	ldi	r18, 0x19	; 25
     874:	20 9f       	mul	r18, r16
     876:	f0 01       	movw	r30, r0
     878:	21 9f       	mul	r18, r17
     87a:	f0 0d       	add	r31, r0
     87c:	11 24       	eor	r1, r1
     87e:	ee 58       	subi	r30, 0x8E	; 142
     880:	ff 4f       	sbci	r31, 0xFF	; 255
     882:	60 83       	st	Z, r22
     884:	71 83       	std	Z+1, r23	; 0x01
     886:	82 83       	std	Z+2, r24	; 0x02
     888:	93 83       	std	Z+3, r25	; 0x03
              *newAmount = accountsDB[loc_Counter].balance;
     88a:	f6 01       	movw	r30, r12
     88c:	60 83       	st	Z, r22
     88e:	71 83       	std	Z+1, r23	; 0x01
     890:	82 83       	std	Z+2, r24	; 0x02
     892:	93 83       	std	Z+3, r25	; 0x03
              LOCAL_returnValue = APPROVED;
     894:	80 e0       	ldi	r24, 0x00	; 0
              break;
     896:	05 c0       	rjmp	.+10     	; 0x8a2 <__stack+0x43>
{
    float32_t Conv_amount = atof(amount);
	EN_dataError_t LOCAL_returnValue = INSUFFICIENT_FUND;
	Uchar8_t loc_Counter;
	Schar8_t state;
	for(loc_Counter = 0 ; loc_Counter<DB_SIZE;loc_Counter++)
     898:	cf 5f       	subi	r28, 0xFF	; 255
     89a:	ca 30       	cpi	r28, 0x0A	; 10
     89c:	08 f4       	brcc	.+2      	; 0x8a0 <__stack+0x41>
     89e:	c0 cf       	rjmp	.-128    	; 0x820 <__DATA_REGION_LENGTH__+0x20>
}

EN_dataError_t isValidAccountAmount(Uchar8_t * pan,Uchar8_t * amount,float32_t *newAmount)
{
    float32_t Conv_amount = atof(amount);
	EN_dataError_t LOCAL_returnValue = INSUFFICIENT_FUND;
     8a0:	84 e0       	ldi	r24, 0x04	; 4
            }
			
		}
	}
	return LOCAL_returnValue;
}
     8a2:	cf 91       	pop	r28
     8a4:	1f 91       	pop	r17
     8a6:	0f 91       	pop	r16
     8a8:	ff 90       	pop	r15
     8aa:	ef 90       	pop	r14
     8ac:	df 90       	pop	r13
     8ae:	cf 90       	pop	r12
     8b0:	bf 90       	pop	r11
     8b2:	af 90       	pop	r10
     8b4:	9f 90       	pop	r9
     8b6:	8f 90       	pop	r8
     8b8:	7f 90       	pop	r7
     8ba:	6f 90       	pop	r6
     8bc:	5f 90       	pop	r5
     8be:	4f 90       	pop	r4
     8c0:	08 95       	ret

000008c2 <DATABASE_checking>:


EN_dataError_t DATABASE_checking (Uchar8_t * pan,Uchar8_t * amount,float32_t *newAmount)
{
     8c2:	ef 92       	push	r14
     8c4:	ff 92       	push	r15
     8c6:	0f 93       	push	r16
     8c8:	1f 93       	push	r17
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
     8ce:	ec 01       	movw	r28, r24
     8d0:	8b 01       	movw	r16, r22
     8d2:	7a 01       	movw	r14, r20
    
    EN_dataError_t Returend_Val;
    Returend_Val = isValidPanAccount(pan);
     8d4:	0e 94 ad 03 	call	0x75a	; 0x75a <isValidPanAccount>
    if(Returend_Val == FRAUD_CARD) return Returend_Val;
     8d8:	81 30       	cpi	r24, 0x01	; 1
     8da:	89 f0       	breq	.+34     	; 0x8fe <DATABASE_checking+0x3c>
    Returend_Val = isRunningAccount(pan);
     8dc:	ce 01       	movw	r24, r28
     8de:	0e 94 c8 03 	call	0x790	; 0x790 <isRunningAccount>
    if(Returend_Val == CARD_STOLEN) return Returend_Val;
     8e2:	82 30       	cpi	r24, 0x02	; 2
     8e4:	61 f0       	breq	.+24     	; 0x8fe <DATABASE_checking+0x3c>
    Returend_Val = isBelowMaxDailyAmount(amount);
     8e6:	c8 01       	movw	r24, r16
     8e8:	0e 94 a3 03 	call	0x746	; 0x746 <isBelowMaxDailyAmount>
    if(Returend_Val == EXCEED_MAX_DAILY_AMOUNT) return Returend_Val;
     8ec:	83 30       	cpi	r24, 0x03	; 3
     8ee:	39 f0       	breq	.+14     	; 0x8fe <DATABASE_checking+0x3c>
    Returend_Val = isValidAccountAmount(pan , amount,newAmount);
     8f0:	a7 01       	movw	r20, r14
     8f2:	b8 01       	movw	r22, r16
     8f4:	ce 01       	movw	r24, r28
     8f6:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <isValidAccountAmount>
    if(Returend_Val == INSUFFICIENT_FUND) return Returend_Val;
     8fa:	84 30       	cpi	r24, 0x04	; 4
     8fc:	01 f0       	breq	.+0      	; 0x8fe <DATABASE_checking+0x3c>
    
    
    Returend_Val = APPROVED;
    
    
     8fe:	df 91       	pop	r29
     900:	cf 91       	pop	r28
     902:	1f 91       	pop	r17
     904:	0f 91       	pop	r16
     906:	ff 90       	pop	r15
     908:	ef 90       	pop	r14
     90a:	08 95       	ret

0000090c <HButton_ExtIntInit>:

enu_buttonError_t HButton_ExtIntInit(enu_pin en_pinx)
{
	enu_buttonError_t errorStatus = BUTTON_OK;

	if ( en_pinx < PIN_INVALID )
     90c:	80 32       	cpi	r24, 0x20	; 32
     90e:	18 f4       	brcc	.+6      	; 0x916 <HButton_ExtIntInit+0xa>
	{
		DIO_s8SETPinVal(en_pinx, HIGH);
     910:	61 e0       	ldi	r22, 0x01	; 1
     912:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_s8SETPinVal>
	{
		errorStatus = BUTTON_OK;
	}

	return errorStatus;
}
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	08 95       	ret

0000091a <BUZ_Init>:

/*************************************************************************************************************
 * 											Function Implementation
 ************************************************************************************************************/
void BUZ_Init(st_Buzzer_t* pst_a_buzzer)
{
     91a:	cf 93       	push	r28
     91c:	df 93       	push	r29
     91e:	ec 01       	movw	r28, r24
	DIO_s8SETPinDir(pst_a_buzzer->BuzzerPin, OUTPUT);
     920:	61 e0       	ldi	r22, 0x01	; 1
     922:	88 81       	ld	r24, Y
     924:	0e 94 2e 09 	call	0x125c	; 0x125c <DIO_s8SETPinDir>
	DIO_s8SETPinVal(pst_a_buzzer->BuzzerPin, LOW);
     928:	60 e0       	ldi	r22, 0x00	; 0
     92a:	88 81       	ld	r24, Y
     92c:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_s8SETPinVal>
}
     930:	df 91       	pop	r29
     932:	cf 91       	pop	r28
     934:	08 95       	ret

00000936 <BUZ_SetState>:

en_BuzzerErrorState_t BUZ_Enable(st_Buzzer_t* pst_a_buzzer);
en_BuzzerErrorState_t BUZ_SetState(st_Buzzer_t* pst_a_buzzer, en_BuzzerState_t u16_a_state)
{
	if(pst_a_buzzer != NULL)
     936:	00 97       	sbiw	r24, 0x00	; 0
     938:	31 f0       	breq	.+12     	; 0x946 <BUZ_SetState+0x10>
     93a:	fc 01       	movw	r30, r24
	{
		DIO_s8SETPinVal(pst_a_buzzer->BuzzerPin, u16_a_state);
     93c:	80 81       	ld	r24, Z
     93e:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_s8SETPinVal>
	else
	{
		return BUZ_NOK;
	}
	
	return BUZ_OK;
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	08 95       	ret
	{
		DIO_s8SETPinVal(pst_a_buzzer->BuzzerPin, u16_a_state);
	}
	else
	{
		return BUZ_NOK;
     946:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return BUZ_OK;
     948:	08 95       	ret

0000094a <HSPI_MasterInit>:
	{
		return HSPI_NOK;
	}
	
	return HSPI_OK;	
}
     94a:	61 e0       	ldi	r22, 0x01	; 1
     94c:	8d e0       	ldi	r24, 0x0D	; 13
     94e:	0e 94 2e 09 	call	0x125c	; 0x125c <DIO_s8SETPinDir>
     952:	61 e0       	ldi	r22, 0x01	; 1
     954:	8f e0       	ldi	r24, 0x0F	; 15
     956:	0e 94 2e 09 	call	0x125c	; 0x125c <DIO_s8SETPinDir>
     95a:	61 e0       	ldi	r22, 0x01	; 1
     95c:	8c e0       	ldi	r24, 0x0C	; 12
     95e:	0e 94 2e 09 	call	0x125c	; 0x125c <DIO_s8SETPinDir>
     962:	61 e0       	ldi	r22, 0x01	; 1
     964:	8c e0       	ldi	r24, 0x0C	; 12
     966:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_s8SETPinVal>
     96a:	60 e0       	ldi	r22, 0x00	; 0
     96c:	8e e0       	ldi	r24, 0x0E	; 14
     96e:	0e 94 2e 09 	call	0x125c	; 0x125c <DIO_s8SETPinDir>
     972:	62 e0       	ldi	r22, 0x02	; 2
     974:	8a e0       	ldi	r24, 0x0A	; 10
     976:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <EXTINT_init>
     97a:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <SPI_MasterInit>
     97e:	08 95       	ret

00000980 <HSPI_SendChar>:
     980:	1f 93       	push	r17
     982:	cf 93       	push	r28
     984:	df 93       	push	r29
     986:	1f 92       	push	r1
     988:	cd b7       	in	r28, 0x3d	; 61
     98a:	de b7       	in	r29, 0x3e	; 62
     98c:	18 2f       	mov	r17, r24
     98e:	60 e0       	ldi	r22, 0x00	; 0
     990:	8c e0       	ldi	r24, 0x0C	; 12
     992:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_s8SETPinVal>
     996:	be 01       	movw	r22, r28
     998:	6f 5f       	subi	r22, 0xFF	; 255
     99a:	7f 4f       	sbci	r23, 0xFF	; 255
     99c:	81 2f       	mov	r24, r17
     99e:	0e 94 0b 0b 	call	0x1616	; 0x1616 <SPI_TranscieveChar>
     9a2:	61 e0       	ldi	r22, 0x01	; 1
     9a4:	8c e0       	ldi	r24, 0x0C	; 12
     9a6:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_s8SETPinVal>
     9aa:	0f 90       	pop	r0
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28
     9b0:	1f 91       	pop	r17
     9b2:	08 95       	ret

000009b4 <HSPI_ReceiveData>:
 * \param u8_a_DataSize: size of storage buffer
 * 
 * \return en_HSPI_ErrorState_t
 */
void HSPI_ReceiveData(Uchar8_t *pu8_a_data, Uchar8_t u8_a_DataSize)
{
     9b4:	cf 92       	push	r12
     9b6:	df 92       	push	r13
     9b8:	ef 92       	push	r14
     9ba:	ff 92       	push	r15
     9bc:	0f 93       	push	r16
     9be:	1f 93       	push	r17
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
     9c4:	1f 92       	push	r1
     9c6:	cd b7       	in	r28, 0x3d	; 61
     9c8:	de b7       	in	r29, 0x3e	; 62
     9ca:	6c 01       	movw	r12, r24
     9cc:	06 2f       	mov	r16, r22
	Uchar8_t u8_l_DataIterator = 0, u8_l_dummyVar;

	/* Select Slave */
	DIO_s8SETPinVal(HSPI_SS, LOW);	
     9ce:	60 e0       	ldi	r22, 0x00	; 0
     9d0:	8c e0       	ldi	r24, 0x0C	; 12
     9d2:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_s8SETPinVal>

	/* Initiate communication with dummy bit for synchronization */
	SPI_TranscieveChar(DATA_END, &u8_l_dummyVar);
     9d6:	be 01       	movw	r22, r28
     9d8:	6f 5f       	subi	r22, 0xFF	; 255
     9da:	7f 4f       	sbci	r23, 0xFF	; 255
     9dc:	83 e2       	ldi	r24, 0x23	; 35
     9de:	0e 94 0b 0b 	call	0x1616	; 0x1616 <SPI_TranscieveChar>
 * 
 * \return en_HSPI_ErrorState_t
 */
void HSPI_ReceiveData(Uchar8_t *pu8_a_data, Uchar8_t u8_a_DataSize)
{
	Uchar8_t u8_l_DataIterator = 0, u8_l_dummyVar;
     9e2:	10 e0       	ldi	r17, 0x00	; 0
	/* Initiate communication with dummy bit for synchronization */
	SPI_TranscieveChar(DATA_END, &u8_l_dummyVar);
	
	do
	{
		SPI_TranscieveChar(DATA_END, &pu8_a_data[u8_l_DataIterator]);
     9e4:	76 01       	movw	r14, r12
     9e6:	e1 0e       	add	r14, r17
     9e8:	f1 1c       	adc	r15, r1
     9ea:	b7 01       	movw	r22, r14
     9ec:	83 e2       	ldi	r24, 0x23	; 35
     9ee:	0e 94 0b 0b 	call	0x1616	; 0x1616 <SPI_TranscieveChar>
						
	}while((pu8_a_data[u8_l_DataIterator++]!=DATA_END) && (u8_l_DataIterator < u8_a_DataSize));
     9f2:	1f 5f       	subi	r17, 0xFF	; 255
     9f4:	f7 01       	movw	r30, r14
     9f6:	80 81       	ld	r24, Z
     9f8:	83 32       	cpi	r24, 0x23	; 35
     9fa:	11 f0       	breq	.+4      	; 0xa00 <HSPI_ReceiveData+0x4c>
     9fc:	10 17       	cp	r17, r16
     9fe:	90 f3       	brcs	.-28     	; 0x9e4 <HSPI_ReceiveData+0x30>
	
	/* Deselect Slave */
	DIO_s8SETPinVal(HSPI_SS, HIGH);
     a00:	61 e0       	ldi	r22, 0x01	; 1
     a02:	8c e0       	ldi	r24, 0x0C	; 12
     a04:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_s8SETPinVal>
}
     a08:	0f 90       	pop	r0
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	1f 91       	pop	r17
     a10:	0f 91       	pop	r16
     a12:	ff 90       	pop	r15
     a14:	ef 90       	pop	r14
     a16:	df 90       	pop	r13
     a18:	cf 90       	pop	r12
     a1a:	08 95       	ret

00000a1c <HTIM0_SyncDelay>:
extern Uchar8_t u8_g_TotalOVF;

/*================================= Function Implementation =================================*/

en_HTIMErrorState_t HTIM0_SyncDelay(Uint32_t u32_a_delay, en_timeUnits_t Copy_timeUnit)
{
     a1c:	8f 92       	push	r8
     a1e:	9f 92       	push	r9
     a20:	af 92       	push	r10
     a22:	bf 92       	push	r11
     a24:	cf 92       	push	r12
     a26:	df 92       	push	r13
     a28:	ef 92       	push	r14
     a2a:	ff 92       	push	r15
     a2c:	0f 93       	push	r16
     a2e:	1f 93       	push	r17
     a30:	cf 93       	push	r28
     a32:	df 93       	push	r29
     a34:	00 d0       	rcall	.+0      	; 0xa36 <HTIM0_SyncDelay+0x1a>
     a36:	cd b7       	in	r28, 0x3d	; 61
     a38:	de b7       	in	r29, 0x3e	; 62
     a3a:	6b 01       	movw	r12, r22
     a3c:	7c 01       	movw	r14, r24
	Uchar8_t u8_l_prescaler, Local_TotalOverFlows, Local_OverFlowCounter=0, u8_l_OverflowFlag, u8_l_TimState;
	Uint16_t Local_TotalTicks;
	float Local_TickTime;
	
	/* Get Value in micro seconds */
	if(Copy_timeUnit == Seconds)	{u32_a_delay *= SEC_TO_uSEC;}
     a3e:	42 30       	cpi	r20, 0x02	; 2
     a40:	59 f4       	brne	.+22     	; 0xa58 <HTIM0_SyncDelay+0x3c>
     a42:	9b 01       	movw	r18, r22
     a44:	ac 01       	movw	r20, r24
     a46:	60 e4       	ldi	r22, 0x40	; 64
     a48:	72 e4       	ldi	r23, 0x42	; 66
     a4a:	8f e0       	ldi	r24, 0x0F	; 15
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__mulsi3>
     a52:	6b 01       	movw	r12, r22
     a54:	7c 01       	movw	r14, r24
     a56:	0d c0       	rjmp	.+26     	; 0xa72 <HTIM0_SyncDelay+0x56>
	else if(Copy_timeUnit == mSeconds)	{u32_a_delay *= mSEC_TO_uSEC;}
     a58:	41 30       	cpi	r20, 0x01	; 1
     a5a:	49 f4       	brne	.+18     	; 0xa6e <HTIM0_SyncDelay+0x52>
     a5c:	a8 ee       	ldi	r26, 0xE8	; 232
     a5e:	b3 e0       	ldi	r27, 0x03	; 3
     a60:	9b 01       	movw	r18, r22
     a62:	ac 01       	movw	r20, r24
     a64:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__muluhisi3>
     a68:	6b 01       	movw	r12, r22
     a6a:	7c 01       	movw	r14, r24
     a6c:	02 c0       	rjmp	.+4      	; 0xa72 <HTIM0_SyncDelay+0x56>
	else if(Copy_timeUnit == uSeconds)	{/* Do Nothing */}
     a6e:	41 11       	cpse	r20, r1
     a70:	6b c0       	rjmp	.+214    	; 0xb48 <HTIM0_SyncDelay+0x12c>
	else return TIM_NOK;
	
	/* Set prescaler according to delay time */
	if(u32_a_delay < MAX_CLK_DEV1_DELAY  )	{u8_l_prescaler = TIM_DIV_BY_1;}
     a72:	88 e8       	ldi	r24, 0x88	; 136
     a74:	c8 16       	cp	r12, r24
     a76:	83 e1       	ldi	r24, 0x13	; 19
     a78:	d8 06       	cpc	r13, r24
     a7a:	e1 04       	cpc	r14, r1
     a7c:	f1 04       	cpc	r15, r1
     a7e:	c8 f0       	brcs	.+50     	; 0xab2 <HTIM0_SyncDelay+0x96>
	else if(u32_a_delay < MAX_CLK_DEV8_DELAY  ) {u8_l_prescaler = TIM_DIV_BY_8;}
     a80:	88 ea       	ldi	r24, 0xA8	; 168
     a82:	c8 16       	cp	r12, r24
     a84:	81 e6       	ldi	r24, 0x61	; 97
     a86:	d8 06       	cpc	r13, r24
     a88:	e1 04       	cpc	r14, r1
     a8a:	f1 04       	cpc	r15, r1
     a8c:	a0 f0       	brcs	.+40     	; 0xab6 <HTIM0_SyncDelay+0x9a>
	else if(u32_a_delay < MAX_CLK_DEV64_DELAY ) {u8_l_prescaler = TIM_DIV_BY_64;}
     a8e:	88 e4       	ldi	r24, 0x48	; 72
     a90:	c8 16       	cp	r12, r24
     a92:	88 ee       	ldi	r24, 0xE8	; 232
     a94:	d8 06       	cpc	r13, r24
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	e8 06       	cpc	r14, r24
     a9a:	f1 04       	cpc	r15, r1
     a9c:	70 f0       	brcs	.+28     	; 0xaba <HTIM0_SyncDelay+0x9e>
	else if(u32_a_delay < MAX_CLK_DEV256_DELAY) {u8_l_prescaler = TIM_DIV_BY_256;}
     a9e:	80 e2       	ldi	r24, 0x20	; 32
     aa0:	c8 16       	cp	r12, r24
     aa2:	81 ea       	ldi	r24, 0xA1	; 161
     aa4:	d8 06       	cpc	r13, r24
     aa6:	87 e0       	ldi	r24, 0x07	; 7
     aa8:	e8 06       	cpc	r14, r24
     aaa:	f1 04       	cpc	r15, r1
     aac:	40 f4       	brcc	.+16     	; 0xabe <HTIM0_SyncDelay+0xa2>
     aae:	14 e0       	ldi	r17, 0x04	; 4
     ab0:	07 c0       	rjmp	.+14     	; 0xac0 <HTIM0_SyncDelay+0xa4>
	else if(Copy_timeUnit == mSeconds)	{u32_a_delay *= mSEC_TO_uSEC;}
	else if(Copy_timeUnit == uSeconds)	{/* Do Nothing */}
	else return TIM_NOK;
	
	/* Set prescaler according to delay time */
	if(u32_a_delay < MAX_CLK_DEV1_DELAY  )	{u8_l_prescaler = TIM_DIV_BY_1;}
     ab2:	11 e0       	ldi	r17, 0x01	; 1
     ab4:	05 c0       	rjmp	.+10     	; 0xac0 <HTIM0_SyncDelay+0xa4>
	else if(u32_a_delay < MAX_CLK_DEV8_DELAY  ) {u8_l_prescaler = TIM_DIV_BY_8;}
     ab6:	12 e0       	ldi	r17, 0x02	; 2
     ab8:	03 c0       	rjmp	.+6      	; 0xac0 <HTIM0_SyncDelay+0xa4>
	else if(u32_a_delay < MAX_CLK_DEV64_DELAY ) {u8_l_prescaler = TIM_DIV_BY_64;}
     aba:	13 e0       	ldi	r17, 0x03	; 3
     abc:	01 c0       	rjmp	.+2      	; 0xac0 <HTIM0_SyncDelay+0xa4>
	else if(u32_a_delay < MAX_CLK_DEV256_DELAY) {u8_l_prescaler = TIM_DIV_BY_256;}
	else {u8_l_prescaler = TIM_DIV_BY_1024;}
     abe:	15 e0       	ldi	r17, 0x05	; 5
	
	Local_TickTime = arr_gs_prescalers[u8_l_prescaler-1]/TIM0_PRESCALER;
     ac0:	e1 2f       	mov	r30, r17
     ac2:	f0 e0       	ldi	r31, 0x00	; 0
     ac4:	31 97       	sbiw	r30, 0x01	; 1
     ac6:	ee 0f       	add	r30, r30
     ac8:	ff 1f       	adc	r31, r31
     aca:	e8 56       	subi	r30, 0x68	; 104
     acc:	fd 4f       	sbci	r31, 0xFD	; 253
     ace:	60 81       	ld	r22, Z
     ad0:	71 81       	ldd	r23, Z+1	; 0x01
     ad2:	76 95       	lsr	r23
     ad4:	67 95       	ror	r22
     ad6:	76 95       	lsr	r23
     ad8:	67 95       	ror	r22
     ada:	76 95       	lsr	r23
     adc:	67 95       	ror	r22
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__floatunsisf>
     ae6:	4b 01       	movw	r8, r22
     ae8:	5c 01       	movw	r10, r24
	Local_TotalTicks = (Uint16_t)(u32_a_delay/Local_TickTime);
     aea:	c7 01       	movw	r24, r14
     aec:	b6 01       	movw	r22, r12
     aee:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__floatunsisf>
     af2:	a5 01       	movw	r20, r10
     af4:	94 01       	movw	r18, r8
     af6:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__divsf3>
     afa:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <__fixunssfsi>
     afe:	f6 2e       	mov	r15, r22
	Local_TotalOverFlows = Local_TotalTicks/TIM0_MAX_TICKS;
     b00:	07 2f       	mov	r16, r23
	
	/* Initialize timer in normal mode */
	TIM0_voidInit(NormalMode);
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <TIM0_voidInit>
	
	/* Set timer start value */
	TIM0_SetValue(TIM0_MAX_TICKS-(Local_TotalTicks%TIM0_MAX_TICKS));
     b08:	8f 2d       	mov	r24, r15
     b0a:	81 95       	neg	r24
     b0c:	0e 94 ad 0b 	call	0x175a	; 0x175a <TIM0_SetValue>
	
	/* Start Timer */
	TIM0_Start(u8_l_prescaler);
     b10:	81 2f       	mov	r24, r17
     b12:	0e 94 95 0b 	call	0x172a	; 0x172a <TIM0_Start>

/*================================= Function Implementation =================================*/

en_HTIMErrorState_t HTIM0_SyncDelay(Uint32_t u32_a_delay, en_timeUnits_t Copy_timeUnit)
{
	Uchar8_t u8_l_prescaler, Local_TotalOverFlows, Local_OverFlowCounter=0, u8_l_OverflowFlag, u8_l_TimState;
     b16:	10 e0       	ldi	r17, 0x00	; 0
	TIM0_SetValue(TIM0_MAX_TICKS-(Local_TotalTicks%TIM0_MAX_TICKS));
	
	/* Start Timer */
	TIM0_Start(u8_l_prescaler);
	
	while(Local_OverFlowCounter <= Local_TotalOverFlows)
     b18:	11 c0       	rjmp	.+34     	; 0xb3c <HTIM0_SyncDelay+0x120>
	{
		/* Wait until the overflow flag is raised */
		do
		{
			TIM0_GetOVF(&u8_l_OverflowFlag);
     b1a:	ce 01       	movw	r24, r28
     b1c:	01 96       	adiw	r24, 0x01	; 1
     b1e:	0e 94 af 0b 	call	0x175e	; 0x175e <TIM0_GetOVF>
			TIM0_GetState(&u8_l_TimState);
     b22:	ce 01       	movw	r24, r28
     b24:	02 96       	adiw	r24, 0x02	; 2
     b26:	0e 94 bd 0b 	call	0x177a	; 0x177a <TIM0_GetState>
		}
		while(!u8_l_OverflowFlag && u8_l_TimState);
     b2a:	89 81       	ldd	r24, Y+1	; 0x01
     b2c:	81 11       	cpse	r24, r1
     b2e:	03 c0       	rjmp	.+6      	; 0xb36 <HTIM0_SyncDelay+0x11a>
     b30:	8a 81       	ldd	r24, Y+2	; 0x02
     b32:	81 11       	cpse	r24, r1
     b34:	f2 cf       	rjmp	.-28     	; 0xb1a <HTIM0_SyncDelay+0xfe>
		
		/* Clear the overflow flag */
		TIM0_ClearOVF();
     b36:	0e 94 b9 0b 	call	0x1772	; 0x1772 <TIM0_ClearOVF>
		
		Local_OverFlowCounter++;
     b3a:	1f 5f       	subi	r17, 0xFF	; 255
	TIM0_SetValue(TIM0_MAX_TICKS-(Local_TotalTicks%TIM0_MAX_TICKS));
	
	/* Start Timer */
	TIM0_Start(u8_l_prescaler);
	
	while(Local_OverFlowCounter <= Local_TotalOverFlows)
     b3c:	01 17       	cp	r16, r17
     b3e:	68 f7       	brcc	.-38     	; 0xb1a <HTIM0_SyncDelay+0xfe>
		TIM0_ClearOVF();
		
		Local_OverFlowCounter++;
	}
	
	TIM0_Stop();
     b40:	0e 94 a3 0b 	call	0x1746	; 0x1746 <TIM0_Stop>
	
	return TIM_OK;
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	01 c0       	rjmp	.+2      	; 0xb4a <HTIM0_SyncDelay+0x12e>
	
	/* Get Value in micro seconds */
	if(Copy_timeUnit == Seconds)	{u32_a_delay *= SEC_TO_uSEC;}
	else if(Copy_timeUnit == mSeconds)	{u32_a_delay *= mSEC_TO_uSEC;}
	else if(Copy_timeUnit == uSeconds)	{/* Do Nothing */}
	else return TIM_NOK;
     b48:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	TIM0_Stop();
	
	return TIM_OK;
}
     b4a:	0f 90       	pop	r0
     b4c:	0f 90       	pop	r0
     b4e:	df 91       	pop	r29
     b50:	cf 91       	pop	r28
     b52:	1f 91       	pop	r17
     b54:	0f 91       	pop	r16
     b56:	ff 90       	pop	r15
     b58:	ef 90       	pop	r14
     b5a:	df 90       	pop	r13
     b5c:	cf 90       	pop	r12
     b5e:	bf 90       	pop	r11
     b60:	af 90       	pop	r10
     b62:	9f 90       	pop	r9
     b64:	8f 90       	pop	r8
     b66:	08 95       	ret

00000b68 <HTimer_enInit>:
 ************************************************************************************************************/
enu_HTimerError_t HTimer_enInit(void)
{
	enu_HTimerError_t errorStatus = TIMER_OK;

	(void)enuTimer2_init (OVF_MODE);
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	0e 94 0b 0c 	call	0x1816	; 0x1816 <enuTimer2_init>
	(void)u8Timer2_setPrescallar(TIMER_PRE_256);
     b6e:	84 e0       	ldi	r24, 0x04	; 4
     b70:	0e 94 39 0c 	call	0x1872	; 0x1872 <u8Timer2_setPrescallar>
	(void)vidTimer2_OvfIrqEnable();
     b74:	0e 94 4d 0c 	call	0x189a	; 0x189a <vidTimer2_OvfIrqEnable>

	return errorStatus;

}
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	08 95       	ret

00000b7c <HTimer_vidDelayMs>:
/*************************************************************************************************************/
void HTimer_vidDelayMs( Uint32_t u32_delay )
{
	(void)u8Timer2_setTime_ms(u32_delay);
     b7c:	0e 94 66 0c 	call	0x18cc	; 0x18cc <u8Timer2_setTime_ms>
	(void)vidTimer2_start();
     b80:	0e 94 55 0c 	call	0x18aa	; 0x18aa <vidTimer2_start>
     b84:	08 95       	ret

00000b86 <HTimer_enStop>:

enu_HTimerError_t HTimer_enStop(void)
{
	enu_HTimerError_t errorStatus;

	errorStatus = vidTimer2_stop();
     b86:	0e 94 5f 0c 	call	0x18be	; 0x18be <vidTimer2_stop>

	return errorStatus;

}
     b8a:	08 95       	ret

00000b8c <HTimer_enCBF>:
/*************************************************************************************************************/
enu_HTimerError_t HTimer_enCBF(ptr_funcc pFunc)
{
	enu_HTimerError_t errorStatus = TIMER_OK;

	if(pFunc != NULL)
     b8c:	00 97       	sbiw	r24, 0x00	; 0
     b8e:	21 f0       	breq	.+8      	; 0xb98 <HTimer_enCBF+0xc>
	{
		vidTimer2_setcbf_OVF(pFunc);
     b90:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <vidTimer2_setcbf_OVF>

}
/*************************************************************************************************************/
enu_HTimerError_t HTimer_enCBF(ptr_funcc pFunc)
{
	enu_HTimerError_t errorStatus = TIMER_OK;
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	08 95       	ret
	if(pFunc != NULL)
	{
		vidTimer2_setcbf_OVF(pFunc);

	}else{
		errorStatus = TIMER_NOK;
     b98:	81 e0       	ldi	r24, 0x01	; 1
	}

	return errorStatus;

}
     b9a:	08 95       	ret

00000b9c <H_EXTINT_create>:
ARGS        : takes the EXINT_NUMBER( INT0,INT1 OR INT2) and sense control and and pointer to the function we want to execute when interrupt occurs.
return      : return EXTINT_OK if the EXINT_NUMBER initializes correctly, EXTINT_NOT_OK otherwise
*/

EN_EXTINT_ERROR H_EXTINT_create(EN_EXINT_NUMBER INTx ,EN_Sence_Control INTxSense,void(*ptrfunc)(void))
{
     b9c:	0f 93       	push	r16
     b9e:	1f 93       	push	r17
     ba0:	cf 93       	push	r28
     ba2:	c8 2f       	mov	r28, r24
     ba4:	8a 01       	movw	r16, r20
	if(!EXTINT_init(INTx,INTxSense) && !EXTINT_CallBack(INTx,ptrfunc)) return EXTINT_OK;
     ba6:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <EXTINT_init>
     baa:	81 11       	cpse	r24, r1
     bac:	07 c0       	rjmp	.+14     	; 0xbbc <H_EXTINT_create+0x20>
     bae:	b8 01       	movw	r22, r16
     bb0:	8c 2f       	mov	r24, r28
     bb2:	0e 94 5f 0a 	call	0x14be	; 0x14be <EXTINT_CallBack>
     bb6:	81 11       	cpse	r24, r1
     bb8:	03 c0       	rjmp	.+6      	; 0xbc0 <H_EXTINT_create+0x24>
     bba:	03 c0       	rjmp	.+6      	; 0xbc2 <H_EXTINT_create+0x26>
	return EXTINT_NOT_OK;
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	01 c0       	rjmp	.+2      	; 0xbc2 <H_EXTINT_create+0x26>
     bc0:	81 e0       	ldi	r24, 0x01	; 1
	
     bc2:	cf 91       	pop	r28
     bc4:	1f 91       	pop	r17
     bc6:	0f 91       	pop	r16
     bc8:	08 95       	ret

00000bca <KEYPAD_init>:
 * 											Function Implementation
 ************************************************************************************************************/
void KEYPAD_init()
{
	// INITIALIZE ROWS AS OUTPUTS
	DIO_s8SETPinDir(R1,OUTPUT);
     bca:	61 e0       	ldi	r22, 0x01	; 1
     bcc:	82 e1       	ldi	r24, 0x12	; 18
     bce:	0e 94 2e 09 	call	0x125c	; 0x125c <DIO_s8SETPinDir>
	DIO_s8SETPinDir(R2,OUTPUT);
     bd2:	61 e0       	ldi	r22, 0x01	; 1
     bd4:	83 e1       	ldi	r24, 0x13	; 19
     bd6:	0e 94 2e 09 	call	0x125c	; 0x125c <DIO_s8SETPinDir>
	DIO_s8SETPinDir(R3,OUTPUT);
     bda:	61 e0       	ldi	r22, 0x01	; 1
     bdc:	84 e1       	ldi	r24, 0x14	; 20
     bde:	0e 94 2e 09 	call	0x125c	; 0x125c <DIO_s8SETPinDir>
	// INITIALIZE COLUMNS AS INPUTS
	DIO_s8SETPinDir(C1,INPUT);
     be2:	60 e0       	ldi	r22, 0x00	; 0
     be4:	85 e1       	ldi	r24, 0x15	; 21
     be6:	0e 94 2e 09 	call	0x125c	; 0x125c <DIO_s8SETPinDir>
	DIO_s8SETPinDir(C2,INPUT);
     bea:	60 e0       	ldi	r22, 0x00	; 0
     bec:	86 e1       	ldi	r24, 0x16	; 22
     bee:	0e 94 2e 09 	call	0x125c	; 0x125c <DIO_s8SETPinDir>
	DIO_s8SETPinDir(C3,INPUT);
     bf2:	60 e0       	ldi	r22, 0x00	; 0
     bf4:	87 e1       	ldi	r24, 0x17	; 23
     bf6:	0e 94 2e 09 	call	0x125c	; 0x125c <DIO_s8SETPinDir>
     bfa:	08 95       	ret

00000bfc <checkR1>:
	
	
}
EN_KEYPAD_BTNS checkR1()
{
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	1f 92       	push	r1
     c02:	cd b7       	in	r28, 0x3d	; 61
     c04:	de b7       	in	r29, 0x3e	; 62
	DIO_s8SETPinVal(C1,HIGH);
     c06:	61 e0       	ldi	r22, 0x01	; 1
     c08:	85 e1       	ldi	r24, 0x15	; 21
     c0a:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C2,HIGH);
     c0e:	61 e0       	ldi	r22, 0x01	; 1
     c10:	86 e1       	ldi	r24, 0x16	; 22
     c12:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C3,HIGH);
     c16:	61 e0       	ldi	r22, 0x01	; 1
     c18:	87 e1       	ldi	r24, 0x17	; 23
     c1a:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R2,HIGH);
     c1e:	61 e0       	ldi	r22, 0x01	; 1
     c20:	83 e1       	ldi	r24, 0x13	; 19
     c22:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R3,HIGH);
     c26:	61 e0       	ldi	r22, 0x01	; 1
     c28:	84 e1       	ldi	r24, 0x14	; 20
     c2a:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R1,LOW);
     c2e:	60 e0       	ldi	r22, 0x00	; 0
     c30:	82 e1       	ldi	r24, 0x12	; 18
     c32:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_s8SETPinVal>
	
	Uchar8_t val = 1;
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C1,&val);
     c3a:	be 01       	movw	r22, r28
     c3c:	6f 5f       	subi	r22, 0xFF	; 255
     c3e:	7f 4f       	sbci	r23, 0xFF	; 255
     c40:	85 e1       	ldi	r24, 0x15	; 21
     c42:	0e 94 ae 09 	call	0x135c	; 0x135c <DIO_s8GETPinVal>
	if(val == 0)
     c46:	89 81       	ldd	r24, Y+1	; 0x01
     c48:	88 23       	and	r24, r24
     c4a:	39 f0       	breq	.+14     	; 0xc5a <checkR1+0x5e>
     c4c:	0b c0       	rjmp	.+22     	; 0xc64 <checkR1+0x68>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C1,&val);
     c4e:	be 01       	movw	r22, r28
     c50:	6f 5f       	subi	r22, 0xFF	; 255
     c52:	7f 4f       	sbci	r23, 0xFF	; 255
     c54:	85 e1       	ldi	r24, 0x15	; 21
     c56:	0e 94 ae 09 	call	0x135c	; 0x135c <DIO_s8GETPinVal>
	
	Uchar8_t val = 1;
	DIO_s8GETPinVal(C1,&val);
	if(val == 0)
	{
		while (val == 0)
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	88 23       	and	r24, r24
     c5e:	b9 f3       	breq	.-18     	; 0xc4e <checkR1+0x52>
		{
			DIO_s8GETPinVal(C1,&val);
		}
		return KEY_1;
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	2e c0       	rjmp	.+92     	; 0xcc0 <checkR1+0xc4>
	}
	val = 1;
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C2,&val);
     c68:	be 01       	movw	r22, r28
     c6a:	6f 5f       	subi	r22, 0xFF	; 255
     c6c:	7f 4f       	sbci	r23, 0xFF	; 255
     c6e:	86 e1       	ldi	r24, 0x16	; 22
     c70:	0e 94 ae 09 	call	0x135c	; 0x135c <DIO_s8GETPinVal>
	if(val == 0)
     c74:	89 81       	ldd	r24, Y+1	; 0x01
     c76:	88 23       	and	r24, r24
     c78:	39 f0       	breq	.+14     	; 0xc88 <checkR1+0x8c>
     c7a:	0b c0       	rjmp	.+22     	; 0xc92 <checkR1+0x96>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C2,&val);
     c7c:	be 01       	movw	r22, r28
     c7e:	6f 5f       	subi	r22, 0xFF	; 255
     c80:	7f 4f       	sbci	r23, 0xFF	; 255
     c82:	86 e1       	ldi	r24, 0x16	; 22
     c84:	0e 94 ae 09 	call	0x135c	; 0x135c <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C2,&val);
	if(val == 0)
	{
		while (val == 0)
     c88:	89 81       	ldd	r24, Y+1	; 0x01
     c8a:	88 23       	and	r24, r24
     c8c:	b9 f3       	breq	.-18     	; 0xc7c <checkR1+0x80>
		{
			DIO_s8GETPinVal(C2,&val);
		}
		return KEY_2;
     c8e:	82 e0       	ldi	r24, 0x02	; 2
     c90:	17 c0       	rjmp	.+46     	; 0xcc0 <checkR1+0xc4>
	}
	val = 1;
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C3,&val);
     c96:	be 01       	movw	r22, r28
     c98:	6f 5f       	subi	r22, 0xFF	; 255
     c9a:	7f 4f       	sbci	r23, 0xFF	; 255
     c9c:	87 e1       	ldi	r24, 0x17	; 23
     c9e:	0e 94 ae 09 	call	0x135c	; 0x135c <DIO_s8GETPinVal>
	if(val == 0)
     ca2:	89 81       	ldd	r24, Y+1	; 0x01
     ca4:	88 23       	and	r24, r24
     ca6:	41 f0       	breq	.+16     	; 0xcb8 <checkR1+0xbc>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_3;
	}
	return KEY_NOTHING;
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	0a c0       	rjmp	.+20     	; 0xcc0 <checkR1+0xc4>
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C3,&val);
     cac:	be 01       	movw	r22, r28
     cae:	6f 5f       	subi	r22, 0xFF	; 255
     cb0:	7f 4f       	sbci	r23, 0xFF	; 255
     cb2:	87 e1       	ldi	r24, 0x17	; 23
     cb4:	0e 94 ae 09 	call	0x135c	; 0x135c <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
     cba:	88 23       	and	r24, r24
     cbc:	b9 f3       	breq	.-18     	; 0xcac <checkR1+0xb0>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_3;
     cbe:	83 e0       	ldi	r24, 0x03	; 3
	}
	return KEY_NOTHING;
	
}
     cc0:	0f 90       	pop	r0
     cc2:	df 91       	pop	r29
     cc4:	cf 91       	pop	r28
     cc6:	08 95       	ret

00000cc8 <checkR2>:
EN_KEYPAD_BTNS checkR2()
{
     cc8:	cf 93       	push	r28
     cca:	df 93       	push	r29
     ccc:	1f 92       	push	r1
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
	
	DIO_s8SETPinVal(C1,HIGH);
     cd2:	61 e0       	ldi	r22, 0x01	; 1
     cd4:	85 e1       	ldi	r24, 0x15	; 21
     cd6:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C2,HIGH);
     cda:	61 e0       	ldi	r22, 0x01	; 1
     cdc:	86 e1       	ldi	r24, 0x16	; 22
     cde:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C3,HIGH);
     ce2:	61 e0       	ldi	r22, 0x01	; 1
     ce4:	87 e1       	ldi	r24, 0x17	; 23
     ce6:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R1,HIGH);
     cea:	61 e0       	ldi	r22, 0x01	; 1
     cec:	82 e1       	ldi	r24, 0x12	; 18
     cee:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R3,HIGH);
     cf2:	61 e0       	ldi	r22, 0x01	; 1
     cf4:	84 e1       	ldi	r24, 0x14	; 20
     cf6:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R2,LOW);
     cfa:	60 e0       	ldi	r22, 0x00	; 0
     cfc:	83 e1       	ldi	r24, 0x13	; 19
     cfe:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_s8SETPinVal>
	
	Uchar8_t val = 1;
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C1,&val);
     d06:	be 01       	movw	r22, r28
     d08:	6f 5f       	subi	r22, 0xFF	; 255
     d0a:	7f 4f       	sbci	r23, 0xFF	; 255
     d0c:	85 e1       	ldi	r24, 0x15	; 21
     d0e:	0e 94 ae 09 	call	0x135c	; 0x135c <DIO_s8GETPinVal>
	if(val == 0)
     d12:	89 81       	ldd	r24, Y+1	; 0x01
     d14:	88 23       	and	r24, r24
     d16:	39 f0       	breq	.+14     	; 0xd26 <checkR2+0x5e>
     d18:	0b c0       	rjmp	.+22     	; 0xd30 <checkR2+0x68>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C1,&val);
     d1a:	be 01       	movw	r22, r28
     d1c:	6f 5f       	subi	r22, 0xFF	; 255
     d1e:	7f 4f       	sbci	r23, 0xFF	; 255
     d20:	85 e1       	ldi	r24, 0x15	; 21
     d22:	0e 94 ae 09 	call	0x135c	; 0x135c <DIO_s8GETPinVal>
	
	Uchar8_t val = 1;
	DIO_s8GETPinVal(C1,&val);
	if(val == 0)
	{
		while (val == 0)
     d26:	89 81       	ldd	r24, Y+1	; 0x01
     d28:	88 23       	and	r24, r24
     d2a:	b9 f3       	breq	.-18     	; 0xd1a <checkR2+0x52>
		{
			DIO_s8GETPinVal(C1,&val);
		}
		return KEY_4;
     d2c:	84 e0       	ldi	r24, 0x04	; 4
     d2e:	2e c0       	rjmp	.+92     	; 0xd8c <checkR2+0xc4>
	}
	val = 1;
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C2,&val);
     d34:	be 01       	movw	r22, r28
     d36:	6f 5f       	subi	r22, 0xFF	; 255
     d38:	7f 4f       	sbci	r23, 0xFF	; 255
     d3a:	86 e1       	ldi	r24, 0x16	; 22
     d3c:	0e 94 ae 09 	call	0x135c	; 0x135c <DIO_s8GETPinVal>
	if(val == 0)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	88 23       	and	r24, r24
     d44:	39 f0       	breq	.+14     	; 0xd54 <checkR2+0x8c>
     d46:	0b c0       	rjmp	.+22     	; 0xd5e <checkR2+0x96>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C2,&val);
     d48:	be 01       	movw	r22, r28
     d4a:	6f 5f       	subi	r22, 0xFF	; 255
     d4c:	7f 4f       	sbci	r23, 0xFF	; 255
     d4e:	86 e1       	ldi	r24, 0x16	; 22
     d50:	0e 94 ae 09 	call	0x135c	; 0x135c <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C2,&val);
	if(val == 0)
	{
		while (val == 0)
     d54:	89 81       	ldd	r24, Y+1	; 0x01
     d56:	88 23       	and	r24, r24
     d58:	b9 f3       	breq	.-18     	; 0xd48 <checkR2+0x80>
		{
			DIO_s8GETPinVal(C2,&val);
		}
		return KEY_5;
     d5a:	85 e0       	ldi	r24, 0x05	; 5
     d5c:	17 c0       	rjmp	.+46     	; 0xd8c <checkR2+0xc4>
	}
	val = 1;
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C3,&val);
     d62:	be 01       	movw	r22, r28
     d64:	6f 5f       	subi	r22, 0xFF	; 255
     d66:	7f 4f       	sbci	r23, 0xFF	; 255
     d68:	87 e1       	ldi	r24, 0x17	; 23
     d6a:	0e 94 ae 09 	call	0x135c	; 0x135c <DIO_s8GETPinVal>
	if(val == 0)
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	88 23       	and	r24, r24
     d72:	41 f0       	breq	.+16     	; 0xd84 <checkR2+0xbc>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_6;
	}
	return KEY_NOTHING;
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	0a c0       	rjmp	.+20     	; 0xd8c <checkR2+0xc4>
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C3,&val);
     d78:	be 01       	movw	r22, r28
     d7a:	6f 5f       	subi	r22, 0xFF	; 255
     d7c:	7f 4f       	sbci	r23, 0xFF	; 255
     d7e:	87 e1       	ldi	r24, 0x17	; 23
     d80:	0e 94 ae 09 	call	0x135c	; 0x135c <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
     d84:	89 81       	ldd	r24, Y+1	; 0x01
     d86:	88 23       	and	r24, r24
     d88:	b9 f3       	breq	.-18     	; 0xd78 <checkR2+0xb0>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_6;
     d8a:	86 e0       	ldi	r24, 0x06	; 6
	}
	return KEY_NOTHING;
	
}
     d8c:	0f 90       	pop	r0
     d8e:	df 91       	pop	r29
     d90:	cf 91       	pop	r28
     d92:	08 95       	ret

00000d94 <checkR3>:
EN_KEYPAD_BTNS checkR3()
{
     d94:	cf 93       	push	r28
     d96:	df 93       	push	r29
     d98:	1f 92       	push	r1
     d9a:	cd b7       	in	r28, 0x3d	; 61
     d9c:	de b7       	in	r29, 0x3e	; 62
	
	DIO_s8SETPinVal(C1,HIGH);
     d9e:	61 e0       	ldi	r22, 0x01	; 1
     da0:	85 e1       	ldi	r24, 0x15	; 21
     da2:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C2,HIGH);
     da6:	61 e0       	ldi	r22, 0x01	; 1
     da8:	86 e1       	ldi	r24, 0x16	; 22
     daa:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C3,HIGH);
     dae:	61 e0       	ldi	r22, 0x01	; 1
     db0:	87 e1       	ldi	r24, 0x17	; 23
     db2:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R1,HIGH);
     db6:	61 e0       	ldi	r22, 0x01	; 1
     db8:	82 e1       	ldi	r24, 0x12	; 18
     dba:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R2,HIGH);
     dbe:	61 e0       	ldi	r22, 0x01	; 1
     dc0:	83 e1       	ldi	r24, 0x13	; 19
     dc2:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R3,LOW);
     dc6:	60 e0       	ldi	r22, 0x00	; 0
     dc8:	84 e1       	ldi	r24, 0x14	; 20
     dca:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_s8SETPinVal>
	
	Uchar8_t val = 1;
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C1,&val);
     dd2:	be 01       	movw	r22, r28
     dd4:	6f 5f       	subi	r22, 0xFF	; 255
     dd6:	7f 4f       	sbci	r23, 0xFF	; 255
     dd8:	85 e1       	ldi	r24, 0x15	; 21
     dda:	0e 94 ae 09 	call	0x135c	; 0x135c <DIO_s8GETPinVal>
	if(val == 0)
     dde:	89 81       	ldd	r24, Y+1	; 0x01
     de0:	88 23       	and	r24, r24
     de2:	39 f0       	breq	.+14     	; 0xdf2 <checkR3+0x5e>
     de4:	0b c0       	rjmp	.+22     	; 0xdfc <checkR3+0x68>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C1,&val);
     de6:	be 01       	movw	r22, r28
     de8:	6f 5f       	subi	r22, 0xFF	; 255
     dea:	7f 4f       	sbci	r23, 0xFF	; 255
     dec:	85 e1       	ldi	r24, 0x15	; 21
     dee:	0e 94 ae 09 	call	0x135c	; 0x135c <DIO_s8GETPinVal>
	
	Uchar8_t val = 1;
	DIO_s8GETPinVal(C1,&val);
	if(val == 0)
	{
		while (val == 0)
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	88 23       	and	r24, r24
     df6:	b9 f3       	breq	.-18     	; 0xde6 <checkR3+0x52>
		{
			DIO_s8GETPinVal(C1,&val);
		}
		return KEY_7;
     df8:	87 e0       	ldi	r24, 0x07	; 7
     dfa:	2e c0       	rjmp	.+92     	; 0xe58 <checkR3+0xc4>
	}
	val = 1;
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C2,&val);
     e00:	be 01       	movw	r22, r28
     e02:	6f 5f       	subi	r22, 0xFF	; 255
     e04:	7f 4f       	sbci	r23, 0xFF	; 255
     e06:	86 e1       	ldi	r24, 0x16	; 22
     e08:	0e 94 ae 09 	call	0x135c	; 0x135c <DIO_s8GETPinVal>
	if(val == 0)
     e0c:	89 81       	ldd	r24, Y+1	; 0x01
     e0e:	88 23       	and	r24, r24
     e10:	39 f0       	breq	.+14     	; 0xe20 <checkR3+0x8c>
     e12:	0b c0       	rjmp	.+22     	; 0xe2a <checkR3+0x96>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C2,&val);
     e14:	be 01       	movw	r22, r28
     e16:	6f 5f       	subi	r22, 0xFF	; 255
     e18:	7f 4f       	sbci	r23, 0xFF	; 255
     e1a:	86 e1       	ldi	r24, 0x16	; 22
     e1c:	0e 94 ae 09 	call	0x135c	; 0x135c <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C2,&val);
	if(val == 0)
	{
		while (val == 0)
     e20:	89 81       	ldd	r24, Y+1	; 0x01
     e22:	88 23       	and	r24, r24
     e24:	b9 f3       	breq	.-18     	; 0xe14 <checkR3+0x80>
		{
			DIO_s8GETPinVal(C2,&val);
		}
		return KEY_8;
     e26:	88 e0       	ldi	r24, 0x08	; 8
     e28:	17 c0       	rjmp	.+46     	; 0xe58 <checkR3+0xc4>
	}
	val = 1;
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C3,&val);
     e2e:	be 01       	movw	r22, r28
     e30:	6f 5f       	subi	r22, 0xFF	; 255
     e32:	7f 4f       	sbci	r23, 0xFF	; 255
     e34:	87 e1       	ldi	r24, 0x17	; 23
     e36:	0e 94 ae 09 	call	0x135c	; 0x135c <DIO_s8GETPinVal>
	if(val == 0)
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
     e3c:	88 23       	and	r24, r24
     e3e:	41 f0       	breq	.+16     	; 0xe50 <checkR3+0xbc>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_9;
	}
	return KEY_NOTHING;
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	0a c0       	rjmp	.+20     	; 0xe58 <checkR3+0xc4>
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C3,&val);
     e44:	be 01       	movw	r22, r28
     e46:	6f 5f       	subi	r22, 0xFF	; 255
     e48:	7f 4f       	sbci	r23, 0xFF	; 255
     e4a:	87 e1       	ldi	r24, 0x17	; 23
     e4c:	0e 94 ae 09 	call	0x135c	; 0x135c <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
     e50:	89 81       	ldd	r24, Y+1	; 0x01
     e52:	88 23       	and	r24, r24
     e54:	b9 f3       	breq	.-18     	; 0xe44 <checkR3+0xb0>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_9;
     e56:	89 e0       	ldi	r24, 0x09	; 9
	}
	return KEY_NOTHING;
}
     e58:	0f 90       	pop	r0
     e5a:	df 91       	pop	r29
     e5c:	cf 91       	pop	r28
     e5e:	08 95       	ret

00000e60 <KEYPAD_GetButton>:
EN_KEYPAD_BTNS KEYPAD_GetButton()
{
	EN_KEYPAD_BTNS PRESSED = KEY_NOTHING;
	while(PRESSED == KEY_NOTHING)
	{
		PRESSED = checkR1();
     e60:	0e 94 fe 05 	call	0xbfc	; 0xbfc <checkR1>
		if(PRESSED != KEY_NOTHING) return PRESSED;
     e64:	81 11       	cpse	r24, r1
     e66:	06 c0       	rjmp	.+12     	; 0xe74 <KEYPAD_GetButton+0x14>
		PRESSED = checkR2();
     e68:	0e 94 64 06 	call	0xcc8	; 0xcc8 <checkR2>
		if(PRESSED != KEY_NOTHING) return PRESSED;
     e6c:	81 11       	cpse	r24, r1
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <KEYPAD_GetButton+0x14>
		PRESSED = checkR3();
     e70:	0e 94 ca 06 	call	0xd94	; 0xd94 <checkR3>
		if(PRESSED != KEY_NOTHING) return PRESSED;
		return KEY_NOTHING;
	}
	
	return KEY_NOTHING;
}
     e74:	08 95       	ret

00000e76 <HLCD_vidWritecmd>:
		for (Uchar8_t i = 0; i < 8 ; i++)
		{
			HLCD_vidWriteChar(pu8custom[i]);
		}
	}
}
     e76:	1f 93       	push	r17
     e78:	cf 93       	push	r28
     e7a:	df 93       	push	r29
     e7c:	d8 2f       	mov	r29, r24
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	82 e0       	ldi	r24, 0x02	; 2
     e82:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_s8SETPinVal>
     e86:	60 e0       	ldi	r22, 0x00	; 0
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_s8SETPinVal>
     e8e:	1d 2f       	mov	r17, r29
     e90:	12 95       	swap	r17
     e92:	1f 70       	andi	r17, 0x0F	; 15
     e94:	c0 e0       	ldi	r28, 0x00	; 0
     e96:	11 c0       	rjmp	.+34     	; 0xeba <HLCD_vidWritecmd+0x44>
     e98:	ec 2f       	mov	r30, r28
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	61 2f       	mov	r22, r17
     e9e:	70 e0       	ldi	r23, 0x00	; 0
     ea0:	0c 2e       	mov	r0, r28
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <HLCD_vidWritecmd+0x32>
     ea4:	75 95       	asr	r23
     ea6:	67 95       	ror	r22
     ea8:	0a 94       	dec	r0
     eaa:	e2 f7       	brpl	.-8      	; 0xea4 <HLCD_vidWritecmd+0x2e>
     eac:	61 70       	andi	r22, 0x01	; 1
     eae:	ea 58       	subi	r30, 0x8A	; 138
     eb0:	fe 4f       	sbci	r31, 0xFE	; 254
     eb2:	80 81       	ld	r24, Z
     eb4:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_s8SETPinVal>
     eb8:	cf 5f       	subi	r28, 0xFF	; 255
     eba:	c4 30       	cpi	r28, 0x04	; 4
     ebc:	68 f3       	brcs	.-38     	; 0xe98 <HLCD_vidWritecmd+0x22>
     ebe:	61 e0       	ldi	r22, 0x01	; 1
     ec0:	83 e0       	ldi	r24, 0x03	; 3
     ec2:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_s8SETPinVal>
     ec6:	89 ef       	ldi	r24, 0xF9	; 249
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	01 97       	sbiw	r24, 0x01	; 1
     ecc:	f1 f7       	brne	.-4      	; 0xeca <HLCD_vidWritecmd+0x54>
     ece:	00 c0       	rjmp	.+0      	; 0xed0 <HLCD_vidWritecmd+0x5a>
     ed0:	00 00       	nop
     ed2:	60 e0       	ldi	r22, 0x00	; 0
     ed4:	83 e0       	ldi	r24, 0x03	; 3
     ed6:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_s8SETPinVal>
     eda:	92 e4       	ldi	r25, 0x42	; 66
     edc:	9a 95       	dec	r25
     ede:	f1 f7       	brne	.-4      	; 0xedc <HLCD_vidWritecmd+0x66>
     ee0:	00 c0       	rjmp	.+0      	; 0xee2 <HLCD_vidWritecmd+0x6c>
     ee2:	df 70       	andi	r29, 0x0F	; 15
     ee4:	c0 e0       	ldi	r28, 0x00	; 0
     ee6:	11 c0       	rjmp	.+34     	; 0xf0a <HLCD_vidWritecmd+0x94>
     ee8:	ec 2f       	mov	r30, r28
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	6d 2f       	mov	r22, r29
     eee:	70 e0       	ldi	r23, 0x00	; 0
     ef0:	0c 2e       	mov	r0, r28
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <HLCD_vidWritecmd+0x82>
     ef4:	75 95       	asr	r23
     ef6:	67 95       	ror	r22
     ef8:	0a 94       	dec	r0
     efa:	e2 f7       	brpl	.-8      	; 0xef4 <HLCD_vidWritecmd+0x7e>
     efc:	61 70       	andi	r22, 0x01	; 1
     efe:	ea 58       	subi	r30, 0x8A	; 138
     f00:	fe 4f       	sbci	r31, 0xFE	; 254
     f02:	80 81       	ld	r24, Z
     f04:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_s8SETPinVal>
     f08:	cf 5f       	subi	r28, 0xFF	; 255
     f0a:	c4 30       	cpi	r28, 0x04	; 4
     f0c:	68 f3       	brcs	.-38     	; 0xee8 <HLCD_vidWritecmd+0x72>
     f0e:	61 e0       	ldi	r22, 0x01	; 1
     f10:	83 e0       	ldi	r24, 0x03	; 3
     f12:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_s8SETPinVal>
     f16:	89 ef       	ldi	r24, 0xF9	; 249
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	01 97       	sbiw	r24, 0x01	; 1
     f1c:	f1 f7       	brne	.-4      	; 0xf1a <HLCD_vidWritecmd+0xa4>
     f1e:	00 c0       	rjmp	.+0      	; 0xf20 <HLCD_vidWritecmd+0xaa>
     f20:	00 00       	nop
     f22:	60 e0       	ldi	r22, 0x00	; 0
     f24:	83 e0       	ldi	r24, 0x03	; 3
     f26:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_s8SETPinVal>
     f2a:	83 ef       	ldi	r24, 0xF3	; 243
     f2c:	91 e0       	ldi	r25, 0x01	; 1
     f2e:	01 97       	sbiw	r24, 0x01	; 1
     f30:	f1 f7       	brne	.-4      	; 0xf2e <HLCD_vidWritecmd+0xb8>
     f32:	00 c0       	rjmp	.+0      	; 0xf34 <HLCD_vidWritecmd+0xbe>
     f34:	00 00       	nop
     f36:	df 91       	pop	r29
     f38:	cf 91       	pop	r28
     f3a:	1f 91       	pop	r17
     f3c:	08 95       	ret

00000f3e <HLCD_vidInit>:
     f3e:	cf 93       	push	r28
     f40:	c0 e0       	ldi	r28, 0x00	; 0
     f42:	09 c0       	rjmp	.+18     	; 0xf56 <HLCD_vidInit+0x18>
     f44:	ec 2f       	mov	r30, r28
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	ea 58       	subi	r30, 0x8A	; 138
     f4a:	fe 4f       	sbci	r31, 0xFE	; 254
     f4c:	61 e0       	ldi	r22, 0x01	; 1
     f4e:	80 81       	ld	r24, Z
     f50:	0e 94 2e 09 	call	0x125c	; 0x125c <DIO_s8SETPinDir>
     f54:	cf 5f       	subi	r28, 0xFF	; 255
     f56:	c4 30       	cpi	r28, 0x04	; 4
     f58:	a8 f3       	brcs	.-22     	; 0xf44 <HLCD_vidInit+0x6>
     f5a:	61 e0       	ldi	r22, 0x01	; 1
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	0e 94 2e 09 	call	0x125c	; 0x125c <DIO_s8SETPinDir>
     f62:	61 e0       	ldi	r22, 0x01	; 1
     f64:	82 e0       	ldi	r24, 0x02	; 2
     f66:	0e 94 2e 09 	call	0x125c	; 0x125c <DIO_s8SETPinDir>
     f6a:	61 e0       	ldi	r22, 0x01	; 1
     f6c:	83 e0       	ldi	r24, 0x03	; 3
     f6e:	0e 94 2e 09 	call	0x125c	; 0x125c <DIO_s8SETPinDir>
     f72:	8f e0       	ldi	r24, 0x0F	; 15
     f74:	97 e2       	ldi	r25, 0x27	; 39
     f76:	01 97       	sbiw	r24, 0x01	; 1
     f78:	f1 f7       	brne	.-4      	; 0xf76 <HLCD_vidInit+0x38>
     f7a:	00 c0       	rjmp	.+0      	; 0xf7c <HLCD_vidInit+0x3e>
     f7c:	00 00       	nop
     f7e:	82 e0       	ldi	r24, 0x02	; 2
     f80:	0e 94 3b 07 	call	0xe76	; 0xe76 <HLCD_vidWritecmd>
     f84:	89 ef       	ldi	r24, 0xF9	; 249
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	01 97       	sbiw	r24, 0x01	; 1
     f8a:	f1 f7       	brne	.-4      	; 0xf88 <HLCD_vidInit+0x4a>
     f8c:	00 c0       	rjmp	.+0      	; 0xf8e <HLCD_vidInit+0x50>
     f8e:	00 00       	nop
     f90:	88 e2       	ldi	r24, 0x28	; 40
     f92:	0e 94 3b 07 	call	0xe76	; 0xe76 <HLCD_vidWritecmd>
     f96:	89 ef       	ldi	r24, 0xF9	; 249
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	01 97       	sbiw	r24, 0x01	; 1
     f9c:	f1 f7       	brne	.-4      	; 0xf9a <HLCD_vidInit+0x5c>
     f9e:	00 c0       	rjmp	.+0      	; 0xfa0 <HLCD_vidInit+0x62>
     fa0:	00 00       	nop
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	0e 94 3b 07 	call	0xe76	; 0xe76 <HLCD_vidWritecmd>
     fa8:	87 ee       	ldi	r24, 0xE7	; 231
     faa:	93 e0       	ldi	r25, 0x03	; 3
     fac:	01 97       	sbiw	r24, 0x01	; 1
     fae:	f1 f7       	brne	.-4      	; 0xfac <HLCD_vidInit+0x6e>
     fb0:	00 c0       	rjmp	.+0      	; 0xfb2 <HLCD_vidInit+0x74>
     fb2:	00 00       	nop
     fb4:	86 e0       	ldi	r24, 0x06	; 6
     fb6:	0e 94 3b 07 	call	0xe76	; 0xe76 <HLCD_vidWritecmd>
     fba:	89 ef       	ldi	r24, 0xF9	; 249
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	01 97       	sbiw	r24, 0x01	; 1
     fc0:	f1 f7       	brne	.-4      	; 0xfbe <HLCD_vidInit+0x80>
     fc2:	00 c0       	rjmp	.+0      	; 0xfc4 <HLCD_vidInit+0x86>
     fc4:	00 00       	nop
     fc6:	8e e0       	ldi	r24, 0x0E	; 14
     fc8:	0e 94 3b 07 	call	0xe76	; 0xe76 <HLCD_vidWritecmd>
     fcc:	89 ef       	ldi	r24, 0xF9	; 249
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	01 97       	sbiw	r24, 0x01	; 1
     fd2:	f1 f7       	brne	.-4      	; 0xfd0 <HLCD_vidInit+0x92>
     fd4:	00 c0       	rjmp	.+0      	; 0xfd6 <HLCD_vidInit+0x98>
     fd6:	00 00       	nop
     fd8:	cf 91       	pop	r28
     fda:	08 95       	ret

00000fdc <HLCD_vidWriteChar>:
     fdc:	1f 93       	push	r17
     fde:	cf 93       	push	r28
     fe0:	df 93       	push	r29
     fe2:	d8 2f       	mov	r29, r24
     fe4:	60 e0       	ldi	r22, 0x00	; 0
     fe6:	82 e0       	ldi	r24, 0x02	; 2
     fe8:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_s8SETPinVal>
     fec:	61 e0       	ldi	r22, 0x01	; 1
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_s8SETPinVal>
     ff4:	1d 2f       	mov	r17, r29
     ff6:	12 95       	swap	r17
     ff8:	1f 70       	andi	r17, 0x0F	; 15
     ffa:	c0 e0       	ldi	r28, 0x00	; 0
     ffc:	11 c0       	rjmp	.+34     	; 0x1020 <HLCD_vidWriteChar+0x44>
     ffe:	ec 2f       	mov	r30, r28
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	61 2f       	mov	r22, r17
    1004:	70 e0       	ldi	r23, 0x00	; 0
    1006:	0c 2e       	mov	r0, r28
    1008:	02 c0       	rjmp	.+4      	; 0x100e <HLCD_vidWriteChar+0x32>
    100a:	75 95       	asr	r23
    100c:	67 95       	ror	r22
    100e:	0a 94       	dec	r0
    1010:	e2 f7       	brpl	.-8      	; 0x100a <HLCD_vidWriteChar+0x2e>
    1012:	61 70       	andi	r22, 0x01	; 1
    1014:	ea 58       	subi	r30, 0x8A	; 138
    1016:	fe 4f       	sbci	r31, 0xFE	; 254
    1018:	80 81       	ld	r24, Z
    101a:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_s8SETPinVal>
    101e:	cf 5f       	subi	r28, 0xFF	; 255
    1020:	c4 30       	cpi	r28, 0x04	; 4
    1022:	68 f3       	brcs	.-38     	; 0xffe <HLCD_vidWriteChar+0x22>
    1024:	61 e0       	ldi	r22, 0x01	; 1
    1026:	83 e0       	ldi	r24, 0x03	; 3
    1028:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_s8SETPinVal>
    102c:	89 ef       	ldi	r24, 0xF9	; 249
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	01 97       	sbiw	r24, 0x01	; 1
    1032:	f1 f7       	brne	.-4      	; 0x1030 <HLCD_vidWriteChar+0x54>
    1034:	00 c0       	rjmp	.+0      	; 0x1036 <HLCD_vidWriteChar+0x5a>
    1036:	00 00       	nop
    1038:	60 e0       	ldi	r22, 0x00	; 0
    103a:	83 e0       	ldi	r24, 0x03	; 3
    103c:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_s8SETPinVal>
    1040:	92 e4       	ldi	r25, 0x42	; 66
    1042:	9a 95       	dec	r25
    1044:	f1 f7       	brne	.-4      	; 0x1042 <HLCD_vidWriteChar+0x66>
    1046:	00 c0       	rjmp	.+0      	; 0x1048 <HLCD_vidWriteChar+0x6c>
    1048:	df 70       	andi	r29, 0x0F	; 15
    104a:	c0 e0       	ldi	r28, 0x00	; 0
    104c:	11 c0       	rjmp	.+34     	; 0x1070 <HLCD_vidWriteChar+0x94>
    104e:	ec 2f       	mov	r30, r28
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	6d 2f       	mov	r22, r29
    1054:	70 e0       	ldi	r23, 0x00	; 0
    1056:	0c 2e       	mov	r0, r28
    1058:	02 c0       	rjmp	.+4      	; 0x105e <HLCD_vidWriteChar+0x82>
    105a:	75 95       	asr	r23
    105c:	67 95       	ror	r22
    105e:	0a 94       	dec	r0
    1060:	e2 f7       	brpl	.-8      	; 0x105a <HLCD_vidWriteChar+0x7e>
    1062:	61 70       	andi	r22, 0x01	; 1
    1064:	ea 58       	subi	r30, 0x8A	; 138
    1066:	fe 4f       	sbci	r31, 0xFE	; 254
    1068:	80 81       	ld	r24, Z
    106a:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_s8SETPinVal>
    106e:	cf 5f       	subi	r28, 0xFF	; 255
    1070:	c4 30       	cpi	r28, 0x04	; 4
    1072:	68 f3       	brcs	.-38     	; 0x104e <HLCD_vidWriteChar+0x72>
    1074:	61 e0       	ldi	r22, 0x01	; 1
    1076:	83 e0       	ldi	r24, 0x03	; 3
    1078:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_s8SETPinVal>
    107c:	89 ef       	ldi	r24, 0xF9	; 249
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	01 97       	sbiw	r24, 0x01	; 1
    1082:	f1 f7       	brne	.-4      	; 0x1080 <HLCD_vidWriteChar+0xa4>
    1084:	00 c0       	rjmp	.+0      	; 0x1086 <HLCD_vidWriteChar+0xaa>
    1086:	00 00       	nop
    1088:	60 e0       	ldi	r22, 0x00	; 0
    108a:	83 e0       	ldi	r24, 0x03	; 3
    108c:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_s8SETPinVal>
    1090:	83 ef       	ldi	r24, 0xF3	; 243
    1092:	91 e0       	ldi	r25, 0x01	; 1
    1094:	01 97       	sbiw	r24, 0x01	; 1
    1096:	f1 f7       	brne	.-4      	; 0x1094 <HLCD_vidWriteChar+0xb8>
    1098:	00 c0       	rjmp	.+0      	; 0x109a <HLCD_vidWriteChar+0xbe>
    109a:	00 00       	nop
    109c:	df 91       	pop	r29
    109e:	cf 91       	pop	r28
    10a0:	1f 91       	pop	r17
    10a2:	08 95       	ret

000010a4 <HLCD_ClrDisplay>:
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	0e 94 3b 07 	call	0xe76	; 0xe76 <HLCD_vidWritecmd>
    10aa:	87 ee       	ldi	r24, 0xE7	; 231
    10ac:	93 e0       	ldi	r25, 0x03	; 3
    10ae:	01 97       	sbiw	r24, 0x01	; 1
    10b0:	f1 f7       	brne	.-4      	; 0x10ae <HLCD_ClrDisplay+0xa>
    10b2:	00 c0       	rjmp	.+0      	; 0x10b4 <HLCD_ClrDisplay+0x10>
    10b4:	00 00       	nop
    10b6:	82 e0       	ldi	r24, 0x02	; 2
    10b8:	0e 94 3b 07 	call	0xe76	; 0xe76 <HLCD_vidWritecmd>
    10bc:	87 ee       	ldi	r24, 0xE7	; 231
    10be:	93 e0       	ldi	r25, 0x03	; 3
    10c0:	01 97       	sbiw	r24, 0x01	; 1
    10c2:	f1 f7       	brne	.-4      	; 0x10c0 <HLCD_ClrDisplay+0x1c>
    10c4:	00 c0       	rjmp	.+0      	; 0x10c6 <HLCD_ClrDisplay+0x22>
    10c6:	00 00       	nop
    10c8:	08 95       	ret

000010ca <HLCD_gotoXY>:
    10ca:	81 11       	cpse	r24, r1
    10cc:	08 c0       	rjmp	.+16     	; 0x10de <HLCD_gotoXY+0x14>
    10ce:	60 31       	cpi	r22, 0x10	; 16
    10d0:	30 f4       	brcc	.+12     	; 0x10de <HLCD_gotoXY+0x14>
    10d2:	86 2f       	mov	r24, r22
    10d4:	8f 70       	andi	r24, 0x0F	; 15
    10d6:	80 68       	ori	r24, 0x80	; 128
    10d8:	0e 94 3b 07 	call	0xe76	; 0xe76 <HLCD_vidWritecmd>
    10dc:	08 95       	ret
    10de:	81 30       	cpi	r24, 0x01	; 1
    10e0:	39 f4       	brne	.+14     	; 0x10f0 <HLCD_gotoXY+0x26>
    10e2:	60 31       	cpi	r22, 0x10	; 16
    10e4:	28 f4       	brcc	.+10     	; 0x10f0 <HLCD_gotoXY+0x26>
    10e6:	86 2f       	mov	r24, r22
    10e8:	8f 70       	andi	r24, 0x0F	; 15
    10ea:	80 6c       	ori	r24, 0xC0	; 192
    10ec:	0e 94 3b 07 	call	0xe76	; 0xe76 <HLCD_vidWritecmd>
    10f0:	08 95       	ret

000010f2 <HLCD_WriteString>:
    10f2:	0f 93       	push	r16
    10f4:	1f 93       	push	r17
    10f6:	cf 93       	push	r28
    10f8:	df 93       	push	r29
    10fa:	8c 01       	movw	r16, r24
    10fc:	fc 01       	movw	r30, r24
    10fe:	80 81       	ld	r24, Z
    1100:	c0 e0       	ldi	r28, 0x00	; 0
    1102:	d0 e0       	ldi	r29, 0x00	; 0
    1104:	07 c0       	rjmp	.+14     	; 0x1114 <HLCD_WriteString+0x22>
    1106:	0e 94 ee 07 	call	0xfdc	; 0xfdc <HLCD_vidWriteChar>
    110a:	21 96       	adiw	r28, 0x01	; 1
    110c:	f8 01       	movw	r30, r16
    110e:	ec 0f       	add	r30, r28
    1110:	fd 1f       	adc	r31, r29
    1112:	80 81       	ld	r24, Z
    1114:	81 11       	cpse	r24, r1
    1116:	f7 cf       	rjmp	.-18     	; 0x1106 <HLCD_WriteString+0x14>
    1118:	df 91       	pop	r29
    111a:	cf 91       	pop	r28
    111c:	1f 91       	pop	r17
    111e:	0f 91       	pop	r16
    1120:	08 95       	ret

00001122 <HLCD_DisplayFloat>:
 * input param 	:
 * 				  f32_a_number -> the floating point number to display
 * return		: void
 * */
void HLCD_DisplayFloat(float32_t f32_a_number)
{
    1122:	8f 92       	push	r8
    1124:	9f 92       	push	r9
    1126:	af 92       	push	r10
    1128:	bf 92       	push	r11
    112a:	cf 92       	push	r12
    112c:	df 92       	push	r13
    112e:	ef 92       	push	r14
    1130:	ff 92       	push	r15
    1132:	1f 93       	push	r17
    1134:	cf 93       	push	r28
    1136:	df 93       	push	r29
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	2c 97       	sbiw	r28, 0x0c	; 12
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	f8 94       	cli
    1142:	de bf       	out	0x3e, r29	; 62
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	cd bf       	out	0x3d, r28	; 61
    1148:	4b 01       	movw	r8, r22
    114a:	5c 01       	movw	r10, r24
	Uchar8_t arr_l_NumString[12];
	Uchar8_t u8_l_NumIterator = 3, u8_l_StrLen, u8_l_tempVar, u8_l_decimal;
	Uint32_t u32_l_integer;

	/* Get the integer part */
	u32_l_integer = (Uint16_t)f32_a_number;
    114c:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <__fixunssfsi>
    1150:	6b 01       	movw	r12, r22
    1152:	e1 2c       	mov	r14, r1
    1154:	f1 2c       	mov	r15, r1
	
	/* Get the first two decimal places */
	u8_l_decimal = (Uint16_t)((f32_a_number - u32_l_integer) * 100);
    1156:	c7 01       	movw	r24, r14
    1158:	b6 01       	movw	r22, r12
    115a:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__floatunsisf>
    115e:	9b 01       	movw	r18, r22
    1160:	ac 01       	movw	r20, r24
    1162:	c5 01       	movw	r24, r10
    1164:	b4 01       	movw	r22, r8
    1166:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <__subsf3>
    116a:	20 e0       	ldi	r18, 0x00	; 0
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	48 ec       	ldi	r20, 0xC8	; 200
    1170:	52 e4       	ldi	r21, 0x42	; 66
    1172:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__mulsf3>
    1176:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <__fixunssfsi>

	/* Get decimal digits as characters */
	arr_l_NumString[0] = u8_l_decimal % 10 + '0';
    117a:	8d ec       	ldi	r24, 0xCD	; 205
    117c:	68 9f       	mul	r22, r24
    117e:	81 2d       	mov	r24, r1
    1180:	11 24       	eor	r1, r1
    1182:	86 95       	lsr	r24
    1184:	86 95       	lsr	r24
    1186:	86 95       	lsr	r24
    1188:	28 2f       	mov	r18, r24
    118a:	22 0f       	add	r18, r18
    118c:	92 2f       	mov	r25, r18
    118e:	99 0f       	add	r25, r25
    1190:	99 0f       	add	r25, r25
    1192:	92 0f       	add	r25, r18
    1194:	69 1b       	sub	r22, r25
    1196:	60 5d       	subi	r22, 0xD0	; 208
    1198:	69 83       	std	Y+1, r22	; 0x01
	arr_l_NumString[1] = u8_l_decimal / 10 + '0';
    119a:	80 5d       	subi	r24, 0xD0	; 208
    119c:	8a 83       	std	Y+2, r24	; 0x02
	
	arr_l_NumString[2] = '.';
    119e:	8e e2       	ldi	r24, 0x2E	; 46
    11a0:	8b 83       	std	Y+3, r24	; 0x03
 * return		: void
 * */
void HLCD_DisplayFloat(float32_t f32_a_number)
{
	Uchar8_t arr_l_NumString[12];
	Uchar8_t u8_l_NumIterator = 3, u8_l_StrLen, u8_l_tempVar, u8_l_decimal;
    11a2:	13 e0       	ldi	r17, 0x03	; 3
	arr_l_NumString[1] = u8_l_decimal / 10 + '0';
	
	arr_l_NumString[2] = '.';
	
	/* Get integer digits as characters */
	while (u32_l_integer > 0) 
    11a4:	15 c0       	rjmp	.+42     	; 0x11d0 <HLCD_DisplayFloat+0xae>
	{
		arr_l_NumString[u8_l_NumIterator] = (u32_l_integer % 10) + '0';
    11a6:	c7 01       	movw	r24, r14
    11a8:	b6 01       	movw	r22, r12
    11aa:	2a e0       	ldi	r18, 0x0A	; 10
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	40 e0       	ldi	r20, 0x00	; 0
    11b0:	50 e0       	ldi	r21, 0x00	; 0
    11b2:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__udivmodsi4>
    11b6:	e1 e0       	ldi	r30, 0x01	; 1
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	ec 0f       	add	r30, r28
    11bc:	fd 1f       	adc	r31, r29
    11be:	e1 0f       	add	r30, r17
    11c0:	f1 1d       	adc	r31, r1
    11c2:	60 5d       	subi	r22, 0xD0	; 208
    11c4:	60 83       	st	Z, r22
		u32_l_integer /= 10;
    11c6:	c2 2e       	mov	r12, r18
    11c8:	d3 2e       	mov	r13, r19
    11ca:	e4 2e       	mov	r14, r20
    11cc:	f5 2e       	mov	r15, r21
		u8_l_NumIterator++;
    11ce:	1f 5f       	subi	r17, 0xFF	; 255
	arr_l_NumString[1] = u8_l_decimal / 10 + '0';
	
	arr_l_NumString[2] = '.';
	
	/* Get integer digits as characters */
	while (u32_l_integer > 0) 
    11d0:	c1 14       	cp	r12, r1
    11d2:	d1 04       	cpc	r13, r1
    11d4:	e1 04       	cpc	r14, r1
    11d6:	f1 04       	cpc	r15, r1
    11d8:	31 f7       	brne	.-52     	; 0x11a6 <HLCD_DisplayFloat+0x84>
		u32_l_integer /= 10;
		u8_l_NumIterator++;
	}
	
	/* Terminate String */
	arr_l_NumString[u8_l_NumIterator] = '\0';
    11da:	41 2f       	mov	r20, r17
    11dc:	50 e0       	ldi	r21, 0x00	; 0
    11de:	e1 e0       	ldi	r30, 0x01	; 1
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	ec 0f       	add	r30, r28
    11e4:	fd 1f       	adc	r31, r29
    11e6:	e4 0f       	add	r30, r20
    11e8:	f5 1f       	adc	r31, r21
    11ea:	10 82       	st	Z, r1
	
	u8_l_StrLen = u8_l_NumIterator;

	/* Reverse String */
	for (u8_l_NumIterator = 0; u8_l_NumIterator< u8_l_StrLen/2; u8_l_NumIterator++) 
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	17 c0       	rjmp	.+46     	; 0x121e <HLCD_DisplayFloat+0xfc>
	{
		u8_l_tempVar = arr_l_NumString[u8_l_NumIterator];
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	a1 e0       	ldi	r26, 0x01	; 1
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	ac 0f       	add	r26, r28
    11fa:	bd 1f       	adc	r27, r29
    11fc:	a2 0f       	add	r26, r18
    11fe:	b3 1f       	adc	r27, r19
    1200:	9c 91       	ld	r25, X
		arr_l_NumString[u8_l_NumIterator] = arr_l_NumString[u8_l_StrLen - u8_l_NumIterator - 1];
    1202:	fa 01       	movw	r30, r20
    1204:	e2 1b       	sub	r30, r18
    1206:	f3 0b       	sbc	r31, r19
    1208:	31 97       	sbiw	r30, 0x01	; 1
    120a:	21 e0       	ldi	r18, 0x01	; 1
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	2c 0f       	add	r18, r28
    1210:	3d 1f       	adc	r19, r29
    1212:	e2 0f       	add	r30, r18
    1214:	f3 1f       	adc	r31, r19
    1216:	20 81       	ld	r18, Z
    1218:	2c 93       	st	X, r18
		arr_l_NumString[u8_l_StrLen - u8_l_NumIterator - 1] = u8_l_tempVar;
    121a:	90 83       	st	Z, r25
	arr_l_NumString[u8_l_NumIterator] = '\0';
	
	u8_l_StrLen = u8_l_NumIterator;

	/* Reverse String */
	for (u8_l_NumIterator = 0; u8_l_NumIterator< u8_l_StrLen/2; u8_l_NumIterator++) 
    121c:	8f 5f       	subi	r24, 0xFF	; 255
    121e:	91 2f       	mov	r25, r17
    1220:	96 95       	lsr	r25
    1222:	89 17       	cp	r24, r25
    1224:	28 f3       	brcs	.-54     	; 0x11f0 <HLCD_DisplayFloat+0xce>
		arr_l_NumString[u8_l_NumIterator] = arr_l_NumString[u8_l_StrLen - u8_l_NumIterator - 1];
		arr_l_NumString[u8_l_StrLen - u8_l_NumIterator - 1] = u8_l_tempVar;
	}

	/* Display Number */
	HLCD_WriteString(arr_l_NumString);
    1226:	ce 01       	movw	r24, r28
    1228:	01 96       	adiw	r24, 0x01	; 1
    122a:	0e 94 79 08 	call	0x10f2	; 0x10f2 <HLCD_WriteString>
}
    122e:	2c 96       	adiw	r28, 0x0c	; 12
    1230:	0f b6       	in	r0, 0x3f	; 63
    1232:	f8 94       	cli
    1234:	de bf       	out	0x3e, r29	; 62
    1236:	0f be       	out	0x3f, r0	; 63
    1238:	cd bf       	out	0x3d, r28	; 61
    123a:	df 91       	pop	r29
    123c:	cf 91       	pop	r28
    123e:	1f 91       	pop	r17
    1240:	ff 90       	pop	r15
    1242:	ef 90       	pop	r14
    1244:	df 90       	pop	r13
    1246:	cf 90       	pop	r12
    1248:	bf 90       	pop	r11
    124a:	af 90       	pop	r10
    124c:	9f 90       	pop	r9
    124e:	8f 90       	pop	r8
    1250:	08 95       	ret

00001252 <main>:
 */ 
#define F_CPU 8000000UL
#include "APP/app.h"
void main(void)
{
	APP_Init();
    1252:	0e 94 70 00 	call	0xe0	; 0xe0 <APP_Init>

    while (1) 
    {
		APP_Start();
    1256:	0e 94 90 00 	call	0x120	; 0x120 <APP_Start>
    125a:	fd cf       	rjmp	.-6      	; 0x1256 <main+0x4>

0000125c <DIO_s8SETPinDir>:
	{
		errStatus = E_NOK;
	}
	return errStatus;

}
    125c:	80 32       	cpi	r24, 0x20	; 32
    125e:	c0 f5       	brcc	.+112    	; 0x12d0 <DIO_s8SETPinDir+0x74>
    1260:	62 30       	cpi	r22, 0x02	; 2
    1262:	c0 f5       	brcc	.+112    	; 0x12d4 <DIO_s8SETPinDir+0x78>
    1264:	e8 2f       	mov	r30, r24
    1266:	e6 95       	lsr	r30
    1268:	e6 95       	lsr	r30
    126a:	e6 95       	lsr	r30
    126c:	87 70       	andi	r24, 0x07	; 7
    126e:	61 11       	cpse	r22, r1
    1270:	17 c0       	rjmp	.+46     	; 0x12a0 <DIO_s8SETPinDir+0x44>
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	ee 0f       	add	r30, r30
    1276:	ff 1f       	adc	r31, r31
    1278:	ee 57       	subi	r30, 0x7E	; 126
    127a:	fe 4f       	sbci	r31, 0xFE	; 254
    127c:	01 90       	ld	r0, Z+
    127e:	f0 81       	ld	r31, Z
    1280:	e0 2d       	mov	r30, r0
    1282:	40 81       	ld	r20, Z
    1284:	21 e0       	ldi	r18, 0x01	; 1
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	b9 01       	movw	r22, r18
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <DIO_s8SETPinDir+0x34>
    128c:	66 0f       	add	r22, r22
    128e:	77 1f       	adc	r23, r23
    1290:	8a 95       	dec	r24
    1292:	e2 f7       	brpl	.-8      	; 0x128c <DIO_s8SETPinDir+0x30>
    1294:	cb 01       	movw	r24, r22
    1296:	80 95       	com	r24
    1298:	84 23       	and	r24, r20
    129a:	80 83       	st	Z, r24
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	08 95       	ret
    12a0:	61 30       	cpi	r22, 0x01	; 1
    12a2:	d1 f4       	brne	.+52     	; 0x12d8 <DIO_s8SETPinDir+0x7c>
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	ee 0f       	add	r30, r30
    12a8:	ff 1f       	adc	r31, r31
    12aa:	ee 57       	subi	r30, 0x7E	; 126
    12ac:	fe 4f       	sbci	r31, 0xFE	; 254
    12ae:	01 90       	ld	r0, Z+
    12b0:	f0 81       	ld	r31, Z
    12b2:	e0 2d       	mov	r30, r0
    12b4:	40 81       	ld	r20, Z
    12b6:	21 e0       	ldi	r18, 0x01	; 1
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	b9 01       	movw	r22, r18
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <DIO_s8SETPinDir+0x66>
    12be:	66 0f       	add	r22, r22
    12c0:	77 1f       	adc	r23, r23
    12c2:	8a 95       	dec	r24
    12c4:	e2 f7       	brpl	.-8      	; 0x12be <DIO_s8SETPinDir+0x62>
    12c6:	cb 01       	movw	r24, r22
    12c8:	84 2b       	or	r24, r20
    12ca:	80 83       	st	Z, r24
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	08 95       	ret
    12d0:	8f ef       	ldi	r24, 0xFF	; 255
    12d2:	08 95       	ret
    12d4:	8f ef       	ldi	r24, 0xFF	; 255
    12d6:	08 95       	ret
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	08 95       	ret

000012dc <DIO_s8SETPinVal>:
    12dc:	80 32       	cpi	r24, 0x20	; 32
    12de:	c0 f5       	brcc	.+112    	; 0x1350 <DIO_s8SETPinVal+0x74>
    12e0:	62 30       	cpi	r22, 0x02	; 2
    12e2:	c0 f5       	brcc	.+112    	; 0x1354 <DIO_s8SETPinVal+0x78>
    12e4:	e8 2f       	mov	r30, r24
    12e6:	e6 95       	lsr	r30
    12e8:	e6 95       	lsr	r30
    12ea:	e6 95       	lsr	r30
    12ec:	87 70       	andi	r24, 0x07	; 7
    12ee:	61 11       	cpse	r22, r1
    12f0:	17 c0       	rjmp	.+46     	; 0x1320 <DIO_s8SETPinVal+0x44>
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	ee 0f       	add	r30, r30
    12f6:	ff 1f       	adc	r31, r31
    12f8:	e6 57       	subi	r30, 0x76	; 118
    12fa:	fe 4f       	sbci	r31, 0xFE	; 254
    12fc:	01 90       	ld	r0, Z+
    12fe:	f0 81       	ld	r31, Z
    1300:	e0 2d       	mov	r30, r0
    1302:	40 81       	ld	r20, Z
    1304:	21 e0       	ldi	r18, 0x01	; 1
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	b9 01       	movw	r22, r18
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <DIO_s8SETPinVal+0x34>
    130c:	66 0f       	add	r22, r22
    130e:	77 1f       	adc	r23, r23
    1310:	8a 95       	dec	r24
    1312:	e2 f7       	brpl	.-8      	; 0x130c <DIO_s8SETPinVal+0x30>
    1314:	cb 01       	movw	r24, r22
    1316:	80 95       	com	r24
    1318:	84 23       	and	r24, r20
    131a:	80 83       	st	Z, r24
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	08 95       	ret
    1320:	61 30       	cpi	r22, 0x01	; 1
    1322:	d1 f4       	brne	.+52     	; 0x1358 <DIO_s8SETPinVal+0x7c>
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	ee 0f       	add	r30, r30
    1328:	ff 1f       	adc	r31, r31
    132a:	e6 57       	subi	r30, 0x76	; 118
    132c:	fe 4f       	sbci	r31, 0xFE	; 254
    132e:	01 90       	ld	r0, Z+
    1330:	f0 81       	ld	r31, Z
    1332:	e0 2d       	mov	r30, r0
    1334:	40 81       	ld	r20, Z
    1336:	21 e0       	ldi	r18, 0x01	; 1
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	b9 01       	movw	r22, r18
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <DIO_s8SETPinVal+0x66>
    133e:	66 0f       	add	r22, r22
    1340:	77 1f       	adc	r23, r23
    1342:	8a 95       	dec	r24
    1344:	e2 f7       	brpl	.-8      	; 0x133e <DIO_s8SETPinVal+0x62>
    1346:	cb 01       	movw	r24, r22
    1348:	84 2b       	or	r24, r20
    134a:	80 83       	st	Z, r24
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	08 95       	ret
    1350:	8f ef       	ldi	r24, 0xFF	; 255
    1352:	08 95       	ret
    1354:	8f ef       	ldi	r24, 0xFF	; 255
    1356:	08 95       	ret
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	08 95       	ret

0000135c <DIO_s8GETPinVal>:
Uchar8_t DIO_s8GETPinVal (enu_pin enPinCopy, Uchar8_t* pu8Val)
{
	Uchar8_t errStatus = E_OK;
	Uchar8_t portID;
	Uchar8_t pinID;
	if (enPinCopy < PIN_INVALID)
    135c:	80 32       	cpi	r24, 0x20	; 32
    135e:	d8 f4       	brcc	.+54     	; 0x1396 <DIO_s8GETPinVal+0x3a>
	{
		portID = enPinCopy/8;
    1360:	e8 2f       	mov	r30, r24
    1362:	e6 95       	lsr	r30
    1364:	e6 95       	lsr	r30
    1366:	e6 95       	lsr	r30
		pinID  = enPinCopy%8;
    1368:	87 70       	andi	r24, 0x07	; 7

		*pu8Val = GET_BIT(*pinReg[portID], pinID);
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	ee 0f       	add	r30, r30
    136e:	ff 1f       	adc	r31, r31
    1370:	e6 58       	subi	r30, 0x86	; 134
    1372:	fe 4f       	sbci	r31, 0xFE	; 254
    1374:	01 90       	ld	r0, Z+
    1376:	f0 81       	ld	r31, Z
    1378:	e0 2d       	mov	r30, r0
    137a:	20 81       	ld	r18, Z
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	a9 01       	movw	r20, r18
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <DIO_s8GETPinVal+0x2a>
    1382:	55 95       	asr	r21
    1384:	47 95       	ror	r20
    1386:	8a 95       	dec	r24
    1388:	e2 f7       	brpl	.-8      	; 0x1382 <DIO_s8GETPinVal+0x26>
    138a:	ca 01       	movw	r24, r20
    138c:	81 70       	andi	r24, 0x01	; 1
    138e:	fb 01       	movw	r30, r22
    1390:	80 83       	st	Z, r24

}

Uchar8_t DIO_s8GETPinVal (enu_pin enPinCopy, Uchar8_t* pu8Val)
{
	Uchar8_t errStatus = E_OK;
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	08 95       	ret
		*pu8Val = GET_BIT(*pinReg[portID], pinID);

	}
	else
	{
		errStatus = E_NOK;
    1396:	8f ef       	ldi	r24, 0xFF	; 255
	}
	return errStatus;
    1398:	08 95       	ret

0000139a <SET_GLOBAL_INTERRUPT>:
void (*ptrINT2)(void) = 0;

EN_EXTINT_ERROR SET_GLOBAL_INTERRUPT(EN_GLOBAL_INT state)
{
	
	if(state == ENABLE)
    139a:	81 30       	cpi	r24, 0x01	; 1
    139c:	19 f4       	brne	.+6      	; 0x13a4 <SET_GLOBAL_INTERRUPT+0xa>
	sei();
    139e:	78 94       	sei
    else if (state == DISABLE)
	cli();
	else return EXTINT_NOT_OK;
	return EXTINT_OK;
    13a0:	80 e0       	ldi	r24, 0x00	; 0
    13a2:	08 95       	ret
EN_EXTINT_ERROR SET_GLOBAL_INTERRUPT(EN_GLOBAL_INT state)
{
	
	if(state == ENABLE)
	sei();
    else if (state == DISABLE)
    13a4:	81 11       	cpse	r24, r1
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <SET_GLOBAL_INTERRUPT+0x12>
	cli();
    13a8:	f8 94       	cli
    13aa:	08 95       	ret
	else return EXTINT_NOT_OK;
    13ac:	81 e0       	ldi	r24, 0x01	; 1
	return EXTINT_OK;
}
    13ae:	08 95       	ret

000013b0 <EXTINT_init>:

EN_EXTINT_ERROR EXTINT_init(EN_EXINT_NUMBER INTx ,EN_Sence_Control INTxSense)
{
    13b0:	cf 93       	push	r28
    13b2:	df 93       	push	r29
    13b4:	c8 2f       	mov	r28, r24
    13b6:	d6 2f       	mov	r29, r22
	
	SET_GLOBAL_INTERRUPT(ENABLE); // SET GLOBAL INTERRUPT
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	0e 94 cd 09 	call	0x139a	; 0x139a <SET_GLOBAL_INTERRUPT>
	switch(INTx)
    13be:	c1 30       	cpi	r28, 0x01	; 1
    13c0:	99 f1       	breq	.+102    	; 0x1428 <EXTINT_init+0x78>
    13c2:	20 f0       	brcs	.+8      	; 0x13cc <EXTINT_init+0x1c>
    13c4:	c2 30       	cpi	r28, 0x02	; 2
    13c6:	09 f4       	brne	.+2      	; 0x13ca <EXTINT_init+0x1a>
    13c8:	5d c0       	rjmp	.+186    	; 0x1484 <EXTINT_init+0xd4>
    13ca:	72 c0       	rjmp	.+228    	; 0x14b0 <EXTINT_init+0x100>
	{
		case EXTINT0:
		  if(INTxSense == LOW_LEVEL)
    13cc:	d1 11       	cpse	r29, r1
    13ce:	07 c0       	rjmp	.+14     	; 0x13de <EXTINT_init+0x2e>
		  {
			  CLEAR_BIT(MCUCR,ISC00);
    13d0:	85 b7       	in	r24, 0x35	; 53
    13d2:	8e 7f       	andi	r24, 0xFE	; 254
    13d4:	85 bf       	out	0x35, r24	; 53
			  CLEAR_BIT(MCUCR,ISC01);
    13d6:	85 b7       	in	r24, 0x35	; 53
    13d8:	8d 7f       	andi	r24, 0xFD	; 253
    13da:	85 bf       	out	0x35, r24	; 53
    13dc:	20 c0       	rjmp	.+64     	; 0x141e <EXTINT_init+0x6e>
		  }
		  else if(INTxSense == FALLING_EDGE)
    13de:	d1 30       	cpi	r29, 0x01	; 1
    13e0:	39 f4       	brne	.+14     	; 0x13f0 <EXTINT_init+0x40>
		  {
			  CLEAR_BIT(MCUCR,ISC00);
    13e2:	85 b7       	in	r24, 0x35	; 53
    13e4:	8e 7f       	andi	r24, 0xFE	; 254
    13e6:	85 bf       	out	0x35, r24	; 53
			  SET_BIT(MCUCR,ISC01);
    13e8:	85 b7       	in	r24, 0x35	; 53
    13ea:	82 60       	ori	r24, 0x02	; 2
    13ec:	85 bf       	out	0x35, r24	; 53
    13ee:	17 c0       	rjmp	.+46     	; 0x141e <EXTINT_init+0x6e>
		  }
		  else if(INTxSense == RISING_EDGE)
    13f0:	d2 30       	cpi	r29, 0x02	; 2
    13f2:	39 f4       	brne	.+14     	; 0x1402 <EXTINT_init+0x52>
		  {
			  SET_BIT(MCUCR,ISC00);
    13f4:	85 b7       	in	r24, 0x35	; 53
    13f6:	81 60       	ori	r24, 0x01	; 1
    13f8:	85 bf       	out	0x35, r24	; 53
			  SET_BIT(MCUCR,ISC01);
    13fa:	85 b7       	in	r24, 0x35	; 53
    13fc:	82 60       	ori	r24, 0x02	; 2
    13fe:	85 bf       	out	0x35, r24	; 53
    1400:	0e c0       	rjmp	.+28     	; 0x141e <EXTINT_init+0x6e>
		  }
		  else if(INTxSense == ANY_LOGICAL_CHANGE)
    1402:	d3 30       	cpi	r29, 0x03	; 3
    1404:	39 f4       	brne	.+14     	; 0x1414 <EXTINT_init+0x64>
		  {
			  SET_BIT(MCUCR,ISC00);
    1406:	85 b7       	in	r24, 0x35	; 53
    1408:	81 60       	ori	r24, 0x01	; 1
    140a:	85 bf       	out	0x35, r24	; 53
			  CLEAR_BIT(MCUCR,ISC01);
    140c:	85 b7       	in	r24, 0x35	; 53
    140e:	8d 7f       	andi	r24, 0xFD	; 253
    1410:	85 bf       	out	0x35, r24	; 53
    1412:	05 c0       	rjmp	.+10     	; 0x141e <EXTINT_init+0x6e>
		  }
		  else   // handle sense option error
		  {
			  SET_GLOBAL_INTERRUPT(DISABLE);
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	0e 94 cd 09 	call	0x139a	; 0x139a <SET_GLOBAL_INTERRUPT>
			   return EXTINT_NOT_OK;
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	4d c0       	rjmp	.+154    	; 0x14b8 <EXTINT_init+0x108>
		  }	   
		  SET_BIT(GICR,INT0); //Enable External INT0  (PIE)
    141e:	8b b7       	in	r24, 0x3b	; 59
    1420:	80 64       	ori	r24, 0x40	; 64
    1422:	8b bf       	out	0x3b, r24	; 59
		default: // handle wrong Choose for EXT Interrupt Number
		  SET_GLOBAL_INTERRUPT(DISABLE);
		  return EXTINT_NOT_OK;
		  break;
	}
	return EXTINT_OK;
    1424:	80 e0       	ldi	r24, 0x00	; 0
		  {
			  SET_GLOBAL_INTERRUPT(DISABLE);
			   return EXTINT_NOT_OK;
		  }	   
		  SET_BIT(GICR,INT0); //Enable External INT0  (PIE)
		  break;
    1426:	48 c0       	rjmp	.+144    	; 0x14b8 <EXTINT_init+0x108>
		case EXTINT1:
		  if(INTxSense == LOW_LEVEL)
    1428:	d1 11       	cpse	r29, r1
    142a:	07 c0       	rjmp	.+14     	; 0x143a <EXTINT_init+0x8a>
		  {
			  CLEAR_BIT(MCUCR,ISC10);
    142c:	85 b7       	in	r24, 0x35	; 53
    142e:	8b 7f       	andi	r24, 0xFB	; 251
    1430:	85 bf       	out	0x35, r24	; 53
			  CLEAR_BIT(MCUCR,ISC11);
    1432:	85 b7       	in	r24, 0x35	; 53
    1434:	87 7f       	andi	r24, 0xF7	; 247
    1436:	85 bf       	out	0x35, r24	; 53
    1438:	20 c0       	rjmp	.+64     	; 0x147a <EXTINT_init+0xca>
		  }
		  else if(INTxSense == FALLING_EDGE)
    143a:	d1 30       	cpi	r29, 0x01	; 1
    143c:	39 f4       	brne	.+14     	; 0x144c <EXTINT_init+0x9c>
		  {
			  CLEAR_BIT(MCUCR,ISC10);
    143e:	85 b7       	in	r24, 0x35	; 53
    1440:	8b 7f       	andi	r24, 0xFB	; 251
    1442:	85 bf       	out	0x35, r24	; 53
			  SET_BIT(MCUCR,ISC11);
    1444:	85 b7       	in	r24, 0x35	; 53
    1446:	88 60       	ori	r24, 0x08	; 8
    1448:	85 bf       	out	0x35, r24	; 53
    144a:	17 c0       	rjmp	.+46     	; 0x147a <EXTINT_init+0xca>
		  }
		  else if(INTxSense == RISING_EDGE)
    144c:	d2 30       	cpi	r29, 0x02	; 2
    144e:	39 f4       	brne	.+14     	; 0x145e <EXTINT_init+0xae>
		  {
			  SET_BIT(MCUCR,ISC10);
    1450:	85 b7       	in	r24, 0x35	; 53
    1452:	84 60       	ori	r24, 0x04	; 4
    1454:	85 bf       	out	0x35, r24	; 53
			  SET_BIT(MCUCR,ISC11);
    1456:	85 b7       	in	r24, 0x35	; 53
    1458:	88 60       	ori	r24, 0x08	; 8
    145a:	85 bf       	out	0x35, r24	; 53
    145c:	0e c0       	rjmp	.+28     	; 0x147a <EXTINT_init+0xca>
		  }
		  else if(INTxSense == ANY_LOGICAL_CHANGE)
    145e:	d3 30       	cpi	r29, 0x03	; 3
    1460:	39 f4       	brne	.+14     	; 0x1470 <EXTINT_init+0xc0>
		  {
			  SET_BIT(MCUCR,ISC10);
    1462:	85 b7       	in	r24, 0x35	; 53
    1464:	84 60       	ori	r24, 0x04	; 4
    1466:	85 bf       	out	0x35, r24	; 53
			  CLEAR_BIT(MCUCR,ISC11);
    1468:	85 b7       	in	r24, 0x35	; 53
    146a:	87 7f       	andi	r24, 0xF7	; 247
    146c:	85 bf       	out	0x35, r24	; 53
    146e:	05 c0       	rjmp	.+10     	; 0x147a <EXTINT_init+0xca>
		  }
		  else   // handle sense option error
		  {
		 	 SET_GLOBAL_INTERRUPT(DISABLE);
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	0e 94 cd 09 	call	0x139a	; 0x139a <SET_GLOBAL_INTERRUPT>
		 	 return EXTINT_NOT_OK;
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	1f c0       	rjmp	.+62     	; 0x14b8 <EXTINT_init+0x108>
		  }
		  SET_BIT(GICR,INT1); //Enable External INT1  (PIE)
    147a:	8b b7       	in	r24, 0x3b	; 59
    147c:	80 68       	ori	r24, 0x80	; 128
    147e:	8b bf       	out	0x3b, r24	; 59
		default: // handle wrong Choose for EXT Interrupt Number
		  SET_GLOBAL_INTERRUPT(DISABLE);
		  return EXTINT_NOT_OK;
		  break;
	}
	return EXTINT_OK;
    1480:	80 e0       	ldi	r24, 0x00	; 0
		  {
		 	 SET_GLOBAL_INTERRUPT(DISABLE);
		 	 return EXTINT_NOT_OK;
		  }
		  SET_BIT(GICR,INT1); //Enable External INT1  (PIE)
		  break;
    1482:	1a c0       	rjmp	.+52     	; 0x14b8 <EXTINT_init+0x108>
		case EXTINT2:
		 
		  if(INTxSense == FALLING_EDGE)
    1484:	d1 30       	cpi	r29, 0x01	; 1
    1486:	21 f4       	brne	.+8      	; 0x1490 <EXTINT_init+0xe0>
		  {
			  CLEAR_BIT(MCUCSR,ISC2);
    1488:	84 b7       	in	r24, 0x34	; 52
    148a:	8f 7b       	andi	r24, 0xBF	; 191
    148c:	84 bf       	out	0x34, r24	; 52
    148e:	0b c0       	rjmp	.+22     	; 0x14a6 <EXTINT_init+0xf6>
		  }
		  else if(INTxSense == RISING_EDGE)
    1490:	d2 30       	cpi	r29, 0x02	; 2
    1492:	21 f4       	brne	.+8      	; 0x149c <EXTINT_init+0xec>
		  {
			  SET_BIT(MCUCSR,ISC2);
    1494:	84 b7       	in	r24, 0x34	; 52
    1496:	80 64       	ori	r24, 0x40	; 64
    1498:	84 bf       	out	0x34, r24	; 52
    149a:	05 c0       	rjmp	.+10     	; 0x14a6 <EXTINT_init+0xf6>
		  }
		  else   // handle sense option error
		  {
		 	 SET_GLOBAL_INTERRUPT(DISABLE);
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	0e 94 cd 09 	call	0x139a	; 0x139a <SET_GLOBAL_INTERRUPT>
		 	 return EXTINT_NOT_OK;
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	09 c0       	rjmp	.+18     	; 0x14b8 <EXTINT_init+0x108>
		  }
		  SET_BIT(GICR,INT2); //Enable External INT1  (PIE)
    14a6:	8b b7       	in	r24, 0x3b	; 59
    14a8:	80 62       	ori	r24, 0x20	; 32
    14aa:	8b bf       	out	0x3b, r24	; 59
		default: // handle wrong Choose for EXT Interrupt Number
		  SET_GLOBAL_INTERRUPT(DISABLE);
		  return EXTINT_NOT_OK;
		  break;
	}
	return EXTINT_OK;
    14ac:	80 e0       	ldi	r24, 0x00	; 0
		  {
		 	 SET_GLOBAL_INTERRUPT(DISABLE);
		 	 return EXTINT_NOT_OK;
		  }
		  SET_BIT(GICR,INT2); //Enable External INT1  (PIE)
		  break;
    14ae:	04 c0       	rjmp	.+8      	; 0x14b8 <EXTINT_init+0x108>
		default: // handle wrong Choose for EXT Interrupt Number
		  SET_GLOBAL_INTERRUPT(DISABLE);
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	0e 94 cd 09 	call	0x139a	; 0x139a <SET_GLOBAL_INTERRUPT>
		  return EXTINT_NOT_OK;
    14b6:	81 e0       	ldi	r24, 0x01	; 1
		  break;
	}
	return EXTINT_OK;
}
    14b8:	df 91       	pop	r29
    14ba:	cf 91       	pop	r28
    14bc:	08 95       	ret

000014be <EXTINT_CallBack>:

EN_EXTINT_ERROR EXTINT_CallBack(EN_EXINT_NUMBER INTx,void(*ptrfunc)(void))
{
	if(INTx == EXTINT0 ) ptrINT0 = ptrfunc;
    14be:	81 11       	cpse	r24, r1
    14c0:	05 c0       	rjmp	.+10     	; 0x14cc <EXTINT_CallBack+0xe>
    14c2:	70 93 bc 02 	sts	0x02BC, r23	; 0x8002bc <ptrINT0+0x1>
    14c6:	60 93 bb 02 	sts	0x02BB, r22	; 0x8002bb <ptrINT0>
    14ca:	08 95       	ret
	else if(INTx == EXTINT1 ) ptrINT1 = ptrfunc;
    14cc:	81 30       	cpi	r24, 0x01	; 1
    14ce:	31 f4       	brne	.+12     	; 0x14dc <EXTINT_CallBack+0x1e>
    14d0:	70 93 ba 02 	sts	0x02BA, r23	; 0x8002ba <ptrINT1+0x1>
    14d4:	60 93 b9 02 	sts	0x02B9, r22	; 0x8002b9 <ptrINT1>
	else if(INTx == EXTINT2 ) ptrINT2 = ptrfunc;
	else return EXTINT_NOT_OK;
	return EXTINT_OK;
    14d8:	80 e0       	ldi	r24, 0x00	; 0
    14da:	08 95       	ret

EN_EXTINT_ERROR EXTINT_CallBack(EN_EXINT_NUMBER INTx,void(*ptrfunc)(void))
{
	if(INTx == EXTINT0 ) ptrINT0 = ptrfunc;
	else if(INTx == EXTINT1 ) ptrINT1 = ptrfunc;
	else if(INTx == EXTINT2 ) ptrINT2 = ptrfunc;
    14dc:	82 30       	cpi	r24, 0x02	; 2
    14de:	31 f4       	brne	.+12     	; 0x14ec <EXTINT_CallBack+0x2e>
    14e0:	70 93 b8 02 	sts	0x02B8, r23	; 0x8002b8 <ptrINT2+0x1>
    14e4:	60 93 b7 02 	sts	0x02B7, r22	; 0x8002b7 <ptrINT2>
	else return EXTINT_NOT_OK;
	return EXTINT_OK;
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	08 95       	ret
EN_EXTINT_ERROR EXTINT_CallBack(EN_EXINT_NUMBER INTx,void(*ptrfunc)(void))
{
	if(INTx == EXTINT0 ) ptrINT0 = ptrfunc;
	else if(INTx == EXTINT1 ) ptrINT1 = ptrfunc;
	else if(INTx == EXTINT2 ) ptrINT2 = ptrfunc;
	else return EXTINT_NOT_OK;
    14ec:	81 e0       	ldi	r24, 0x01	; 1
	return EXTINT_OK;
}
    14ee:	08 95       	ret

000014f0 <__vector_1>:


ISR (EXT_INT_0)
{
    14f0:	1f 92       	push	r1
    14f2:	0f 92       	push	r0
    14f4:	0f b6       	in	r0, 0x3f	; 63
    14f6:	0f 92       	push	r0
    14f8:	11 24       	eor	r1, r1
    14fa:	2f 93       	push	r18
    14fc:	3f 93       	push	r19
    14fe:	4f 93       	push	r20
    1500:	5f 93       	push	r21
    1502:	6f 93       	push	r22
    1504:	7f 93       	push	r23
    1506:	8f 93       	push	r24
    1508:	9f 93       	push	r25
    150a:	af 93       	push	r26
    150c:	bf 93       	push	r27
    150e:	ef 93       	push	r30
    1510:	ff 93       	push	r31
	if(ptrINT0) ptrINT0();
    1512:	e0 91 bb 02 	lds	r30, 0x02BB	; 0x8002bb <ptrINT0>
    1516:	f0 91 bc 02 	lds	r31, 0x02BC	; 0x8002bc <ptrINT0+0x1>
    151a:	30 97       	sbiw	r30, 0x00	; 0
    151c:	09 f0       	breq	.+2      	; 0x1520 <__vector_1+0x30>
    151e:	09 95       	icall
}
    1520:	ff 91       	pop	r31
    1522:	ef 91       	pop	r30
    1524:	bf 91       	pop	r27
    1526:	af 91       	pop	r26
    1528:	9f 91       	pop	r25
    152a:	8f 91       	pop	r24
    152c:	7f 91       	pop	r23
    152e:	6f 91       	pop	r22
    1530:	5f 91       	pop	r21
    1532:	4f 91       	pop	r20
    1534:	3f 91       	pop	r19
    1536:	2f 91       	pop	r18
    1538:	0f 90       	pop	r0
    153a:	0f be       	out	0x3f, r0	; 63
    153c:	0f 90       	pop	r0
    153e:	1f 90       	pop	r1
    1540:	18 95       	reti

00001542 <__vector_2>:

ISR (EXT_INT_1)
{
    1542:	1f 92       	push	r1
    1544:	0f 92       	push	r0
    1546:	0f b6       	in	r0, 0x3f	; 63
    1548:	0f 92       	push	r0
    154a:	11 24       	eor	r1, r1
    154c:	2f 93       	push	r18
    154e:	3f 93       	push	r19
    1550:	4f 93       	push	r20
    1552:	5f 93       	push	r21
    1554:	6f 93       	push	r22
    1556:	7f 93       	push	r23
    1558:	8f 93       	push	r24
    155a:	9f 93       	push	r25
    155c:	af 93       	push	r26
    155e:	bf 93       	push	r27
    1560:	ef 93       	push	r30
    1562:	ff 93       	push	r31
	if(ptrINT1) ptrINT1();
    1564:	e0 91 b9 02 	lds	r30, 0x02B9	; 0x8002b9 <ptrINT1>
    1568:	f0 91 ba 02 	lds	r31, 0x02BA	; 0x8002ba <ptrINT1+0x1>
    156c:	30 97       	sbiw	r30, 0x00	; 0
    156e:	09 f0       	breq	.+2      	; 0x1572 <__vector_2+0x30>
    1570:	09 95       	icall
}
    1572:	ff 91       	pop	r31
    1574:	ef 91       	pop	r30
    1576:	bf 91       	pop	r27
    1578:	af 91       	pop	r26
    157a:	9f 91       	pop	r25
    157c:	8f 91       	pop	r24
    157e:	7f 91       	pop	r23
    1580:	6f 91       	pop	r22
    1582:	5f 91       	pop	r21
    1584:	4f 91       	pop	r20
    1586:	3f 91       	pop	r19
    1588:	2f 91       	pop	r18
    158a:	0f 90       	pop	r0
    158c:	0f be       	out	0x3f, r0	; 63
    158e:	0f 90       	pop	r0
    1590:	1f 90       	pop	r1
    1592:	18 95       	reti

00001594 <__vector_3>:

ISR (EXT_INT_2)
{
    1594:	1f 92       	push	r1
    1596:	0f 92       	push	r0
    1598:	0f b6       	in	r0, 0x3f	; 63
    159a:	0f 92       	push	r0
    159c:	11 24       	eor	r1, r1
    159e:	2f 93       	push	r18
    15a0:	3f 93       	push	r19
    15a2:	4f 93       	push	r20
    15a4:	5f 93       	push	r21
    15a6:	6f 93       	push	r22
    15a8:	7f 93       	push	r23
    15aa:	8f 93       	push	r24
    15ac:	9f 93       	push	r25
    15ae:	af 93       	push	r26
    15b0:	bf 93       	push	r27
    15b2:	ef 93       	push	r30
    15b4:	ff 93       	push	r31
	if(ptrINT2) ptrINT2();
    15b6:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <ptrINT2>
    15ba:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <ptrINT2+0x1>
    15be:	30 97       	sbiw	r30, 0x00	; 0
    15c0:	09 f0       	breq	.+2      	; 0x15c4 <__vector_3+0x30>
    15c2:	09 95       	icall
    15c4:	ff 91       	pop	r31
    15c6:	ef 91       	pop	r30
    15c8:	bf 91       	pop	r27
    15ca:	af 91       	pop	r26
    15cc:	9f 91       	pop	r25
    15ce:	8f 91       	pop	r24
    15d0:	7f 91       	pop	r23
    15d2:	6f 91       	pop	r22
    15d4:	5f 91       	pop	r21
    15d6:	4f 91       	pop	r20
    15d8:	3f 91       	pop	r19
    15da:	2f 91       	pop	r18
    15dc:	0f 90       	pop	r0
    15de:	0f be       	out	0x3f, r0	; 63
    15e0:	0f 90       	pop	r0
    15e2:	1f 90       	pop	r1
    15e4:	18 95       	reti

000015e6 <SPI_MasterInit>:
	{
		return SPI_NOK;
	}
	
	return SPI_OK;
}
    15e6:	8d b1       	in	r24, 0x0d	; 13
    15e8:	80 61       	ori	r24, 0x10	; 16
    15ea:	8d b9       	out	0x0d, r24	; 13
    15ec:	8d b1       	in	r24, 0x0d	; 13
    15ee:	9e b1       	in	r25, 0x0e	; 14
    15f0:	8e 7f       	andi	r24, 0xFE	; 254
    15f2:	9c 7f       	andi	r25, 0xFC	; 252
    15f4:	9e b9       	out	0x0e, r25	; 14
    15f6:	8d b9       	out	0x0d, r24	; 13
    15f8:	8d b1       	in	r24, 0x0d	; 13
    15fa:	9e b1       	in	r25, 0x0e	; 14
    15fc:	93 60       	ori	r25, 0x03	; 3
    15fe:	9e b9       	out	0x0e, r25	; 14
    1600:	8d b9       	out	0x0d, r24	; 13
    1602:	8d b1       	in	r24, 0x0d	; 13
    1604:	87 7f       	andi	r24, 0xF7	; 247
    1606:	8d b9       	out	0x0d, r24	; 13
    1608:	8d b1       	in	r24, 0x0d	; 13
    160a:	8b 7f       	andi	r24, 0xFB	; 251
    160c:	8d b9       	out	0x0d, r24	; 13
    160e:	8d b1       	in	r24, 0x0d	; 13
    1610:	80 64       	ori	r24, 0x40	; 64
    1612:	8d b9       	out	0x0d, r24	; 13
    1614:	08 95       	ret

00001616 <SPI_TranscieveChar>:
    1616:	61 15       	cp	r22, r1
    1618:	71 05       	cpc	r23, r1
    161a:	f9 f0       	breq	.+62     	; 0x165a <SPI_TranscieveChar+0x44>
    161c:	8f b9       	out	0x0f, r24	; 15
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	dc 01       	movw	r26, r24
    1624:	03 c0       	rjmp	.+6      	; 0x162c <SPI_TranscieveChar+0x16>
    1626:	01 96       	adiw	r24, 0x01	; 1
    1628:	a1 1d       	adc	r26, r1
    162a:	b1 1d       	adc	r27, r1
    162c:	77 99       	sbic	0x0e, 7	; 14
    162e:	07 c0       	rjmp	.+14     	; 0x163e <SPI_TranscieveChar+0x28>
    1630:	80 3a       	cpi	r24, 0xA0	; 160
    1632:	26 e8       	ldi	r18, 0x86	; 134
    1634:	92 07       	cpc	r25, r18
    1636:	21 e0       	ldi	r18, 0x01	; 1
    1638:	a2 07       	cpc	r26, r18
    163a:	b1 05       	cpc	r27, r1
    163c:	a0 f3       	brcs	.-24     	; 0x1626 <SPI_TranscieveChar+0x10>
    163e:	80 3a       	cpi	r24, 0xA0	; 160
    1640:	96 48       	sbci	r25, 0x86	; 134
    1642:	a1 40       	sbci	r26, 0x01	; 1
    1644:	b1 05       	cpc	r27, r1
    1646:	59 f0       	breq	.+22     	; 0x165e <SPI_TranscieveChar+0x48>
    1648:	8f b1       	in	r24, 0x0f	; 15
    164a:	fb 01       	movw	r30, r22
    164c:	80 83       	st	Z, r24
    164e:	f1 e2       	ldi	r31, 0x21	; 33
    1650:	fa 95       	dec	r31
    1652:	f1 f7       	brne	.-4      	; 0x1650 <SPI_TranscieveChar+0x3a>
    1654:	00 00       	nop
    1656:	80 e0       	ldi	r24, 0x00	; 0
    1658:	08 95       	ret
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	08 95       	ret
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	08 95       	ret

00001662 <__vector_12>:

/*************************************************************************************************************
 * 													  ISRs
 ************************************************************************************************************/
ISR(SPI_STC_INT)
{
    1662:	1f 92       	push	r1
    1664:	0f 92       	push	r0
    1666:	0f b6       	in	r0, 0x3f	; 63
    1668:	0f 92       	push	r0
    166a:	11 24       	eor	r1, r1
    166c:	2f 93       	push	r18
    166e:	3f 93       	push	r19
    1670:	8f 93       	push	r24
    1672:	9f 93       	push	r25
    1674:	ef 93       	push	r30
    1676:	ff 93       	push	r31
	/*------------------------ Reception ------------------------*/
	u8_g_SlaveReceive = SPDR;
    1678:	8f b1       	in	r24, 0x0f	; 15
    167a:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <u8_g_SlaveReceive>
	//DIO_s8SETPortVal(DIO_PORTA, u8_g_SlaveReceive);
	
	/* If Max size is exceeded, start overriding data */
	if(u8_g_SlaveRxIndex == SPI_BUFFER_SIZE) u8_g_SlaveRxIndex = 0;
    167e:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <u8_g_SlaveRxIndex>
    1682:	9f 30       	cpi	r25, 0x0F	; 15
    1684:	11 f4       	brne	.+4      	; 0x168a <__vector_12+0x28>
    1686:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <u8_g_SlaveRxIndex>
	if(u8_g_SlaveReceive != DATA_END)
    168a:	83 32       	cpi	r24, 0x23	; 35
    168c:	59 f0       	breq	.+22     	; 0x16a4 <__vector_12+0x42>
	{
		/* Store received byte in buffer */
		arr_g_SlaveRxBuffer[u8_g_SlaveRxIndex] = u8_g_SlaveReceive;
    168e:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <u8_g_SlaveRxIndex>
    1692:	e9 2f       	mov	r30, r25
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	e3 54       	subi	r30, 0x43	; 67
    1698:	fd 4f       	sbci	r31, 0xFD	; 253
    169a:	80 83       	st	Z, r24
		u8_g_SlaveRxIndex++;
    169c:	9f 5f       	subi	r25, 0xFF	; 255
    169e:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <u8_g_SlaveRxIndex>
    16a2:	04 c0       	rjmp	.+8      	; 0x16ac <__vector_12+0x4a>
	}
	else
	{	// Get the number of received bytes
		u8_g_SlaveRxLen = u8_g_SlaveRxIndex;
    16a4:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <u8_g_SlaveRxIndex>
    16a8:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <u8_g_SlaveRxLen>
	}
	
	/*------------------------- Sending -------------------------*/
	//u8_g_SlaveTxIndex++;
	if((u8_g_SlaveTxIndex < u8_g_SlaveTxLen) && (pu8_g_SlaveTxPtr != NULL))
    16ac:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <u8_g_SlaveTxIndex>
    16b0:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <u8_g_SlaveTxLen>
    16b4:	89 17       	cp	r24, r25
    16b6:	88 f4       	brcc	.+34     	; 0x16da <__vector_12+0x78>
    16b8:	20 91 cc 02 	lds	r18, 0x02CC	; 0x8002cc <pu8_g_SlaveTxPtr>
    16bc:	30 91 cd 02 	lds	r19, 0x02CD	; 0x8002cd <pu8_g_SlaveTxPtr+0x1>
    16c0:	21 15       	cp	r18, r1
    16c2:	31 05       	cpc	r19, r1
    16c4:	51 f0       	breq	.+20     	; 0x16da <__vector_12+0x78>
	{
		SPDR = pu8_g_SlaveTxPtr[u8_g_SlaveTxIndex++];
    16c6:	91 e0       	ldi	r25, 0x01	; 1
    16c8:	98 0f       	add	r25, r24
    16ca:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <u8_g_SlaveTxIndex>
    16ce:	f9 01       	movw	r30, r18
    16d0:	e8 0f       	add	r30, r24
    16d2:	f1 1d       	adc	r31, r1
    16d4:	80 81       	ld	r24, Z
    16d6:	8f b9       	out	0x0f, r24	; 15
    16d8:	04 c0       	rjmp	.+8      	; 0x16e2 <__vector_12+0x80>
	}
	else if(u8_g_SlaveTxIndex >= u8_g_SlaveTxLen)
    16da:	89 17       	cp	r24, r25
    16dc:	10 f0       	brcs	.+4      	; 0x16e2 <__vector_12+0x80>
	{
		SPDR = DATA_END;
    16de:	83 e2       	ldi	r24, 0x23	; 35
    16e0:	8f b9       	out	0x0f, r24	; 15
	}
    16e2:	ff 91       	pop	r31
    16e4:	ef 91       	pop	r30
    16e6:	9f 91       	pop	r25
    16e8:	8f 91       	pop	r24
    16ea:	3f 91       	pop	r19
    16ec:	2f 91       	pop	r18
    16ee:	0f 90       	pop	r0
    16f0:	0f be       	out	0x3f, r0	; 63
    16f2:	0f 90       	pop	r0
    16f4:	1f 90       	pop	r1
    16f6:	18 95       	reti

000016f8 <TIM0_voidInit>:
	else
	{
		return TIM_NOK;
	}
	return TIM_OK;
}
    16f8:	81 30       	cpi	r24, 0x01	; 1
    16fa:	61 f0       	breq	.+24     	; 0x1714 <TIM0_voidInit+0x1c>
    16fc:	28 f0       	brcs	.+10     	; 0x1708 <TIM0_voidInit+0x10>
    16fe:	82 30       	cpi	r24, 0x02	; 2
    1700:	29 f0       	breq	.+10     	; 0x170c <TIM0_voidInit+0x14>
    1702:	83 30       	cpi	r24, 0x03	; 3
    1704:	29 f0       	breq	.+10     	; 0x1710 <TIM0_voidInit+0x18>
    1706:	0f c0       	rjmp	.+30     	; 0x1726 <TIM0_voidInit+0x2e>
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	05 c0       	rjmp	.+10     	; 0x1716 <TIM0_voidInit+0x1e>
    170c:	28 e0       	ldi	r18, 0x08	; 8
    170e:	03 c0       	rjmp	.+6      	; 0x1716 <TIM0_voidInit+0x1e>
    1710:	28 e4       	ldi	r18, 0x48	; 72
    1712:	01 c0       	rjmp	.+2      	; 0x1716 <TIM0_voidInit+0x1e>
    1714:	20 e4       	ldi	r18, 0x40	; 64
    1716:	93 b7       	in	r25, 0x33	; 51
    1718:	97 7b       	andi	r25, 0xB7	; 183
    171a:	93 bf       	out	0x33, r25	; 51
    171c:	83 b7       	in	r24, 0x33	; 51
    171e:	82 2b       	or	r24, r18
    1720:	83 bf       	out	0x33, r24	; 51
    1722:	80 e0       	ldi	r24, 0x00	; 0
    1724:	08 95       	ret
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	08 95       	ret

0000172a <TIM0_Start>:
    172a:	9f ef       	ldi	r25, 0xFF	; 255
    172c:	98 0f       	add	r25, r24
    172e:	97 30       	cpi	r25, 0x07	; 7
    1730:	40 f4       	brcc	.+16     	; 0x1742 <TIM0_Start+0x18>
    1732:	93 b7       	in	r25, 0x33	; 51
    1734:	98 7f       	andi	r25, 0xF8	; 248
    1736:	93 bf       	out	0x33, r25	; 51
    1738:	93 b7       	in	r25, 0x33	; 51
    173a:	89 2b       	or	r24, r25
    173c:	83 bf       	out	0x33, r24	; 51
    173e:	80 e0       	ldi	r24, 0x00	; 0
    1740:	08 95       	ret
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	08 95       	ret

00001746 <TIM0_Stop>:
    1746:	83 b7       	in	r24, 0x33	; 51
    1748:	88 7f       	andi	r24, 0xF8	; 248
    174a:	83 bf       	out	0x33, r24	; 51
    174c:	12 be       	out	0x32, r1	; 50
    174e:	88 b7       	in	r24, 0x38	; 56
    1750:	8e 7f       	andi	r24, 0xFE	; 254
    1752:	88 bf       	out	0x38, r24	; 56
    1754:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <u8_gs_OVFCount>
    1758:	08 95       	ret

0000175a <TIM0_SetValue>:
    175a:	82 bf       	out	0x32, r24	; 50
    175c:	08 95       	ret

0000175e <TIM0_GetOVF>:
    175e:	fc 01       	movw	r30, r24
    1760:	89 2b       	or	r24, r25
    1762:	29 f0       	breq	.+10     	; 0x176e <TIM0_GetOVF+0x10>
    1764:	98 b7       	in	r25, 0x38	; 56
    1766:	91 70       	andi	r25, 0x01	; 1
    1768:	90 83       	st	Z, r25
    176a:	80 e0       	ldi	r24, 0x00	; 0
    176c:	08 95       	ret
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	08 95       	ret

00001772 <TIM0_ClearOVF>:
    1772:	88 b7       	in	r24, 0x38	; 56
    1774:	81 60       	ori	r24, 0x01	; 1
    1776:	88 bf       	out	0x38, r24	; 56
    1778:	08 95       	ret

0000177a <TIM0_GetState>:
    177a:	00 97       	sbiw	r24, 0x00	; 0
    177c:	61 f0       	breq	.+24     	; 0x1796 <TIM0_GetState+0x1c>
    177e:	03 b6       	in	r0, 0x33	; 51
    1780:	00 fe       	sbrs	r0, 0
    1782:	05 c0       	rjmp	.+10     	; 0x178e <TIM0_GetState+0x14>
    1784:	21 e0       	ldi	r18, 0x01	; 1
    1786:	fc 01       	movw	r30, r24
    1788:	20 83       	st	Z, r18
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	08 95       	ret
    178e:	fc 01       	movw	r30, r24
    1790:	10 82       	st	Z, r1
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	08 95       	ret
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	08 95       	ret

0000179a <__vector_11>:


/*========================== ISRs =============================*/

ISR(TIM0_OVF_INT)
{
    179a:	1f 92       	push	r1
    179c:	0f 92       	push	r0
    179e:	0f b6       	in	r0, 0x3f	; 63
    17a0:	0f 92       	push	r0
    17a2:	11 24       	eor	r1, r1
    17a4:	2f 93       	push	r18
    17a6:	3f 93       	push	r19
    17a8:	4f 93       	push	r20
    17aa:	5f 93       	push	r21
    17ac:	6f 93       	push	r22
    17ae:	7f 93       	push	r23
    17b0:	8f 93       	push	r24
    17b2:	9f 93       	push	r25
    17b4:	af 93       	push	r26
    17b6:	bf 93       	push	r27
    17b8:	ef 93       	push	r30
    17ba:	ff 93       	push	r31
	if(TIM0_OVFCallbackFn != NULL)
    17bc:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <TIM0_OVFCallbackFn>
    17c0:	90 91 d1 02 	lds	r25, 0x02D1	; 0x8002d1 <TIM0_OVFCallbackFn+0x1>
    17c4:	89 2b       	or	r24, r25
    17c6:	b1 f0       	breq	.+44     	; 0x17f4 <__vector_11+0x5a>
	{
		/* Delay is complete */
		if(u8_gs_OVFCount == u8_g_TotalOVF)
    17c8:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <u8_gs_OVFCount>
    17cc:	90 91 d3 02 	lds	r25, 0x02D3	; 0x8002d3 <u8_g_TotalOVF>
    17d0:	89 13       	cpse	r24, r25
    17d2:	0d c0       	rjmp	.+26     	; 0x17ee <__vector_11+0x54>
		{
			/* Stop the timer */
			TIM0_Stop();
    17d4:	0e 94 a3 0b 	call	0x1746	; 0x1746 <TIM0_Stop>
			
			/* Reset the OVF counter */
			u8_gs_OVFCount = 0;
    17d8:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <u8_gs_OVFCount>
			
			/* Disable OVF interrupt */
			CLEAR_BIT(TIMSK, TIMSK_TOIE0);
    17dc:	89 b7       	in	r24, 0x39	; 57
    17de:	8e 7f       	andi	r24, 0xFE	; 254
    17e0:	89 bf       	out	0x39, r24	; 57
			
			/* Call the Callback function */
			TIM0_OVFCallbackFn();
    17e2:	e0 91 d0 02 	lds	r30, 0x02D0	; 0x8002d0 <TIM0_OVFCallbackFn>
    17e6:	f0 91 d1 02 	lds	r31, 0x02D1	; 0x8002d1 <TIM0_OVFCallbackFn+0x1>
    17ea:	09 95       	icall
    17ec:	03 c0       	rjmp	.+6      	; 0x17f4 <__vector_11+0x5a>
		}
		else
		{
			/* Increment the overflow count */
			u8_gs_OVFCount++;
    17ee:	8f 5f       	subi	r24, 0xFF	; 255
    17f0:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <u8_gs_OVFCount>
		}
	}
}
    17f4:	ff 91       	pop	r31
    17f6:	ef 91       	pop	r30
    17f8:	bf 91       	pop	r27
    17fa:	af 91       	pop	r26
    17fc:	9f 91       	pop	r25
    17fe:	8f 91       	pop	r24
    1800:	7f 91       	pop	r23
    1802:	6f 91       	pop	r22
    1804:	5f 91       	pop	r21
    1806:	4f 91       	pop	r20
    1808:	3f 91       	pop	r19
    180a:	2f 91       	pop	r18
    180c:	0f 90       	pop	r0
    180e:	0f be       	out	0x3f, r0	; 63
    1810:	0f 90       	pop	r0
    1812:	1f 90       	pop	r1
    1814:	18 95       	reti

00001816 <enuTimer2_init>:
	enu_timerStatus_t errorStatus = TIMER_OK;

	CLEAR_BIT(TIMSK_REG, TOIE2);

	return errorStatus;
}
    1816:	84 30       	cpi	r24, 0x04	; 4
    1818:	40 f5       	brcc	.+80     	; 0x186a <enuTimer2_init+0x54>
    181a:	81 30       	cpi	r24, 0x01	; 1
    181c:	71 f0       	breq	.+28     	; 0x183a <enuTimer2_init+0x24>
    181e:	28 f0       	brcs	.+10     	; 0x182a <enuTimer2_init+0x14>
    1820:	82 30       	cpi	r24, 0x02	; 2
    1822:	99 f0       	breq	.+38     	; 0x184a <enuTimer2_init+0x34>
    1824:	83 30       	cpi	r24, 0x03	; 3
    1826:	c9 f0       	breq	.+50     	; 0x185a <enuTimer2_init+0x44>
    1828:	22 c0       	rjmp	.+68     	; 0x186e <enuTimer2_init+0x58>
    182a:	85 b5       	in	r24, 0x25	; 37
    182c:	87 7f       	andi	r24, 0xF7	; 247
    182e:	85 bd       	out	0x25, r24	; 37
    1830:	85 b5       	in	r24, 0x25	; 37
    1832:	8f 7b       	andi	r24, 0xBF	; 191
    1834:	85 bd       	out	0x25, r24	; 37
    1836:	80 e0       	ldi	r24, 0x00	; 0
    1838:	08 95       	ret
    183a:	85 b5       	in	r24, 0x25	; 37
    183c:	87 7f       	andi	r24, 0xF7	; 247
    183e:	85 bd       	out	0x25, r24	; 37
    1840:	85 b5       	in	r24, 0x25	; 37
    1842:	80 64       	ori	r24, 0x40	; 64
    1844:	85 bd       	out	0x25, r24	; 37
    1846:	80 e0       	ldi	r24, 0x00	; 0
    1848:	08 95       	ret
    184a:	85 b5       	in	r24, 0x25	; 37
    184c:	88 60       	ori	r24, 0x08	; 8
    184e:	85 bd       	out	0x25, r24	; 37
    1850:	85 b5       	in	r24, 0x25	; 37
    1852:	8f 7b       	andi	r24, 0xBF	; 191
    1854:	85 bd       	out	0x25, r24	; 37
    1856:	80 e0       	ldi	r24, 0x00	; 0
    1858:	08 95       	ret
    185a:	85 b5       	in	r24, 0x25	; 37
    185c:	88 60       	ori	r24, 0x08	; 8
    185e:	85 bd       	out	0x25, r24	; 37
    1860:	85 b5       	in	r24, 0x25	; 37
    1862:	80 64       	ori	r24, 0x40	; 64
    1864:	85 bd       	out	0x25, r24	; 37
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	08 95       	ret
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	08 95       	ret
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	08 95       	ret

00001872 <u8Timer2_setPrescallar>:
    1872:	88 30       	cpi	r24, 0x08	; 8
    1874:	70 f4       	brcc	.+28     	; 0x1892 <u8Timer2_setPrescallar+0x20>
    1876:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <global_prescaller>
    187a:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <global_timerStatus>
    187e:	91 30       	cpi	r25, 0x01	; 1
    1880:	51 f4       	brne	.+20     	; 0x1896 <u8Timer2_setPrescallar+0x24>
    1882:	95 b5       	in	r25, 0x25	; 37
    1884:	98 7f       	andi	r25, 0xF8	; 248
    1886:	89 2b       	or	r24, r25
    1888:	95 b5       	in	r25, 0x25	; 37
    188a:	89 2b       	or	r24, r25
    188c:	85 bd       	out	0x25, r24	; 37
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	08 95       	ret
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	08 95       	ret
    1896:	80 e0       	ldi	r24, 0x00	; 0
    1898:	08 95       	ret

0000189a <vidTimer2_OvfIrqEnable>:
    189a:	89 b7       	in	r24, 0x39	; 57
    189c:	80 64       	ori	r24, 0x40	; 64
    189e:	89 bf       	out	0x39, r24	; 57
    18a0:	8f b7       	in	r24, 0x3f	; 63
    18a2:	80 68       	ori	r24, 0x80	; 128
    18a4:	8f bf       	out	0x3f, r24	; 63
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	08 95       	ret

000018aa <vidTimer2_start>:
/*************************************************************************************************************/
enu_timerStatus_t vidTimer2_start(void)
{
	enu_timerStatus_t errorStatus = TIMER_OK;

	TCCR2_REG |=  global_prescaller << PRESCALLER_OFFSET;
    18aa:	95 b5       	in	r25, 0x25	; 37
    18ac:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <global_prescaller>
    18b0:	89 2b       	or	r24, r25
    18b2:	85 bd       	out	0x25, r24	; 37
	global_timerStatus  = RUNNING;
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <global_timerStatus>

	return errorStatus;
}
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	08 95       	ret

000018be <vidTimer2_stop>:
/*************************************************************************************************************/
enu_timerStatus_t vidTimer2_stop(void)
{
	enu_timerStatus_t errorStatus = TIMER_OK;

	TCCR2_REG &=  PRESCALLER_CLR_MSK;
    18be:	85 b5       	in	r24, 0x25	; 37
    18c0:	88 7f       	andi	r24, 0xF8	; 248
    18c2:	85 bd       	out	0x25, r24	; 37
	global_timerStatus = STOPPED;
    18c4:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <global_timerStatus>

	return errorStatus;
}
    18c8:	80 e0       	ldi	r24, 0x00	; 0
    18ca:	08 95       	ret

000018cc <u8Timer2_setTime_ms>:
/*************************************************************************************************************/
enu_timerStatus_t u8Timer2_setTime_ms(Uint32_t u32_time_ms)
{
    18cc:	8f 92       	push	r8
    18ce:	9f 92       	push	r9
    18d0:	af 92       	push	r10
    18d2:	bf 92       	push	r11
    18d4:	cf 92       	push	r12
    18d6:	df 92       	push	r13
    18d8:	ef 92       	push	r14
    18da:	ff 92       	push	r15
	enu_timerStatus_t errorStatus = TIMER_OK;
	Uint32_t desired_ticks;
	float32_t tick_time_ms;
	if( u32_time_ms < MAX_TIM_MS )
    18dc:	68 38       	cpi	r22, 0x88	; 136
    18de:	23 e1       	ldi	r18, 0x13	; 19
    18e0:	72 07       	cpc	r23, r18
    18e2:	81 05       	cpc	r24, r1
    18e4:	91 05       	cpc	r25, r1
    18e6:	08 f0       	brcs	.+2      	; 0x18ea <u8Timer2_setTime_ms+0x1e>
    18e8:	60 c0       	rjmp	.+192    	; 0x19aa <u8Timer2_setTime_ms+0xde>
    18ea:	6b 01       	movw	r12, r22
    18ec:	7c 01       	movw	r14, r24
	{
		tick_time_ms = (float32_t)prescaller_map[global_prescaller] / ((Uint32_t)F_CPU / 1000U)  ;
    18ee:	e0 91 db 02 	lds	r30, 0x02DB	; 0x8002db <global_prescaller>
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	ee 0f       	add	r30, r30
    18f6:	ff 1f       	adc	r31, r31
    18f8:	ee 55       	subi	r30, 0x5E	; 94
    18fa:	fd 4f       	sbci	r31, 0xFD	; 253
    18fc:	60 81       	ld	r22, Z
    18fe:	71 81       	ldd	r23, Z+1	; 0x01
    1900:	80 e0       	ldi	r24, 0x00	; 0
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__floatunsisf>
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	4a ef       	ldi	r20, 0xFA	; 250
    190e:	55 e4       	ldi	r21, 0x45	; 69
    1910:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__divsf3>
    1914:	4b 01       	movw	r8, r22
    1916:	5c 01       	movw	r10, r24
		desired_ticks = u32_time_ms / tick_time_ms;
    1918:	c7 01       	movw	r24, r14
    191a:	b6 01       	movw	r22, r12
    191c:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__floatunsisf>
    1920:	a5 01       	movw	r20, r10
    1922:	94 01       	movw	r18, r8
    1924:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__divsf3>
    1928:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <__fixunssfsi>

		/* Compare ticks with OVF_ticks */
		if(desired_ticks == OVF_TICKS)
    192c:	61 15       	cp	r22, r1
    192e:	21 e0       	ldi	r18, 0x01	; 1
    1930:	72 07       	cpc	r23, r18
    1932:	81 05       	cpc	r24, r1
    1934:	91 05       	cpc	r25, r1
    1936:	29 f4       	brne	.+10     	; 0x1942 <u8Timer2_setTime_ms+0x76>
		{
			global_ovf = 1;
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <global_ovf>
	return errorStatus;
}
/*************************************************************************************************************/
enu_timerStatus_t u8Timer2_setTime_ms(Uint32_t u32_time_ms)
{
	enu_timerStatus_t errorStatus = TIMER_OK;
    193e:	80 e0       	ldi	r24, 0x00	; 0
    1940:	39 c0       	rjmp	.+114    	; 0x19b4 <u8Timer2_setTime_ms+0xe8>
		/* Compare ticks with OVF_ticks */
		if(desired_ticks == OVF_TICKS)
		{
			global_ovf = 1;
		}
		else if(desired_ticks < OVF_TICKS)
    1942:	6f 3f       	cpi	r22, 0xFF	; 255
    1944:	71 05       	cpc	r23, r1
    1946:	81 05       	cpc	r24, r1
    1948:	91 05       	cpc	r25, r1
    194a:	09 f0       	breq	.+2      	; 0x194e <u8Timer2_setTime_ms+0x82>
    194c:	78 f4       	brcc	.+30     	; 0x196c <u8Timer2_setTime_ms+0xa0>
		{
			preload = OVF_TICKS - desired_ticks;
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	31 e0       	ldi	r19, 0x01	; 1
    1952:	c9 01       	movw	r24, r18
    1954:	86 1b       	sub	r24, r22
    1956:	97 0b       	sbc	r25, r23
    1958:	90 93 d8 02 	sts	0x02D8, r25	; 0x8002d8 <preload+0x1>
    195c:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <preload>
			TCNT2_REG = preload;
    1960:	84 bd       	out	0x24, r24	; 36
			global_ovf = 1;
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <global_ovf>
	return errorStatus;
}
/*************************************************************************************************************/
enu_timerStatus_t u8Timer2_setTime_ms(Uint32_t u32_time_ms)
{
	enu_timerStatus_t errorStatus = TIMER_OK;
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	24 c0       	rjmp	.+72     	; 0x19b4 <u8Timer2_setTime_ms+0xe8>
		{
			preload = OVF_TICKS - desired_ticks;
			TCNT2_REG = preload;
			global_ovf = 1;
		}
		else if(desired_ticks > OVF_TICKS)
    196c:	61 30       	cpi	r22, 0x01	; 1
    196e:	21 e0       	ldi	r18, 0x01	; 1
    1970:	72 07       	cpc	r23, r18
    1972:	81 05       	cpc	r24, r1
    1974:	91 05       	cpc	r25, r1
    1976:	d8 f0       	brcs	.+54     	; 0x19ae <u8Timer2_setTime_ms+0xe2>
		{
			global_ovf = (Uchar8_t)(desired_ticks / OVF_TICKS);
    1978:	70 93 d9 02 	sts	0x02D9, r23	; 0x8002d9 <global_ovf>
			preload = (uint16_t)(OVF_TICKS - (desired_ticks % OVF_TICKS ));
    197c:	77 27       	eor	r23, r23
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	91 e0       	ldi	r25, 0x01	; 1
    1982:	86 1b       	sub	r24, r22
    1984:	97 0b       	sbc	r25, r23
    1986:	90 93 d8 02 	sts	0x02D8, r25	; 0x8002d8 <preload+0x1>
    198a:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <preload>
			TCNT2_REG = preload;
    198e:	84 bd       	out	0x24, r24	; 36
			if (preload > 0U)
    1990:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <preload>
    1994:	90 91 d8 02 	lds	r25, 0x02D8	; 0x8002d8 <preload+0x1>
    1998:	89 2b       	or	r24, r25
    199a:	59 f0       	breq	.+22     	; 0x19b2 <u8Timer2_setTime_ms+0xe6>
			{
				global_ovf++;
    199c:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <global_ovf>
    19a0:	8f 5f       	subi	r24, 0xFF	; 255
    19a2:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <global_ovf>
	return errorStatus;
}
/*************************************************************************************************************/
enu_timerStatus_t u8Timer2_setTime_ms(Uint32_t u32_time_ms)
{
	enu_timerStatus_t errorStatus = TIMER_OK;
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	05 c0       	rjmp	.+10     	; 0x19b4 <u8Timer2_setTime_ms+0xe8>
			}
		}
	}
		else
		{
			errorStatus = TIMER_NOK;
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	03 c0       	rjmp	.+6      	; 0x19b4 <u8Timer2_setTime_ms+0xe8>
	return errorStatus;
}
/*************************************************************************************************************/
enu_timerStatus_t u8Timer2_setTime_ms(Uint32_t u32_time_ms)
{
	enu_timerStatus_t errorStatus = TIMER_OK;
    19ae:	80 e0       	ldi	r24, 0x00	; 0
    19b0:	01 c0       	rjmp	.+2      	; 0x19b4 <u8Timer2_setTime_ms+0xe8>
    19b2:	80 e0       	ldi	r24, 0x00	; 0
			errorStatus = TIMER_NOK;
		}


		return errorStatus;
	}
    19b4:	ff 90       	pop	r15
    19b6:	ef 90       	pop	r14
    19b8:	df 90       	pop	r13
    19ba:	cf 90       	pop	r12
    19bc:	bf 90       	pop	r11
    19be:	af 90       	pop	r10
    19c0:	9f 90       	pop	r9
    19c2:	8f 90       	pop	r8
    19c4:	08 95       	ret

000019c6 <vidTimer2_setcbf_OVF>:

/*************************************************************************************************************/
void vidTimer2_setcbf_OVF(cbf_t cbf)
{
	if (cbf != NULL)
    19c6:	00 97       	sbiw	r24, 0x00	; 0
    19c8:	21 f0       	breq	.+8      	; 0x19d2 <vidTimer2_setcbf_OVF+0xc>
	{
		globalCallFunc = cbf;
    19ca:	90 93 d6 02 	sts	0x02D6, r25	; 0x8002d6 <globalCallFunc+0x1>
    19ce:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <globalCallFunc>
    19d2:	08 95       	ret

000019d4 <__vector_5>:

/*************************************************************************************************************
 * 							ISR Interrupt Handling
 ************************************************************************************************************/
ISR(TIMER2_OVF_vect)
{
    19d4:	1f 92       	push	r1
    19d6:	0f 92       	push	r0
    19d8:	0f b6       	in	r0, 0x3f	; 63
    19da:	0f 92       	push	r0
    19dc:	11 24       	eor	r1, r1
    19de:	2f 93       	push	r18
    19e0:	3f 93       	push	r19
    19e2:	4f 93       	push	r20
    19e4:	5f 93       	push	r21
    19e6:	6f 93       	push	r22
    19e8:	7f 93       	push	r23
    19ea:	8f 93       	push	r24
    19ec:	9f 93       	push	r25
    19ee:	af 93       	push	r26
    19f0:	bf 93       	push	r27
    19f2:	ef 93       	push	r30
    19f4:	ff 93       	push	r31
	static Uchar8_t counter = 0;
	counter++;
    19f6:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <counter.1731>
    19fa:	8f 5f       	subi	r24, 0xFF	; 255
    19fc:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <counter.1731>
	if(counter == global_ovf)
    1a00:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <global_ovf>
    1a04:	89 13       	cpse	r24, r25
    1a06:	0c c0       	rjmp	.+24     	; 0x1a20 <__vector_5+0x4c>
	{
		if (globalCallFunc != NULL)
    1a08:	e0 91 d5 02 	lds	r30, 0x02D5	; 0x8002d5 <globalCallFunc>
    1a0c:	f0 91 d6 02 	lds	r31, 0x02D6	; 0x8002d6 <globalCallFunc+0x1>
    1a10:	30 97       	sbiw	r30, 0x00	; 0
    1a12:	31 f0       	breq	.+12     	; 0x1a20 <__vector_5+0x4c>
		{
			counter = 0;
    1a14:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <counter.1731>

			globalCallFunc();
    1a18:	09 95       	icall
			TCNT2_REG = preload;
    1a1a:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <preload>
    1a1e:	84 bd       	out	0x24, r24	; 36
//			global_ovf = 0;
//			vidTimer1_stop();
		}
	}
}
    1a20:	ff 91       	pop	r31
    1a22:	ef 91       	pop	r30
    1a24:	bf 91       	pop	r27
    1a26:	af 91       	pop	r26
    1a28:	9f 91       	pop	r25
    1a2a:	8f 91       	pop	r24
    1a2c:	7f 91       	pop	r23
    1a2e:	6f 91       	pop	r22
    1a30:	5f 91       	pop	r21
    1a32:	4f 91       	pop	r20
    1a34:	3f 91       	pop	r19
    1a36:	2f 91       	pop	r18
    1a38:	0f 90       	pop	r0
    1a3a:	0f be       	out	0x3f, r0	; 63
    1a3c:	0f 90       	pop	r0
    1a3e:	1f 90       	pop	r1
    1a40:	18 95       	reti

00001a42 <__subsf3>:
    1a42:	50 58       	subi	r21, 0x80	; 128

00001a44 <__addsf3>:
    1a44:	bb 27       	eor	r27, r27
    1a46:	aa 27       	eor	r26, r26
    1a48:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__addsf3x>
    1a4c:	0c 94 ac 0e 	jmp	0x1d58	; 0x1d58 <__fp_round>
    1a50:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <__fp_pscA>
    1a54:	38 f0       	brcs	.+14     	; 0x1a64 <__addsf3+0x20>
    1a56:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <__fp_pscB>
    1a5a:	20 f0       	brcs	.+8      	; 0x1a64 <__addsf3+0x20>
    1a5c:	39 f4       	brne	.+14     	; 0x1a6c <__addsf3+0x28>
    1a5e:	9f 3f       	cpi	r25, 0xFF	; 255
    1a60:	19 f4       	brne	.+6      	; 0x1a68 <__addsf3+0x24>
    1a62:	26 f4       	brtc	.+8      	; 0x1a6c <__addsf3+0x28>
    1a64:	0c 94 9b 0e 	jmp	0x1d36	; 0x1d36 <__fp_nan>
    1a68:	0e f4       	brtc	.+2      	; 0x1a6c <__addsf3+0x28>
    1a6a:	e0 95       	com	r30
    1a6c:	e7 fb       	bst	r30, 7
    1a6e:	0c 94 95 0e 	jmp	0x1d2a	; 0x1d2a <__fp_inf>

00001a72 <__addsf3x>:
    1a72:	e9 2f       	mov	r30, r25
    1a74:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__fp_split3>
    1a78:	58 f3       	brcs	.-42     	; 0x1a50 <__addsf3+0xc>
    1a7a:	ba 17       	cp	r27, r26
    1a7c:	62 07       	cpc	r22, r18
    1a7e:	73 07       	cpc	r23, r19
    1a80:	84 07       	cpc	r24, r20
    1a82:	95 07       	cpc	r25, r21
    1a84:	20 f0       	brcs	.+8      	; 0x1a8e <__addsf3x+0x1c>
    1a86:	79 f4       	brne	.+30     	; 0x1aa6 <__addsf3x+0x34>
    1a88:	a6 f5       	brtc	.+104    	; 0x1af2 <__addsf3x+0x80>
    1a8a:	0c 94 df 0e 	jmp	0x1dbe	; 0x1dbe <__fp_zero>
    1a8e:	0e f4       	brtc	.+2      	; 0x1a92 <__addsf3x+0x20>
    1a90:	e0 95       	com	r30
    1a92:	0b 2e       	mov	r0, r27
    1a94:	ba 2f       	mov	r27, r26
    1a96:	a0 2d       	mov	r26, r0
    1a98:	0b 01       	movw	r0, r22
    1a9a:	b9 01       	movw	r22, r18
    1a9c:	90 01       	movw	r18, r0
    1a9e:	0c 01       	movw	r0, r24
    1aa0:	ca 01       	movw	r24, r20
    1aa2:	a0 01       	movw	r20, r0
    1aa4:	11 24       	eor	r1, r1
    1aa6:	ff 27       	eor	r31, r31
    1aa8:	59 1b       	sub	r21, r25
    1aaa:	99 f0       	breq	.+38     	; 0x1ad2 <__addsf3x+0x60>
    1aac:	59 3f       	cpi	r21, 0xF9	; 249
    1aae:	50 f4       	brcc	.+20     	; 0x1ac4 <__addsf3x+0x52>
    1ab0:	50 3e       	cpi	r21, 0xE0	; 224
    1ab2:	68 f1       	brcs	.+90     	; 0x1b0e <__addsf3x+0x9c>
    1ab4:	1a 16       	cp	r1, r26
    1ab6:	f0 40       	sbci	r31, 0x00	; 0
    1ab8:	a2 2f       	mov	r26, r18
    1aba:	23 2f       	mov	r18, r19
    1abc:	34 2f       	mov	r19, r20
    1abe:	44 27       	eor	r20, r20
    1ac0:	58 5f       	subi	r21, 0xF8	; 248
    1ac2:	f3 cf       	rjmp	.-26     	; 0x1aaa <__addsf3x+0x38>
    1ac4:	46 95       	lsr	r20
    1ac6:	37 95       	ror	r19
    1ac8:	27 95       	ror	r18
    1aca:	a7 95       	ror	r26
    1acc:	f0 40       	sbci	r31, 0x00	; 0
    1ace:	53 95       	inc	r21
    1ad0:	c9 f7       	brne	.-14     	; 0x1ac4 <__addsf3x+0x52>
    1ad2:	7e f4       	brtc	.+30     	; 0x1af2 <__addsf3x+0x80>
    1ad4:	1f 16       	cp	r1, r31
    1ad6:	ba 0b       	sbc	r27, r26
    1ad8:	62 0b       	sbc	r22, r18
    1ada:	73 0b       	sbc	r23, r19
    1adc:	84 0b       	sbc	r24, r20
    1ade:	ba f0       	brmi	.+46     	; 0x1b0e <__addsf3x+0x9c>
    1ae0:	91 50       	subi	r25, 0x01	; 1
    1ae2:	a1 f0       	breq	.+40     	; 0x1b0c <__addsf3x+0x9a>
    1ae4:	ff 0f       	add	r31, r31
    1ae6:	bb 1f       	adc	r27, r27
    1ae8:	66 1f       	adc	r22, r22
    1aea:	77 1f       	adc	r23, r23
    1aec:	88 1f       	adc	r24, r24
    1aee:	c2 f7       	brpl	.-16     	; 0x1ae0 <__addsf3x+0x6e>
    1af0:	0e c0       	rjmp	.+28     	; 0x1b0e <__addsf3x+0x9c>
    1af2:	ba 0f       	add	r27, r26
    1af4:	62 1f       	adc	r22, r18
    1af6:	73 1f       	adc	r23, r19
    1af8:	84 1f       	adc	r24, r20
    1afa:	48 f4       	brcc	.+18     	; 0x1b0e <__addsf3x+0x9c>
    1afc:	87 95       	ror	r24
    1afe:	77 95       	ror	r23
    1b00:	67 95       	ror	r22
    1b02:	b7 95       	ror	r27
    1b04:	f7 95       	ror	r31
    1b06:	9e 3f       	cpi	r25, 0xFE	; 254
    1b08:	08 f0       	brcs	.+2      	; 0x1b0c <__addsf3x+0x9a>
    1b0a:	b0 cf       	rjmp	.-160    	; 0x1a6c <__addsf3+0x28>
    1b0c:	93 95       	inc	r25
    1b0e:	88 0f       	add	r24, r24
    1b10:	08 f0       	brcs	.+2      	; 0x1b14 <__addsf3x+0xa2>
    1b12:	99 27       	eor	r25, r25
    1b14:	ee 0f       	add	r30, r30
    1b16:	97 95       	ror	r25
    1b18:	87 95       	ror	r24
    1b1a:	08 95       	ret

00001b1c <__cmpsf2>:
    1b1c:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__fp_cmp>
    1b20:	08 f4       	brcc	.+2      	; 0x1b24 <__cmpsf2+0x8>
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	08 95       	ret

00001b26 <__divsf3>:
    1b26:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <__divsf3x>
    1b2a:	0c 94 ac 0e 	jmp	0x1d58	; 0x1d58 <__fp_round>
    1b2e:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <__fp_pscB>
    1b32:	58 f0       	brcs	.+22     	; 0x1b4a <__divsf3+0x24>
    1b34:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <__fp_pscA>
    1b38:	40 f0       	brcs	.+16     	; 0x1b4a <__divsf3+0x24>
    1b3a:	29 f4       	brne	.+10     	; 0x1b46 <__divsf3+0x20>
    1b3c:	5f 3f       	cpi	r21, 0xFF	; 255
    1b3e:	29 f0       	breq	.+10     	; 0x1b4a <__divsf3+0x24>
    1b40:	0c 94 95 0e 	jmp	0x1d2a	; 0x1d2a <__fp_inf>
    1b44:	51 11       	cpse	r21, r1
    1b46:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <__fp_szero>
    1b4a:	0c 94 9b 0e 	jmp	0x1d36	; 0x1d36 <__fp_nan>

00001b4e <__divsf3x>:
    1b4e:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__fp_split3>
    1b52:	68 f3       	brcs	.-38     	; 0x1b2e <__divsf3+0x8>

00001b54 <__divsf3_pse>:
    1b54:	99 23       	and	r25, r25
    1b56:	b1 f3       	breq	.-20     	; 0x1b44 <__divsf3+0x1e>
    1b58:	55 23       	and	r21, r21
    1b5a:	91 f3       	breq	.-28     	; 0x1b40 <__divsf3+0x1a>
    1b5c:	95 1b       	sub	r25, r21
    1b5e:	55 0b       	sbc	r21, r21
    1b60:	bb 27       	eor	r27, r27
    1b62:	aa 27       	eor	r26, r26
    1b64:	62 17       	cp	r22, r18
    1b66:	73 07       	cpc	r23, r19
    1b68:	84 07       	cpc	r24, r20
    1b6a:	38 f0       	brcs	.+14     	; 0x1b7a <__divsf3_pse+0x26>
    1b6c:	9f 5f       	subi	r25, 0xFF	; 255
    1b6e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b70:	22 0f       	add	r18, r18
    1b72:	33 1f       	adc	r19, r19
    1b74:	44 1f       	adc	r20, r20
    1b76:	aa 1f       	adc	r26, r26
    1b78:	a9 f3       	breq	.-22     	; 0x1b64 <__divsf3_pse+0x10>
    1b7a:	35 d0       	rcall	.+106    	; 0x1be6 <__divsf3_pse+0x92>
    1b7c:	0e 2e       	mov	r0, r30
    1b7e:	3a f0       	brmi	.+14     	; 0x1b8e <__divsf3_pse+0x3a>
    1b80:	e0 e8       	ldi	r30, 0x80	; 128
    1b82:	32 d0       	rcall	.+100    	; 0x1be8 <__divsf3_pse+0x94>
    1b84:	91 50       	subi	r25, 0x01	; 1
    1b86:	50 40       	sbci	r21, 0x00	; 0
    1b88:	e6 95       	lsr	r30
    1b8a:	00 1c       	adc	r0, r0
    1b8c:	ca f7       	brpl	.-14     	; 0x1b80 <__divsf3_pse+0x2c>
    1b8e:	2b d0       	rcall	.+86     	; 0x1be6 <__divsf3_pse+0x92>
    1b90:	fe 2f       	mov	r31, r30
    1b92:	29 d0       	rcall	.+82     	; 0x1be6 <__divsf3_pse+0x92>
    1b94:	66 0f       	add	r22, r22
    1b96:	77 1f       	adc	r23, r23
    1b98:	88 1f       	adc	r24, r24
    1b9a:	bb 1f       	adc	r27, r27
    1b9c:	26 17       	cp	r18, r22
    1b9e:	37 07       	cpc	r19, r23
    1ba0:	48 07       	cpc	r20, r24
    1ba2:	ab 07       	cpc	r26, r27
    1ba4:	b0 e8       	ldi	r27, 0x80	; 128
    1ba6:	09 f0       	breq	.+2      	; 0x1baa <__divsf3_pse+0x56>
    1ba8:	bb 0b       	sbc	r27, r27
    1baa:	80 2d       	mov	r24, r0
    1bac:	bf 01       	movw	r22, r30
    1bae:	ff 27       	eor	r31, r31
    1bb0:	93 58       	subi	r25, 0x83	; 131
    1bb2:	5f 4f       	sbci	r21, 0xFF	; 255
    1bb4:	3a f0       	brmi	.+14     	; 0x1bc4 <__divsf3_pse+0x70>
    1bb6:	9e 3f       	cpi	r25, 0xFE	; 254
    1bb8:	51 05       	cpc	r21, r1
    1bba:	78 f0       	brcs	.+30     	; 0x1bda <__divsf3_pse+0x86>
    1bbc:	0c 94 95 0e 	jmp	0x1d2a	; 0x1d2a <__fp_inf>
    1bc0:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <__fp_szero>
    1bc4:	5f 3f       	cpi	r21, 0xFF	; 255
    1bc6:	e4 f3       	brlt	.-8      	; 0x1bc0 <__divsf3_pse+0x6c>
    1bc8:	98 3e       	cpi	r25, 0xE8	; 232
    1bca:	d4 f3       	brlt	.-12     	; 0x1bc0 <__divsf3_pse+0x6c>
    1bcc:	86 95       	lsr	r24
    1bce:	77 95       	ror	r23
    1bd0:	67 95       	ror	r22
    1bd2:	b7 95       	ror	r27
    1bd4:	f7 95       	ror	r31
    1bd6:	9f 5f       	subi	r25, 0xFF	; 255
    1bd8:	c9 f7       	brne	.-14     	; 0x1bcc <__divsf3_pse+0x78>
    1bda:	88 0f       	add	r24, r24
    1bdc:	91 1d       	adc	r25, r1
    1bde:	96 95       	lsr	r25
    1be0:	87 95       	ror	r24
    1be2:	97 f9       	bld	r25, 7
    1be4:	08 95       	ret
    1be6:	e1 e0       	ldi	r30, 0x01	; 1
    1be8:	66 0f       	add	r22, r22
    1bea:	77 1f       	adc	r23, r23
    1bec:	88 1f       	adc	r24, r24
    1bee:	bb 1f       	adc	r27, r27
    1bf0:	62 17       	cp	r22, r18
    1bf2:	73 07       	cpc	r23, r19
    1bf4:	84 07       	cpc	r24, r20
    1bf6:	ba 07       	cpc	r27, r26
    1bf8:	20 f0       	brcs	.+8      	; 0x1c02 <__divsf3_pse+0xae>
    1bfa:	62 1b       	sub	r22, r18
    1bfc:	73 0b       	sbc	r23, r19
    1bfe:	84 0b       	sbc	r24, r20
    1c00:	ba 0b       	sbc	r27, r26
    1c02:	ee 1f       	adc	r30, r30
    1c04:	88 f7       	brcc	.-30     	; 0x1be8 <__divsf3_pse+0x94>
    1c06:	e0 95       	com	r30
    1c08:	08 95       	ret

00001c0a <__fixunssfsi>:
    1c0a:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__fp_splitA>
    1c0e:	88 f0       	brcs	.+34     	; 0x1c32 <__fixunssfsi+0x28>
    1c10:	9f 57       	subi	r25, 0x7F	; 127
    1c12:	98 f0       	brcs	.+38     	; 0x1c3a <__fixunssfsi+0x30>
    1c14:	b9 2f       	mov	r27, r25
    1c16:	99 27       	eor	r25, r25
    1c18:	b7 51       	subi	r27, 0x17	; 23
    1c1a:	b0 f0       	brcs	.+44     	; 0x1c48 <__fixunssfsi+0x3e>
    1c1c:	e1 f0       	breq	.+56     	; 0x1c56 <__fixunssfsi+0x4c>
    1c1e:	66 0f       	add	r22, r22
    1c20:	77 1f       	adc	r23, r23
    1c22:	88 1f       	adc	r24, r24
    1c24:	99 1f       	adc	r25, r25
    1c26:	1a f0       	brmi	.+6      	; 0x1c2e <__fixunssfsi+0x24>
    1c28:	ba 95       	dec	r27
    1c2a:	c9 f7       	brne	.-14     	; 0x1c1e <__fixunssfsi+0x14>
    1c2c:	14 c0       	rjmp	.+40     	; 0x1c56 <__fixunssfsi+0x4c>
    1c2e:	b1 30       	cpi	r27, 0x01	; 1
    1c30:	91 f0       	breq	.+36     	; 0x1c56 <__fixunssfsi+0x4c>
    1c32:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <__fp_zero>
    1c36:	b1 e0       	ldi	r27, 0x01	; 1
    1c38:	08 95       	ret
    1c3a:	0c 94 df 0e 	jmp	0x1dbe	; 0x1dbe <__fp_zero>
    1c3e:	67 2f       	mov	r22, r23
    1c40:	78 2f       	mov	r23, r24
    1c42:	88 27       	eor	r24, r24
    1c44:	b8 5f       	subi	r27, 0xF8	; 248
    1c46:	39 f0       	breq	.+14     	; 0x1c56 <__fixunssfsi+0x4c>
    1c48:	b9 3f       	cpi	r27, 0xF9	; 249
    1c4a:	cc f3       	brlt	.-14     	; 0x1c3e <__fixunssfsi+0x34>
    1c4c:	86 95       	lsr	r24
    1c4e:	77 95       	ror	r23
    1c50:	67 95       	ror	r22
    1c52:	b3 95       	inc	r27
    1c54:	d9 f7       	brne	.-10     	; 0x1c4c <__fixunssfsi+0x42>
    1c56:	3e f4       	brtc	.+14     	; 0x1c66 <__fixunssfsi+0x5c>
    1c58:	90 95       	com	r25
    1c5a:	80 95       	com	r24
    1c5c:	70 95       	com	r23
    1c5e:	61 95       	neg	r22
    1c60:	7f 4f       	sbci	r23, 0xFF	; 255
    1c62:	8f 4f       	sbci	r24, 0xFF	; 255
    1c64:	9f 4f       	sbci	r25, 0xFF	; 255
    1c66:	08 95       	ret

00001c68 <__floatunsisf>:
    1c68:	e8 94       	clt
    1c6a:	09 c0       	rjmp	.+18     	; 0x1c7e <__floatsisf+0x12>

00001c6c <__floatsisf>:
    1c6c:	97 fb       	bst	r25, 7
    1c6e:	3e f4       	brtc	.+14     	; 0x1c7e <__floatsisf+0x12>
    1c70:	90 95       	com	r25
    1c72:	80 95       	com	r24
    1c74:	70 95       	com	r23
    1c76:	61 95       	neg	r22
    1c78:	7f 4f       	sbci	r23, 0xFF	; 255
    1c7a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c7e:	99 23       	and	r25, r25
    1c80:	a9 f0       	breq	.+42     	; 0x1cac <__floatsisf+0x40>
    1c82:	f9 2f       	mov	r31, r25
    1c84:	96 e9       	ldi	r25, 0x96	; 150
    1c86:	bb 27       	eor	r27, r27
    1c88:	93 95       	inc	r25
    1c8a:	f6 95       	lsr	r31
    1c8c:	87 95       	ror	r24
    1c8e:	77 95       	ror	r23
    1c90:	67 95       	ror	r22
    1c92:	b7 95       	ror	r27
    1c94:	f1 11       	cpse	r31, r1
    1c96:	f8 cf       	rjmp	.-16     	; 0x1c88 <__floatsisf+0x1c>
    1c98:	fa f4       	brpl	.+62     	; 0x1cd8 <__floatsisf+0x6c>
    1c9a:	bb 0f       	add	r27, r27
    1c9c:	11 f4       	brne	.+4      	; 0x1ca2 <__floatsisf+0x36>
    1c9e:	60 ff       	sbrs	r22, 0
    1ca0:	1b c0       	rjmp	.+54     	; 0x1cd8 <__floatsisf+0x6c>
    1ca2:	6f 5f       	subi	r22, 0xFF	; 255
    1ca4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ca8:	9f 4f       	sbci	r25, 0xFF	; 255
    1caa:	16 c0       	rjmp	.+44     	; 0x1cd8 <__floatsisf+0x6c>
    1cac:	88 23       	and	r24, r24
    1cae:	11 f0       	breq	.+4      	; 0x1cb4 <__floatsisf+0x48>
    1cb0:	96 e9       	ldi	r25, 0x96	; 150
    1cb2:	11 c0       	rjmp	.+34     	; 0x1cd6 <__floatsisf+0x6a>
    1cb4:	77 23       	and	r23, r23
    1cb6:	21 f0       	breq	.+8      	; 0x1cc0 <__floatsisf+0x54>
    1cb8:	9e e8       	ldi	r25, 0x8E	; 142
    1cba:	87 2f       	mov	r24, r23
    1cbc:	76 2f       	mov	r23, r22
    1cbe:	05 c0       	rjmp	.+10     	; 0x1cca <__floatsisf+0x5e>
    1cc0:	66 23       	and	r22, r22
    1cc2:	71 f0       	breq	.+28     	; 0x1ce0 <__floatsisf+0x74>
    1cc4:	96 e8       	ldi	r25, 0x86	; 134
    1cc6:	86 2f       	mov	r24, r22
    1cc8:	70 e0       	ldi	r23, 0x00	; 0
    1cca:	60 e0       	ldi	r22, 0x00	; 0
    1ccc:	2a f0       	brmi	.+10     	; 0x1cd8 <__floatsisf+0x6c>
    1cce:	9a 95       	dec	r25
    1cd0:	66 0f       	add	r22, r22
    1cd2:	77 1f       	adc	r23, r23
    1cd4:	88 1f       	adc	r24, r24
    1cd6:	da f7       	brpl	.-10     	; 0x1cce <__floatsisf+0x62>
    1cd8:	88 0f       	add	r24, r24
    1cda:	96 95       	lsr	r25
    1cdc:	87 95       	ror	r24
    1cde:	97 f9       	bld	r25, 7
    1ce0:	08 95       	ret

00001ce2 <__fp_cmp>:
    1ce2:	99 0f       	add	r25, r25
    1ce4:	00 08       	sbc	r0, r0
    1ce6:	55 0f       	add	r21, r21
    1ce8:	aa 0b       	sbc	r26, r26
    1cea:	e0 e8       	ldi	r30, 0x80	; 128
    1cec:	fe ef       	ldi	r31, 0xFE	; 254
    1cee:	16 16       	cp	r1, r22
    1cf0:	17 06       	cpc	r1, r23
    1cf2:	e8 07       	cpc	r30, r24
    1cf4:	f9 07       	cpc	r31, r25
    1cf6:	c0 f0       	brcs	.+48     	; 0x1d28 <__fp_cmp+0x46>
    1cf8:	12 16       	cp	r1, r18
    1cfa:	13 06       	cpc	r1, r19
    1cfc:	e4 07       	cpc	r30, r20
    1cfe:	f5 07       	cpc	r31, r21
    1d00:	98 f0       	brcs	.+38     	; 0x1d28 <__fp_cmp+0x46>
    1d02:	62 1b       	sub	r22, r18
    1d04:	73 0b       	sbc	r23, r19
    1d06:	84 0b       	sbc	r24, r20
    1d08:	95 0b       	sbc	r25, r21
    1d0a:	39 f4       	brne	.+14     	; 0x1d1a <__fp_cmp+0x38>
    1d0c:	0a 26       	eor	r0, r26
    1d0e:	61 f0       	breq	.+24     	; 0x1d28 <__fp_cmp+0x46>
    1d10:	23 2b       	or	r18, r19
    1d12:	24 2b       	or	r18, r20
    1d14:	25 2b       	or	r18, r21
    1d16:	21 f4       	brne	.+8      	; 0x1d20 <__fp_cmp+0x3e>
    1d18:	08 95       	ret
    1d1a:	0a 26       	eor	r0, r26
    1d1c:	09 f4       	brne	.+2      	; 0x1d20 <__fp_cmp+0x3e>
    1d1e:	a1 40       	sbci	r26, 0x01	; 1
    1d20:	a6 95       	lsr	r26
    1d22:	8f ef       	ldi	r24, 0xFF	; 255
    1d24:	81 1d       	adc	r24, r1
    1d26:	81 1d       	adc	r24, r1
    1d28:	08 95       	ret

00001d2a <__fp_inf>:
    1d2a:	97 f9       	bld	r25, 7
    1d2c:	9f 67       	ori	r25, 0x7F	; 127
    1d2e:	80 e8       	ldi	r24, 0x80	; 128
    1d30:	70 e0       	ldi	r23, 0x00	; 0
    1d32:	60 e0       	ldi	r22, 0x00	; 0
    1d34:	08 95       	ret

00001d36 <__fp_nan>:
    1d36:	9f ef       	ldi	r25, 0xFF	; 255
    1d38:	80 ec       	ldi	r24, 0xC0	; 192
    1d3a:	08 95       	ret

00001d3c <__fp_pscA>:
    1d3c:	00 24       	eor	r0, r0
    1d3e:	0a 94       	dec	r0
    1d40:	16 16       	cp	r1, r22
    1d42:	17 06       	cpc	r1, r23
    1d44:	18 06       	cpc	r1, r24
    1d46:	09 06       	cpc	r0, r25
    1d48:	08 95       	ret

00001d4a <__fp_pscB>:
    1d4a:	00 24       	eor	r0, r0
    1d4c:	0a 94       	dec	r0
    1d4e:	12 16       	cp	r1, r18
    1d50:	13 06       	cpc	r1, r19
    1d52:	14 06       	cpc	r1, r20
    1d54:	05 06       	cpc	r0, r21
    1d56:	08 95       	ret

00001d58 <__fp_round>:
    1d58:	09 2e       	mov	r0, r25
    1d5a:	03 94       	inc	r0
    1d5c:	00 0c       	add	r0, r0
    1d5e:	11 f4       	brne	.+4      	; 0x1d64 <__fp_round+0xc>
    1d60:	88 23       	and	r24, r24
    1d62:	52 f0       	brmi	.+20     	; 0x1d78 <__fp_round+0x20>
    1d64:	bb 0f       	add	r27, r27
    1d66:	40 f4       	brcc	.+16     	; 0x1d78 <__fp_round+0x20>
    1d68:	bf 2b       	or	r27, r31
    1d6a:	11 f4       	brne	.+4      	; 0x1d70 <__fp_round+0x18>
    1d6c:	60 ff       	sbrs	r22, 0
    1d6e:	04 c0       	rjmp	.+8      	; 0x1d78 <__fp_round+0x20>
    1d70:	6f 5f       	subi	r22, 0xFF	; 255
    1d72:	7f 4f       	sbci	r23, 0xFF	; 255
    1d74:	8f 4f       	sbci	r24, 0xFF	; 255
    1d76:	9f 4f       	sbci	r25, 0xFF	; 255
    1d78:	08 95       	ret

00001d7a <__fp_split3>:
    1d7a:	57 fd       	sbrc	r21, 7
    1d7c:	90 58       	subi	r25, 0x80	; 128
    1d7e:	44 0f       	add	r20, r20
    1d80:	55 1f       	adc	r21, r21
    1d82:	59 f0       	breq	.+22     	; 0x1d9a <__fp_splitA+0x10>
    1d84:	5f 3f       	cpi	r21, 0xFF	; 255
    1d86:	71 f0       	breq	.+28     	; 0x1da4 <__fp_splitA+0x1a>
    1d88:	47 95       	ror	r20

00001d8a <__fp_splitA>:
    1d8a:	88 0f       	add	r24, r24
    1d8c:	97 fb       	bst	r25, 7
    1d8e:	99 1f       	adc	r25, r25
    1d90:	61 f0       	breq	.+24     	; 0x1daa <__fp_splitA+0x20>
    1d92:	9f 3f       	cpi	r25, 0xFF	; 255
    1d94:	79 f0       	breq	.+30     	; 0x1db4 <__fp_splitA+0x2a>
    1d96:	87 95       	ror	r24
    1d98:	08 95       	ret
    1d9a:	12 16       	cp	r1, r18
    1d9c:	13 06       	cpc	r1, r19
    1d9e:	14 06       	cpc	r1, r20
    1da0:	55 1f       	adc	r21, r21
    1da2:	f2 cf       	rjmp	.-28     	; 0x1d88 <__fp_split3+0xe>
    1da4:	46 95       	lsr	r20
    1da6:	f1 df       	rcall	.-30     	; 0x1d8a <__fp_splitA>
    1da8:	08 c0       	rjmp	.+16     	; 0x1dba <__fp_splitA+0x30>
    1daa:	16 16       	cp	r1, r22
    1dac:	17 06       	cpc	r1, r23
    1dae:	18 06       	cpc	r1, r24
    1db0:	99 1f       	adc	r25, r25
    1db2:	f1 cf       	rjmp	.-30     	; 0x1d96 <__fp_splitA+0xc>
    1db4:	86 95       	lsr	r24
    1db6:	71 05       	cpc	r23, r1
    1db8:	61 05       	cpc	r22, r1
    1dba:	08 94       	sec
    1dbc:	08 95       	ret

00001dbe <__fp_zero>:
    1dbe:	e8 94       	clt

00001dc0 <__fp_szero>:
    1dc0:	bb 27       	eor	r27, r27
    1dc2:	66 27       	eor	r22, r22
    1dc4:	77 27       	eor	r23, r23
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	97 f9       	bld	r25, 7
    1dca:	08 95       	ret

00001dcc <__mulsf3>:
    1dcc:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <__mulsf3x>
    1dd0:	0c 94 ac 0e 	jmp	0x1d58	; 0x1d58 <__fp_round>
    1dd4:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <__fp_pscA>
    1dd8:	38 f0       	brcs	.+14     	; 0x1de8 <__mulsf3+0x1c>
    1dda:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <__fp_pscB>
    1dde:	20 f0       	brcs	.+8      	; 0x1de8 <__mulsf3+0x1c>
    1de0:	95 23       	and	r25, r21
    1de2:	11 f0       	breq	.+4      	; 0x1de8 <__mulsf3+0x1c>
    1de4:	0c 94 95 0e 	jmp	0x1d2a	; 0x1d2a <__fp_inf>
    1de8:	0c 94 9b 0e 	jmp	0x1d36	; 0x1d36 <__fp_nan>
    1dec:	11 24       	eor	r1, r1
    1dee:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <__fp_szero>

00001df2 <__mulsf3x>:
    1df2:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__fp_split3>
    1df6:	70 f3       	brcs	.-36     	; 0x1dd4 <__mulsf3+0x8>

00001df8 <__mulsf3_pse>:
    1df8:	95 9f       	mul	r25, r21
    1dfa:	c1 f3       	breq	.-16     	; 0x1dec <__mulsf3+0x20>
    1dfc:	95 0f       	add	r25, r21
    1dfe:	50 e0       	ldi	r21, 0x00	; 0
    1e00:	55 1f       	adc	r21, r21
    1e02:	62 9f       	mul	r22, r18
    1e04:	f0 01       	movw	r30, r0
    1e06:	72 9f       	mul	r23, r18
    1e08:	bb 27       	eor	r27, r27
    1e0a:	f0 0d       	add	r31, r0
    1e0c:	b1 1d       	adc	r27, r1
    1e0e:	63 9f       	mul	r22, r19
    1e10:	aa 27       	eor	r26, r26
    1e12:	f0 0d       	add	r31, r0
    1e14:	b1 1d       	adc	r27, r1
    1e16:	aa 1f       	adc	r26, r26
    1e18:	64 9f       	mul	r22, r20
    1e1a:	66 27       	eor	r22, r22
    1e1c:	b0 0d       	add	r27, r0
    1e1e:	a1 1d       	adc	r26, r1
    1e20:	66 1f       	adc	r22, r22
    1e22:	82 9f       	mul	r24, r18
    1e24:	22 27       	eor	r18, r18
    1e26:	b0 0d       	add	r27, r0
    1e28:	a1 1d       	adc	r26, r1
    1e2a:	62 1f       	adc	r22, r18
    1e2c:	73 9f       	mul	r23, r19
    1e2e:	b0 0d       	add	r27, r0
    1e30:	a1 1d       	adc	r26, r1
    1e32:	62 1f       	adc	r22, r18
    1e34:	83 9f       	mul	r24, r19
    1e36:	a0 0d       	add	r26, r0
    1e38:	61 1d       	adc	r22, r1
    1e3a:	22 1f       	adc	r18, r18
    1e3c:	74 9f       	mul	r23, r20
    1e3e:	33 27       	eor	r19, r19
    1e40:	a0 0d       	add	r26, r0
    1e42:	61 1d       	adc	r22, r1
    1e44:	23 1f       	adc	r18, r19
    1e46:	84 9f       	mul	r24, r20
    1e48:	60 0d       	add	r22, r0
    1e4a:	21 1d       	adc	r18, r1
    1e4c:	82 2f       	mov	r24, r18
    1e4e:	76 2f       	mov	r23, r22
    1e50:	6a 2f       	mov	r22, r26
    1e52:	11 24       	eor	r1, r1
    1e54:	9f 57       	subi	r25, 0x7F	; 127
    1e56:	50 40       	sbci	r21, 0x00	; 0
    1e58:	9a f0       	brmi	.+38     	; 0x1e80 <__mulsf3_pse+0x88>
    1e5a:	f1 f0       	breq	.+60     	; 0x1e98 <__mulsf3_pse+0xa0>
    1e5c:	88 23       	and	r24, r24
    1e5e:	4a f0       	brmi	.+18     	; 0x1e72 <__mulsf3_pse+0x7a>
    1e60:	ee 0f       	add	r30, r30
    1e62:	ff 1f       	adc	r31, r31
    1e64:	bb 1f       	adc	r27, r27
    1e66:	66 1f       	adc	r22, r22
    1e68:	77 1f       	adc	r23, r23
    1e6a:	88 1f       	adc	r24, r24
    1e6c:	91 50       	subi	r25, 0x01	; 1
    1e6e:	50 40       	sbci	r21, 0x00	; 0
    1e70:	a9 f7       	brne	.-22     	; 0x1e5c <__mulsf3_pse+0x64>
    1e72:	9e 3f       	cpi	r25, 0xFE	; 254
    1e74:	51 05       	cpc	r21, r1
    1e76:	80 f0       	brcs	.+32     	; 0x1e98 <__mulsf3_pse+0xa0>
    1e78:	0c 94 95 0e 	jmp	0x1d2a	; 0x1d2a <__fp_inf>
    1e7c:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <__fp_szero>
    1e80:	5f 3f       	cpi	r21, 0xFF	; 255
    1e82:	e4 f3       	brlt	.-8      	; 0x1e7c <__mulsf3_pse+0x84>
    1e84:	98 3e       	cpi	r25, 0xE8	; 232
    1e86:	d4 f3       	brlt	.-12     	; 0x1e7c <__mulsf3_pse+0x84>
    1e88:	86 95       	lsr	r24
    1e8a:	77 95       	ror	r23
    1e8c:	67 95       	ror	r22
    1e8e:	b7 95       	ror	r27
    1e90:	f7 95       	ror	r31
    1e92:	e7 95       	ror	r30
    1e94:	9f 5f       	subi	r25, 0xFF	; 255
    1e96:	c1 f7       	brne	.-16     	; 0x1e88 <__mulsf3_pse+0x90>
    1e98:	fe 2b       	or	r31, r30
    1e9a:	88 0f       	add	r24, r24
    1e9c:	91 1d       	adc	r25, r1
    1e9e:	96 95       	lsr	r25
    1ea0:	87 95       	ror	r24
    1ea2:	97 f9       	bld	r25, 7
    1ea4:	08 95       	ret

00001ea6 <__mulsi3>:
    1ea6:	db 01       	movw	r26, r22
    1ea8:	8f 93       	push	r24
    1eaa:	9f 93       	push	r25
    1eac:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__muluhisi3>
    1eb0:	bf 91       	pop	r27
    1eb2:	af 91       	pop	r26
    1eb4:	a2 9f       	mul	r26, r18
    1eb6:	80 0d       	add	r24, r0
    1eb8:	91 1d       	adc	r25, r1
    1eba:	a3 9f       	mul	r26, r19
    1ebc:	90 0d       	add	r25, r0
    1ebe:	b2 9f       	mul	r27, r18
    1ec0:	90 0d       	add	r25, r0
    1ec2:	11 24       	eor	r1, r1
    1ec4:	08 95       	ret

00001ec6 <__udivmodsi4>:
    1ec6:	a1 e2       	ldi	r26, 0x21	; 33
    1ec8:	1a 2e       	mov	r1, r26
    1eca:	aa 1b       	sub	r26, r26
    1ecc:	bb 1b       	sub	r27, r27
    1ece:	fd 01       	movw	r30, r26
    1ed0:	0d c0       	rjmp	.+26     	; 0x1eec <__udivmodsi4_ep>

00001ed2 <__udivmodsi4_loop>:
    1ed2:	aa 1f       	adc	r26, r26
    1ed4:	bb 1f       	adc	r27, r27
    1ed6:	ee 1f       	adc	r30, r30
    1ed8:	ff 1f       	adc	r31, r31
    1eda:	a2 17       	cp	r26, r18
    1edc:	b3 07       	cpc	r27, r19
    1ede:	e4 07       	cpc	r30, r20
    1ee0:	f5 07       	cpc	r31, r21
    1ee2:	20 f0       	brcs	.+8      	; 0x1eec <__udivmodsi4_ep>
    1ee4:	a2 1b       	sub	r26, r18
    1ee6:	b3 0b       	sbc	r27, r19
    1ee8:	e4 0b       	sbc	r30, r20
    1eea:	f5 0b       	sbc	r31, r21

00001eec <__udivmodsi4_ep>:
    1eec:	66 1f       	adc	r22, r22
    1eee:	77 1f       	adc	r23, r23
    1ef0:	88 1f       	adc	r24, r24
    1ef2:	99 1f       	adc	r25, r25
    1ef4:	1a 94       	dec	r1
    1ef6:	69 f7       	brne	.-38     	; 0x1ed2 <__udivmodsi4_loop>
    1ef8:	60 95       	com	r22
    1efa:	70 95       	com	r23
    1efc:	80 95       	com	r24
    1efe:	90 95       	com	r25
    1f00:	9b 01       	movw	r18, r22
    1f02:	ac 01       	movw	r20, r24
    1f04:	bd 01       	movw	r22, r26
    1f06:	cf 01       	movw	r24, r30
    1f08:	08 95       	ret

00001f0a <__muluhisi3>:
    1f0a:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__umulhisi3>
    1f0e:	a5 9f       	mul	r26, r21
    1f10:	90 0d       	add	r25, r0
    1f12:	b4 9f       	mul	r27, r20
    1f14:	90 0d       	add	r25, r0
    1f16:	a4 9f       	mul	r26, r20
    1f18:	80 0d       	add	r24, r0
    1f1a:	91 1d       	adc	r25, r1
    1f1c:	11 24       	eor	r1, r1
    1f1e:	08 95       	ret

00001f20 <__umulhisi3>:
    1f20:	a2 9f       	mul	r26, r18
    1f22:	b0 01       	movw	r22, r0
    1f24:	b3 9f       	mul	r27, r19
    1f26:	c0 01       	movw	r24, r0
    1f28:	a3 9f       	mul	r26, r19
    1f2a:	70 0d       	add	r23, r0
    1f2c:	81 1d       	adc	r24, r1
    1f2e:	11 24       	eor	r1, r1
    1f30:	91 1d       	adc	r25, r1
    1f32:	b2 9f       	mul	r27, r18
    1f34:	70 0d       	add	r23, r0
    1f36:	81 1d       	adc	r24, r1
    1f38:	11 24       	eor	r1, r1
    1f3a:	91 1d       	adc	r25, r1
    1f3c:	08 95       	ret

00001f3e <atof>:
    1f3e:	66 27       	eor	r22, r22
    1f40:	77 27       	eor	r23, r23
    1f42:	0c 94 b3 0f 	jmp	0x1f66	; 0x1f66 <strtod>

00001f46 <strcmp>:
    1f46:	fb 01       	movw	r30, r22
    1f48:	dc 01       	movw	r26, r24
    1f4a:	8d 91       	ld	r24, X+
    1f4c:	01 90       	ld	r0, Z+
    1f4e:	80 19       	sub	r24, r0
    1f50:	01 10       	cpse	r0, r1
    1f52:	d9 f3       	breq	.-10     	; 0x1f4a <strcmp+0x4>
    1f54:	99 0b       	sbc	r25, r25
    1f56:	08 95       	ret

00001f58 <strcpy>:
    1f58:	fb 01       	movw	r30, r22
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	01 90       	ld	r0, Z+
    1f5e:	0d 92       	st	X+, r0
    1f60:	00 20       	and	r0, r0
    1f62:	e1 f7       	brne	.-8      	; 0x1f5c <strcpy+0x4>
    1f64:	08 95       	ret

00001f66 <strtod>:
    1f66:	a0 e0       	ldi	r26, 0x00	; 0
    1f68:	b0 e0       	ldi	r27, 0x00	; 0
    1f6a:	e9 eb       	ldi	r30, 0xB9	; 185
    1f6c:	ff e0       	ldi	r31, 0x0F	; 15
    1f6e:	0c 94 2b 11 	jmp	0x2256	; 0x2256 <__prologue_saves__+0xc>
    1f72:	ec 01       	movw	r28, r24
    1f74:	6b 01       	movw	r12, r22
    1f76:	61 15       	cp	r22, r1
    1f78:	71 05       	cpc	r23, r1
    1f7a:	19 f0       	breq	.+6      	; 0x1f82 <strtod+0x1c>
    1f7c:	fb 01       	movw	r30, r22
    1f7e:	91 83       	std	Z+1, r25	; 0x01
    1f80:	80 83       	st	Z, r24
    1f82:	7e 01       	movw	r14, r28
    1f84:	ff ef       	ldi	r31, 0xFF	; 255
    1f86:	ef 1a       	sub	r14, r31
    1f88:	ff 0a       	sbc	r15, r31
    1f8a:	08 81       	ld	r16, Y
    1f8c:	80 2f       	mov	r24, r16
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	0e 94 01 11 	call	0x2202	; 0x2202 <isspace>
    1f94:	89 2b       	or	r24, r25
    1f96:	11 f0       	breq	.+4      	; 0x1f9c <strtod+0x36>
    1f98:	e7 01       	movw	r28, r14
    1f9a:	f3 cf       	rjmp	.-26     	; 0x1f82 <strtod+0x1c>
    1f9c:	0d 32       	cpi	r16, 0x2D	; 45
    1f9e:	39 f4       	brne	.+14     	; 0x1fae <strtod+0x48>
    1fa0:	7e 01       	movw	r14, r28
    1fa2:	82 e0       	ldi	r24, 0x02	; 2
    1fa4:	e8 0e       	add	r14, r24
    1fa6:	f1 1c       	adc	r15, r1
    1fa8:	09 81       	ldd	r16, Y+1	; 0x01
    1faa:	11 e0       	ldi	r17, 0x01	; 1
    1fac:	08 c0       	rjmp	.+16     	; 0x1fbe <strtod+0x58>
    1fae:	0b 32       	cpi	r16, 0x2B	; 43
    1fb0:	29 f4       	brne	.+10     	; 0x1fbc <strtod+0x56>
    1fb2:	7e 01       	movw	r14, r28
    1fb4:	92 e0       	ldi	r25, 0x02	; 2
    1fb6:	e9 0e       	add	r14, r25
    1fb8:	f1 1c       	adc	r15, r1
    1fba:	09 81       	ldd	r16, Y+1	; 0x01
    1fbc:	10 e0       	ldi	r17, 0x00	; 0
    1fbe:	e7 01       	movw	r28, r14
    1fc0:	21 97       	sbiw	r28, 0x01	; 1
    1fc2:	43 e0       	ldi	r20, 0x03	; 3
    1fc4:	50 e0       	ldi	r21, 0x00	; 0
    1fc6:	6c e5       	ldi	r22, 0x5C	; 92
    1fc8:	70 e0       	ldi	r23, 0x00	; 0
    1fca:	ce 01       	movw	r24, r28
    1fcc:	0e 94 0a 11 	call	0x2214	; 0x2214 <strncasecmp_P>
    1fd0:	89 2b       	or	r24, r25
    1fd2:	c1 f4       	brne	.+48     	; 0x2004 <strtod+0x9e>
    1fd4:	23 96       	adiw	r28, 0x03	; 3
    1fd6:	45 e0       	ldi	r20, 0x05	; 5
    1fd8:	50 e0       	ldi	r21, 0x00	; 0
    1fda:	67 e5       	ldi	r22, 0x57	; 87
    1fdc:	70 e0       	ldi	r23, 0x00	; 0
    1fde:	ce 01       	movw	r24, r28
    1fe0:	0e 94 0a 11 	call	0x2214	; 0x2214 <strncasecmp_P>
    1fe4:	89 2b       	or	r24, r25
    1fe6:	09 f4       	brne	.+2      	; 0x1fea <strtod+0x84>
    1fe8:	25 96       	adiw	r28, 0x05	; 5
    1fea:	c1 14       	cp	r12, r1
    1fec:	d1 04       	cpc	r13, r1
    1fee:	19 f0       	breq	.+6      	; 0x1ff6 <strtod+0x90>
    1ff0:	f6 01       	movw	r30, r12
    1ff2:	d1 83       	std	Z+1, r29	; 0x01
    1ff4:	c0 83       	st	Z, r28
    1ff6:	11 11       	cpse	r17, r1
    1ff8:	f6 c0       	rjmp	.+492    	; 0x21e6 <strtod+0x280>
    1ffa:	60 e0       	ldi	r22, 0x00	; 0
    1ffc:	70 e0       	ldi	r23, 0x00	; 0
    1ffe:	80 e8       	ldi	r24, 0x80	; 128
    2000:	9f e7       	ldi	r25, 0x7F	; 127
    2002:	fa c0       	rjmp	.+500    	; 0x21f8 <strtod+0x292>
    2004:	43 e0       	ldi	r20, 0x03	; 3
    2006:	50 e0       	ldi	r21, 0x00	; 0
    2008:	64 e5       	ldi	r22, 0x54	; 84
    200a:	70 e0       	ldi	r23, 0x00	; 0
    200c:	ce 01       	movw	r24, r28
    200e:	0e 94 0a 11 	call	0x2214	; 0x2214 <strncasecmp_P>
    2012:	89 2b       	or	r24, r25
    2014:	59 f4       	brne	.+22     	; 0x202c <strtod+0xc6>
    2016:	c1 14       	cp	r12, r1
    2018:	d1 04       	cpc	r13, r1
    201a:	09 f4       	brne	.+2      	; 0x201e <strtod+0xb8>
    201c:	e9 c0       	rjmp	.+466    	; 0x21f0 <strtod+0x28a>
    201e:	f2 e0       	ldi	r31, 0x02	; 2
    2020:	ef 0e       	add	r14, r31
    2022:	f1 1c       	adc	r15, r1
    2024:	f6 01       	movw	r30, r12
    2026:	f1 82       	std	Z+1, r15	; 0x01
    2028:	e0 82       	st	Z, r14
    202a:	e2 c0       	rjmp	.+452    	; 0x21f0 <strtod+0x28a>
    202c:	20 e0       	ldi	r18, 0x00	; 0
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	a9 01       	movw	r20, r18
    2032:	c0 e0       	ldi	r28, 0x00	; 0
    2034:	d0 e0       	ldi	r29, 0x00	; 0
    2036:	f7 01       	movw	r30, r14
    2038:	80 ed       	ldi	r24, 0xD0	; 208
    203a:	a8 2e       	mov	r10, r24
    203c:	a0 0e       	add	r10, r16
    203e:	89 e0       	ldi	r24, 0x09	; 9
    2040:	8a 15       	cp	r24, r10
    2042:	30 f1       	brcs	.+76     	; 0x2090 <strtod+0x12a>
    2044:	91 2f       	mov	r25, r17
    2046:	92 60       	ori	r25, 0x02	; 2
    2048:	b9 2e       	mov	r11, r25
    204a:	81 2f       	mov	r24, r17
    204c:	88 70       	andi	r24, 0x08	; 8
    204e:	12 ff       	sbrs	r17, 2
    2050:	04 c0       	rjmp	.+8      	; 0x205a <strtod+0xf4>
    2052:	81 11       	cpse	r24, r1
    2054:	24 c0       	rjmp	.+72     	; 0x209e <strtod+0x138>
    2056:	21 96       	adiw	r28, 0x01	; 1
    2058:	22 c0       	rjmp	.+68     	; 0x209e <strtod+0x138>
    205a:	81 11       	cpse	r24, r1
    205c:	21 97       	sbiw	r28, 0x01	; 1
    205e:	a5 e0       	ldi	r26, 0x05	; 5
    2060:	b0 e0       	ldi	r27, 0x00	; 0
    2062:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__muluhisi3>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	88 0f       	add	r24, r24
    206c:	99 1f       	adc	r25, r25
    206e:	aa 1f       	adc	r26, r26
    2070:	bb 1f       	adc	r27, r27
    2072:	9c 01       	movw	r18, r24
    2074:	ad 01       	movw	r20, r26
    2076:	2a 0d       	add	r18, r10
    2078:	31 1d       	adc	r19, r1
    207a:	41 1d       	adc	r20, r1
    207c:	51 1d       	adc	r21, r1
    207e:	28 39       	cpi	r18, 0x98	; 152
    2080:	89 e9       	ldi	r24, 0x99	; 153
    2082:	38 07       	cpc	r19, r24
    2084:	48 07       	cpc	r20, r24
    2086:	89 e1       	ldi	r24, 0x19	; 25
    2088:	58 07       	cpc	r21, r24
    208a:	48 f0       	brcs	.+18     	; 0x209e <strtod+0x138>
    208c:	16 60       	ori	r17, 0x06	; 6
    208e:	06 c0       	rjmp	.+12     	; 0x209c <strtod+0x136>
    2090:	9e ef       	ldi	r25, 0xFE	; 254
    2092:	a9 12       	cpse	r10, r25
    2094:	0a c0       	rjmp	.+20     	; 0x20aa <strtod+0x144>
    2096:	13 fd       	sbrc	r17, 3
    2098:	40 c0       	rjmp	.+128    	; 0x211a <strtod+0x1b4>
    209a:	18 60       	ori	r17, 0x08	; 8
    209c:	b1 2e       	mov	r11, r17
    209e:	8f ef       	ldi	r24, 0xFF	; 255
    20a0:	e8 1a       	sub	r14, r24
    20a2:	f8 0a       	sbc	r15, r24
    20a4:	00 81       	ld	r16, Z
    20a6:	1b 2d       	mov	r17, r11
    20a8:	c6 cf       	rjmp	.-116    	; 0x2036 <strtod+0xd0>
    20aa:	80 2f       	mov	r24, r16
    20ac:	8f 7d       	andi	r24, 0xDF	; 223
    20ae:	85 34       	cpi	r24, 0x45	; 69
    20b0:	a1 f5       	brne	.+104    	; 0x211a <strtod+0x1b4>
    20b2:	80 81       	ld	r24, Z
    20b4:	8d 32       	cpi	r24, 0x2D	; 45
    20b6:	11 f4       	brne	.+4      	; 0x20bc <strtod+0x156>
    20b8:	10 61       	ori	r17, 0x10	; 16
    20ba:	06 c0       	rjmp	.+12     	; 0x20c8 <strtod+0x162>
    20bc:	8b 32       	cpi	r24, 0x2B	; 43
    20be:	21 f0       	breq	.+8      	; 0x20c8 <strtod+0x162>
    20c0:	31 96       	adiw	r30, 0x01	; 1
    20c2:	61 e0       	ldi	r22, 0x01	; 1
    20c4:	70 e0       	ldi	r23, 0x00	; 0
    20c6:	04 c0       	rjmp	.+8      	; 0x20d0 <strtod+0x16a>
    20c8:	81 81       	ldd	r24, Z+1	; 0x01
    20ca:	32 96       	adiw	r30, 0x02	; 2
    20cc:	62 e0       	ldi	r22, 0x02	; 2
    20ce:	70 e0       	ldi	r23, 0x00	; 0
    20d0:	80 53       	subi	r24, 0x30	; 48
    20d2:	8a 30       	cpi	r24, 0x0A	; 10
    20d4:	18 f0       	brcs	.+6      	; 0x20dc <strtod+0x176>
    20d6:	e6 1b       	sub	r30, r22
    20d8:	f7 0b       	sbc	r31, r23
    20da:	1f c0       	rjmp	.+62     	; 0x211a <strtod+0x1b4>
    20dc:	60 e0       	ldi	r22, 0x00	; 0
    20de:	70 e0       	ldi	r23, 0x00	; 0
    20e0:	60 38       	cpi	r22, 0x80	; 128
    20e2:	9c e0       	ldi	r25, 0x0C	; 12
    20e4:	79 07       	cpc	r23, r25
    20e6:	5c f4       	brge	.+22     	; 0x20fe <strtod+0x198>
    20e8:	db 01       	movw	r26, r22
    20ea:	aa 0f       	add	r26, r26
    20ec:	bb 1f       	adc	r27, r27
    20ee:	aa 0f       	add	r26, r26
    20f0:	bb 1f       	adc	r27, r27
    20f2:	6a 0f       	add	r22, r26
    20f4:	7b 1f       	adc	r23, r27
    20f6:	66 0f       	add	r22, r22
    20f8:	77 1f       	adc	r23, r23
    20fa:	68 0f       	add	r22, r24
    20fc:	71 1d       	adc	r23, r1
    20fe:	31 96       	adiw	r30, 0x01	; 1
    2100:	df 01       	movw	r26, r30
    2102:	11 97       	sbiw	r26, 0x01	; 1
    2104:	8c 91       	ld	r24, X
    2106:	80 53       	subi	r24, 0x30	; 48
    2108:	8a 30       	cpi	r24, 0x0A	; 10
    210a:	50 f3       	brcs	.-44     	; 0x20e0 <strtod+0x17a>
    210c:	14 ff       	sbrs	r17, 4
    210e:	03 c0       	rjmp	.+6      	; 0x2116 <strtod+0x1b0>
    2110:	71 95       	neg	r23
    2112:	61 95       	neg	r22
    2114:	71 09       	sbc	r23, r1
    2116:	c6 0f       	add	r28, r22
    2118:	d7 1f       	adc	r29, r23
    211a:	11 ff       	sbrs	r17, 1
    211c:	08 c0       	rjmp	.+16     	; 0x212e <strtod+0x1c8>
    211e:	c1 14       	cp	r12, r1
    2120:	d1 04       	cpc	r13, r1
    2122:	29 f0       	breq	.+10     	; 0x212e <strtod+0x1c8>
    2124:	cf 01       	movw	r24, r30
    2126:	01 97       	sbiw	r24, 0x01	; 1
    2128:	f6 01       	movw	r30, r12
    212a:	91 83       	std	Z+1, r25	; 0x01
    212c:	80 83       	st	Z, r24
    212e:	ca 01       	movw	r24, r20
    2130:	b9 01       	movw	r22, r18
    2132:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__floatunsisf>
    2136:	21 2f       	mov	r18, r17
    2138:	23 70       	andi	r18, 0x03	; 3
    213a:	23 30       	cpi	r18, 0x03	; 3
    213c:	19 f0       	breq	.+6      	; 0x2144 <strtod+0x1de>
    213e:	4b 01       	movw	r8, r22
    2140:	5c 01       	movw	r10, r24
    2142:	06 c0       	rjmp	.+12     	; 0x2150 <strtod+0x1ea>
    2144:	4b 01       	movw	r8, r22
    2146:	5c 01       	movw	r10, r24
    2148:	b7 fa       	bst	r11, 7
    214a:	b0 94       	com	r11
    214c:	b7 f8       	bld	r11, 7
    214e:	b0 94       	com	r11
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	a9 01       	movw	r20, r18
    2156:	c5 01       	movw	r24, r10
    2158:	b4 01       	movw	r22, r8
    215a:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__cmpsf2>
    215e:	88 23       	and	r24, r24
    2160:	09 f4       	brne	.+2      	; 0x2164 <strtod+0x1fe>
    2162:	3e c0       	rjmp	.+124    	; 0x21e0 <strtod+0x27a>
    2164:	d7 ff       	sbrs	r29, 7
    2166:	06 c0       	rjmp	.+12     	; 0x2174 <strtod+0x20e>
    2168:	d1 95       	neg	r29
    216a:	c1 95       	neg	r28
    216c:	d1 09       	sbc	r29, r1
    216e:	03 e7       	ldi	r16, 0x73	; 115
    2170:	10 e0       	ldi	r17, 0x00	; 0
    2172:	02 c0       	rjmp	.+4      	; 0x2178 <strtod+0x212>
    2174:	0b e8       	ldi	r16, 0x8B	; 139
    2176:	10 e0       	ldi	r17, 0x00	; 0
    2178:	68 01       	movw	r12, r16
    217a:	f8 e1       	ldi	r31, 0x18	; 24
    217c:	cf 1a       	sub	r12, r31
    217e:	d1 08       	sbc	r13, r1
    2180:	90 e2       	ldi	r25, 0x20	; 32
    2182:	e9 2e       	mov	r14, r25
    2184:	f1 2c       	mov	r15, r1
    2186:	ce 15       	cp	r28, r14
    2188:	df 05       	cpc	r29, r15
    218a:	74 f0       	brlt	.+28     	; 0x21a8 <strtod+0x242>
    218c:	f8 01       	movw	r30, r16
    218e:	25 91       	lpm	r18, Z+
    2190:	35 91       	lpm	r19, Z+
    2192:	45 91       	lpm	r20, Z+
    2194:	54 91       	lpm	r21, Z
    2196:	c5 01       	movw	r24, r10
    2198:	b4 01       	movw	r22, r8
    219a:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__mulsf3>
    219e:	4b 01       	movw	r8, r22
    21a0:	5c 01       	movw	r10, r24
    21a2:	ce 19       	sub	r28, r14
    21a4:	df 09       	sbc	r29, r15
    21a6:	ef cf       	rjmp	.-34     	; 0x2186 <strtod+0x220>
    21a8:	04 50       	subi	r16, 0x04	; 4
    21aa:	11 09       	sbc	r17, r1
    21ac:	f5 94       	asr	r15
    21ae:	e7 94       	ror	r14
    21b0:	0c 15       	cp	r16, r12
    21b2:	1d 05       	cpc	r17, r13
    21b4:	41 f7       	brne	.-48     	; 0x2186 <strtod+0x220>
    21b6:	8a 2d       	mov	r24, r10
    21b8:	88 0f       	add	r24, r24
    21ba:	8b 2d       	mov	r24, r11
    21bc:	88 1f       	adc	r24, r24
    21be:	8f 3f       	cpi	r24, 0xFF	; 255
    21c0:	49 f0       	breq	.+18     	; 0x21d4 <strtod+0x26e>
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	a9 01       	movw	r20, r18
    21c8:	c5 01       	movw	r24, r10
    21ca:	b4 01       	movw	r22, r8
    21cc:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__cmpsf2>
    21d0:	81 11       	cpse	r24, r1
    21d2:	06 c0       	rjmp	.+12     	; 0x21e0 <strtod+0x27a>
    21d4:	82 e2       	ldi	r24, 0x22	; 34
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	90 93 02 03 	sts	0x0302, r25	; 0x800302 <errno+0x1>
    21dc:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <errno>
    21e0:	c5 01       	movw	r24, r10
    21e2:	b4 01       	movw	r22, r8
    21e4:	09 c0       	rjmp	.+18     	; 0x21f8 <strtod+0x292>
    21e6:	60 e0       	ldi	r22, 0x00	; 0
    21e8:	70 e0       	ldi	r23, 0x00	; 0
    21ea:	80 e8       	ldi	r24, 0x80	; 128
    21ec:	9f ef       	ldi	r25, 0xFF	; 255
    21ee:	04 c0       	rjmp	.+8      	; 0x21f8 <strtod+0x292>
    21f0:	60 e0       	ldi	r22, 0x00	; 0
    21f2:	70 e0       	ldi	r23, 0x00	; 0
    21f4:	80 ec       	ldi	r24, 0xC0	; 192
    21f6:	9f e7       	ldi	r25, 0x7F	; 127
    21f8:	cd b7       	in	r28, 0x3d	; 61
    21fa:	de b7       	in	r29, 0x3e	; 62
    21fc:	ec e0       	ldi	r30, 0x0C	; 12
    21fe:	0c 94 47 11 	jmp	0x228e	; 0x228e <__epilogue_restores__+0xc>

00002202 <isspace>:
    2202:	91 11       	cpse	r25, r1
    2204:	0c 94 22 11 	jmp	0x2244	; 0x2244 <__ctype_isfalse>
    2208:	80 32       	cpi	r24, 0x20	; 32
    220a:	19 f0       	breq	.+6      	; 0x2212 <isspace+0x10>
    220c:	89 50       	subi	r24, 0x09	; 9
    220e:	85 50       	subi	r24, 0x05	; 5
    2210:	c8 f7       	brcc	.-14     	; 0x2204 <isspace+0x2>
    2212:	08 95       	ret

00002214 <strncasecmp_P>:
    2214:	fb 01       	movw	r30, r22
    2216:	dc 01       	movw	r26, r24
    2218:	41 50       	subi	r20, 0x01	; 1
    221a:	50 40       	sbci	r21, 0x00	; 0
    221c:	88 f0       	brcs	.+34     	; 0x2240 <strncasecmp_P+0x2c>
    221e:	8d 91       	ld	r24, X+
    2220:	81 34       	cpi	r24, 0x41	; 65
    2222:	1c f0       	brlt	.+6      	; 0x222a <strncasecmp_P+0x16>
    2224:	8b 35       	cpi	r24, 0x5B	; 91
    2226:	0c f4       	brge	.+2      	; 0x222a <strncasecmp_P+0x16>
    2228:	80 5e       	subi	r24, 0xE0	; 224
    222a:	65 91       	lpm	r22, Z+
    222c:	61 34       	cpi	r22, 0x41	; 65
    222e:	1c f0       	brlt	.+6      	; 0x2236 <strncasecmp_P+0x22>
    2230:	6b 35       	cpi	r22, 0x5B	; 91
    2232:	0c f4       	brge	.+2      	; 0x2236 <strncasecmp_P+0x22>
    2234:	60 5e       	subi	r22, 0xE0	; 224
    2236:	86 1b       	sub	r24, r22
    2238:	61 11       	cpse	r22, r1
    223a:	71 f3       	breq	.-36     	; 0x2218 <strncasecmp_P+0x4>
    223c:	99 0b       	sbc	r25, r25
    223e:	08 95       	ret
    2240:	88 1b       	sub	r24, r24
    2242:	fc cf       	rjmp	.-8      	; 0x223c <strncasecmp_P+0x28>

00002244 <__ctype_isfalse>:
    2244:	99 27       	eor	r25, r25
    2246:	88 27       	eor	r24, r24

00002248 <__ctype_istrue>:
    2248:	08 95       	ret

0000224a <__prologue_saves__>:
    224a:	2f 92       	push	r2
    224c:	3f 92       	push	r3
    224e:	4f 92       	push	r4
    2250:	5f 92       	push	r5
    2252:	6f 92       	push	r6
    2254:	7f 92       	push	r7
    2256:	8f 92       	push	r8
    2258:	9f 92       	push	r9
    225a:	af 92       	push	r10
    225c:	bf 92       	push	r11
    225e:	cf 92       	push	r12
    2260:	df 92       	push	r13
    2262:	ef 92       	push	r14
    2264:	ff 92       	push	r15
    2266:	0f 93       	push	r16
    2268:	1f 93       	push	r17
    226a:	cf 93       	push	r28
    226c:	df 93       	push	r29
    226e:	cd b7       	in	r28, 0x3d	; 61
    2270:	de b7       	in	r29, 0x3e	; 62
    2272:	ca 1b       	sub	r28, r26
    2274:	db 0b       	sbc	r29, r27
    2276:	0f b6       	in	r0, 0x3f	; 63
    2278:	f8 94       	cli
    227a:	de bf       	out	0x3e, r29	; 62
    227c:	0f be       	out	0x3f, r0	; 63
    227e:	cd bf       	out	0x3d, r28	; 61
    2280:	09 94       	ijmp

00002282 <__epilogue_restores__>:
    2282:	2a 88       	ldd	r2, Y+18	; 0x12
    2284:	39 88       	ldd	r3, Y+17	; 0x11
    2286:	48 88       	ldd	r4, Y+16	; 0x10
    2288:	5f 84       	ldd	r5, Y+15	; 0x0f
    228a:	6e 84       	ldd	r6, Y+14	; 0x0e
    228c:	7d 84       	ldd	r7, Y+13	; 0x0d
    228e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2290:	9b 84       	ldd	r9, Y+11	; 0x0b
    2292:	aa 84       	ldd	r10, Y+10	; 0x0a
    2294:	b9 84       	ldd	r11, Y+9	; 0x09
    2296:	c8 84       	ldd	r12, Y+8	; 0x08
    2298:	df 80       	ldd	r13, Y+7	; 0x07
    229a:	ee 80       	ldd	r14, Y+6	; 0x06
    229c:	fd 80       	ldd	r15, Y+5	; 0x05
    229e:	0c 81       	ldd	r16, Y+4	; 0x04
    22a0:	1b 81       	ldd	r17, Y+3	; 0x03
    22a2:	aa 81       	ldd	r26, Y+2	; 0x02
    22a4:	b9 81       	ldd	r27, Y+1	; 0x01
    22a6:	ce 0f       	add	r28, r30
    22a8:	d1 1d       	adc	r29, r1
    22aa:	0f b6       	in	r0, 0x3f	; 63
    22ac:	f8 94       	cli
    22ae:	de bf       	out	0x3e, r29	; 62
    22b0:	0f be       	out	0x3f, r0	; 63
    22b2:	cd bf       	out	0x3d, r28	; 61
    22b4:	ed 01       	movw	r28, r26
    22b6:	08 95       	ret

000022b8 <_exit>:
    22b8:	f8 94       	cli

000022ba <__stop_program>:
    22ba:	ff cf       	rjmp	.-2      	; 0x22ba <__stop_program>
