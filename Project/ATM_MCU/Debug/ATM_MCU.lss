
ATM_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000024e  00800060  000022aa  0000233e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000055  008002ae  008002ae  0000258c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000258c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000025e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004b0  00000000  00000000  00002624  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006061  00000000  00000000  00002ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b43  00000000  00000000  00008b35  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000304f  00000000  00000000  0000a678  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c40  00000000  00000000  0000d6c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000190a  00000000  00000000  0000e308  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000344a  00000000  00000000  0000fc12  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000388  00000000  00000000  0001305c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
       4:	0c 94 6f 0a 	jmp	0x14de	; 0x14de <__vector_1>
       8:	0c 94 98 0a 	jmp	0x1530	; 0x1530 <__vector_2>
       c:	0c 94 c1 0a 	jmp	0x1582	; 0x1582 <__vector_3>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 e1 0c 	jmp	0x19c2	; 0x19c2 <__vector_5>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 c4 0b 	jmp	0x1788	; 0x1788 <__vector_11>
      30:	0c 94 28 0b 	jmp	0x1650	; 0x1650 <__vector_12>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	4e 41       	sbci	r20, 0x1E	; 30
      56:	4e 49       	Address 0x00000056 is out of bounds.
.word	0xffff	; ????

00000057 <pstr_inity>:
      57:	49 4e 49 54 59                                      INITY

0000005c <pstr_inf>:
      5c:	49 4e 46                                            INF

0000005f <pwr_m10>:
      5f:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      6f:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000077 <pwr_p10>:
      77:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      87:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000090 <__ctors_end>:
      90:	11 24       	eor	r1, r1
      92:	1f be       	out	0x3f, r1	; 63
      94:	cf e5       	ldi	r28, 0x5F	; 95
      96:	d8 e0       	ldi	r29, 0x08	; 8
      98:	de bf       	out	0x3e, r29	; 62
      9a:	cd bf       	out	0x3d, r28	; 61

0000009c <__do_copy_data>:
      9c:	12 e0       	ldi	r17, 0x02	; 2
      9e:	a0 e6       	ldi	r26, 0x60	; 96
      a0:	b0 e0       	ldi	r27, 0x00	; 0
      a2:	ea ea       	ldi	r30, 0xAA	; 170
      a4:	f2 e2       	ldi	r31, 0x22	; 34
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
      a8:	05 90       	lpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ae 3a       	cpi	r26, 0xAE	; 174
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
      b2:	23 e0       	ldi	r18, 0x03	; 3
      b4:	ae ea       	ldi	r26, 0xAE	; 174
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a3 30       	cpi	r26, 0x03	; 3
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 20 09 	call	0x1240	; 0x1240 <main>
      c6:	0c 94 53 11 	jmp	0x22a6	; 0x22a6 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <TriggerCallBack>:
************************************************************************************************************/


void TriggerCallBack(void)
{
	TriggerState = TRIGGER;
      ce:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
      d2:	08 95       	ret

000000d4 <timer_ovfCount>:
 * RETURN			: void
 */

void timer_ovfCount(void)
{
	global_u8OVFCounter++;
      d4:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <global_u8OVFCounter>
      d8:	8f 5f       	subi	r24, 0xFF	; 255
      da:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <global_u8OVFCounter>
      de:	08 95       	ret

000000e0 <APP_Init>:
}
void APP_Init(void)
{
	
	//(void)HButton_Init(DIO_PINB_2);
	(void)KEYPAD_init();
      e0:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <KEYPAD_init>
	(void)HTimer_enInit();
      e4:	0e 94 ab 05 	call	0xb56	; 0xb56 <HTimer_enInit>
	(void)HTimer_enCBF(timer_ovfCount);
      e8:	8a e6       	ldi	r24, 0x6A	; 106
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	0e 94 bd 05 	call	0xb7a	; 0xb7a <HTimer_enCBF>
	(void)HLCD_vidInit();
      f0:	0e 94 96 07 	call	0xf2c	; 0xf2c <HLCD_vidInit>
	(void)HSPI_MasterInit();
      f4:	0e 94 9c 04 	call	0x938	; 0x938 <HSPI_MasterInit>
	(void)H_EXTINT_create(EXTINT0,RISING_EDGE,TriggerCallBack);
      f8:	47 e6       	ldi	r20, 0x67	; 103
      fa:	50 e0       	ldi	r21, 0x00	; 0
      fc:	62 e0       	ldi	r22, 0x02	; 2
      fe:	80 e0       	ldi	r24, 0x00	; 0
     100:	0e 94 c5 05 	call	0xb8a	; 0xb8a <H_EXTINT_create>
	/*(void)SwICU_Init();*/
	(void)BUZ_Init(&st_g_Buzzer);
     104:	8c e6       	ldi	r24, 0x6C	; 108
     106:	91 e0       	ldi	r25, 0x01	; 1
     108:	0e 94 84 04 	call	0x908	; 0x908 <BUZ_Init>
	(void)HButton_ExtIntInit(DIO_PINB_2);
     10c:	8a e0       	ldi	r24, 0x0A	; 10
     10e:	0e 94 7d 04 	call	0x8fa	; 0x8fa <HButton_ExtIntInit>
	(void)H_EXTINT_create(EXTINT2, RISING_EDGE,EXTINT_FUNC);
     112:	46 e8       	ldi	r20, 0x86	; 134
     114:	51 e0       	ldi	r21, 0x01	; 1
     116:	62 e0       	ldi	r22, 0x02	; 2
     118:	82 e0       	ldi	r24, 0x02	; 2
     11a:	0e 94 c5 05 	call	0xb8a	; 0xb8a <H_EXTINT_create>
     11e:	08 95       	ret

00000120 <APP_Start>:


void APP_Start(void)
{
			
	switch(TriggerState)
     120:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     124:	81 30       	cpi	r24, 0x01	; 1
     126:	79 f1       	breq	.+94     	; 0x186 <APP_Start+0x66>
     128:	18 f0       	brcs	.+6      	; 0x130 <APP_Start+0x10>
     12a:	82 30       	cpi	r24, 0x02	; 2
     12c:	b1 f1       	breq	.+108    	; 0x19a <APP_Start+0x7a>
     12e:	08 95       	ret
	{
		case TRIGGER:
		{
			welcomeFlag = 0;
     130:	10 92 af 02 	sts	0x02AF, r1	; 0x8002af <welcomeFlag>
			if(Get_pin(ATMpin)==PIN_NOT_OK)break;
     134:	82 eb       	ldi	r24, 0xB2	; 178
     136:	92 e0       	ldi	r25, 0x02	; 2
     138:	0e 94 28 02 	call	0x450	; 0x450 <Get_pin>
     13c:	84 30       	cpi	r24, 0x04	; 4
     13e:	09 f4       	brne	.+2      	; 0x142 <APP_Start+0x22>
     140:	e4 c0       	rjmp	.+456    	; 0x30a <APP_Start+0x1ea>
			if(ATM_ValidatePIN() == PIN_MATCHED)
     142:	0e 94 64 03 	call	0x6c8	; 0x6c8 <ATM_ValidatePIN>
     146:	81 11       	cpse	r24, r1
     148:	04 c0       	rjmp	.+8      	; 0x152 <APP_Start+0x32>
			{
				TriggerState = CHECKING;
     14a:	82 e0       	ldi	r24, 0x02	; 2
     14c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     150:	08 95       	ret
                  
			}
			else
			{
				trialsFlag++;
     152:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <__data_end>
     156:	8f 5f       	subi	r24, 0xFF	; 255
     158:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <__data_end>
				/* Lock system if max tries exceeded */
				if(trialsFlag == 3)
     15c:	83 30       	cpi	r24, 0x03	; 3
     15e:	09 f0       	breq	.+2      	; 0x162 <APP_Start+0x42>
     160:	d4 c0       	rjmp	.+424    	; 0x30a <APP_Start+0x1ea>
				{
					HLCD_ClrDisplay();
     162:	0e 94 49 08 	call	0x1092	; 0x1092 <HLCD_ClrDisplay>
					HLCD_gotoXY(0,4);
     166:	64 e0       	ldi	r22, 0x04	; 4
     168:	80 e0       	ldi	r24, 0x00	; 0
     16a:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <HLCD_gotoXY>
					HLCD_WriteString("LOCKED");
     16e:	82 e9       	ldi	r24, 0x92	; 146
     170:	91 e0       	ldi	r25, 0x01	; 1
     172:	0e 94 70 08 	call	0x10e0	; 0x10e0 <HLCD_WriteString>
					deinitAtm(&st_g_Buzzer);
     176:	8c e6       	ldi	r24, 0x6C	; 108
     178:	91 e0       	ldi	r25, 0x01	; 1
     17a:	0e 94 60 03 	call	0x6c0	; 0x6c0 <deinitAtm>
					TriggerState = IDLE;
     17e:	83 e0       	ldi	r24, 0x03	; 3
     180:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     184:	08 95       	ret
			//TriggerState = N_TRIGGER;
			break;
		}
		case N_TRIGGER:
		{
			if(welcomeFlag == 0)
     186:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <welcomeFlag>
     18a:	81 11       	cpse	r24, r1
     18c:	be c0       	rjmp	.+380    	; 0x30a <APP_Start+0x1ea>
			{
				Welcome();
     18e:	0e 94 ba 01 	call	0x374	; 0x374 <Welcome>
				welcomeFlag = 1;
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <welcomeFlag>
     198:	08 95       	ret
			break;
		}
        case CHECKING:
       {

		get_amount_left(Entered_amount);
     19a:	89 e6       	ldi	r24, 0x69	; 105
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	0e 94 c4 02 	call	0x588	; 0x588 <get_amount_left>
		HLCD_ClrDisplay();
     1a2:	0e 94 49 08 	call	0x1092	; 0x1092 <HLCD_ClrDisplay>
		DB_CHECK = DATABASE_checking(CARDpan,Entered_amount,&newAMOUNT);
     1a6:	4c ed       	ldi	r20, 0xDC	; 220
     1a8:	52 e0       	ldi	r21, 0x02	; 2
     1aa:	69 e6       	ldi	r22, 0x69	; 105
     1ac:	70 e0       	ldi	r23, 0x00	; 0
     1ae:	8a ee       	ldi	r24, 0xEA	; 234
     1b0:	92 e0       	ldi	r25, 0x02	; 2
     1b2:	0e 94 58 04 	call	0x8b0	; 0x8b0 <DATABASE_checking>
     1b6:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <DB_CHECK>
		switch(DB_CHECK){
     1ba:	82 30       	cpi	r24, 0x02	; 2
     1bc:	09 f4       	brne	.+2      	; 0x1c0 <APP_Start+0xa0>
     1be:	43 c0       	rjmp	.+134    	; 0x246 <APP_Start+0x126>
     1c0:	28 f4       	brcc	.+10     	; 0x1cc <APP_Start+0xac>
     1c2:	88 23       	and	r24, r24
     1c4:	51 f0       	breq	.+20     	; 0x1da <APP_Start+0xba>
     1c6:	81 30       	cpi	r24, 0x01	; 1
     1c8:	f9 f0       	breq	.+62     	; 0x208 <APP_Start+0xe8>
     1ca:	08 95       	ret
     1cc:	83 30       	cpi	r24, 0x03	; 3
     1ce:	09 f4       	brne	.+2      	; 0x1d2 <APP_Start+0xb2>
     1d0:	59 c0       	rjmp	.+178    	; 0x284 <APP_Start+0x164>
     1d2:	84 30       	cpi	r24, 0x04	; 4
     1d4:	09 f4       	brne	.+2      	; 0x1d8 <APP_Start+0xb8>
     1d6:	79 c0       	rjmp	.+242    	; 0x2ca <APP_Start+0x1aa>
     1d8:	08 95       	ret
			case APPROVED:
			{
				ATM_ApprovedCard(newAMOUNT);
     1da:	60 91 dc 02 	lds	r22, 0x02DC	; 0x8002dc <newAMOUNT>
     1de:	70 91 dd 02 	lds	r23, 0x02DD	; 0x8002dd <newAMOUNT+0x1>
     1e2:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <newAMOUNT+0x2>
     1e6:	90 91 df 02 	lds	r25, 0x02DF	; 0x8002df <newAMOUNT+0x3>
     1ea:	0e 94 d6 01 	call	0x3ac	; 0x3ac <ATM_ApprovedCard>
				HSPI_SendChar(ATM_REQUEST_EJECTED);
     1ee:	85 e4       	ldi	r24, 0x45	; 69
     1f0:	0e 94 b7 04 	call	0x96e	; 0x96e <HSPI_SendChar>
				strcpy(Entered_amount,Default_Entered_amount);
     1f4:	61 e6       	ldi	r22, 0x61	; 97
     1f6:	70 e0       	ldi	r23, 0x00	; 0
     1f8:	89 e6       	ldi	r24, 0x69	; 105
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <strcpy>
				TriggerState = N_TRIGGER;
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				break;
     206:	08 95       	ret
			}
			case FRAUD_CARD:
			{
				deinitAtm(&st_g_Buzzer);
     208:	8c e6       	ldi	r24, 0x6C	; 108
     20a:	91 e0       	ldi	r25, 0x01	; 1
     20c:	0e 94 60 03 	call	0x6c0	; 0x6c0 <deinitAtm>
				HLCD_gotoXY(0, 4);
     210:	64 e0       	ldi	r22, 0x04	; 4
     212:	80 e0       	ldi	r24, 0x00	; 0
     214:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <HLCD_gotoXY>
				HLCD_WriteString("This is a");
     218:	89 e9       	ldi	r24, 0x99	; 153
     21a:	91 e0       	ldi	r25, 0x01	; 1
     21c:	0e 94 70 08 	call	0x10e0	; 0x10e0 <HLCD_WriteString>
				HLCD_gotoXY(1, 2);
     220:	62 e0       	ldi	r22, 0x02	; 2
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <HLCD_gotoXY>
				HLCD_WriteString("Fraud Card");
     228:	83 ea       	ldi	r24, 0xA3	; 163
     22a:	91 e0       	ldi	r25, 0x01	; 1
     22c:	0e 94 70 08 	call	0x10e0	; 0x10e0 <HLCD_WriteString>
				HTIM0_SyncDelay(1, Seconds);
     230:	42 e0       	ldi	r20, 0x02	; 2
     232:	61 e0       	ldi	r22, 0x01	; 1
     234:	70 e0       	ldi	r23, 0x00	; 0
     236:	80 e0       	ldi	r24, 0x00	; 0
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	0e 94 05 05 	call	0xa0a	; 0xa0a <HTIM0_SyncDelay>
				TriggerState = IDLE;
     23e:	83 e0       	ldi	r24, 0x03	; 3
     240:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				break;
     244:	08 95       	ret
			}
			case CARD_STOLEN:
			{
				deinitAtm(&st_g_Buzzer);
     246:	8c e6       	ldi	r24, 0x6C	; 108
     248:	91 e0       	ldi	r25, 0x01	; 1
     24a:	0e 94 60 03 	call	0x6c0	; 0x6c0 <deinitAtm>
				HLCD_gotoXY(0, 4);
     24e:	64 e0       	ldi	r22, 0x04	; 4
     250:	80 e0       	ldi	r24, 0x00	; 0
     252:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <HLCD_gotoXY>
				HLCD_WriteString("This Card ");
     256:	8e ea       	ldi	r24, 0xAE	; 174
     258:	91 e0       	ldi	r25, 0x01	; 1
     25a:	0e 94 70 08 	call	0x10e0	; 0x10e0 <HLCD_WriteString>
				HLCD_gotoXY(1, 2);
     25e:	62 e0       	ldi	r22, 0x02	; 2
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <HLCD_gotoXY>
				HLCD_WriteString("is Stolen");
     266:	89 eb       	ldi	r24, 0xB9	; 185
     268:	91 e0       	ldi	r25, 0x01	; 1
     26a:	0e 94 70 08 	call	0x10e0	; 0x10e0 <HLCD_WriteString>
				HTIM0_SyncDelay(1, Seconds);
     26e:	42 e0       	ldi	r20, 0x02	; 2
     270:	61 e0       	ldi	r22, 0x01	; 1
     272:	70 e0       	ldi	r23, 0x00	; 0
     274:	80 e0       	ldi	r24, 0x00	; 0
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	0e 94 05 05 	call	0xa0a	; 0xa0a <HTIM0_SyncDelay>
				TriggerState = IDLE;
     27c:	83 e0       	ldi	r24, 0x03	; 3
     27e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				break;
     282:	08 95       	ret
			}
			case EXCEED_MAX_DAILY_AMOUNT:
			{
				
				HLCD_gotoXY(0, 4);
     284:	64 e0       	ldi	r22, 0x04	; 4
     286:	80 e0       	ldi	r24, 0x00	; 0
     288:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <HLCD_gotoXY>
				HLCD_WriteString("Max Limit ");
     28c:	83 ec       	ldi	r24, 0xC3	; 195
     28e:	91 e0       	ldi	r25, 0x01	; 1
     290:	0e 94 70 08 	call	0x10e0	; 0x10e0 <HLCD_WriteString>
				HLCD_gotoXY(1, 2);
     294:	62 e0       	ldi	r22, 0x02	; 2
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <HLCD_gotoXY>
				HLCD_WriteString("is Exceeded");
     29c:	8e ec       	ldi	r24, 0xCE	; 206
     29e:	91 e0       	ldi	r25, 0x01	; 1
     2a0:	0e 94 70 08 	call	0x10e0	; 0x10e0 <HLCD_WriteString>
				HTIM0_SyncDelay(1, Seconds);
     2a4:	42 e0       	ldi	r20, 0x02	; 2
     2a6:	61 e0       	ldi	r22, 0x01	; 1
     2a8:	70 e0       	ldi	r23, 0x00	; 0
     2aa:	80 e0       	ldi	r24, 0x00	; 0
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	0e 94 05 05 	call	0xa0a	; 0xa0a <HTIM0_SyncDelay>
				HLCD_ClrDisplay();
     2b2:	0e 94 49 08 	call	0x1092	; 0x1092 <HLCD_ClrDisplay>
				strcpy(Entered_amount,Default_Entered_amount);
     2b6:	61 e6       	ldi	r22, 0x61	; 97
     2b8:	70 e0       	ldi	r23, 0x00	; 0
     2ba:	89 e6       	ldi	r24, 0x69	; 105
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <strcpy>
				TriggerState = CHECKING;
     2c2:	82 e0       	ldi	r24, 0x02	; 2
     2c4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				break;
     2c8:	08 95       	ret
			}
			case INSUFFICIENT_FUND:
			{
				
				HLCD_gotoXY(0, 4);
     2ca:	64 e0       	ldi	r22, 0x04	; 4
     2cc:	80 e0       	ldi	r24, 0x00	; 0
     2ce:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <HLCD_gotoXY>
				HLCD_WriteString("INSUFFICIENT ");
     2d2:	8a ed       	ldi	r24, 0xDA	; 218
     2d4:	91 e0       	ldi	r25, 0x01	; 1
     2d6:	0e 94 70 08 	call	0x10e0	; 0x10e0 <HLCD_WriteString>
				HLCD_gotoXY(1, 2);
     2da:	62 e0       	ldi	r22, 0x02	; 2
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <HLCD_gotoXY>
				HLCD_WriteString("FUND");
     2e2:	88 ee       	ldi	r24, 0xE8	; 232
     2e4:	91 e0       	ldi	r25, 0x01	; 1
     2e6:	0e 94 70 08 	call	0x10e0	; 0x10e0 <HLCD_WriteString>
				HTIM0_SyncDelay(1, Seconds);
     2ea:	42 e0       	ldi	r20, 0x02	; 2
     2ec:	61 e0       	ldi	r22, 0x01	; 1
     2ee:	70 e0       	ldi	r23, 0x00	; 0
     2f0:	80 e0       	ldi	r24, 0x00	; 0
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	0e 94 05 05 	call	0xa0a	; 0xa0a <HTIM0_SyncDelay>
				strcpy(Entered_amount,Default_Entered_amount);
     2f8:	61 e6       	ldi	r22, 0x61	; 97
     2fa:	70 e0       	ldi	r23, 0x00	; 0
     2fc:	89 e6       	ldi	r24, 0x69	; 105
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <strcpy>
				TriggerState = CHECKING;
     304:	82 e0       	ldi	r24, 0x02	; 2
     306:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     30a:	08 95       	ret

0000030c <EXTINT_FUNC>:
	//Uchar8_t arr_g_CardPIN[5];
	//Uchar8_t arr_g_CardPAN[20];

	void Card_Trigger(void)
	{
		u8_g_ReceivePIN = 1;
     30c:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <counter.2217>
     310:	81 11       	cpse	r24, r1
     312:	10 c0       	rjmp	.+32     	; 0x334 <EXTINT_FUNC+0x28>
     314:	64 e6       	ldi	r22, 0x64	; 100
     316:	70 e0       	ldi	r23, 0x00	; 0
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	0e 94 b5 05 	call	0xb6a	; 0xb6a <HTimer_vidDelayMs>
     320:	46 e8       	ldi	r20, 0x86	; 134
     322:	51 e0       	ldi	r21, 0x01	; 1
     324:	61 e0       	ldi	r22, 0x01	; 1
     326:	82 e0       	ldi	r24, 0x02	; 2
     328:	0e 94 c5 05 	call	0xb8a	; 0xb8a <H_EXTINT_create>
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <counter.2217>
     332:	08 95       	ret
     334:	81 30       	cpi	r24, 0x01	; 1
     336:	e9 f4       	brne	.+58     	; 0x372 <EXTINT_FUNC+0x66>
     338:	0e 94 ba 05 	call	0xb74	; 0xb74 <HTimer_enStop>
     33c:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <global_u8OVFCounter>
     340:	9f ef       	ldi	r25, 0xFF	; 255
     342:	98 0f       	add	r25, r24
     344:	93 31       	cpi	r25, 0x13	; 19
     346:	18 f4       	brcc	.+6      	; 0x34e <EXTINT_FUNC+0x42>
     348:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <myState>
     34c:	05 c0       	rjmp	.+10     	; 0x358 <EXTINT_FUNC+0x4c>
     34e:	84 31       	cpi	r24, 0x14	; 20
     350:	18 f0       	brcs	.+6      	; 0x358 <EXTINT_FUNC+0x4c>
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <myState>
     358:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <global_u8OVFCounter>
     35c:	46 e8       	ldi	r20, 0x86	; 134
     35e:	51 e0       	ldi	r21, 0x01	; 1
     360:	62 e0       	ldi	r22, 0x02	; 2
     362:	82 e0       	ldi	r24, 0x02	; 2
     364:	0e 94 c5 05 	call	0xb8a	; 0xb8a <H_EXTINT_create>
     368:	8a e0       	ldi	r24, 0x0A	; 10
     36a:	0e 94 7d 04 	call	0x8fa	; 0x8fa <HButton_ExtIntInit>
     36e:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <counter.2217>
     372:	08 95       	ret

00000374 <Welcome>:
     374:	0e 94 49 08 	call	0x1092	; 0x1092 <HLCD_ClrDisplay>
     378:	60 e0       	ldi	r22, 0x00	; 0
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <HLCD_gotoXY>
     380:	8d ee       	ldi	r24, 0xED	; 237
     382:	91 e0       	ldi	r25, 0x01	; 1
     384:	0e 94 70 08 	call	0x10e0	; 0x10e0 <HLCD_WriteString>
     388:	42 e0       	ldi	r20, 0x02	; 2
     38a:	61 e0       	ldi	r22, 0x01	; 1
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	0e 94 05 05 	call	0xa0a	; 0xa0a <HTIM0_SyncDelay>
     396:	0e 94 49 08 	call	0x1092	; 0x1092 <HLCD_ClrDisplay>
     39a:	60 e0       	ldi	r22, 0x00	; 0
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <HLCD_gotoXY>
     3a2:	8c ef       	ldi	r24, 0xFC	; 252
     3a4:	91 e0       	ldi	r25, 0x01	; 1
     3a6:	0e 94 70 08 	call	0x10e0	; 0x10e0 <HLCD_WriteString>
     3aa:	08 95       	ret

000003ac <ATM_ApprovedCard>:
     3ac:	cf 92       	push	r12
     3ae:	df 92       	push	r13
     3b0:	ef 92       	push	r14
     3b2:	ff 92       	push	r15
     3b4:	6b 01       	movw	r12, r22
     3b6:	7c 01       	movw	r14, r24
     3b8:	64 e0       	ldi	r22, 0x04	; 4
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <HLCD_gotoXY>
     3c0:	8d e0       	ldi	r24, 0x0D	; 13
     3c2:	92 e0       	ldi	r25, 0x02	; 2
     3c4:	0e 94 70 08 	call	0x10e0	; 0x10e0 <HLCD_WriteString>
     3c8:	62 e0       	ldi	r22, 0x02	; 2
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <HLCD_gotoXY>
     3d0:	86 e1       	ldi	r24, 0x16	; 22
     3d2:	92 e0       	ldi	r25, 0x02	; 2
     3d4:	0e 94 70 08 	call	0x10e0	; 0x10e0 <HLCD_WriteString>
     3d8:	42 e0       	ldi	r20, 0x02	; 2
     3da:	61 e0       	ldi	r22, 0x01	; 1
     3dc:	70 e0       	ldi	r23, 0x00	; 0
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	0e 94 05 05 	call	0xa0a	; 0xa0a <HTIM0_SyncDelay>
     3e6:	0e 94 49 08 	call	0x1092	; 0x1092 <HLCD_ClrDisplay>
     3ea:	64 e0       	ldi	r22, 0x04	; 4
     3ec:	80 e0       	ldi	r24, 0x00	; 0
     3ee:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <HLCD_gotoXY>
     3f2:	82 e2       	ldi	r24, 0x22	; 34
     3f4:	92 e0       	ldi	r25, 0x02	; 2
     3f6:	0e 94 70 08 	call	0x10e0	; 0x10e0 <HLCD_WriteString>
     3fa:	60 e0       	ldi	r22, 0x00	; 0
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <HLCD_gotoXY>
     402:	8c e2       	ldi	r24, 0x2C	; 44
     404:	92 e0       	ldi	r25, 0x02	; 2
     406:	0e 94 70 08 	call	0x10e0	; 0x10e0 <HLCD_WriteString>
     40a:	c7 01       	movw	r24, r14
     40c:	b6 01       	movw	r22, r12
     40e:	0e 94 88 08 	call	0x1110	; 0x1110 <HLCD_DisplayFloat>
     412:	42 e0       	ldi	r20, 0x02	; 2
     414:	61 e0       	ldi	r22, 0x01	; 1
     416:	70 e0       	ldi	r23, 0x00	; 0
     418:	80 e0       	ldi	r24, 0x00	; 0
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	0e 94 05 05 	call	0xa0a	; 0xa0a <HTIM0_SyncDelay>
     420:	0e 94 49 08 	call	0x1092	; 0x1092 <HLCD_ClrDisplay>
     424:	61 e0       	ldi	r22, 0x01	; 1
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <HLCD_gotoXY>
     42c:	86 e3       	ldi	r24, 0x36	; 54
     42e:	92 e0       	ldi	r25, 0x02	; 2
     430:	0e 94 70 08 	call	0x10e0	; 0x10e0 <HLCD_WriteString>
     434:	42 e0       	ldi	r20, 0x02	; 2
     436:	61 e0       	ldi	r22, 0x01	; 1
     438:	70 e0       	ldi	r23, 0x00	; 0
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	0e 94 05 05 	call	0xa0a	; 0xa0a <HTIM0_SyncDelay>
     442:	0e 94 49 08 	call	0x1092	; 0x1092 <HLCD_ClrDisplay>
     446:	ff 90       	pop	r15
     448:	ef 90       	pop	r14
     44a:	df 90       	pop	r13
     44c:	cf 90       	pop	r12
     44e:	08 95       	ret

00000450 <Get_pin>:
     450:	ef 92       	push	r14
     452:	ff 92       	push	r15
     454:	0f 93       	push	r16
     456:	1f 93       	push	r17
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
     45c:	8c 01       	movw	r16, r24
     45e:	0e 94 49 08 	call	0x1092	; 0x1092 <HLCD_ClrDisplay>
     462:	60 e0       	ldi	r22, 0x00	; 0
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <HLCD_gotoXY>
     46a:	84 e4       	ldi	r24, 0x44	; 68
     46c:	92 e0       	ldi	r25, 0x02	; 2
     46e:	0e 94 70 08 	call	0x10e0	; 0x10e0 <HLCD_WriteString>
     472:	d0 e0       	ldi	r29, 0x00	; 0
     474:	f1 2c       	mov	r15, r1
     476:	33 c0       	rjmp	.+102    	; 0x4de <Get_pin+0x8e>
     478:	0e 94 27 07 	call	0xe4e	; 0xe4e <KEYPAD_GetButton>
     47c:	c8 2f       	mov	r28, r24
     47e:	81 11       	cpse	r24, r1
     480:	18 c0       	rjmp	.+48     	; 0x4b2 <Get_pin+0x62>
     482:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <myState>
     486:	81 11       	cpse	r24, r1
     488:	2a c0       	rjmp	.+84     	; 0x4de <Get_pin+0x8e>
     48a:	82 e0       	ldi	r24, 0x02	; 2
     48c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <myState>
     490:	f8 01       	movw	r30, r16
     492:	ed 0f       	add	r30, r29
     494:	f1 1d       	adc	r31, r1
     496:	80 e3       	ldi	r24, 0x30	; 48
     498:	80 83       	st	Z, r24
     49a:	c1 e0       	ldi	r28, 0x01	; 1
     49c:	cf 0d       	add	r28, r15
     49e:	6f 2d       	mov	r22, r15
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <HLCD_gotoXY>
     4a6:	80 e3       	ldi	r24, 0x30	; 48
     4a8:	0e 94 e5 07 	call	0xfca	; 0xfca <HLCD_vidWriteChar>
     4ac:	df 5f       	subi	r29, 0xFF	; 255
     4ae:	fc 2e       	mov	r15, r28
     4b0:	16 c0       	rjmp	.+44     	; 0x4de <Get_pin+0x8e>
     4b2:	88 23       	and	r24, r24
     4b4:	a1 f0       	breq	.+40     	; 0x4de <Get_pin+0x8e>
     4b6:	ee 24       	eor	r14, r14
     4b8:	e3 94       	inc	r14
     4ba:	ef 0c       	add	r14, r15
     4bc:	6f 2d       	mov	r22, r15
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <HLCD_gotoXY>
     4c4:	d8 01       	movw	r26, r16
     4c6:	ad 0f       	add	r26, r29
     4c8:	b1 1d       	adc	r27, r1
     4ca:	ec 2f       	mov	r30, r28
     4cc:	f0 e0       	ldi	r31, 0x00	; 0
     4ce:	e4 59       	subi	r30, 0x94	; 148
     4d0:	fe 4f       	sbci	r31, 0xFE	; 254
     4d2:	80 81       	ld	r24, Z
     4d4:	8c 93       	st	X, r24
     4d6:	0e 94 e5 07 	call	0xfca	; 0xfca <HLCD_vidWriteChar>
     4da:	df 5f       	subi	r29, 0xFF	; 255
     4dc:	fe 2c       	mov	r15, r14
     4de:	d4 30       	cpi	r29, 0x04	; 4
     4e0:	20 f4       	brcc	.+8      	; 0x4ea <Get_pin+0x9a>
     4e2:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <myState>
     4e6:	81 30       	cpi	r24, 0x01	; 1
     4e8:	39 f6       	brne	.-114    	; 0x478 <Get_pin+0x28>
     4ea:	d4 30       	cpi	r29, 0x04	; 4
     4ec:	b0 f4       	brcc	.+44     	; 0x51a <Get_pin+0xca>
     4ee:	82 e0       	ldi	r24, 0x02	; 2
     4f0:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <myState>
     4f4:	0e 94 49 08 	call	0x1092	; 0x1092 <HLCD_ClrDisplay>
     4f8:	60 e0       	ldi	r22, 0x00	; 0
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <HLCD_gotoXY>
     500:	83 e5       	ldi	r24, 0x53	; 83
     502:	92 e0       	ldi	r25, 0x02	; 2
     504:	0e 94 70 08 	call	0x10e0	; 0x10e0 <HLCD_WriteString>
     508:	42 e0       	ldi	r20, 0x02	; 2
     50a:	61 e0       	ldi	r22, 0x01	; 1
     50c:	70 e0       	ldi	r23, 0x00	; 0
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	0e 94 05 05 	call	0xa0a	; 0xa0a <HTIM0_SyncDelay>
     516:	84 e0       	ldi	r24, 0x04	; 4
     518:	01 c0       	rjmp	.+2      	; 0x51c <Get_pin+0xcc>
     51a:	83 e0       	ldi	r24, 0x03	; 3
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	1f 91       	pop	r17
     522:	0f 91       	pop	r16
     524:	ff 90       	pop	r15
     526:	ef 90       	pop	r14
     528:	08 95       	ret

0000052a <PIN_checkPinMatching>:
     52a:	00 97       	sbiw	r24, 0x00	; 0
     52c:	49 f1       	breq	.+82     	; 0x580 <PIN_checkPinMatching+0x56>
     52e:	61 15       	cp	r22, r1
     530:	71 05       	cpc	r23, r1
     532:	41 f1       	breq	.+80     	; 0x584 <PIN_checkPinMatching+0x5a>
     534:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <strcmp>
     538:	89 2b       	or	r24, r25
     53a:	89 f4       	brne	.+34     	; 0x55e <PIN_checkPinMatching+0x34>
     53c:	0e 94 49 08 	call	0x1092	; 0x1092 <HLCD_ClrDisplay>
     540:	8d e5       	ldi	r24, 0x5D	; 93
     542:	92 e0       	ldi	r25, 0x02	; 2
     544:	0e 94 70 08 	call	0x10e0	; 0x10e0 <HLCD_WriteString>
     548:	2f e3       	ldi	r18, 0x3F	; 63
     54a:	82 e4       	ldi	r24, 0x42	; 66
     54c:	9f e0       	ldi	r25, 0x0F	; 15
     54e:	21 50       	subi	r18, 0x01	; 1
     550:	80 40       	sbci	r24, 0x00	; 0
     552:	90 40       	sbci	r25, 0x00	; 0
     554:	e1 f7       	brne	.-8      	; 0x54e <PIN_checkPinMatching+0x24>
     556:	00 c0       	rjmp	.+0      	; 0x558 <PIN_checkPinMatching+0x2e>
     558:	00 00       	nop
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	08 95       	ret
     55e:	0e 94 49 08 	call	0x1092	; 0x1092 <HLCD_ClrDisplay>
     562:	89 e6       	ldi	r24, 0x69	; 105
     564:	92 e0       	ldi	r25, 0x02	; 2
     566:	0e 94 70 08 	call	0x10e0	; 0x10e0 <HLCD_WriteString>
     56a:	2f e3       	ldi	r18, 0x3F	; 63
     56c:	82 e4       	ldi	r24, 0x42	; 66
     56e:	9f e0       	ldi	r25, 0x0F	; 15
     570:	21 50       	subi	r18, 0x01	; 1
     572:	80 40       	sbci	r24, 0x00	; 0
     574:	90 40       	sbci	r25, 0x00	; 0
     576:	e1 f7       	brne	.-8      	; 0x570 <PIN_checkPinMatching+0x46>
     578:	00 c0       	rjmp	.+0      	; 0x57a <PIN_checkPinMatching+0x50>
     57a:	00 00       	nop
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	08 95       	ret
     580:	82 e0       	ldi	r24, 0x02	; 2
     582:	08 95       	ret
     584:	82 e0       	ldi	r24, 0x02	; 2
     586:	08 95       	ret

00000588 <get_amount_left>:
     588:	df 92       	push	r13
     58a:	ef 92       	push	r14
     58c:	ff 92       	push	r15
     58e:	0f 93       	push	r16
     590:	1f 93       	push	r17
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	7c 01       	movw	r14, r24
     598:	0e 94 49 08 	call	0x1092	; 0x1092 <HLCD_ClrDisplay>
     59c:	60 e0       	ldi	r22, 0x00	; 0
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <HLCD_gotoXY>
     5a4:	89 e7       	ldi	r24, 0x79	; 121
     5a6:	92 e0       	ldi	r25, 0x02	; 2
     5a8:	0e 94 70 08 	call	0x10e0	; 0x10e0 <HLCD_WriteString>
     5ac:	60 e0       	ldi	r22, 0x00	; 0
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <HLCD_gotoXY>
     5b4:	c7 01       	movw	r24, r14
     5b6:	0e 94 70 08 	call	0x10e0	; 0x10e0 <HLCD_WriteString>
     5ba:	d1 2c       	mov	r13, r1
     5bc:	71 c0       	rjmp	.+226    	; 0x6a0 <get_amount_left+0x118>
     5be:	0e 94 27 07 	call	0xe4e	; 0xe4e <KEYPAD_GetButton>
     5c2:	d8 2f       	mov	r29, r24
     5c4:	81 11       	cpse	r24, r1
     5c6:	59 c0       	rjmp	.+178    	; 0x67a <get_amount_left+0xf2>
     5c8:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <myState>
     5cc:	81 11       	cpse	r24, r1
     5ce:	68 c0       	rjmp	.+208    	; 0x6a0 <get_amount_left+0x118>
     5d0:	82 e0       	ldi	r24, 0x02	; 2
     5d2:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <myState>
     5d6:	c0 e0       	ldi	r28, 0x00	; 0
     5d8:	20 c0       	rjmp	.+64     	; 0x61a <get_amount_left+0x92>
     5da:	c3 30       	cpi	r28, 0x03	; 3
     5dc:	79 f4       	brne	.+30     	; 0x5fc <get_amount_left+0x74>
     5de:	87 01       	movw	r16, r14
     5e0:	0c 0f       	add	r16, r28
     5e2:	11 1d       	adc	r17, r1
     5e4:	f8 01       	movw	r30, r16
     5e6:	82 81       	ldd	r24, Z+2	; 0x02
     5e8:	80 83       	st	Z, r24
     5ea:	6c 2f       	mov	r22, r28
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <HLCD_gotoXY>
     5f2:	f8 01       	movw	r30, r16
     5f4:	80 81       	ld	r24, Z
     5f6:	0e 94 e5 07 	call	0xfca	; 0xfca <HLCD_vidWriteChar>
     5fa:	c5 e0       	ldi	r28, 0x05	; 5
     5fc:	87 01       	movw	r16, r14
     5fe:	0c 0f       	add	r16, r28
     600:	11 1d       	adc	r17, r1
     602:	f8 01       	movw	r30, r16
     604:	81 81       	ldd	r24, Z+1	; 0x01
     606:	80 83       	st	Z, r24
     608:	6c 2f       	mov	r22, r28
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <HLCD_gotoXY>
     610:	f8 01       	movw	r30, r16
     612:	80 81       	ld	r24, Z
     614:	0e 94 e5 07 	call	0xfca	; 0xfca <HLCD_vidWriteChar>
     618:	cf 5f       	subi	r28, 0xFF	; 255
     61a:	c6 30       	cpi	r28, 0x06	; 6
     61c:	f0 f2       	brcs	.-68     	; 0x5da <get_amount_left+0x52>
     61e:	80 e3       	ldi	r24, 0x30	; 48
     620:	f7 01       	movw	r30, r14
     622:	86 83       	std	Z+6, r24	; 0x06
     624:	66 e0       	ldi	r22, 0x06	; 6
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <HLCD_gotoXY>
     62c:	f7 01       	movw	r30, r14
     62e:	86 81       	ldd	r24, Z+6	; 0x06
     630:	0e 94 e5 07 	call	0xfca	; 0xfca <HLCD_vidWriteChar>
     634:	d3 94       	inc	r13
     636:	34 c0       	rjmp	.+104    	; 0x6a0 <get_amount_left+0x118>
     638:	c3 30       	cpi	r28, 0x03	; 3
     63a:	79 f4       	brne	.+30     	; 0x65a <get_amount_left+0xd2>
     63c:	87 01       	movw	r16, r14
     63e:	0c 0f       	add	r16, r28
     640:	11 1d       	adc	r17, r1
     642:	f8 01       	movw	r30, r16
     644:	82 81       	ldd	r24, Z+2	; 0x02
     646:	80 83       	st	Z, r24
     648:	6c 2f       	mov	r22, r28
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <HLCD_gotoXY>
     650:	f8 01       	movw	r30, r16
     652:	80 81       	ld	r24, Z
     654:	0e 94 e5 07 	call	0xfca	; 0xfca <HLCD_vidWriteChar>
     658:	c5 e0       	ldi	r28, 0x05	; 5
     65a:	87 01       	movw	r16, r14
     65c:	0c 0f       	add	r16, r28
     65e:	11 1d       	adc	r17, r1
     660:	f8 01       	movw	r30, r16
     662:	81 81       	ldd	r24, Z+1	; 0x01
     664:	80 83       	st	Z, r24
     666:	6c 2f       	mov	r22, r28
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <HLCD_gotoXY>
     66e:	f8 01       	movw	r30, r16
     670:	80 81       	ld	r24, Z
     672:	0e 94 e5 07 	call	0xfca	; 0xfca <HLCD_vidWriteChar>
     676:	cf 5f       	subi	r28, 0xFF	; 255
     678:	01 c0       	rjmp	.+2      	; 0x67c <get_amount_left+0xf4>
     67a:	c0 e0       	ldi	r28, 0x00	; 0
     67c:	c6 30       	cpi	r28, 0x06	; 6
     67e:	e0 f2       	brcs	.-72     	; 0x638 <get_amount_left+0xb0>
     680:	ed 2f       	mov	r30, r29
     682:	f0 e0       	ldi	r31, 0x00	; 0
     684:	e4 59       	subi	r30, 0x94	; 148
     686:	fe 4f       	sbci	r31, 0xFE	; 254
     688:	80 81       	ld	r24, Z
     68a:	f7 01       	movw	r30, r14
     68c:	86 83       	std	Z+6, r24	; 0x06
     68e:	66 e0       	ldi	r22, 0x06	; 6
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <HLCD_gotoXY>
     696:	f7 01       	movw	r30, r14
     698:	86 81       	ldd	r24, Z+6	; 0x06
     69a:	0e 94 e5 07 	call	0xfca	; 0xfca <HLCD_vidWriteChar>
     69e:	d3 94       	inc	r13
     6a0:	f5 e0       	ldi	r31, 0x05	; 5
     6a2:	fd 15       	cp	r31, r13
     6a4:	28 f0       	brcs	.+10     	; 0x6b0 <get_amount_left+0x128>
     6a6:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <myState>
     6aa:	81 30       	cpi	r24, 0x01	; 1
     6ac:	09 f0       	breq	.+2      	; 0x6b0 <get_amount_left+0x128>
     6ae:	87 cf       	rjmp	.-242    	; 0x5be <get_amount_left+0x36>
     6b0:	df 91       	pop	r29
     6b2:	cf 91       	pop	r28
     6b4:	1f 91       	pop	r17
     6b6:	0f 91       	pop	r16
     6b8:	ff 90       	pop	r15
     6ba:	ef 90       	pop	r14
     6bc:	df 90       	pop	r13
     6be:	08 95       	ret

000006c0 <deinitAtm>:
     6c0:	61 e0       	ldi	r22, 0x01	; 1
     6c2:	0e 94 92 04 	call	0x924	; 0x924 <BUZ_SetState>
     6c6:	08 95       	ret

000006c8 <ATM_ValidatePIN>:
	EN_PinState ATM_ValidatePIN(void)
	{
		EN_PinState u8_l_MatchPIN;
		
		/* Request PIN From Card */
		HSPI_SendChar(ATM_REQUEST_PIN);
     6c8:	80 e5       	ldi	r24, 0x50	; 80
     6ca:	0e 94 b7 04 	call	0x96e	; 0x96e <HSPI_SendChar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6ce:	81 ee       	ldi	r24, 0xE1	; 225
     6d0:	94 e0       	ldi	r25, 0x04	; 4
     6d2:	01 97       	sbiw	r24, 0x01	; 1
     6d4:	f1 f7       	brne	.-4      	; 0x6d2 <ATM_ValidatePIN+0xa>
     6d6:	00 c0       	rjmp	.+0      	; 0x6d8 <ATM_ValidatePIN+0x10>
     6d8:	00 00       	nop
		_delay_ms(5);
		HSPI_ReceiveData(CARDpin, 5);
     6da:	65 e0       	ldi	r22, 0x05	; 5
     6dc:	81 ee       	ldi	r24, 0xE1	; 225
     6de:	92 e0       	ldi	r25, 0x02	; 2
     6e0:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <HSPI_ReceiveData>
		HLCD_ClrDisplay();
     6e4:	0e 94 49 08 	call	0x1092	; 0x1092 <HLCD_ClrDisplay>
		HLCD_WriteString("Received ");
     6e8:	86 e8       	ldi	r24, 0x86	; 134
     6ea:	92 e0       	ldi	r25, 0x02	; 2
     6ec:	0e 94 70 08 	call	0x10e0	; 0x10e0 <HLCD_WriteString>
		HLCD_WriteString(CARDpin);
     6f0:	81 ee       	ldi	r24, 0xE1	; 225
     6f2:	92 e0       	ldi	r25, 0x02	; 2
     6f4:	0e 94 70 08 	call	0x10e0	; 0x10e0 <HLCD_WriteString>
     6f8:	9f eb       	ldi	r25, 0xBF	; 191
     6fa:	27 e2       	ldi	r18, 0x27	; 39
     6fc:	89 e0       	ldi	r24, 0x09	; 9
     6fe:	91 50       	subi	r25, 0x01	; 1
     700:	20 40       	sbci	r18, 0x00	; 0
     702:	80 40       	sbci	r24, 0x00	; 0
     704:	e1 f7       	brne	.-8      	; 0x6fe <ATM_ValidatePIN+0x36>
     706:	00 c0       	rjmp	.+0      	; 0x708 <ATM_ValidatePIN+0x40>
     708:	00 00       	nop
		_delay_ms(3000);
		
		/* Request PIN From Card */
		HSPI_SendChar(ATM_REQUEST_PAN);
     70a:	87 e4       	ldi	r24, 0x47	; 71
     70c:	0e 94 b7 04 	call	0x96e	; 0x96e <HSPI_SendChar>
     710:	81 ee       	ldi	r24, 0xE1	; 225
     712:	94 e0       	ldi	r25, 0x04	; 4
     714:	01 97       	sbiw	r24, 0x01	; 1
     716:	f1 f7       	brne	.-4      	; 0x714 <ATM_ValidatePIN+0x4c>
     718:	00 c0       	rjmp	.+0      	; 0x71a <ATM_ValidatePIN+0x52>
     71a:	00 00       	nop
		_delay_ms(5);
		HSPI_ReceiveData(CARDpan, 20);
     71c:	64 e1       	ldi	r22, 0x14	; 20
     71e:	8a ee       	ldi	r24, 0xEA	; 234
     720:	92 e0       	ldi	r25, 0x02	; 2
     722:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <HSPI_ReceiveData>
		//HLCD_WriteString("Received ");
		//HLCD_gotoXY(1,0);
		//HLCD_WriteString(CARDpan);
		//_delay_ms(10000);
		
		u8_l_MatchPIN = PIN_checkPinMatching(CARDpin, ATMpin);
     726:	62 eb       	ldi	r22, 0xB2	; 178
     728:	72 e0       	ldi	r23, 0x02	; 2
     72a:	81 ee       	ldi	r24, 0xE1	; 225
     72c:	92 e0       	ldi	r25, 0x02	; 2
     72e:	0e 94 95 02 	call	0x52a	; 0x52a <PIN_checkPinMatching>
		
		return u8_l_MatchPIN;
	}
     732:	08 95       	ret

00000734 <isBelowMaxDailyAmount>:
};

EN_dataError_t isBelowMaxDailyAmount(Uchar8_t * amount)
{
    EN_dataError_t LOCAL_returnValue = APPROVED;
    Schar8_t state = strcmp(amount,MAX_TRANS_AMOUNT);
     734:	60 e9       	ldi	r22, 0x90	; 144
     736:	72 e0       	ldi	r23, 0x02	; 2
     738:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <strcmp>
    if( state>0) LOCAL_returnValue = EXCEED_MAX_DAILY_AMOUNT;
     73c:	18 16       	cp	r1, r24
     73e:	14 f0       	brlt	.+4      	; 0x744 <isBelowMaxDailyAmount+0x10>

};

EN_dataError_t isBelowMaxDailyAmount(Uchar8_t * amount)
{
    EN_dataError_t LOCAL_returnValue = APPROVED;
     740:	80 e0       	ldi	r24, 0x00	; 0
     742:	08 95       	ret
    Schar8_t state = strcmp(amount,MAX_TRANS_AMOUNT);
    if( state>0) LOCAL_returnValue = EXCEED_MAX_DAILY_AMOUNT;
     744:	83 e0       	ldi	r24, 0x03	; 3
    return LOCAL_returnValue;
}
     746:	08 95       	ret

00000748 <isValidPanAccount>:


EN_dataError_t isValidPanAccount(Uchar8_t * pan)
{
     748:	0f 93       	push	r16
     74a:	1f 93       	push	r17
     74c:	cf 93       	push	r28
     74e:	8c 01       	movw	r16, r24
	EN_dataError_t LOCAL_returnValue = FRAUD_CARD;
    Uchar8_t loc_Counter;
    Schar8_t state;
    for(loc_Counter = 0 ; loc_Counter<DB_SIZE;loc_Counter++)
     750:	c0 e0       	ldi	r28, 0x00	; 0
     752:	0c c0       	rjmp	.+24     	; 0x76c <isValidPanAccount+0x24>
    {
     state = strcmp(pan,accountsDB[loc_Counter].primaryAccountNumber);
     754:	89 e1       	ldi	r24, 0x19	; 25
     756:	c8 9f       	mul	r28, r24
     758:	b0 01       	movw	r22, r0
     75a:	11 24       	eor	r1, r1
     75c:	69 58       	subi	r22, 0x89	; 137
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	c8 01       	movw	r24, r16
     762:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <strcmp>
     if(state == 0 )
     766:	88 23       	and	r24, r24
     768:	29 f0       	breq	.+10     	; 0x774 <isValidPanAccount+0x2c>
EN_dataError_t isValidPanAccount(Uchar8_t * pan)
{
	EN_dataError_t LOCAL_returnValue = FRAUD_CARD;
    Uchar8_t loc_Counter;
    Schar8_t state;
    for(loc_Counter = 0 ; loc_Counter<DB_SIZE;loc_Counter++)
     76a:	cf 5f       	subi	r28, 0xFF	; 255
     76c:	ca 30       	cpi	r28, 0x0A	; 10
     76e:	90 f3       	brcs	.-28     	; 0x754 <isValidPanAccount+0xc>
}


EN_dataError_t isValidPanAccount(Uchar8_t * pan)
{
	EN_dataError_t LOCAL_returnValue = FRAUD_CARD;
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	01 c0       	rjmp	.+2      	; 0x776 <isValidPanAccount+0x2e>
    for(loc_Counter = 0 ; loc_Counter<DB_SIZE;loc_Counter++)
    {
     state = strcmp(pan,accountsDB[loc_Counter].primaryAccountNumber);
     if(state == 0 )
      {
         LOCAL_returnValue = APPROVED;
     774:	80 e0       	ldi	r24, 0x00	; 0
         break;
      }
    }
	return LOCAL_returnValue;
}
     776:	cf 91       	pop	r28
     778:	1f 91       	pop	r17
     77a:	0f 91       	pop	r16
     77c:	08 95       	ret

0000077e <isRunningAccount>:


EN_dataError_t isRunningAccount(Uchar8_t * pan)
{
     77e:	ef 92       	push	r14
     780:	ff 92       	push	r15
     782:	0f 93       	push	r16
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	7c 01       	movw	r14, r24
	EN_dataError_t LOCAL_returnValue = CARD_STOLEN;
	Uchar8_t loc_Counter;
	Schar8_t state;
	for(loc_Counter = 0 ; loc_Counter<DB_SIZE;loc_Counter++)
     78a:	c0 e0       	ldi	r28, 0x00	; 0
     78c:	1d c0       	rjmp	.+58     	; 0x7c8 <isRunningAccount+0x4a>
	{
		state = strcmp(pan,accountsDB[loc_Counter].primaryAccountNumber);
     78e:	0c 2f       	mov	r16, r28
     790:	10 e0       	ldi	r17, 0x00	; 0
     792:	89 e1       	ldi	r24, 0x19	; 25
     794:	80 9f       	mul	r24, r16
     796:	b0 01       	movw	r22, r0
     798:	81 9f       	mul	r24, r17
     79a:	70 0d       	add	r23, r0
     79c:	11 24       	eor	r1, r1
     79e:	69 58       	subi	r22, 0x89	; 137
     7a0:	7f 4f       	sbci	r23, 0xFF	; 255
     7a2:	c7 01       	movw	r24, r14
     7a4:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <strcmp>
		if(state == 0 )
     7a8:	81 11       	cpse	r24, r1
     7aa:	0d c0       	rjmp	.+26     	; 0x7c6 <isRunningAccount+0x48>
		{
            if(accountsDB[loc_Counter].state == RUNNING)
     7ac:	89 e1       	ldi	r24, 0x19	; 25
     7ae:	80 9f       	mul	r24, r16
     7b0:	f0 01       	movw	r30, r0
     7b2:	81 9f       	mul	r24, r17
     7b4:	f0 0d       	add	r31, r0
     7b6:	11 24       	eor	r1, r1
     7b8:	ee 58       	subi	r30, 0x8E	; 142
     7ba:	ff 4f       	sbci	r31, 0xFF	; 255
     7bc:	84 81       	ldd	r24, Z+4	; 0x04
     7be:	88 23       	and	r24, r24
     7c0:	39 f0       	breq	.+14     	; 0x7d0 <isRunningAccount+0x52>
}


EN_dataError_t isRunningAccount(Uchar8_t * pan)
{
	EN_dataError_t LOCAL_returnValue = CARD_STOLEN;
     7c2:	82 e0       	ldi	r24, 0x02	; 2
     7c4:	06 c0       	rjmp	.+12     	; 0x7d2 <isRunningAccount+0x54>
	Uchar8_t loc_Counter;
	Schar8_t state;
	for(loc_Counter = 0 ; loc_Counter<DB_SIZE;loc_Counter++)
     7c6:	cf 5f       	subi	r28, 0xFF	; 255
     7c8:	ca 30       	cpi	r28, 0x0A	; 10
     7ca:	08 f3       	brcs	.-62     	; 0x78e <isRunningAccount+0x10>
}


EN_dataError_t isRunningAccount(Uchar8_t * pan)
{
	EN_dataError_t LOCAL_returnValue = CARD_STOLEN;
     7cc:	82 e0       	ldi	r24, 0x02	; 2
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <isRunningAccount+0x54>
	{
		state = strcmp(pan,accountsDB[loc_Counter].primaryAccountNumber);
		if(state == 0 )
		{
            if(accountsDB[loc_Counter].state == RUNNING)
			LOCAL_returnValue = APPROVED;
     7d0:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	}
	return LOCAL_returnValue;
}
     7d2:	cf 91       	pop	r28
     7d4:	1f 91       	pop	r17
     7d6:	0f 91       	pop	r16
     7d8:	ff 90       	pop	r15
     7da:	ef 90       	pop	r14
     7dc:	08 95       	ret

000007de <isValidAccountAmount>:

EN_dataError_t isValidAccountAmount(Uchar8_t * pan,Uchar8_t * amount,float32_t *newAmount)
{
     7de:	4f 92       	push	r4
     7e0:	5f 92       	push	r5
     7e2:	6f 92       	push	r6
     7e4:	7f 92       	push	r7
     7e6:	8f 92       	push	r8
     7e8:	9f 92       	push	r9
     7ea:	af 92       	push	r10
     7ec:	bf 92       	push	r11
     7ee:	cf 92       	push	r12
     7f0:	df 92       	push	r13
     7f2:	ef 92       	push	r14
     7f4:	ff 92       	push	r15
     7f6:	0f 93       	push	r16
     7f8:	1f 93       	push	r17
     7fa:	cf 93       	push	r28
     7fc:	7c 01       	movw	r14, r24
     7fe:	cb 01       	movw	r24, r22
     800:	6a 01       	movw	r12, r20
    float32_t Conv_amount = atof(amount);
     802:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <atof>
     806:	4b 01       	movw	r8, r22
     808:	5c 01       	movw	r10, r24
	EN_dataError_t LOCAL_returnValue = INSUFFICIENT_FUND;
	Uchar8_t loc_Counter;
	Schar8_t state;
	for(loc_Counter = 0 ; loc_Counter<DB_SIZE;loc_Counter++)
     80a:	c0 e0       	ldi	r28, 0x00	; 0
     80c:	3d c0       	rjmp	.+122    	; 0x888 <__stack+0x29>
	{
		state = strcmp(pan,accountsDB[loc_Counter].primaryAccountNumber);
     80e:	0c 2f       	mov	r16, r28
     810:	10 e0       	ldi	r17, 0x00	; 0
     812:	89 e1       	ldi	r24, 0x19	; 25
     814:	80 9f       	mul	r24, r16
     816:	b0 01       	movw	r22, r0
     818:	81 9f       	mul	r24, r17
     81a:	70 0d       	add	r23, r0
     81c:	11 24       	eor	r1, r1
     81e:	69 58       	subi	r22, 0x89	; 137
     820:	7f 4f       	sbci	r23, 0xFF	; 255
     822:	c7 01       	movw	r24, r14
     824:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <strcmp>
		if(state == 0 )
     828:	81 11       	cpse	r24, r1
     82a:	2d c0       	rjmp	.+90     	; 0x886 <__stack+0x27>
		{
			if(accountsDB[loc_Counter].balance >= Conv_amount)
     82c:	89 e1       	ldi	r24, 0x19	; 25
     82e:	80 9f       	mul	r24, r16
     830:	f0 01       	movw	r30, r0
     832:	81 9f       	mul	r24, r17
     834:	f0 0d       	add	r31, r0
     836:	11 24       	eor	r1, r1
     838:	ee 58       	subi	r30, 0x8E	; 142
     83a:	ff 4f       	sbci	r31, 0xFF	; 255
     83c:	40 80       	ld	r4, Z
     83e:	51 80       	ldd	r5, Z+1	; 0x01
     840:	62 80       	ldd	r6, Z+2	; 0x02
     842:	73 80       	ldd	r7, Z+3	; 0x03
     844:	a3 01       	movw	r20, r6
     846:	92 01       	movw	r18, r4
     848:	c5 01       	movw	r24, r10
     84a:	b4 01       	movw	r22, r8
     84c:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__cmpsf2>
     850:	18 16       	cp	r1, r24
     852:	cc f0       	brlt	.+50     	; 0x886 <__stack+0x27>
            {
              accountsDB[loc_Counter].balance-=Conv_amount;
     854:	a5 01       	movw	r20, r10
     856:	94 01       	movw	r18, r8
     858:	c3 01       	movw	r24, r6
     85a:	b2 01       	movw	r22, r4
     85c:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__subsf3>
     860:	29 e1       	ldi	r18, 0x19	; 25
     862:	20 9f       	mul	r18, r16
     864:	f0 01       	movw	r30, r0
     866:	21 9f       	mul	r18, r17
     868:	f0 0d       	add	r31, r0
     86a:	11 24       	eor	r1, r1
     86c:	ee 58       	subi	r30, 0x8E	; 142
     86e:	ff 4f       	sbci	r31, 0xFF	; 255
     870:	60 83       	st	Z, r22
     872:	71 83       	std	Z+1, r23	; 0x01
     874:	82 83       	std	Z+2, r24	; 0x02
     876:	93 83       	std	Z+3, r25	; 0x03
              *newAmount = accountsDB[loc_Counter].balance;
     878:	f6 01       	movw	r30, r12
     87a:	60 83       	st	Z, r22
     87c:	71 83       	std	Z+1, r23	; 0x01
     87e:	82 83       	std	Z+2, r24	; 0x02
     880:	93 83       	std	Z+3, r25	; 0x03
              LOCAL_returnValue = APPROVED;
     882:	80 e0       	ldi	r24, 0x00	; 0
              break;
     884:	05 c0       	rjmp	.+10     	; 0x890 <__stack+0x31>
{
    float32_t Conv_amount = atof(amount);
	EN_dataError_t LOCAL_returnValue = INSUFFICIENT_FUND;
	Uchar8_t loc_Counter;
	Schar8_t state;
	for(loc_Counter = 0 ; loc_Counter<DB_SIZE;loc_Counter++)
     886:	cf 5f       	subi	r28, 0xFF	; 255
     888:	ca 30       	cpi	r28, 0x0A	; 10
     88a:	08 f4       	brcc	.+2      	; 0x88e <__stack+0x2f>
     88c:	c0 cf       	rjmp	.-128    	; 0x80e <__DATA_REGION_LENGTH__+0xe>
}

EN_dataError_t isValidAccountAmount(Uchar8_t * pan,Uchar8_t * amount,float32_t *newAmount)
{
    float32_t Conv_amount = atof(amount);
	EN_dataError_t LOCAL_returnValue = INSUFFICIENT_FUND;
     88e:	84 e0       	ldi	r24, 0x04	; 4
            }
			
		}
	}
	return LOCAL_returnValue;
}
     890:	cf 91       	pop	r28
     892:	1f 91       	pop	r17
     894:	0f 91       	pop	r16
     896:	ff 90       	pop	r15
     898:	ef 90       	pop	r14
     89a:	df 90       	pop	r13
     89c:	cf 90       	pop	r12
     89e:	bf 90       	pop	r11
     8a0:	af 90       	pop	r10
     8a2:	9f 90       	pop	r9
     8a4:	8f 90       	pop	r8
     8a6:	7f 90       	pop	r7
     8a8:	6f 90       	pop	r6
     8aa:	5f 90       	pop	r5
     8ac:	4f 90       	pop	r4
     8ae:	08 95       	ret

000008b0 <DATABASE_checking>:


EN_dataError_t DATABASE_checking (Uchar8_t * pan,Uchar8_t * amount,float32_t *newAmount)
{
     8b0:	ef 92       	push	r14
     8b2:	ff 92       	push	r15
     8b4:	0f 93       	push	r16
     8b6:	1f 93       	push	r17
     8b8:	cf 93       	push	r28
     8ba:	df 93       	push	r29
     8bc:	ec 01       	movw	r28, r24
     8be:	8b 01       	movw	r16, r22
     8c0:	7a 01       	movw	r14, r20
    
    EN_dataError_t Returend_Val;
    Returend_Val = isValidPanAccount(pan);
     8c2:	0e 94 a4 03 	call	0x748	; 0x748 <isValidPanAccount>
    if(Returend_Val == FRAUD_CARD) return Returend_Val;
     8c6:	81 30       	cpi	r24, 0x01	; 1
     8c8:	89 f0       	breq	.+34     	; 0x8ec <DATABASE_checking+0x3c>
    Returend_Val = isRunningAccount(pan);
     8ca:	ce 01       	movw	r24, r28
     8cc:	0e 94 bf 03 	call	0x77e	; 0x77e <isRunningAccount>
    if(Returend_Val == CARD_STOLEN) return Returend_Val;
     8d0:	82 30       	cpi	r24, 0x02	; 2
     8d2:	61 f0       	breq	.+24     	; 0x8ec <DATABASE_checking+0x3c>
    Returend_Val = isBelowMaxDailyAmount(amount);
     8d4:	c8 01       	movw	r24, r16
     8d6:	0e 94 9a 03 	call	0x734	; 0x734 <isBelowMaxDailyAmount>
    if(Returend_Val == EXCEED_MAX_DAILY_AMOUNT) return Returend_Val;
     8da:	83 30       	cpi	r24, 0x03	; 3
     8dc:	39 f0       	breq	.+14     	; 0x8ec <DATABASE_checking+0x3c>
    Returend_Val = isValidAccountAmount(pan , amount,newAmount);
     8de:	a7 01       	movw	r20, r14
     8e0:	b8 01       	movw	r22, r16
     8e2:	ce 01       	movw	r24, r28
     8e4:	0e 94 ef 03 	call	0x7de	; 0x7de <isValidAccountAmount>
    if(Returend_Val == INSUFFICIENT_FUND) return Returend_Val;
     8e8:	84 30       	cpi	r24, 0x04	; 4
     8ea:	01 f0       	breq	.+0      	; 0x8ec <DATABASE_checking+0x3c>
    
    
    Returend_Val = APPROVED;
    
    
     8ec:	df 91       	pop	r29
     8ee:	cf 91       	pop	r28
     8f0:	1f 91       	pop	r17
     8f2:	0f 91       	pop	r16
     8f4:	ff 90       	pop	r15
     8f6:	ef 90       	pop	r14
     8f8:	08 95       	ret

000008fa <HButton_ExtIntInit>:

enu_buttonError_t HButton_ExtIntInit(enu_pin en_pinx)
{
	enu_buttonError_t errorStatus = BUTTON_OK;

	if ( en_pinx < PIN_INVALID )
     8fa:	80 32       	cpi	r24, 0x20	; 32
     8fc:	18 f4       	brcc	.+6      	; 0x904 <HButton_ExtIntInit+0xa>
	{
		DIO_s8SETPinVal(en_pinx, HIGH);
     8fe:	61 e0       	ldi	r22, 0x01	; 1
     900:	0e 94 65 09 	call	0x12ca	; 0x12ca <DIO_s8SETPinVal>
	{
		errorStatus = BUTTON_OK;
	}

	return errorStatus;
}
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	08 95       	ret

00000908 <BUZ_Init>:

/*************************************************************************************************************
 * 											Function Implementation
 ************************************************************************************************************/
void BUZ_Init(st_Buzzer_t* pst_a_buzzer)
{
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
     90c:	ec 01       	movw	r28, r24
	DIO_s8SETPinDir(pst_a_buzzer->BuzzerPin, OUTPUT);
     90e:	61 e0       	ldi	r22, 0x01	; 1
     910:	88 81       	ld	r24, Y
     912:	0e 94 25 09 	call	0x124a	; 0x124a <DIO_s8SETPinDir>
	DIO_s8SETPinVal(pst_a_buzzer->BuzzerPin, LOW);
     916:	60 e0       	ldi	r22, 0x00	; 0
     918:	88 81       	ld	r24, Y
     91a:	0e 94 65 09 	call	0x12ca	; 0x12ca <DIO_s8SETPinVal>
}
     91e:	df 91       	pop	r29
     920:	cf 91       	pop	r28
     922:	08 95       	ret

00000924 <BUZ_SetState>:

en_BuzzerErrorState_t BUZ_Enable(st_Buzzer_t* pst_a_buzzer);
en_BuzzerErrorState_t BUZ_SetState(st_Buzzer_t* pst_a_buzzer, en_BuzzerState_t u16_a_state)
{
	if(pst_a_buzzer != NULL)
     924:	00 97       	sbiw	r24, 0x00	; 0
     926:	31 f0       	breq	.+12     	; 0x934 <BUZ_SetState+0x10>
     928:	fc 01       	movw	r30, r24
	{
		DIO_s8SETPinVal(pst_a_buzzer->BuzzerPin, u16_a_state);
     92a:	80 81       	ld	r24, Z
     92c:	0e 94 65 09 	call	0x12ca	; 0x12ca <DIO_s8SETPinVal>
	else
	{
		return BUZ_NOK;
	}
	
	return BUZ_OK;
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	08 95       	ret
	{
		DIO_s8SETPinVal(pst_a_buzzer->BuzzerPin, u16_a_state);
	}
	else
	{
		return BUZ_NOK;
     934:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return BUZ_OK;
     936:	08 95       	ret

00000938 <HSPI_MasterInit>:
	{
		return HSPI_NOK;
	}
	
	return HSPI_OK;	
}
     938:	61 e0       	ldi	r22, 0x01	; 1
     93a:	8d e0       	ldi	r24, 0x0D	; 13
     93c:	0e 94 25 09 	call	0x124a	; 0x124a <DIO_s8SETPinDir>
     940:	61 e0       	ldi	r22, 0x01	; 1
     942:	8f e0       	ldi	r24, 0x0F	; 15
     944:	0e 94 25 09 	call	0x124a	; 0x124a <DIO_s8SETPinDir>
     948:	61 e0       	ldi	r22, 0x01	; 1
     94a:	8c e0       	ldi	r24, 0x0C	; 12
     94c:	0e 94 25 09 	call	0x124a	; 0x124a <DIO_s8SETPinDir>
     950:	61 e0       	ldi	r22, 0x01	; 1
     952:	8c e0       	ldi	r24, 0x0C	; 12
     954:	0e 94 65 09 	call	0x12ca	; 0x12ca <DIO_s8SETPinVal>
     958:	60 e0       	ldi	r22, 0x00	; 0
     95a:	8e e0       	ldi	r24, 0x0E	; 14
     95c:	0e 94 25 09 	call	0x124a	; 0x124a <DIO_s8SETPinDir>
     960:	62 e0       	ldi	r22, 0x02	; 2
     962:	8a e0       	ldi	r24, 0x0A	; 10
     964:	0e 94 cf 09 	call	0x139e	; 0x139e <EXTINT_init>
     968:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <SPI_MasterInit>
     96c:	08 95       	ret

0000096e <HSPI_SendChar>:
     96e:	1f 93       	push	r17
     970:	cf 93       	push	r28
     972:	df 93       	push	r29
     974:	1f 92       	push	r1
     976:	cd b7       	in	r28, 0x3d	; 61
     978:	de b7       	in	r29, 0x3e	; 62
     97a:	18 2f       	mov	r17, r24
     97c:	60 e0       	ldi	r22, 0x00	; 0
     97e:	8c e0       	ldi	r24, 0x0C	; 12
     980:	0e 94 65 09 	call	0x12ca	; 0x12ca <DIO_s8SETPinVal>
     984:	be 01       	movw	r22, r28
     986:	6f 5f       	subi	r22, 0xFF	; 255
     988:	7f 4f       	sbci	r23, 0xFF	; 255
     98a:	81 2f       	mov	r24, r17
     98c:	0e 94 02 0b 	call	0x1604	; 0x1604 <SPI_TranscieveChar>
     990:	61 e0       	ldi	r22, 0x01	; 1
     992:	8c e0       	ldi	r24, 0x0C	; 12
     994:	0e 94 65 09 	call	0x12ca	; 0x12ca <DIO_s8SETPinVal>
     998:	0f 90       	pop	r0
     99a:	df 91       	pop	r29
     99c:	cf 91       	pop	r28
     99e:	1f 91       	pop	r17
     9a0:	08 95       	ret

000009a2 <HSPI_ReceiveData>:
 * \param u8_a_DataSize: size of storage buffer
 * 
 * \return en_HSPI_ErrorState_t
 */
void HSPI_ReceiveData(Uchar8_t *pu8_a_data, Uchar8_t u8_a_DataSize)
{
     9a2:	cf 92       	push	r12
     9a4:	df 92       	push	r13
     9a6:	ef 92       	push	r14
     9a8:	ff 92       	push	r15
     9aa:	0f 93       	push	r16
     9ac:	1f 93       	push	r17
     9ae:	cf 93       	push	r28
     9b0:	df 93       	push	r29
     9b2:	1f 92       	push	r1
     9b4:	cd b7       	in	r28, 0x3d	; 61
     9b6:	de b7       	in	r29, 0x3e	; 62
     9b8:	6c 01       	movw	r12, r24
     9ba:	06 2f       	mov	r16, r22
	Uchar8_t u8_l_DataIterator = 0, u8_l_dummyVar;

	/* Select Slave */
	DIO_s8SETPinVal(HSPI_SS, LOW);	
     9bc:	60 e0       	ldi	r22, 0x00	; 0
     9be:	8c e0       	ldi	r24, 0x0C	; 12
     9c0:	0e 94 65 09 	call	0x12ca	; 0x12ca <DIO_s8SETPinVal>

	/* Initiate communication with dummy bit for synchronization */
	SPI_TranscieveChar(DATA_END, &u8_l_dummyVar);
     9c4:	be 01       	movw	r22, r28
     9c6:	6f 5f       	subi	r22, 0xFF	; 255
     9c8:	7f 4f       	sbci	r23, 0xFF	; 255
     9ca:	83 e2       	ldi	r24, 0x23	; 35
     9cc:	0e 94 02 0b 	call	0x1604	; 0x1604 <SPI_TranscieveChar>
 * 
 * \return en_HSPI_ErrorState_t
 */
void HSPI_ReceiveData(Uchar8_t *pu8_a_data, Uchar8_t u8_a_DataSize)
{
	Uchar8_t u8_l_DataIterator = 0, u8_l_dummyVar;
     9d0:	10 e0       	ldi	r17, 0x00	; 0
	/* Initiate communication with dummy bit for synchronization */
	SPI_TranscieveChar(DATA_END, &u8_l_dummyVar);
	
	do
	{
		SPI_TranscieveChar(DATA_END, &pu8_a_data[u8_l_DataIterator]);
     9d2:	76 01       	movw	r14, r12
     9d4:	e1 0e       	add	r14, r17
     9d6:	f1 1c       	adc	r15, r1
     9d8:	b7 01       	movw	r22, r14
     9da:	83 e2       	ldi	r24, 0x23	; 35
     9dc:	0e 94 02 0b 	call	0x1604	; 0x1604 <SPI_TranscieveChar>
						
	}while((pu8_a_data[u8_l_DataIterator++]!=DATA_END) && (u8_l_DataIterator < u8_a_DataSize));
     9e0:	1f 5f       	subi	r17, 0xFF	; 255
     9e2:	f7 01       	movw	r30, r14
     9e4:	80 81       	ld	r24, Z
     9e6:	83 32       	cpi	r24, 0x23	; 35
     9e8:	11 f0       	breq	.+4      	; 0x9ee <HSPI_ReceiveData+0x4c>
     9ea:	10 17       	cp	r17, r16
     9ec:	90 f3       	brcs	.-28     	; 0x9d2 <HSPI_ReceiveData+0x30>
	
	/* Deselect Slave */
	DIO_s8SETPinVal(HSPI_SS, HIGH);
     9ee:	61 e0       	ldi	r22, 0x01	; 1
     9f0:	8c e0       	ldi	r24, 0x0C	; 12
     9f2:	0e 94 65 09 	call	0x12ca	; 0x12ca <DIO_s8SETPinVal>
}
     9f6:	0f 90       	pop	r0
     9f8:	df 91       	pop	r29
     9fa:	cf 91       	pop	r28
     9fc:	1f 91       	pop	r17
     9fe:	0f 91       	pop	r16
     a00:	ff 90       	pop	r15
     a02:	ef 90       	pop	r14
     a04:	df 90       	pop	r13
     a06:	cf 90       	pop	r12
     a08:	08 95       	ret

00000a0a <HTIM0_SyncDelay>:
extern Uchar8_t u8_g_TotalOVF;

/*================================= Function Implementation =================================*/

en_HTIMErrorState_t HTIM0_SyncDelay(Uint32_t u32_a_delay, en_timeUnits_t Copy_timeUnit)
{
     a0a:	8f 92       	push	r8
     a0c:	9f 92       	push	r9
     a0e:	af 92       	push	r10
     a10:	bf 92       	push	r11
     a12:	cf 92       	push	r12
     a14:	df 92       	push	r13
     a16:	ef 92       	push	r14
     a18:	ff 92       	push	r15
     a1a:	0f 93       	push	r16
     a1c:	1f 93       	push	r17
     a1e:	cf 93       	push	r28
     a20:	df 93       	push	r29
     a22:	00 d0       	rcall	.+0      	; 0xa24 <HTIM0_SyncDelay+0x1a>
     a24:	cd b7       	in	r28, 0x3d	; 61
     a26:	de b7       	in	r29, 0x3e	; 62
     a28:	6b 01       	movw	r12, r22
     a2a:	7c 01       	movw	r14, r24
	Uchar8_t u8_l_prescaler, Local_TotalOverFlows, Local_OverFlowCounter=0, u8_l_OverflowFlag, u8_l_TimState;
	Uint16_t Local_TotalTicks;
	float Local_TickTime;
	
	/* Get Value in micro seconds */
	if(Copy_timeUnit == Seconds)	{u32_a_delay *= SEC_TO_uSEC;}
     a2c:	42 30       	cpi	r20, 0x02	; 2
     a2e:	59 f4       	brne	.+22     	; 0xa46 <HTIM0_SyncDelay+0x3c>
     a30:	9b 01       	movw	r18, r22
     a32:	ac 01       	movw	r20, r24
     a34:	60 e4       	ldi	r22, 0x40	; 64
     a36:	72 e4       	ldi	r23, 0x42	; 66
     a38:	8f e0       	ldi	r24, 0x0F	; 15
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <__mulsi3>
     a40:	6b 01       	movw	r12, r22
     a42:	7c 01       	movw	r14, r24
     a44:	0d c0       	rjmp	.+26     	; 0xa60 <HTIM0_SyncDelay+0x56>
	else if(Copy_timeUnit == mSeconds)	{u32_a_delay *= mSEC_TO_uSEC;}
     a46:	41 30       	cpi	r20, 0x01	; 1
     a48:	49 f4       	brne	.+18     	; 0xa5c <HTIM0_SyncDelay+0x52>
     a4a:	a8 ee       	ldi	r26, 0xE8	; 232
     a4c:	b3 e0       	ldi	r27, 0x03	; 3
     a4e:	9b 01       	movw	r18, r22
     a50:	ac 01       	movw	r20, r24
     a52:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__muluhisi3>
     a56:	6b 01       	movw	r12, r22
     a58:	7c 01       	movw	r14, r24
     a5a:	02 c0       	rjmp	.+4      	; 0xa60 <HTIM0_SyncDelay+0x56>
	else if(Copy_timeUnit == uSeconds)	{/* Do Nothing */}
     a5c:	41 11       	cpse	r20, r1
     a5e:	6b c0       	rjmp	.+214    	; 0xb36 <HTIM0_SyncDelay+0x12c>
	else return TIM_NOK;
	
	/* Set prescaler according to delay time */
	if(u32_a_delay < MAX_CLK_DEV1_DELAY  )	{u8_l_prescaler = TIM_DIV_BY_1;}
     a60:	88 e8       	ldi	r24, 0x88	; 136
     a62:	c8 16       	cp	r12, r24
     a64:	83 e1       	ldi	r24, 0x13	; 19
     a66:	d8 06       	cpc	r13, r24
     a68:	e1 04       	cpc	r14, r1
     a6a:	f1 04       	cpc	r15, r1
     a6c:	c8 f0       	brcs	.+50     	; 0xaa0 <HTIM0_SyncDelay+0x96>
	else if(u32_a_delay < MAX_CLK_DEV8_DELAY  ) {u8_l_prescaler = TIM_DIV_BY_8;}
     a6e:	88 ea       	ldi	r24, 0xA8	; 168
     a70:	c8 16       	cp	r12, r24
     a72:	81 e6       	ldi	r24, 0x61	; 97
     a74:	d8 06       	cpc	r13, r24
     a76:	e1 04       	cpc	r14, r1
     a78:	f1 04       	cpc	r15, r1
     a7a:	a0 f0       	brcs	.+40     	; 0xaa4 <HTIM0_SyncDelay+0x9a>
	else if(u32_a_delay < MAX_CLK_DEV64_DELAY ) {u8_l_prescaler = TIM_DIV_BY_64;}
     a7c:	88 e4       	ldi	r24, 0x48	; 72
     a7e:	c8 16       	cp	r12, r24
     a80:	88 ee       	ldi	r24, 0xE8	; 232
     a82:	d8 06       	cpc	r13, r24
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	e8 06       	cpc	r14, r24
     a88:	f1 04       	cpc	r15, r1
     a8a:	70 f0       	brcs	.+28     	; 0xaa8 <HTIM0_SyncDelay+0x9e>
	else if(u32_a_delay < MAX_CLK_DEV256_DELAY) {u8_l_prescaler = TIM_DIV_BY_256;}
     a8c:	80 e2       	ldi	r24, 0x20	; 32
     a8e:	c8 16       	cp	r12, r24
     a90:	81 ea       	ldi	r24, 0xA1	; 161
     a92:	d8 06       	cpc	r13, r24
     a94:	87 e0       	ldi	r24, 0x07	; 7
     a96:	e8 06       	cpc	r14, r24
     a98:	f1 04       	cpc	r15, r1
     a9a:	40 f4       	brcc	.+16     	; 0xaac <HTIM0_SyncDelay+0xa2>
     a9c:	14 e0       	ldi	r17, 0x04	; 4
     a9e:	07 c0       	rjmp	.+14     	; 0xaae <HTIM0_SyncDelay+0xa4>
	else if(Copy_timeUnit == mSeconds)	{u32_a_delay *= mSEC_TO_uSEC;}
	else if(Copy_timeUnit == uSeconds)	{/* Do Nothing */}
	else return TIM_NOK;
	
	/* Set prescaler according to delay time */
	if(u32_a_delay < MAX_CLK_DEV1_DELAY  )	{u8_l_prescaler = TIM_DIV_BY_1;}
     aa0:	11 e0       	ldi	r17, 0x01	; 1
     aa2:	05 c0       	rjmp	.+10     	; 0xaae <HTIM0_SyncDelay+0xa4>
	else if(u32_a_delay < MAX_CLK_DEV8_DELAY  ) {u8_l_prescaler = TIM_DIV_BY_8;}
     aa4:	12 e0       	ldi	r17, 0x02	; 2
     aa6:	03 c0       	rjmp	.+6      	; 0xaae <HTIM0_SyncDelay+0xa4>
	else if(u32_a_delay < MAX_CLK_DEV64_DELAY ) {u8_l_prescaler = TIM_DIV_BY_64;}
     aa8:	13 e0       	ldi	r17, 0x03	; 3
     aaa:	01 c0       	rjmp	.+2      	; 0xaae <HTIM0_SyncDelay+0xa4>
	else if(u32_a_delay < MAX_CLK_DEV256_DELAY) {u8_l_prescaler = TIM_DIV_BY_256;}
	else {u8_l_prescaler = TIM_DIV_BY_1024;}
     aac:	15 e0       	ldi	r17, 0x05	; 5
	
	Local_TickTime = arr_gs_prescalers[u8_l_prescaler-1]/TIM0_PRESCALER;
     aae:	e1 2f       	mov	r30, r17
     ab0:	f0 e0       	ldi	r31, 0x00	; 0
     ab2:	31 97       	sbiw	r30, 0x01	; 1
     ab4:	ee 0f       	add	r30, r30
     ab6:	ff 1f       	adc	r31, r31
     ab8:	e8 56       	subi	r30, 0x68	; 104
     aba:	fd 4f       	sbci	r31, 0xFD	; 253
     abc:	60 81       	ld	r22, Z
     abe:	71 81       	ldd	r23, Z+1	; 0x01
     ac0:	76 95       	lsr	r23
     ac2:	67 95       	ror	r22
     ac4:	76 95       	lsr	r23
     ac6:	67 95       	ror	r22
     ac8:	76 95       	lsr	r23
     aca:	67 95       	ror	r22
     acc:	80 e0       	ldi	r24, 0x00	; 0
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <__floatunsisf>
     ad4:	4b 01       	movw	r8, r22
     ad6:	5c 01       	movw	r10, r24
	Local_TotalTicks = (Uint16_t)(u32_a_delay/Local_TickTime);
     ad8:	c7 01       	movw	r24, r14
     ada:	b6 01       	movw	r22, r12
     adc:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <__floatunsisf>
     ae0:	a5 01       	movw	r20, r10
     ae2:	94 01       	movw	r18, r8
     ae4:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__divsf3>
     ae8:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <__fixunssfsi>
     aec:	f6 2e       	mov	r15, r22
	Local_TotalOverFlows = Local_TotalTicks/TIM0_MAX_TICKS;
     aee:	07 2f       	mov	r16, r23
	
	/* Initialize timer in normal mode */
	TIM0_voidInit(NormalMode);
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <TIM0_voidInit>
	
	/* Set timer start value */
	TIM0_SetValue(TIM0_MAX_TICKS-(Local_TotalTicks%TIM0_MAX_TICKS));
     af6:	8f 2d       	mov	r24, r15
     af8:	81 95       	neg	r24
     afa:	0e 94 a4 0b 	call	0x1748	; 0x1748 <TIM0_SetValue>
	
	/* Start Timer */
	TIM0_Start(u8_l_prescaler);
     afe:	81 2f       	mov	r24, r17
     b00:	0e 94 8c 0b 	call	0x1718	; 0x1718 <TIM0_Start>

/*================================= Function Implementation =================================*/

en_HTIMErrorState_t HTIM0_SyncDelay(Uint32_t u32_a_delay, en_timeUnits_t Copy_timeUnit)
{
	Uchar8_t u8_l_prescaler, Local_TotalOverFlows, Local_OverFlowCounter=0, u8_l_OverflowFlag, u8_l_TimState;
     b04:	10 e0       	ldi	r17, 0x00	; 0
	TIM0_SetValue(TIM0_MAX_TICKS-(Local_TotalTicks%TIM0_MAX_TICKS));
	
	/* Start Timer */
	TIM0_Start(u8_l_prescaler);
	
	while(Local_OverFlowCounter <= Local_TotalOverFlows)
     b06:	11 c0       	rjmp	.+34     	; 0xb2a <HTIM0_SyncDelay+0x120>
	{
		/* Wait until the overflow flag is raised */
		do
		{
			TIM0_GetOVF(&u8_l_OverflowFlag);
     b08:	ce 01       	movw	r24, r28
     b0a:	01 96       	adiw	r24, 0x01	; 1
     b0c:	0e 94 a6 0b 	call	0x174c	; 0x174c <TIM0_GetOVF>
			TIM0_GetState(&u8_l_TimState);
     b10:	ce 01       	movw	r24, r28
     b12:	02 96       	adiw	r24, 0x02	; 2
     b14:	0e 94 b4 0b 	call	0x1768	; 0x1768 <TIM0_GetState>
		}
		while(!u8_l_OverflowFlag && u8_l_TimState);
     b18:	89 81       	ldd	r24, Y+1	; 0x01
     b1a:	81 11       	cpse	r24, r1
     b1c:	03 c0       	rjmp	.+6      	; 0xb24 <HTIM0_SyncDelay+0x11a>
     b1e:	8a 81       	ldd	r24, Y+2	; 0x02
     b20:	81 11       	cpse	r24, r1
     b22:	f2 cf       	rjmp	.-28     	; 0xb08 <HTIM0_SyncDelay+0xfe>
		
		/* Clear the overflow flag */
		TIM0_ClearOVF();
     b24:	0e 94 b0 0b 	call	0x1760	; 0x1760 <TIM0_ClearOVF>
		
		Local_OverFlowCounter++;
     b28:	1f 5f       	subi	r17, 0xFF	; 255
	TIM0_SetValue(TIM0_MAX_TICKS-(Local_TotalTicks%TIM0_MAX_TICKS));
	
	/* Start Timer */
	TIM0_Start(u8_l_prescaler);
	
	while(Local_OverFlowCounter <= Local_TotalOverFlows)
     b2a:	01 17       	cp	r16, r17
     b2c:	68 f7       	brcc	.-38     	; 0xb08 <HTIM0_SyncDelay+0xfe>
		TIM0_ClearOVF();
		
		Local_OverFlowCounter++;
	}
	
	TIM0_Stop();
     b2e:	0e 94 9a 0b 	call	0x1734	; 0x1734 <TIM0_Stop>
	
	return TIM_OK;
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	01 c0       	rjmp	.+2      	; 0xb38 <HTIM0_SyncDelay+0x12e>
	
	/* Get Value in micro seconds */
	if(Copy_timeUnit == Seconds)	{u32_a_delay *= SEC_TO_uSEC;}
	else if(Copy_timeUnit == mSeconds)	{u32_a_delay *= mSEC_TO_uSEC;}
	else if(Copy_timeUnit == uSeconds)	{/* Do Nothing */}
	else return TIM_NOK;
     b36:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	TIM0_Stop();
	
	return TIM_OK;
}
     b38:	0f 90       	pop	r0
     b3a:	0f 90       	pop	r0
     b3c:	df 91       	pop	r29
     b3e:	cf 91       	pop	r28
     b40:	1f 91       	pop	r17
     b42:	0f 91       	pop	r16
     b44:	ff 90       	pop	r15
     b46:	ef 90       	pop	r14
     b48:	df 90       	pop	r13
     b4a:	cf 90       	pop	r12
     b4c:	bf 90       	pop	r11
     b4e:	af 90       	pop	r10
     b50:	9f 90       	pop	r9
     b52:	8f 90       	pop	r8
     b54:	08 95       	ret

00000b56 <HTimer_enInit>:
 ************************************************************************************************************/
enu_HTimerError_t HTimer_enInit(void)
{
	enu_HTimerError_t errorStatus = TIMER_OK;

	(void)enuTimer2_init (OVF_MODE);
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	0e 94 02 0c 	call	0x1804	; 0x1804 <enuTimer2_init>
	(void)u8Timer2_setPrescallar(TIMER_PRE_256);
     b5c:	84 e0       	ldi	r24, 0x04	; 4
     b5e:	0e 94 30 0c 	call	0x1860	; 0x1860 <u8Timer2_setPrescallar>
	(void)vidTimer2_OvfIrqEnable();
     b62:	0e 94 44 0c 	call	0x1888	; 0x1888 <vidTimer2_OvfIrqEnable>

	return errorStatus;

}
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	08 95       	ret

00000b6a <HTimer_vidDelayMs>:
/*************************************************************************************************************/
void HTimer_vidDelayMs( Uint32_t u32_delay )
{
	(void)u8Timer2_setTime_ms(u32_delay);
     b6a:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <u8Timer2_setTime_ms>
	(void)vidTimer2_start();
     b6e:	0e 94 4c 0c 	call	0x1898	; 0x1898 <vidTimer2_start>
     b72:	08 95       	ret

00000b74 <HTimer_enStop>:

enu_HTimerError_t HTimer_enStop(void)
{
	enu_HTimerError_t errorStatus;

	errorStatus = vidTimer2_stop();
     b74:	0e 94 56 0c 	call	0x18ac	; 0x18ac <vidTimer2_stop>

	return errorStatus;

}
     b78:	08 95       	ret

00000b7a <HTimer_enCBF>:
/*************************************************************************************************************/
enu_HTimerError_t HTimer_enCBF(ptr_funcc pFunc)
{
	enu_HTimerError_t errorStatus = TIMER_OK;

	if(pFunc != NULL)
     b7a:	00 97       	sbiw	r24, 0x00	; 0
     b7c:	21 f0       	breq	.+8      	; 0xb86 <HTimer_enCBF+0xc>
	{
		vidTimer2_setcbf_OVF(pFunc);
     b7e:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <vidTimer2_setcbf_OVF>

}
/*************************************************************************************************************/
enu_HTimerError_t HTimer_enCBF(ptr_funcc pFunc)
{
	enu_HTimerError_t errorStatus = TIMER_OK;
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	08 95       	ret
	if(pFunc != NULL)
	{
		vidTimer2_setcbf_OVF(pFunc);

	}else{
		errorStatus = TIMER_NOK;
     b86:	81 e0       	ldi	r24, 0x01	; 1
	}

	return errorStatus;

}
     b88:	08 95       	ret

00000b8a <H_EXTINT_create>:
ARGS        : takes the EXINT_NUMBER( INT0,INT1 OR INT2) and sense control and and pointer to the function we want to execute when interrupt occurs.
return      : return EXTINT_OK if the EXINT_NUMBER initializes correctly, EXTINT_NOT_OK otherwise
*/

EN_EXTINT_ERROR H_EXTINT_create(EN_EXINT_NUMBER INTx ,EN_Sence_Control INTxSense,void(*ptrfunc)(void))
{
     b8a:	0f 93       	push	r16
     b8c:	1f 93       	push	r17
     b8e:	cf 93       	push	r28
     b90:	c8 2f       	mov	r28, r24
     b92:	8a 01       	movw	r16, r20
	if(!EXTINT_init(INTx,INTxSense) && !EXTINT_CallBack(INTx,ptrfunc)) return EXTINT_OK;
     b94:	0e 94 cf 09 	call	0x139e	; 0x139e <EXTINT_init>
     b98:	81 11       	cpse	r24, r1
     b9a:	07 c0       	rjmp	.+14     	; 0xbaa <H_EXTINT_create+0x20>
     b9c:	b8 01       	movw	r22, r16
     b9e:	8c 2f       	mov	r24, r28
     ba0:	0e 94 56 0a 	call	0x14ac	; 0x14ac <EXTINT_CallBack>
     ba4:	81 11       	cpse	r24, r1
     ba6:	03 c0       	rjmp	.+6      	; 0xbae <H_EXTINT_create+0x24>
     ba8:	03 c0       	rjmp	.+6      	; 0xbb0 <H_EXTINT_create+0x26>
	return EXTINT_NOT_OK;
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	01 c0       	rjmp	.+2      	; 0xbb0 <H_EXTINT_create+0x26>
     bae:	81 e0       	ldi	r24, 0x01	; 1
	
     bb0:	cf 91       	pop	r28
     bb2:	1f 91       	pop	r17
     bb4:	0f 91       	pop	r16
     bb6:	08 95       	ret

00000bb8 <KEYPAD_init>:
 * 											Function Implementation
 ************************************************************************************************************/
void KEYPAD_init()
{
	// INITIALIZE ROWS AS OUTPUTS
	DIO_s8SETPinDir(R1,OUTPUT);
     bb8:	61 e0       	ldi	r22, 0x01	; 1
     bba:	82 e1       	ldi	r24, 0x12	; 18
     bbc:	0e 94 25 09 	call	0x124a	; 0x124a <DIO_s8SETPinDir>
	DIO_s8SETPinDir(R2,OUTPUT);
     bc0:	61 e0       	ldi	r22, 0x01	; 1
     bc2:	83 e1       	ldi	r24, 0x13	; 19
     bc4:	0e 94 25 09 	call	0x124a	; 0x124a <DIO_s8SETPinDir>
	DIO_s8SETPinDir(R3,OUTPUT);
     bc8:	61 e0       	ldi	r22, 0x01	; 1
     bca:	84 e1       	ldi	r24, 0x14	; 20
     bcc:	0e 94 25 09 	call	0x124a	; 0x124a <DIO_s8SETPinDir>
	// INITIALIZE COLUMNS AS INPUTS
	DIO_s8SETPinDir(C1,INPUT);
     bd0:	60 e0       	ldi	r22, 0x00	; 0
     bd2:	85 e1       	ldi	r24, 0x15	; 21
     bd4:	0e 94 25 09 	call	0x124a	; 0x124a <DIO_s8SETPinDir>
	DIO_s8SETPinDir(C2,INPUT);
     bd8:	60 e0       	ldi	r22, 0x00	; 0
     bda:	86 e1       	ldi	r24, 0x16	; 22
     bdc:	0e 94 25 09 	call	0x124a	; 0x124a <DIO_s8SETPinDir>
	DIO_s8SETPinDir(C3,INPUT);
     be0:	60 e0       	ldi	r22, 0x00	; 0
     be2:	87 e1       	ldi	r24, 0x17	; 23
     be4:	0e 94 25 09 	call	0x124a	; 0x124a <DIO_s8SETPinDir>
     be8:	08 95       	ret

00000bea <checkR1>:
	
	
}
EN_KEYPAD_BTNS checkR1()
{
     bea:	cf 93       	push	r28
     bec:	df 93       	push	r29
     bee:	1f 92       	push	r1
     bf0:	cd b7       	in	r28, 0x3d	; 61
     bf2:	de b7       	in	r29, 0x3e	; 62
	DIO_s8SETPinVal(C1,HIGH);
     bf4:	61 e0       	ldi	r22, 0x01	; 1
     bf6:	85 e1       	ldi	r24, 0x15	; 21
     bf8:	0e 94 65 09 	call	0x12ca	; 0x12ca <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C2,HIGH);
     bfc:	61 e0       	ldi	r22, 0x01	; 1
     bfe:	86 e1       	ldi	r24, 0x16	; 22
     c00:	0e 94 65 09 	call	0x12ca	; 0x12ca <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C3,HIGH);
     c04:	61 e0       	ldi	r22, 0x01	; 1
     c06:	87 e1       	ldi	r24, 0x17	; 23
     c08:	0e 94 65 09 	call	0x12ca	; 0x12ca <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R2,HIGH);
     c0c:	61 e0       	ldi	r22, 0x01	; 1
     c0e:	83 e1       	ldi	r24, 0x13	; 19
     c10:	0e 94 65 09 	call	0x12ca	; 0x12ca <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R3,HIGH);
     c14:	61 e0       	ldi	r22, 0x01	; 1
     c16:	84 e1       	ldi	r24, 0x14	; 20
     c18:	0e 94 65 09 	call	0x12ca	; 0x12ca <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R1,LOW);
     c1c:	60 e0       	ldi	r22, 0x00	; 0
     c1e:	82 e1       	ldi	r24, 0x12	; 18
     c20:	0e 94 65 09 	call	0x12ca	; 0x12ca <DIO_s8SETPinVal>
	
	Uchar8_t val = 1;
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C1,&val);
     c28:	be 01       	movw	r22, r28
     c2a:	6f 5f       	subi	r22, 0xFF	; 255
     c2c:	7f 4f       	sbci	r23, 0xFF	; 255
     c2e:	85 e1       	ldi	r24, 0x15	; 21
     c30:	0e 94 a5 09 	call	0x134a	; 0x134a <DIO_s8GETPinVal>
	if(val == 0)
     c34:	89 81       	ldd	r24, Y+1	; 0x01
     c36:	88 23       	and	r24, r24
     c38:	39 f0       	breq	.+14     	; 0xc48 <checkR1+0x5e>
     c3a:	0b c0       	rjmp	.+22     	; 0xc52 <checkR1+0x68>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C1,&val);
     c3c:	be 01       	movw	r22, r28
     c3e:	6f 5f       	subi	r22, 0xFF	; 255
     c40:	7f 4f       	sbci	r23, 0xFF	; 255
     c42:	85 e1       	ldi	r24, 0x15	; 21
     c44:	0e 94 a5 09 	call	0x134a	; 0x134a <DIO_s8GETPinVal>
	
	Uchar8_t val = 1;
	DIO_s8GETPinVal(C1,&val);
	if(val == 0)
	{
		while (val == 0)
     c48:	89 81       	ldd	r24, Y+1	; 0x01
     c4a:	88 23       	and	r24, r24
     c4c:	b9 f3       	breq	.-18     	; 0xc3c <checkR1+0x52>
		{
			DIO_s8GETPinVal(C1,&val);
		}
		return KEY_1;
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	2e c0       	rjmp	.+92     	; 0xcae <checkR1+0xc4>
	}
	val = 1;
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C2,&val);
     c56:	be 01       	movw	r22, r28
     c58:	6f 5f       	subi	r22, 0xFF	; 255
     c5a:	7f 4f       	sbci	r23, 0xFF	; 255
     c5c:	86 e1       	ldi	r24, 0x16	; 22
     c5e:	0e 94 a5 09 	call	0x134a	; 0x134a <DIO_s8GETPinVal>
	if(val == 0)
     c62:	89 81       	ldd	r24, Y+1	; 0x01
     c64:	88 23       	and	r24, r24
     c66:	39 f0       	breq	.+14     	; 0xc76 <checkR1+0x8c>
     c68:	0b c0       	rjmp	.+22     	; 0xc80 <checkR1+0x96>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C2,&val);
     c6a:	be 01       	movw	r22, r28
     c6c:	6f 5f       	subi	r22, 0xFF	; 255
     c6e:	7f 4f       	sbci	r23, 0xFF	; 255
     c70:	86 e1       	ldi	r24, 0x16	; 22
     c72:	0e 94 a5 09 	call	0x134a	; 0x134a <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C2,&val);
	if(val == 0)
	{
		while (val == 0)
     c76:	89 81       	ldd	r24, Y+1	; 0x01
     c78:	88 23       	and	r24, r24
     c7a:	b9 f3       	breq	.-18     	; 0xc6a <checkR1+0x80>
		{
			DIO_s8GETPinVal(C2,&val);
		}
		return KEY_2;
     c7c:	82 e0       	ldi	r24, 0x02	; 2
     c7e:	17 c0       	rjmp	.+46     	; 0xcae <checkR1+0xc4>
	}
	val = 1;
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C3,&val);
     c84:	be 01       	movw	r22, r28
     c86:	6f 5f       	subi	r22, 0xFF	; 255
     c88:	7f 4f       	sbci	r23, 0xFF	; 255
     c8a:	87 e1       	ldi	r24, 0x17	; 23
     c8c:	0e 94 a5 09 	call	0x134a	; 0x134a <DIO_s8GETPinVal>
	if(val == 0)
     c90:	89 81       	ldd	r24, Y+1	; 0x01
     c92:	88 23       	and	r24, r24
     c94:	41 f0       	breq	.+16     	; 0xca6 <checkR1+0xbc>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_3;
	}
	return KEY_NOTHING;
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	0a c0       	rjmp	.+20     	; 0xcae <checkR1+0xc4>
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C3,&val);
     c9a:	be 01       	movw	r22, r28
     c9c:	6f 5f       	subi	r22, 0xFF	; 255
     c9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ca0:	87 e1       	ldi	r24, 0x17	; 23
     ca2:	0e 94 a5 09 	call	0x134a	; 0x134a <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
     ca6:	89 81       	ldd	r24, Y+1	; 0x01
     ca8:	88 23       	and	r24, r24
     caa:	b9 f3       	breq	.-18     	; 0xc9a <checkR1+0xb0>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_3;
     cac:	83 e0       	ldi	r24, 0x03	; 3
	}
	return KEY_NOTHING;
	
}
     cae:	0f 90       	pop	r0
     cb0:	df 91       	pop	r29
     cb2:	cf 91       	pop	r28
     cb4:	08 95       	ret

00000cb6 <checkR2>:
EN_KEYPAD_BTNS checkR2()
{
     cb6:	cf 93       	push	r28
     cb8:	df 93       	push	r29
     cba:	1f 92       	push	r1
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
	
	DIO_s8SETPinVal(C1,HIGH);
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	85 e1       	ldi	r24, 0x15	; 21
     cc4:	0e 94 65 09 	call	0x12ca	; 0x12ca <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C2,HIGH);
     cc8:	61 e0       	ldi	r22, 0x01	; 1
     cca:	86 e1       	ldi	r24, 0x16	; 22
     ccc:	0e 94 65 09 	call	0x12ca	; 0x12ca <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C3,HIGH);
     cd0:	61 e0       	ldi	r22, 0x01	; 1
     cd2:	87 e1       	ldi	r24, 0x17	; 23
     cd4:	0e 94 65 09 	call	0x12ca	; 0x12ca <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R1,HIGH);
     cd8:	61 e0       	ldi	r22, 0x01	; 1
     cda:	82 e1       	ldi	r24, 0x12	; 18
     cdc:	0e 94 65 09 	call	0x12ca	; 0x12ca <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R3,HIGH);
     ce0:	61 e0       	ldi	r22, 0x01	; 1
     ce2:	84 e1       	ldi	r24, 0x14	; 20
     ce4:	0e 94 65 09 	call	0x12ca	; 0x12ca <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R2,LOW);
     ce8:	60 e0       	ldi	r22, 0x00	; 0
     cea:	83 e1       	ldi	r24, 0x13	; 19
     cec:	0e 94 65 09 	call	0x12ca	; 0x12ca <DIO_s8SETPinVal>
	
	Uchar8_t val = 1;
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C1,&val);
     cf4:	be 01       	movw	r22, r28
     cf6:	6f 5f       	subi	r22, 0xFF	; 255
     cf8:	7f 4f       	sbci	r23, 0xFF	; 255
     cfa:	85 e1       	ldi	r24, 0x15	; 21
     cfc:	0e 94 a5 09 	call	0x134a	; 0x134a <DIO_s8GETPinVal>
	if(val == 0)
     d00:	89 81       	ldd	r24, Y+1	; 0x01
     d02:	88 23       	and	r24, r24
     d04:	39 f0       	breq	.+14     	; 0xd14 <checkR2+0x5e>
     d06:	0b c0       	rjmp	.+22     	; 0xd1e <checkR2+0x68>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C1,&val);
     d08:	be 01       	movw	r22, r28
     d0a:	6f 5f       	subi	r22, 0xFF	; 255
     d0c:	7f 4f       	sbci	r23, 0xFF	; 255
     d0e:	85 e1       	ldi	r24, 0x15	; 21
     d10:	0e 94 a5 09 	call	0x134a	; 0x134a <DIO_s8GETPinVal>
	
	Uchar8_t val = 1;
	DIO_s8GETPinVal(C1,&val);
	if(val == 0)
	{
		while (val == 0)
     d14:	89 81       	ldd	r24, Y+1	; 0x01
     d16:	88 23       	and	r24, r24
     d18:	b9 f3       	breq	.-18     	; 0xd08 <checkR2+0x52>
		{
			DIO_s8GETPinVal(C1,&val);
		}
		return KEY_4;
     d1a:	84 e0       	ldi	r24, 0x04	; 4
     d1c:	2e c0       	rjmp	.+92     	; 0xd7a <checkR2+0xc4>
	}
	val = 1;
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C2,&val);
     d22:	be 01       	movw	r22, r28
     d24:	6f 5f       	subi	r22, 0xFF	; 255
     d26:	7f 4f       	sbci	r23, 0xFF	; 255
     d28:	86 e1       	ldi	r24, 0x16	; 22
     d2a:	0e 94 a5 09 	call	0x134a	; 0x134a <DIO_s8GETPinVal>
	if(val == 0)
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	88 23       	and	r24, r24
     d32:	39 f0       	breq	.+14     	; 0xd42 <checkR2+0x8c>
     d34:	0b c0       	rjmp	.+22     	; 0xd4c <checkR2+0x96>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C2,&val);
     d36:	be 01       	movw	r22, r28
     d38:	6f 5f       	subi	r22, 0xFF	; 255
     d3a:	7f 4f       	sbci	r23, 0xFF	; 255
     d3c:	86 e1       	ldi	r24, 0x16	; 22
     d3e:	0e 94 a5 09 	call	0x134a	; 0x134a <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C2,&val);
	if(val == 0)
	{
		while (val == 0)
     d42:	89 81       	ldd	r24, Y+1	; 0x01
     d44:	88 23       	and	r24, r24
     d46:	b9 f3       	breq	.-18     	; 0xd36 <checkR2+0x80>
		{
			DIO_s8GETPinVal(C2,&val);
		}
		return KEY_5;
     d48:	85 e0       	ldi	r24, 0x05	; 5
     d4a:	17 c0       	rjmp	.+46     	; 0xd7a <checkR2+0xc4>
	}
	val = 1;
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C3,&val);
     d50:	be 01       	movw	r22, r28
     d52:	6f 5f       	subi	r22, 0xFF	; 255
     d54:	7f 4f       	sbci	r23, 0xFF	; 255
     d56:	87 e1       	ldi	r24, 0x17	; 23
     d58:	0e 94 a5 09 	call	0x134a	; 0x134a <DIO_s8GETPinVal>
	if(val == 0)
     d5c:	89 81       	ldd	r24, Y+1	; 0x01
     d5e:	88 23       	and	r24, r24
     d60:	41 f0       	breq	.+16     	; 0xd72 <checkR2+0xbc>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_6;
	}
	return KEY_NOTHING;
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	0a c0       	rjmp	.+20     	; 0xd7a <checkR2+0xc4>
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C3,&val);
     d66:	be 01       	movw	r22, r28
     d68:	6f 5f       	subi	r22, 0xFF	; 255
     d6a:	7f 4f       	sbci	r23, 0xFF	; 255
     d6c:	87 e1       	ldi	r24, 0x17	; 23
     d6e:	0e 94 a5 09 	call	0x134a	; 0x134a <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
     d72:	89 81       	ldd	r24, Y+1	; 0x01
     d74:	88 23       	and	r24, r24
     d76:	b9 f3       	breq	.-18     	; 0xd66 <checkR2+0xb0>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_6;
     d78:	86 e0       	ldi	r24, 0x06	; 6
	}
	return KEY_NOTHING;
	
}
     d7a:	0f 90       	pop	r0
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	08 95       	ret

00000d82 <checkR3>:
EN_KEYPAD_BTNS checkR3()
{
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	1f 92       	push	r1
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
	
	DIO_s8SETPinVal(C1,HIGH);
     d8c:	61 e0       	ldi	r22, 0x01	; 1
     d8e:	85 e1       	ldi	r24, 0x15	; 21
     d90:	0e 94 65 09 	call	0x12ca	; 0x12ca <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C2,HIGH);
     d94:	61 e0       	ldi	r22, 0x01	; 1
     d96:	86 e1       	ldi	r24, 0x16	; 22
     d98:	0e 94 65 09 	call	0x12ca	; 0x12ca <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C3,HIGH);
     d9c:	61 e0       	ldi	r22, 0x01	; 1
     d9e:	87 e1       	ldi	r24, 0x17	; 23
     da0:	0e 94 65 09 	call	0x12ca	; 0x12ca <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R1,HIGH);
     da4:	61 e0       	ldi	r22, 0x01	; 1
     da6:	82 e1       	ldi	r24, 0x12	; 18
     da8:	0e 94 65 09 	call	0x12ca	; 0x12ca <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R2,HIGH);
     dac:	61 e0       	ldi	r22, 0x01	; 1
     dae:	83 e1       	ldi	r24, 0x13	; 19
     db0:	0e 94 65 09 	call	0x12ca	; 0x12ca <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R3,LOW);
     db4:	60 e0       	ldi	r22, 0x00	; 0
     db6:	84 e1       	ldi	r24, 0x14	; 20
     db8:	0e 94 65 09 	call	0x12ca	; 0x12ca <DIO_s8SETPinVal>
	
	Uchar8_t val = 1;
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C1,&val);
     dc0:	be 01       	movw	r22, r28
     dc2:	6f 5f       	subi	r22, 0xFF	; 255
     dc4:	7f 4f       	sbci	r23, 0xFF	; 255
     dc6:	85 e1       	ldi	r24, 0x15	; 21
     dc8:	0e 94 a5 09 	call	0x134a	; 0x134a <DIO_s8GETPinVal>
	if(val == 0)
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	88 23       	and	r24, r24
     dd0:	39 f0       	breq	.+14     	; 0xde0 <checkR3+0x5e>
     dd2:	0b c0       	rjmp	.+22     	; 0xdea <checkR3+0x68>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C1,&val);
     dd4:	be 01       	movw	r22, r28
     dd6:	6f 5f       	subi	r22, 0xFF	; 255
     dd8:	7f 4f       	sbci	r23, 0xFF	; 255
     dda:	85 e1       	ldi	r24, 0x15	; 21
     ddc:	0e 94 a5 09 	call	0x134a	; 0x134a <DIO_s8GETPinVal>
	
	Uchar8_t val = 1;
	DIO_s8GETPinVal(C1,&val);
	if(val == 0)
	{
		while (val == 0)
     de0:	89 81       	ldd	r24, Y+1	; 0x01
     de2:	88 23       	and	r24, r24
     de4:	b9 f3       	breq	.-18     	; 0xdd4 <checkR3+0x52>
		{
			DIO_s8GETPinVal(C1,&val);
		}
		return KEY_7;
     de6:	87 e0       	ldi	r24, 0x07	; 7
     de8:	2e c0       	rjmp	.+92     	; 0xe46 <checkR3+0xc4>
	}
	val = 1;
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C2,&val);
     dee:	be 01       	movw	r22, r28
     df0:	6f 5f       	subi	r22, 0xFF	; 255
     df2:	7f 4f       	sbci	r23, 0xFF	; 255
     df4:	86 e1       	ldi	r24, 0x16	; 22
     df6:	0e 94 a5 09 	call	0x134a	; 0x134a <DIO_s8GETPinVal>
	if(val == 0)
     dfa:	89 81       	ldd	r24, Y+1	; 0x01
     dfc:	88 23       	and	r24, r24
     dfe:	39 f0       	breq	.+14     	; 0xe0e <checkR3+0x8c>
     e00:	0b c0       	rjmp	.+22     	; 0xe18 <checkR3+0x96>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C2,&val);
     e02:	be 01       	movw	r22, r28
     e04:	6f 5f       	subi	r22, 0xFF	; 255
     e06:	7f 4f       	sbci	r23, 0xFF	; 255
     e08:	86 e1       	ldi	r24, 0x16	; 22
     e0a:	0e 94 a5 09 	call	0x134a	; 0x134a <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C2,&val);
	if(val == 0)
	{
		while (val == 0)
     e0e:	89 81       	ldd	r24, Y+1	; 0x01
     e10:	88 23       	and	r24, r24
     e12:	b9 f3       	breq	.-18     	; 0xe02 <checkR3+0x80>
		{
			DIO_s8GETPinVal(C2,&val);
		}
		return KEY_8;
     e14:	88 e0       	ldi	r24, 0x08	; 8
     e16:	17 c0       	rjmp	.+46     	; 0xe46 <checkR3+0xc4>
	}
	val = 1;
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C3,&val);
     e1c:	be 01       	movw	r22, r28
     e1e:	6f 5f       	subi	r22, 0xFF	; 255
     e20:	7f 4f       	sbci	r23, 0xFF	; 255
     e22:	87 e1       	ldi	r24, 0x17	; 23
     e24:	0e 94 a5 09 	call	0x134a	; 0x134a <DIO_s8GETPinVal>
	if(val == 0)
     e28:	89 81       	ldd	r24, Y+1	; 0x01
     e2a:	88 23       	and	r24, r24
     e2c:	41 f0       	breq	.+16     	; 0xe3e <checkR3+0xbc>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_9;
	}
	return KEY_NOTHING;
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	0a c0       	rjmp	.+20     	; 0xe46 <checkR3+0xc4>
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C3,&val);
     e32:	be 01       	movw	r22, r28
     e34:	6f 5f       	subi	r22, 0xFF	; 255
     e36:	7f 4f       	sbci	r23, 0xFF	; 255
     e38:	87 e1       	ldi	r24, 0x17	; 23
     e3a:	0e 94 a5 09 	call	0x134a	; 0x134a <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
     e3e:	89 81       	ldd	r24, Y+1	; 0x01
     e40:	88 23       	and	r24, r24
     e42:	b9 f3       	breq	.-18     	; 0xe32 <checkR3+0xb0>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_9;
     e44:	89 e0       	ldi	r24, 0x09	; 9
	}
	return KEY_NOTHING;
}
     e46:	0f 90       	pop	r0
     e48:	df 91       	pop	r29
     e4a:	cf 91       	pop	r28
     e4c:	08 95       	ret

00000e4e <KEYPAD_GetButton>:
EN_KEYPAD_BTNS KEYPAD_GetButton()
{
	EN_KEYPAD_BTNS PRESSED = KEY_NOTHING;
	while(PRESSED == KEY_NOTHING)
	{
		PRESSED = checkR1();
     e4e:	0e 94 f5 05 	call	0xbea	; 0xbea <checkR1>
		if(PRESSED != KEY_NOTHING) return PRESSED;
     e52:	81 11       	cpse	r24, r1
     e54:	06 c0       	rjmp	.+12     	; 0xe62 <KEYPAD_GetButton+0x14>
		PRESSED = checkR2();
     e56:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <checkR2>
		if(PRESSED != KEY_NOTHING) return PRESSED;
     e5a:	81 11       	cpse	r24, r1
     e5c:	02 c0       	rjmp	.+4      	; 0xe62 <KEYPAD_GetButton+0x14>
		PRESSED = checkR3();
     e5e:	0e 94 c1 06 	call	0xd82	; 0xd82 <checkR3>
		if(PRESSED != KEY_NOTHING) return PRESSED;
		return KEY_NOTHING;
	}
	
	return KEY_NOTHING;
}
     e62:	08 95       	ret

00000e64 <HLCD_vidWritecmd>:
		for (Uchar8_t i = 0; i < 8 ; i++)
		{
			HLCD_vidWriteChar(pu8custom[i]);
		}
	}
}
     e64:	1f 93       	push	r17
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	d8 2f       	mov	r29, r24
     e6c:	60 e0       	ldi	r22, 0x00	; 0
     e6e:	82 e0       	ldi	r24, 0x02	; 2
     e70:	0e 94 65 09 	call	0x12ca	; 0x12ca <DIO_s8SETPinVal>
     e74:	60 e0       	ldi	r22, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	0e 94 65 09 	call	0x12ca	; 0x12ca <DIO_s8SETPinVal>
     e7c:	1d 2f       	mov	r17, r29
     e7e:	12 95       	swap	r17
     e80:	1f 70       	andi	r17, 0x0F	; 15
     e82:	c0 e0       	ldi	r28, 0x00	; 0
     e84:	11 c0       	rjmp	.+34     	; 0xea8 <HLCD_vidWritecmd+0x44>
     e86:	ec 2f       	mov	r30, r28
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	61 2f       	mov	r22, r17
     e8c:	70 e0       	ldi	r23, 0x00	; 0
     e8e:	0c 2e       	mov	r0, r28
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <HLCD_vidWritecmd+0x32>
     e92:	75 95       	asr	r23
     e94:	67 95       	ror	r22
     e96:	0a 94       	dec	r0
     e98:	e2 f7       	brpl	.-8      	; 0xe92 <HLCD_vidWritecmd+0x2e>
     e9a:	61 70       	andi	r22, 0x01	; 1
     e9c:	ea 58       	subi	r30, 0x8A	; 138
     e9e:	fe 4f       	sbci	r31, 0xFE	; 254
     ea0:	80 81       	ld	r24, Z
     ea2:	0e 94 65 09 	call	0x12ca	; 0x12ca <DIO_s8SETPinVal>
     ea6:	cf 5f       	subi	r28, 0xFF	; 255
     ea8:	c4 30       	cpi	r28, 0x04	; 4
     eaa:	68 f3       	brcs	.-38     	; 0xe86 <HLCD_vidWritecmd+0x22>
     eac:	61 e0       	ldi	r22, 0x01	; 1
     eae:	83 e0       	ldi	r24, 0x03	; 3
     eb0:	0e 94 65 09 	call	0x12ca	; 0x12ca <DIO_s8SETPinVal>
     eb4:	89 ef       	ldi	r24, 0xF9	; 249
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	01 97       	sbiw	r24, 0x01	; 1
     eba:	f1 f7       	brne	.-4      	; 0xeb8 <HLCD_vidWritecmd+0x54>
     ebc:	00 c0       	rjmp	.+0      	; 0xebe <HLCD_vidWritecmd+0x5a>
     ebe:	00 00       	nop
     ec0:	60 e0       	ldi	r22, 0x00	; 0
     ec2:	83 e0       	ldi	r24, 0x03	; 3
     ec4:	0e 94 65 09 	call	0x12ca	; 0x12ca <DIO_s8SETPinVal>
     ec8:	92 e4       	ldi	r25, 0x42	; 66
     eca:	9a 95       	dec	r25
     ecc:	f1 f7       	brne	.-4      	; 0xeca <HLCD_vidWritecmd+0x66>
     ece:	00 c0       	rjmp	.+0      	; 0xed0 <HLCD_vidWritecmd+0x6c>
     ed0:	df 70       	andi	r29, 0x0F	; 15
     ed2:	c0 e0       	ldi	r28, 0x00	; 0
     ed4:	11 c0       	rjmp	.+34     	; 0xef8 <HLCD_vidWritecmd+0x94>
     ed6:	ec 2f       	mov	r30, r28
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	6d 2f       	mov	r22, r29
     edc:	70 e0       	ldi	r23, 0x00	; 0
     ede:	0c 2e       	mov	r0, r28
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <HLCD_vidWritecmd+0x82>
     ee2:	75 95       	asr	r23
     ee4:	67 95       	ror	r22
     ee6:	0a 94       	dec	r0
     ee8:	e2 f7       	brpl	.-8      	; 0xee2 <HLCD_vidWritecmd+0x7e>
     eea:	61 70       	andi	r22, 0x01	; 1
     eec:	ea 58       	subi	r30, 0x8A	; 138
     eee:	fe 4f       	sbci	r31, 0xFE	; 254
     ef0:	80 81       	ld	r24, Z
     ef2:	0e 94 65 09 	call	0x12ca	; 0x12ca <DIO_s8SETPinVal>
     ef6:	cf 5f       	subi	r28, 0xFF	; 255
     ef8:	c4 30       	cpi	r28, 0x04	; 4
     efa:	68 f3       	brcs	.-38     	; 0xed6 <HLCD_vidWritecmd+0x72>
     efc:	61 e0       	ldi	r22, 0x01	; 1
     efe:	83 e0       	ldi	r24, 0x03	; 3
     f00:	0e 94 65 09 	call	0x12ca	; 0x12ca <DIO_s8SETPinVal>
     f04:	89 ef       	ldi	r24, 0xF9	; 249
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	01 97       	sbiw	r24, 0x01	; 1
     f0a:	f1 f7       	brne	.-4      	; 0xf08 <HLCD_vidWritecmd+0xa4>
     f0c:	00 c0       	rjmp	.+0      	; 0xf0e <HLCD_vidWritecmd+0xaa>
     f0e:	00 00       	nop
     f10:	60 e0       	ldi	r22, 0x00	; 0
     f12:	83 e0       	ldi	r24, 0x03	; 3
     f14:	0e 94 65 09 	call	0x12ca	; 0x12ca <DIO_s8SETPinVal>
     f18:	83 ef       	ldi	r24, 0xF3	; 243
     f1a:	91 e0       	ldi	r25, 0x01	; 1
     f1c:	01 97       	sbiw	r24, 0x01	; 1
     f1e:	f1 f7       	brne	.-4      	; 0xf1c <HLCD_vidWritecmd+0xb8>
     f20:	00 c0       	rjmp	.+0      	; 0xf22 <HLCD_vidWritecmd+0xbe>
     f22:	00 00       	nop
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	1f 91       	pop	r17
     f2a:	08 95       	ret

00000f2c <HLCD_vidInit>:
     f2c:	cf 93       	push	r28
     f2e:	c0 e0       	ldi	r28, 0x00	; 0
     f30:	09 c0       	rjmp	.+18     	; 0xf44 <HLCD_vidInit+0x18>
     f32:	ec 2f       	mov	r30, r28
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	ea 58       	subi	r30, 0x8A	; 138
     f38:	fe 4f       	sbci	r31, 0xFE	; 254
     f3a:	61 e0       	ldi	r22, 0x01	; 1
     f3c:	80 81       	ld	r24, Z
     f3e:	0e 94 25 09 	call	0x124a	; 0x124a <DIO_s8SETPinDir>
     f42:	cf 5f       	subi	r28, 0xFF	; 255
     f44:	c4 30       	cpi	r28, 0x04	; 4
     f46:	a8 f3       	brcs	.-22     	; 0xf32 <HLCD_vidInit+0x6>
     f48:	61 e0       	ldi	r22, 0x01	; 1
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	0e 94 25 09 	call	0x124a	; 0x124a <DIO_s8SETPinDir>
     f50:	61 e0       	ldi	r22, 0x01	; 1
     f52:	82 e0       	ldi	r24, 0x02	; 2
     f54:	0e 94 25 09 	call	0x124a	; 0x124a <DIO_s8SETPinDir>
     f58:	61 e0       	ldi	r22, 0x01	; 1
     f5a:	83 e0       	ldi	r24, 0x03	; 3
     f5c:	0e 94 25 09 	call	0x124a	; 0x124a <DIO_s8SETPinDir>
     f60:	8f e0       	ldi	r24, 0x0F	; 15
     f62:	97 e2       	ldi	r25, 0x27	; 39
     f64:	01 97       	sbiw	r24, 0x01	; 1
     f66:	f1 f7       	brne	.-4      	; 0xf64 <HLCD_vidInit+0x38>
     f68:	00 c0       	rjmp	.+0      	; 0xf6a <HLCD_vidInit+0x3e>
     f6a:	00 00       	nop
     f6c:	82 e0       	ldi	r24, 0x02	; 2
     f6e:	0e 94 32 07 	call	0xe64	; 0xe64 <HLCD_vidWritecmd>
     f72:	89 ef       	ldi	r24, 0xF9	; 249
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	01 97       	sbiw	r24, 0x01	; 1
     f78:	f1 f7       	brne	.-4      	; 0xf76 <HLCD_vidInit+0x4a>
     f7a:	00 c0       	rjmp	.+0      	; 0xf7c <HLCD_vidInit+0x50>
     f7c:	00 00       	nop
     f7e:	88 e2       	ldi	r24, 0x28	; 40
     f80:	0e 94 32 07 	call	0xe64	; 0xe64 <HLCD_vidWritecmd>
     f84:	89 ef       	ldi	r24, 0xF9	; 249
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	01 97       	sbiw	r24, 0x01	; 1
     f8a:	f1 f7       	brne	.-4      	; 0xf88 <HLCD_vidInit+0x5c>
     f8c:	00 c0       	rjmp	.+0      	; 0xf8e <HLCD_vidInit+0x62>
     f8e:	00 00       	nop
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	0e 94 32 07 	call	0xe64	; 0xe64 <HLCD_vidWritecmd>
     f96:	87 ee       	ldi	r24, 0xE7	; 231
     f98:	93 e0       	ldi	r25, 0x03	; 3
     f9a:	01 97       	sbiw	r24, 0x01	; 1
     f9c:	f1 f7       	brne	.-4      	; 0xf9a <HLCD_vidInit+0x6e>
     f9e:	00 c0       	rjmp	.+0      	; 0xfa0 <HLCD_vidInit+0x74>
     fa0:	00 00       	nop
     fa2:	86 e0       	ldi	r24, 0x06	; 6
     fa4:	0e 94 32 07 	call	0xe64	; 0xe64 <HLCD_vidWritecmd>
     fa8:	89 ef       	ldi	r24, 0xF9	; 249
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	01 97       	sbiw	r24, 0x01	; 1
     fae:	f1 f7       	brne	.-4      	; 0xfac <HLCD_vidInit+0x80>
     fb0:	00 c0       	rjmp	.+0      	; 0xfb2 <HLCD_vidInit+0x86>
     fb2:	00 00       	nop
     fb4:	8e e0       	ldi	r24, 0x0E	; 14
     fb6:	0e 94 32 07 	call	0xe64	; 0xe64 <HLCD_vidWritecmd>
     fba:	89 ef       	ldi	r24, 0xF9	; 249
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	01 97       	sbiw	r24, 0x01	; 1
     fc0:	f1 f7       	brne	.-4      	; 0xfbe <HLCD_vidInit+0x92>
     fc2:	00 c0       	rjmp	.+0      	; 0xfc4 <HLCD_vidInit+0x98>
     fc4:	00 00       	nop
     fc6:	cf 91       	pop	r28
     fc8:	08 95       	ret

00000fca <HLCD_vidWriteChar>:
     fca:	1f 93       	push	r17
     fcc:	cf 93       	push	r28
     fce:	df 93       	push	r29
     fd0:	d8 2f       	mov	r29, r24
     fd2:	60 e0       	ldi	r22, 0x00	; 0
     fd4:	82 e0       	ldi	r24, 0x02	; 2
     fd6:	0e 94 65 09 	call	0x12ca	; 0x12ca <DIO_s8SETPinVal>
     fda:	61 e0       	ldi	r22, 0x01	; 1
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	0e 94 65 09 	call	0x12ca	; 0x12ca <DIO_s8SETPinVal>
     fe2:	1d 2f       	mov	r17, r29
     fe4:	12 95       	swap	r17
     fe6:	1f 70       	andi	r17, 0x0F	; 15
     fe8:	c0 e0       	ldi	r28, 0x00	; 0
     fea:	11 c0       	rjmp	.+34     	; 0x100e <HLCD_vidWriteChar+0x44>
     fec:	ec 2f       	mov	r30, r28
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	61 2f       	mov	r22, r17
     ff2:	70 e0       	ldi	r23, 0x00	; 0
     ff4:	0c 2e       	mov	r0, r28
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <HLCD_vidWriteChar+0x32>
     ff8:	75 95       	asr	r23
     ffa:	67 95       	ror	r22
     ffc:	0a 94       	dec	r0
     ffe:	e2 f7       	brpl	.-8      	; 0xff8 <HLCD_vidWriteChar+0x2e>
    1000:	61 70       	andi	r22, 0x01	; 1
    1002:	ea 58       	subi	r30, 0x8A	; 138
    1004:	fe 4f       	sbci	r31, 0xFE	; 254
    1006:	80 81       	ld	r24, Z
    1008:	0e 94 65 09 	call	0x12ca	; 0x12ca <DIO_s8SETPinVal>
    100c:	cf 5f       	subi	r28, 0xFF	; 255
    100e:	c4 30       	cpi	r28, 0x04	; 4
    1010:	68 f3       	brcs	.-38     	; 0xfec <HLCD_vidWriteChar+0x22>
    1012:	61 e0       	ldi	r22, 0x01	; 1
    1014:	83 e0       	ldi	r24, 0x03	; 3
    1016:	0e 94 65 09 	call	0x12ca	; 0x12ca <DIO_s8SETPinVal>
    101a:	89 ef       	ldi	r24, 0xF9	; 249
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	01 97       	sbiw	r24, 0x01	; 1
    1020:	f1 f7       	brne	.-4      	; 0x101e <HLCD_vidWriteChar+0x54>
    1022:	00 c0       	rjmp	.+0      	; 0x1024 <HLCD_vidWriteChar+0x5a>
    1024:	00 00       	nop
    1026:	60 e0       	ldi	r22, 0x00	; 0
    1028:	83 e0       	ldi	r24, 0x03	; 3
    102a:	0e 94 65 09 	call	0x12ca	; 0x12ca <DIO_s8SETPinVal>
    102e:	92 e4       	ldi	r25, 0x42	; 66
    1030:	9a 95       	dec	r25
    1032:	f1 f7       	brne	.-4      	; 0x1030 <HLCD_vidWriteChar+0x66>
    1034:	00 c0       	rjmp	.+0      	; 0x1036 <HLCD_vidWriteChar+0x6c>
    1036:	df 70       	andi	r29, 0x0F	; 15
    1038:	c0 e0       	ldi	r28, 0x00	; 0
    103a:	11 c0       	rjmp	.+34     	; 0x105e <HLCD_vidWriteChar+0x94>
    103c:	ec 2f       	mov	r30, r28
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	6d 2f       	mov	r22, r29
    1042:	70 e0       	ldi	r23, 0x00	; 0
    1044:	0c 2e       	mov	r0, r28
    1046:	02 c0       	rjmp	.+4      	; 0x104c <HLCD_vidWriteChar+0x82>
    1048:	75 95       	asr	r23
    104a:	67 95       	ror	r22
    104c:	0a 94       	dec	r0
    104e:	e2 f7       	brpl	.-8      	; 0x1048 <HLCD_vidWriteChar+0x7e>
    1050:	61 70       	andi	r22, 0x01	; 1
    1052:	ea 58       	subi	r30, 0x8A	; 138
    1054:	fe 4f       	sbci	r31, 0xFE	; 254
    1056:	80 81       	ld	r24, Z
    1058:	0e 94 65 09 	call	0x12ca	; 0x12ca <DIO_s8SETPinVal>
    105c:	cf 5f       	subi	r28, 0xFF	; 255
    105e:	c4 30       	cpi	r28, 0x04	; 4
    1060:	68 f3       	brcs	.-38     	; 0x103c <HLCD_vidWriteChar+0x72>
    1062:	61 e0       	ldi	r22, 0x01	; 1
    1064:	83 e0       	ldi	r24, 0x03	; 3
    1066:	0e 94 65 09 	call	0x12ca	; 0x12ca <DIO_s8SETPinVal>
    106a:	89 ef       	ldi	r24, 0xF9	; 249
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	01 97       	sbiw	r24, 0x01	; 1
    1070:	f1 f7       	brne	.-4      	; 0x106e <HLCD_vidWriteChar+0xa4>
    1072:	00 c0       	rjmp	.+0      	; 0x1074 <HLCD_vidWriteChar+0xaa>
    1074:	00 00       	nop
    1076:	60 e0       	ldi	r22, 0x00	; 0
    1078:	83 e0       	ldi	r24, 0x03	; 3
    107a:	0e 94 65 09 	call	0x12ca	; 0x12ca <DIO_s8SETPinVal>
    107e:	83 ef       	ldi	r24, 0xF3	; 243
    1080:	91 e0       	ldi	r25, 0x01	; 1
    1082:	01 97       	sbiw	r24, 0x01	; 1
    1084:	f1 f7       	brne	.-4      	; 0x1082 <HLCD_vidWriteChar+0xb8>
    1086:	00 c0       	rjmp	.+0      	; 0x1088 <HLCD_vidWriteChar+0xbe>
    1088:	00 00       	nop
    108a:	df 91       	pop	r29
    108c:	cf 91       	pop	r28
    108e:	1f 91       	pop	r17
    1090:	08 95       	ret

00001092 <HLCD_ClrDisplay>:
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	0e 94 32 07 	call	0xe64	; 0xe64 <HLCD_vidWritecmd>
    1098:	87 ee       	ldi	r24, 0xE7	; 231
    109a:	93 e0       	ldi	r25, 0x03	; 3
    109c:	01 97       	sbiw	r24, 0x01	; 1
    109e:	f1 f7       	brne	.-4      	; 0x109c <HLCD_ClrDisplay+0xa>
    10a0:	00 c0       	rjmp	.+0      	; 0x10a2 <HLCD_ClrDisplay+0x10>
    10a2:	00 00       	nop
    10a4:	82 e0       	ldi	r24, 0x02	; 2
    10a6:	0e 94 32 07 	call	0xe64	; 0xe64 <HLCD_vidWritecmd>
    10aa:	87 ee       	ldi	r24, 0xE7	; 231
    10ac:	93 e0       	ldi	r25, 0x03	; 3
    10ae:	01 97       	sbiw	r24, 0x01	; 1
    10b0:	f1 f7       	brne	.-4      	; 0x10ae <HLCD_ClrDisplay+0x1c>
    10b2:	00 c0       	rjmp	.+0      	; 0x10b4 <HLCD_ClrDisplay+0x22>
    10b4:	00 00       	nop
    10b6:	08 95       	ret

000010b8 <HLCD_gotoXY>:
    10b8:	81 11       	cpse	r24, r1
    10ba:	08 c0       	rjmp	.+16     	; 0x10cc <HLCD_gotoXY+0x14>
    10bc:	60 31       	cpi	r22, 0x10	; 16
    10be:	30 f4       	brcc	.+12     	; 0x10cc <HLCD_gotoXY+0x14>
    10c0:	86 2f       	mov	r24, r22
    10c2:	8f 70       	andi	r24, 0x0F	; 15
    10c4:	80 68       	ori	r24, 0x80	; 128
    10c6:	0e 94 32 07 	call	0xe64	; 0xe64 <HLCD_vidWritecmd>
    10ca:	08 95       	ret
    10cc:	81 30       	cpi	r24, 0x01	; 1
    10ce:	39 f4       	brne	.+14     	; 0x10de <HLCD_gotoXY+0x26>
    10d0:	60 31       	cpi	r22, 0x10	; 16
    10d2:	28 f4       	brcc	.+10     	; 0x10de <HLCD_gotoXY+0x26>
    10d4:	86 2f       	mov	r24, r22
    10d6:	8f 70       	andi	r24, 0x0F	; 15
    10d8:	80 6c       	ori	r24, 0xC0	; 192
    10da:	0e 94 32 07 	call	0xe64	; 0xe64 <HLCD_vidWritecmd>
    10de:	08 95       	ret

000010e0 <HLCD_WriteString>:
    10e0:	0f 93       	push	r16
    10e2:	1f 93       	push	r17
    10e4:	cf 93       	push	r28
    10e6:	df 93       	push	r29
    10e8:	8c 01       	movw	r16, r24
    10ea:	fc 01       	movw	r30, r24
    10ec:	80 81       	ld	r24, Z
    10ee:	c0 e0       	ldi	r28, 0x00	; 0
    10f0:	d0 e0       	ldi	r29, 0x00	; 0
    10f2:	07 c0       	rjmp	.+14     	; 0x1102 <HLCD_WriteString+0x22>
    10f4:	0e 94 e5 07 	call	0xfca	; 0xfca <HLCD_vidWriteChar>
    10f8:	21 96       	adiw	r28, 0x01	; 1
    10fa:	f8 01       	movw	r30, r16
    10fc:	ec 0f       	add	r30, r28
    10fe:	fd 1f       	adc	r31, r29
    1100:	80 81       	ld	r24, Z
    1102:	81 11       	cpse	r24, r1
    1104:	f7 cf       	rjmp	.-18     	; 0x10f4 <HLCD_WriteString+0x14>
    1106:	df 91       	pop	r29
    1108:	cf 91       	pop	r28
    110a:	1f 91       	pop	r17
    110c:	0f 91       	pop	r16
    110e:	08 95       	ret

00001110 <HLCD_DisplayFloat>:
 * input param 	:
 * 				  f32_a_number -> the floating point number to display
 * return		: void
 * */
void HLCD_DisplayFloat(float32_t f32_a_number)
{
    1110:	8f 92       	push	r8
    1112:	9f 92       	push	r9
    1114:	af 92       	push	r10
    1116:	bf 92       	push	r11
    1118:	cf 92       	push	r12
    111a:	df 92       	push	r13
    111c:	ef 92       	push	r14
    111e:	ff 92       	push	r15
    1120:	1f 93       	push	r17
    1122:	cf 93       	push	r28
    1124:	df 93       	push	r29
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
    112a:	2c 97       	sbiw	r28, 0x0c	; 12
    112c:	0f b6       	in	r0, 0x3f	; 63
    112e:	f8 94       	cli
    1130:	de bf       	out	0x3e, r29	; 62
    1132:	0f be       	out	0x3f, r0	; 63
    1134:	cd bf       	out	0x3d, r28	; 61
    1136:	4b 01       	movw	r8, r22
    1138:	5c 01       	movw	r10, r24
	Uchar8_t arr_l_NumString[12];
	Uchar8_t u8_l_NumIterator = 3, u8_l_StrLen, u8_l_tempVar, u8_l_decimal;
	Uint32_t u32_l_integer;

	/* Get the integer part */
	u32_l_integer = (Uint16_t)f32_a_number;
    113a:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <__fixunssfsi>
    113e:	6b 01       	movw	r12, r22
    1140:	e1 2c       	mov	r14, r1
    1142:	f1 2c       	mov	r15, r1
	
	/* Get the first two decimal places */
	u8_l_decimal = (Uint16_t)((f32_a_number - u32_l_integer) * 100);
    1144:	c7 01       	movw	r24, r14
    1146:	b6 01       	movw	r22, r12
    1148:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <__floatunsisf>
    114c:	9b 01       	movw	r18, r22
    114e:	ac 01       	movw	r20, r24
    1150:	c5 01       	movw	r24, r10
    1152:	b4 01       	movw	r22, r8
    1154:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__subsf3>
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	48 ec       	ldi	r20, 0xC8	; 200
    115e:	52 e4       	ldi	r21, 0x42	; 66
    1160:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <__mulsf3>
    1164:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <__fixunssfsi>

	/* Get decimal digits as characters */
	arr_l_NumString[0] = u8_l_decimal % 10 + '0';
    1168:	8d ec       	ldi	r24, 0xCD	; 205
    116a:	68 9f       	mul	r22, r24
    116c:	81 2d       	mov	r24, r1
    116e:	11 24       	eor	r1, r1
    1170:	86 95       	lsr	r24
    1172:	86 95       	lsr	r24
    1174:	86 95       	lsr	r24
    1176:	28 2f       	mov	r18, r24
    1178:	22 0f       	add	r18, r18
    117a:	92 2f       	mov	r25, r18
    117c:	99 0f       	add	r25, r25
    117e:	99 0f       	add	r25, r25
    1180:	92 0f       	add	r25, r18
    1182:	69 1b       	sub	r22, r25
    1184:	60 5d       	subi	r22, 0xD0	; 208
    1186:	69 83       	std	Y+1, r22	; 0x01
	arr_l_NumString[1] = u8_l_decimal / 10 + '0';
    1188:	80 5d       	subi	r24, 0xD0	; 208
    118a:	8a 83       	std	Y+2, r24	; 0x02
	
	arr_l_NumString[2] = '.';
    118c:	8e e2       	ldi	r24, 0x2E	; 46
    118e:	8b 83       	std	Y+3, r24	; 0x03
 * return		: void
 * */
void HLCD_DisplayFloat(float32_t f32_a_number)
{
	Uchar8_t arr_l_NumString[12];
	Uchar8_t u8_l_NumIterator = 3, u8_l_StrLen, u8_l_tempVar, u8_l_decimal;
    1190:	13 e0       	ldi	r17, 0x03	; 3
	arr_l_NumString[1] = u8_l_decimal / 10 + '0';
	
	arr_l_NumString[2] = '.';
	
	/* Get integer digits as characters */
	while (u32_l_integer > 0) 
    1192:	15 c0       	rjmp	.+42     	; 0x11be <HLCD_DisplayFloat+0xae>
	{
		arr_l_NumString[u8_l_NumIterator] = (u32_l_integer % 10) + '0';
    1194:	c7 01       	movw	r24, r14
    1196:	b6 01       	movw	r22, r12
    1198:	2a e0       	ldi	r18, 0x0A	; 10
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	40 e0       	ldi	r20, 0x00	; 0
    119e:	50 e0       	ldi	r21, 0x00	; 0
    11a0:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__udivmodsi4>
    11a4:	e1 e0       	ldi	r30, 0x01	; 1
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	ec 0f       	add	r30, r28
    11aa:	fd 1f       	adc	r31, r29
    11ac:	e1 0f       	add	r30, r17
    11ae:	f1 1d       	adc	r31, r1
    11b0:	60 5d       	subi	r22, 0xD0	; 208
    11b2:	60 83       	st	Z, r22
		u32_l_integer /= 10;
    11b4:	c2 2e       	mov	r12, r18
    11b6:	d3 2e       	mov	r13, r19
    11b8:	e4 2e       	mov	r14, r20
    11ba:	f5 2e       	mov	r15, r21
		u8_l_NumIterator++;
    11bc:	1f 5f       	subi	r17, 0xFF	; 255
	arr_l_NumString[1] = u8_l_decimal / 10 + '0';
	
	arr_l_NumString[2] = '.';
	
	/* Get integer digits as characters */
	while (u32_l_integer > 0) 
    11be:	c1 14       	cp	r12, r1
    11c0:	d1 04       	cpc	r13, r1
    11c2:	e1 04       	cpc	r14, r1
    11c4:	f1 04       	cpc	r15, r1
    11c6:	31 f7       	brne	.-52     	; 0x1194 <HLCD_DisplayFloat+0x84>
		u32_l_integer /= 10;
		u8_l_NumIterator++;
	}
	
	/* Terminate String */
	arr_l_NumString[u8_l_NumIterator] = '\0';
    11c8:	41 2f       	mov	r20, r17
    11ca:	50 e0       	ldi	r21, 0x00	; 0
    11cc:	e1 e0       	ldi	r30, 0x01	; 1
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	ec 0f       	add	r30, r28
    11d2:	fd 1f       	adc	r31, r29
    11d4:	e4 0f       	add	r30, r20
    11d6:	f5 1f       	adc	r31, r21
    11d8:	10 82       	st	Z, r1
	
	u8_l_StrLen = u8_l_NumIterator;

	/* Reverse String */
	for (u8_l_NumIterator = 0; u8_l_NumIterator< u8_l_StrLen/2; u8_l_NumIterator++) 
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	17 c0       	rjmp	.+46     	; 0x120c <HLCD_DisplayFloat+0xfc>
	{
		u8_l_tempVar = arr_l_NumString[u8_l_NumIterator];
    11de:	28 2f       	mov	r18, r24
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	a1 e0       	ldi	r26, 0x01	; 1
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	ac 0f       	add	r26, r28
    11e8:	bd 1f       	adc	r27, r29
    11ea:	a2 0f       	add	r26, r18
    11ec:	b3 1f       	adc	r27, r19
    11ee:	9c 91       	ld	r25, X
		arr_l_NumString[u8_l_NumIterator] = arr_l_NumString[u8_l_StrLen - u8_l_NumIterator - 1];
    11f0:	fa 01       	movw	r30, r20
    11f2:	e2 1b       	sub	r30, r18
    11f4:	f3 0b       	sbc	r31, r19
    11f6:	31 97       	sbiw	r30, 0x01	; 1
    11f8:	21 e0       	ldi	r18, 0x01	; 1
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	2c 0f       	add	r18, r28
    11fe:	3d 1f       	adc	r19, r29
    1200:	e2 0f       	add	r30, r18
    1202:	f3 1f       	adc	r31, r19
    1204:	20 81       	ld	r18, Z
    1206:	2c 93       	st	X, r18
		arr_l_NumString[u8_l_StrLen - u8_l_NumIterator - 1] = u8_l_tempVar;
    1208:	90 83       	st	Z, r25
	arr_l_NumString[u8_l_NumIterator] = '\0';
	
	u8_l_StrLen = u8_l_NumIterator;

	/* Reverse String */
	for (u8_l_NumIterator = 0; u8_l_NumIterator< u8_l_StrLen/2; u8_l_NumIterator++) 
    120a:	8f 5f       	subi	r24, 0xFF	; 255
    120c:	91 2f       	mov	r25, r17
    120e:	96 95       	lsr	r25
    1210:	89 17       	cp	r24, r25
    1212:	28 f3       	brcs	.-54     	; 0x11de <HLCD_DisplayFloat+0xce>
		arr_l_NumString[u8_l_NumIterator] = arr_l_NumString[u8_l_StrLen - u8_l_NumIterator - 1];
		arr_l_NumString[u8_l_StrLen - u8_l_NumIterator - 1] = u8_l_tempVar;
	}

	/* Display Number */
	HLCD_WriteString(arr_l_NumString);
    1214:	ce 01       	movw	r24, r28
    1216:	01 96       	adiw	r24, 0x01	; 1
    1218:	0e 94 70 08 	call	0x10e0	; 0x10e0 <HLCD_WriteString>
}
    121c:	2c 96       	adiw	r28, 0x0c	; 12
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	f8 94       	cli
    1222:	de bf       	out	0x3e, r29	; 62
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	cd bf       	out	0x3d, r28	; 61
    1228:	df 91       	pop	r29
    122a:	cf 91       	pop	r28
    122c:	1f 91       	pop	r17
    122e:	ff 90       	pop	r15
    1230:	ef 90       	pop	r14
    1232:	df 90       	pop	r13
    1234:	cf 90       	pop	r12
    1236:	bf 90       	pop	r11
    1238:	af 90       	pop	r10
    123a:	9f 90       	pop	r9
    123c:	8f 90       	pop	r8
    123e:	08 95       	ret

00001240 <main>:
 */ 
#define F_CPU 8000000UL
#include "APP/app.h"
void main(void)
{
	APP_Init();
    1240:	0e 94 70 00 	call	0xe0	; 0xe0 <APP_Init>

    while (1) 
    {
		APP_Start();
    1244:	0e 94 90 00 	call	0x120	; 0x120 <APP_Start>
    1248:	fd cf       	rjmp	.-6      	; 0x1244 <main+0x4>

0000124a <DIO_s8SETPinDir>:
	{
		errStatus = E_NOK;
	}
	return errStatus;

}
    124a:	80 32       	cpi	r24, 0x20	; 32
    124c:	c0 f5       	brcc	.+112    	; 0x12be <DIO_s8SETPinDir+0x74>
    124e:	62 30       	cpi	r22, 0x02	; 2
    1250:	c0 f5       	brcc	.+112    	; 0x12c2 <DIO_s8SETPinDir+0x78>
    1252:	e8 2f       	mov	r30, r24
    1254:	e6 95       	lsr	r30
    1256:	e6 95       	lsr	r30
    1258:	e6 95       	lsr	r30
    125a:	87 70       	andi	r24, 0x07	; 7
    125c:	61 11       	cpse	r22, r1
    125e:	17 c0       	rjmp	.+46     	; 0x128e <DIO_s8SETPinDir+0x44>
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	ee 0f       	add	r30, r30
    1264:	ff 1f       	adc	r31, r31
    1266:	ee 57       	subi	r30, 0x7E	; 126
    1268:	fe 4f       	sbci	r31, 0xFE	; 254
    126a:	01 90       	ld	r0, Z+
    126c:	f0 81       	ld	r31, Z
    126e:	e0 2d       	mov	r30, r0
    1270:	40 81       	ld	r20, Z
    1272:	21 e0       	ldi	r18, 0x01	; 1
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	b9 01       	movw	r22, r18
    1278:	02 c0       	rjmp	.+4      	; 0x127e <DIO_s8SETPinDir+0x34>
    127a:	66 0f       	add	r22, r22
    127c:	77 1f       	adc	r23, r23
    127e:	8a 95       	dec	r24
    1280:	e2 f7       	brpl	.-8      	; 0x127a <DIO_s8SETPinDir+0x30>
    1282:	cb 01       	movw	r24, r22
    1284:	80 95       	com	r24
    1286:	84 23       	and	r24, r20
    1288:	80 83       	st	Z, r24
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	08 95       	ret
    128e:	61 30       	cpi	r22, 0x01	; 1
    1290:	d1 f4       	brne	.+52     	; 0x12c6 <DIO_s8SETPinDir+0x7c>
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	ee 0f       	add	r30, r30
    1296:	ff 1f       	adc	r31, r31
    1298:	ee 57       	subi	r30, 0x7E	; 126
    129a:	fe 4f       	sbci	r31, 0xFE	; 254
    129c:	01 90       	ld	r0, Z+
    129e:	f0 81       	ld	r31, Z
    12a0:	e0 2d       	mov	r30, r0
    12a2:	40 81       	ld	r20, Z
    12a4:	21 e0       	ldi	r18, 0x01	; 1
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	b9 01       	movw	r22, r18
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <DIO_s8SETPinDir+0x66>
    12ac:	66 0f       	add	r22, r22
    12ae:	77 1f       	adc	r23, r23
    12b0:	8a 95       	dec	r24
    12b2:	e2 f7       	brpl	.-8      	; 0x12ac <DIO_s8SETPinDir+0x62>
    12b4:	cb 01       	movw	r24, r22
    12b6:	84 2b       	or	r24, r20
    12b8:	80 83       	st	Z, r24
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	08 95       	ret
    12be:	8f ef       	ldi	r24, 0xFF	; 255
    12c0:	08 95       	ret
    12c2:	8f ef       	ldi	r24, 0xFF	; 255
    12c4:	08 95       	ret
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	08 95       	ret

000012ca <DIO_s8SETPinVal>:
    12ca:	80 32       	cpi	r24, 0x20	; 32
    12cc:	c0 f5       	brcc	.+112    	; 0x133e <DIO_s8SETPinVal+0x74>
    12ce:	62 30       	cpi	r22, 0x02	; 2
    12d0:	c0 f5       	brcc	.+112    	; 0x1342 <DIO_s8SETPinVal+0x78>
    12d2:	e8 2f       	mov	r30, r24
    12d4:	e6 95       	lsr	r30
    12d6:	e6 95       	lsr	r30
    12d8:	e6 95       	lsr	r30
    12da:	87 70       	andi	r24, 0x07	; 7
    12dc:	61 11       	cpse	r22, r1
    12de:	17 c0       	rjmp	.+46     	; 0x130e <DIO_s8SETPinVal+0x44>
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	ee 0f       	add	r30, r30
    12e4:	ff 1f       	adc	r31, r31
    12e6:	e6 57       	subi	r30, 0x76	; 118
    12e8:	fe 4f       	sbci	r31, 0xFE	; 254
    12ea:	01 90       	ld	r0, Z+
    12ec:	f0 81       	ld	r31, Z
    12ee:	e0 2d       	mov	r30, r0
    12f0:	40 81       	ld	r20, Z
    12f2:	21 e0       	ldi	r18, 0x01	; 1
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	b9 01       	movw	r22, r18
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <DIO_s8SETPinVal+0x34>
    12fa:	66 0f       	add	r22, r22
    12fc:	77 1f       	adc	r23, r23
    12fe:	8a 95       	dec	r24
    1300:	e2 f7       	brpl	.-8      	; 0x12fa <DIO_s8SETPinVal+0x30>
    1302:	cb 01       	movw	r24, r22
    1304:	80 95       	com	r24
    1306:	84 23       	and	r24, r20
    1308:	80 83       	st	Z, r24
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	08 95       	ret
    130e:	61 30       	cpi	r22, 0x01	; 1
    1310:	d1 f4       	brne	.+52     	; 0x1346 <DIO_s8SETPinVal+0x7c>
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	ee 0f       	add	r30, r30
    1316:	ff 1f       	adc	r31, r31
    1318:	e6 57       	subi	r30, 0x76	; 118
    131a:	fe 4f       	sbci	r31, 0xFE	; 254
    131c:	01 90       	ld	r0, Z+
    131e:	f0 81       	ld	r31, Z
    1320:	e0 2d       	mov	r30, r0
    1322:	40 81       	ld	r20, Z
    1324:	21 e0       	ldi	r18, 0x01	; 1
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	b9 01       	movw	r22, r18
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <DIO_s8SETPinVal+0x66>
    132c:	66 0f       	add	r22, r22
    132e:	77 1f       	adc	r23, r23
    1330:	8a 95       	dec	r24
    1332:	e2 f7       	brpl	.-8      	; 0x132c <DIO_s8SETPinVal+0x62>
    1334:	cb 01       	movw	r24, r22
    1336:	84 2b       	or	r24, r20
    1338:	80 83       	st	Z, r24
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	08 95       	ret
    133e:	8f ef       	ldi	r24, 0xFF	; 255
    1340:	08 95       	ret
    1342:	8f ef       	ldi	r24, 0xFF	; 255
    1344:	08 95       	ret
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	08 95       	ret

0000134a <DIO_s8GETPinVal>:
Uchar8_t DIO_s8GETPinVal (enu_pin enPinCopy, Uchar8_t* pu8Val)
{
	Uchar8_t errStatus = E_OK;
	Uchar8_t portID;
	Uchar8_t pinID;
	if (enPinCopy < PIN_INVALID)
    134a:	80 32       	cpi	r24, 0x20	; 32
    134c:	d8 f4       	brcc	.+54     	; 0x1384 <DIO_s8GETPinVal+0x3a>
	{
		portID = enPinCopy/8;
    134e:	e8 2f       	mov	r30, r24
    1350:	e6 95       	lsr	r30
    1352:	e6 95       	lsr	r30
    1354:	e6 95       	lsr	r30
		pinID  = enPinCopy%8;
    1356:	87 70       	andi	r24, 0x07	; 7

		*pu8Val = GET_BIT(*pinReg[portID], pinID);
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	ee 0f       	add	r30, r30
    135c:	ff 1f       	adc	r31, r31
    135e:	e6 58       	subi	r30, 0x86	; 134
    1360:	fe 4f       	sbci	r31, 0xFE	; 254
    1362:	01 90       	ld	r0, Z+
    1364:	f0 81       	ld	r31, Z
    1366:	e0 2d       	mov	r30, r0
    1368:	20 81       	ld	r18, Z
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	a9 01       	movw	r20, r18
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <DIO_s8GETPinVal+0x2a>
    1370:	55 95       	asr	r21
    1372:	47 95       	ror	r20
    1374:	8a 95       	dec	r24
    1376:	e2 f7       	brpl	.-8      	; 0x1370 <DIO_s8GETPinVal+0x26>
    1378:	ca 01       	movw	r24, r20
    137a:	81 70       	andi	r24, 0x01	; 1
    137c:	fb 01       	movw	r30, r22
    137e:	80 83       	st	Z, r24

}

Uchar8_t DIO_s8GETPinVal (enu_pin enPinCopy, Uchar8_t* pu8Val)
{
	Uchar8_t errStatus = E_OK;
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	08 95       	ret
		*pu8Val = GET_BIT(*pinReg[portID], pinID);

	}
	else
	{
		errStatus = E_NOK;
    1384:	8f ef       	ldi	r24, 0xFF	; 255
	}
	return errStatus;
    1386:	08 95       	ret

00001388 <SET_GLOBAL_INTERRUPT>:
void (*ptrINT2)(void) = 0;

EN_EXTINT_ERROR SET_GLOBAL_INTERRUPT(EN_GLOBAL_INT state)
{
	
	if(state == ENABLE)
    1388:	81 30       	cpi	r24, 0x01	; 1
    138a:	19 f4       	brne	.+6      	; 0x1392 <SET_GLOBAL_INTERRUPT+0xa>
	sei();
    138c:	78 94       	sei
    else if (state == DISABLE)
	cli();
	else return EXTINT_NOT_OK;
	return EXTINT_OK;
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	08 95       	ret
EN_EXTINT_ERROR SET_GLOBAL_INTERRUPT(EN_GLOBAL_INT state)
{
	
	if(state == ENABLE)
	sei();
    else if (state == DISABLE)
    1392:	81 11       	cpse	r24, r1
    1394:	02 c0       	rjmp	.+4      	; 0x139a <SET_GLOBAL_INTERRUPT+0x12>
	cli();
    1396:	f8 94       	cli
    1398:	08 95       	ret
	else return EXTINT_NOT_OK;
    139a:	81 e0       	ldi	r24, 0x01	; 1
	return EXTINT_OK;
}
    139c:	08 95       	ret

0000139e <EXTINT_init>:

EN_EXTINT_ERROR EXTINT_init(EN_EXINT_NUMBER INTx ,EN_Sence_Control INTxSense)
{
    139e:	cf 93       	push	r28
    13a0:	df 93       	push	r29
    13a2:	c8 2f       	mov	r28, r24
    13a4:	d6 2f       	mov	r29, r22
	
	SET_GLOBAL_INTERRUPT(ENABLE); // SET GLOBAL INTERRUPT
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	0e 94 c4 09 	call	0x1388	; 0x1388 <SET_GLOBAL_INTERRUPT>
	switch(INTx)
    13ac:	c1 30       	cpi	r28, 0x01	; 1
    13ae:	99 f1       	breq	.+102    	; 0x1416 <EXTINT_init+0x78>
    13b0:	20 f0       	brcs	.+8      	; 0x13ba <EXTINT_init+0x1c>
    13b2:	c2 30       	cpi	r28, 0x02	; 2
    13b4:	09 f4       	brne	.+2      	; 0x13b8 <EXTINT_init+0x1a>
    13b6:	5d c0       	rjmp	.+186    	; 0x1472 <EXTINT_init+0xd4>
    13b8:	72 c0       	rjmp	.+228    	; 0x149e <EXTINT_init+0x100>
	{
		case EXTINT0:
		  if(INTxSense == LOW_LEVEL)
    13ba:	d1 11       	cpse	r29, r1
    13bc:	07 c0       	rjmp	.+14     	; 0x13cc <EXTINT_init+0x2e>
		  {
			  CLEAR_BIT(MCUCR,ISC00);
    13be:	85 b7       	in	r24, 0x35	; 53
    13c0:	8e 7f       	andi	r24, 0xFE	; 254
    13c2:	85 bf       	out	0x35, r24	; 53
			  CLEAR_BIT(MCUCR,ISC01);
    13c4:	85 b7       	in	r24, 0x35	; 53
    13c6:	8d 7f       	andi	r24, 0xFD	; 253
    13c8:	85 bf       	out	0x35, r24	; 53
    13ca:	20 c0       	rjmp	.+64     	; 0x140c <EXTINT_init+0x6e>
		  }
		  else if(INTxSense == FALLING_EDGE)
    13cc:	d1 30       	cpi	r29, 0x01	; 1
    13ce:	39 f4       	brne	.+14     	; 0x13de <EXTINT_init+0x40>
		  {
			  CLEAR_BIT(MCUCR,ISC00);
    13d0:	85 b7       	in	r24, 0x35	; 53
    13d2:	8e 7f       	andi	r24, 0xFE	; 254
    13d4:	85 bf       	out	0x35, r24	; 53
			  SET_BIT(MCUCR,ISC01);
    13d6:	85 b7       	in	r24, 0x35	; 53
    13d8:	82 60       	ori	r24, 0x02	; 2
    13da:	85 bf       	out	0x35, r24	; 53
    13dc:	17 c0       	rjmp	.+46     	; 0x140c <EXTINT_init+0x6e>
		  }
		  else if(INTxSense == RISING_EDGE)
    13de:	d2 30       	cpi	r29, 0x02	; 2
    13e0:	39 f4       	brne	.+14     	; 0x13f0 <EXTINT_init+0x52>
		  {
			  SET_BIT(MCUCR,ISC00);
    13e2:	85 b7       	in	r24, 0x35	; 53
    13e4:	81 60       	ori	r24, 0x01	; 1
    13e6:	85 bf       	out	0x35, r24	; 53
			  SET_BIT(MCUCR,ISC01);
    13e8:	85 b7       	in	r24, 0x35	; 53
    13ea:	82 60       	ori	r24, 0x02	; 2
    13ec:	85 bf       	out	0x35, r24	; 53
    13ee:	0e c0       	rjmp	.+28     	; 0x140c <EXTINT_init+0x6e>
		  }
		  else if(INTxSense == ANY_LOGICAL_CHANGE)
    13f0:	d3 30       	cpi	r29, 0x03	; 3
    13f2:	39 f4       	brne	.+14     	; 0x1402 <EXTINT_init+0x64>
		  {
			  SET_BIT(MCUCR,ISC00);
    13f4:	85 b7       	in	r24, 0x35	; 53
    13f6:	81 60       	ori	r24, 0x01	; 1
    13f8:	85 bf       	out	0x35, r24	; 53
			  CLEAR_BIT(MCUCR,ISC01);
    13fa:	85 b7       	in	r24, 0x35	; 53
    13fc:	8d 7f       	andi	r24, 0xFD	; 253
    13fe:	85 bf       	out	0x35, r24	; 53
    1400:	05 c0       	rjmp	.+10     	; 0x140c <EXTINT_init+0x6e>
		  }
		  else   // handle sense option error
		  {
			  SET_GLOBAL_INTERRUPT(DISABLE);
    1402:	80 e0       	ldi	r24, 0x00	; 0
    1404:	0e 94 c4 09 	call	0x1388	; 0x1388 <SET_GLOBAL_INTERRUPT>
			   return EXTINT_NOT_OK;
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	4d c0       	rjmp	.+154    	; 0x14a6 <EXTINT_init+0x108>
		  }	   
		  SET_BIT(GICR,INT0); //Enable External INT0  (PIE)
    140c:	8b b7       	in	r24, 0x3b	; 59
    140e:	80 64       	ori	r24, 0x40	; 64
    1410:	8b bf       	out	0x3b, r24	; 59
		default: // handle wrong Choose for EXT Interrupt Number
		  SET_GLOBAL_INTERRUPT(DISABLE);
		  return EXTINT_NOT_OK;
		  break;
	}
	return EXTINT_OK;
    1412:	80 e0       	ldi	r24, 0x00	; 0
		  {
			  SET_GLOBAL_INTERRUPT(DISABLE);
			   return EXTINT_NOT_OK;
		  }	   
		  SET_BIT(GICR,INT0); //Enable External INT0  (PIE)
		  break;
    1414:	48 c0       	rjmp	.+144    	; 0x14a6 <EXTINT_init+0x108>
		case EXTINT1:
		  if(INTxSense == LOW_LEVEL)
    1416:	d1 11       	cpse	r29, r1
    1418:	07 c0       	rjmp	.+14     	; 0x1428 <EXTINT_init+0x8a>
		  {
			  CLEAR_BIT(MCUCR,ISC10);
    141a:	85 b7       	in	r24, 0x35	; 53
    141c:	8b 7f       	andi	r24, 0xFB	; 251
    141e:	85 bf       	out	0x35, r24	; 53
			  CLEAR_BIT(MCUCR,ISC11);
    1420:	85 b7       	in	r24, 0x35	; 53
    1422:	87 7f       	andi	r24, 0xF7	; 247
    1424:	85 bf       	out	0x35, r24	; 53
    1426:	20 c0       	rjmp	.+64     	; 0x1468 <EXTINT_init+0xca>
		  }
		  else if(INTxSense == FALLING_EDGE)
    1428:	d1 30       	cpi	r29, 0x01	; 1
    142a:	39 f4       	brne	.+14     	; 0x143a <EXTINT_init+0x9c>
		  {
			  CLEAR_BIT(MCUCR,ISC10);
    142c:	85 b7       	in	r24, 0x35	; 53
    142e:	8b 7f       	andi	r24, 0xFB	; 251
    1430:	85 bf       	out	0x35, r24	; 53
			  SET_BIT(MCUCR,ISC11);
    1432:	85 b7       	in	r24, 0x35	; 53
    1434:	88 60       	ori	r24, 0x08	; 8
    1436:	85 bf       	out	0x35, r24	; 53
    1438:	17 c0       	rjmp	.+46     	; 0x1468 <EXTINT_init+0xca>
		  }
		  else if(INTxSense == RISING_EDGE)
    143a:	d2 30       	cpi	r29, 0x02	; 2
    143c:	39 f4       	brne	.+14     	; 0x144c <EXTINT_init+0xae>
		  {
			  SET_BIT(MCUCR,ISC10);
    143e:	85 b7       	in	r24, 0x35	; 53
    1440:	84 60       	ori	r24, 0x04	; 4
    1442:	85 bf       	out	0x35, r24	; 53
			  SET_BIT(MCUCR,ISC11);
    1444:	85 b7       	in	r24, 0x35	; 53
    1446:	88 60       	ori	r24, 0x08	; 8
    1448:	85 bf       	out	0x35, r24	; 53
    144a:	0e c0       	rjmp	.+28     	; 0x1468 <EXTINT_init+0xca>
		  }
		  else if(INTxSense == ANY_LOGICAL_CHANGE)
    144c:	d3 30       	cpi	r29, 0x03	; 3
    144e:	39 f4       	brne	.+14     	; 0x145e <EXTINT_init+0xc0>
		  {
			  SET_BIT(MCUCR,ISC10);
    1450:	85 b7       	in	r24, 0x35	; 53
    1452:	84 60       	ori	r24, 0x04	; 4
    1454:	85 bf       	out	0x35, r24	; 53
			  CLEAR_BIT(MCUCR,ISC11);
    1456:	85 b7       	in	r24, 0x35	; 53
    1458:	87 7f       	andi	r24, 0xF7	; 247
    145a:	85 bf       	out	0x35, r24	; 53
    145c:	05 c0       	rjmp	.+10     	; 0x1468 <EXTINT_init+0xca>
		  }
		  else   // handle sense option error
		  {
		 	 SET_GLOBAL_INTERRUPT(DISABLE);
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	0e 94 c4 09 	call	0x1388	; 0x1388 <SET_GLOBAL_INTERRUPT>
		 	 return EXTINT_NOT_OK;
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	1f c0       	rjmp	.+62     	; 0x14a6 <EXTINT_init+0x108>
		  }
		  SET_BIT(GICR,INT1); //Enable External INT1  (PIE)
    1468:	8b b7       	in	r24, 0x3b	; 59
    146a:	80 68       	ori	r24, 0x80	; 128
    146c:	8b bf       	out	0x3b, r24	; 59
		default: // handle wrong Choose for EXT Interrupt Number
		  SET_GLOBAL_INTERRUPT(DISABLE);
		  return EXTINT_NOT_OK;
		  break;
	}
	return EXTINT_OK;
    146e:	80 e0       	ldi	r24, 0x00	; 0
		  {
		 	 SET_GLOBAL_INTERRUPT(DISABLE);
		 	 return EXTINT_NOT_OK;
		  }
		  SET_BIT(GICR,INT1); //Enable External INT1  (PIE)
		  break;
    1470:	1a c0       	rjmp	.+52     	; 0x14a6 <EXTINT_init+0x108>
		case EXTINT2:
		 
		  if(INTxSense == FALLING_EDGE)
    1472:	d1 30       	cpi	r29, 0x01	; 1
    1474:	21 f4       	brne	.+8      	; 0x147e <EXTINT_init+0xe0>
		  {
			  CLEAR_BIT(MCUCSR,ISC2);
    1476:	84 b7       	in	r24, 0x34	; 52
    1478:	8f 7b       	andi	r24, 0xBF	; 191
    147a:	84 bf       	out	0x34, r24	; 52
    147c:	0b c0       	rjmp	.+22     	; 0x1494 <EXTINT_init+0xf6>
		  }
		  else if(INTxSense == RISING_EDGE)
    147e:	d2 30       	cpi	r29, 0x02	; 2
    1480:	21 f4       	brne	.+8      	; 0x148a <EXTINT_init+0xec>
		  {
			  SET_BIT(MCUCSR,ISC2);
    1482:	84 b7       	in	r24, 0x34	; 52
    1484:	80 64       	ori	r24, 0x40	; 64
    1486:	84 bf       	out	0x34, r24	; 52
    1488:	05 c0       	rjmp	.+10     	; 0x1494 <EXTINT_init+0xf6>
		  }
		  else   // handle sense option error
		  {
		 	 SET_GLOBAL_INTERRUPT(DISABLE);
    148a:	80 e0       	ldi	r24, 0x00	; 0
    148c:	0e 94 c4 09 	call	0x1388	; 0x1388 <SET_GLOBAL_INTERRUPT>
		 	 return EXTINT_NOT_OK;
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	09 c0       	rjmp	.+18     	; 0x14a6 <EXTINT_init+0x108>
		  }
		  SET_BIT(GICR,INT2); //Enable External INT1  (PIE)
    1494:	8b b7       	in	r24, 0x3b	; 59
    1496:	80 62       	ori	r24, 0x20	; 32
    1498:	8b bf       	out	0x3b, r24	; 59
		default: // handle wrong Choose for EXT Interrupt Number
		  SET_GLOBAL_INTERRUPT(DISABLE);
		  return EXTINT_NOT_OK;
		  break;
	}
	return EXTINT_OK;
    149a:	80 e0       	ldi	r24, 0x00	; 0
		  {
		 	 SET_GLOBAL_INTERRUPT(DISABLE);
		 	 return EXTINT_NOT_OK;
		  }
		  SET_BIT(GICR,INT2); //Enable External INT1  (PIE)
		  break;
    149c:	04 c0       	rjmp	.+8      	; 0x14a6 <EXTINT_init+0x108>
		default: // handle wrong Choose for EXT Interrupt Number
		  SET_GLOBAL_INTERRUPT(DISABLE);
    149e:	80 e0       	ldi	r24, 0x00	; 0
    14a0:	0e 94 c4 09 	call	0x1388	; 0x1388 <SET_GLOBAL_INTERRUPT>
		  return EXTINT_NOT_OK;
    14a4:	81 e0       	ldi	r24, 0x01	; 1
		  break;
	}
	return EXTINT_OK;
}
    14a6:	df 91       	pop	r29
    14a8:	cf 91       	pop	r28
    14aa:	08 95       	ret

000014ac <EXTINT_CallBack>:

EN_EXTINT_ERROR EXTINT_CallBack(EN_EXINT_NUMBER INTx,void(*ptrfunc)(void))
{
	if(INTx == EXTINT0 ) ptrINT0 = ptrfunc;
    14ac:	81 11       	cpse	r24, r1
    14ae:	05 c0       	rjmp	.+10     	; 0x14ba <EXTINT_CallBack+0xe>
    14b0:	70 93 bc 02 	sts	0x02BC, r23	; 0x8002bc <ptrINT0+0x1>
    14b4:	60 93 bb 02 	sts	0x02BB, r22	; 0x8002bb <ptrINT0>
    14b8:	08 95       	ret
	else if(INTx == EXTINT1 ) ptrINT1 = ptrfunc;
    14ba:	81 30       	cpi	r24, 0x01	; 1
    14bc:	31 f4       	brne	.+12     	; 0x14ca <EXTINT_CallBack+0x1e>
    14be:	70 93 ba 02 	sts	0x02BA, r23	; 0x8002ba <ptrINT1+0x1>
    14c2:	60 93 b9 02 	sts	0x02B9, r22	; 0x8002b9 <ptrINT1>
	else if(INTx == EXTINT2 ) ptrINT2 = ptrfunc;
	else return EXTINT_NOT_OK;
	return EXTINT_OK;
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	08 95       	ret

EN_EXTINT_ERROR EXTINT_CallBack(EN_EXINT_NUMBER INTx,void(*ptrfunc)(void))
{
	if(INTx == EXTINT0 ) ptrINT0 = ptrfunc;
	else if(INTx == EXTINT1 ) ptrINT1 = ptrfunc;
	else if(INTx == EXTINT2 ) ptrINT2 = ptrfunc;
    14ca:	82 30       	cpi	r24, 0x02	; 2
    14cc:	31 f4       	brne	.+12     	; 0x14da <EXTINT_CallBack+0x2e>
    14ce:	70 93 b8 02 	sts	0x02B8, r23	; 0x8002b8 <ptrINT2+0x1>
    14d2:	60 93 b7 02 	sts	0x02B7, r22	; 0x8002b7 <ptrINT2>
	else return EXTINT_NOT_OK;
	return EXTINT_OK;
    14d6:	80 e0       	ldi	r24, 0x00	; 0
    14d8:	08 95       	ret
EN_EXTINT_ERROR EXTINT_CallBack(EN_EXINT_NUMBER INTx,void(*ptrfunc)(void))
{
	if(INTx == EXTINT0 ) ptrINT0 = ptrfunc;
	else if(INTx == EXTINT1 ) ptrINT1 = ptrfunc;
	else if(INTx == EXTINT2 ) ptrINT2 = ptrfunc;
	else return EXTINT_NOT_OK;
    14da:	81 e0       	ldi	r24, 0x01	; 1
	return EXTINT_OK;
}
    14dc:	08 95       	ret

000014de <__vector_1>:


ISR (EXT_INT_0)
{
    14de:	1f 92       	push	r1
    14e0:	0f 92       	push	r0
    14e2:	0f b6       	in	r0, 0x3f	; 63
    14e4:	0f 92       	push	r0
    14e6:	11 24       	eor	r1, r1
    14e8:	2f 93       	push	r18
    14ea:	3f 93       	push	r19
    14ec:	4f 93       	push	r20
    14ee:	5f 93       	push	r21
    14f0:	6f 93       	push	r22
    14f2:	7f 93       	push	r23
    14f4:	8f 93       	push	r24
    14f6:	9f 93       	push	r25
    14f8:	af 93       	push	r26
    14fa:	bf 93       	push	r27
    14fc:	ef 93       	push	r30
    14fe:	ff 93       	push	r31
	if(ptrINT0) ptrINT0();
    1500:	e0 91 bb 02 	lds	r30, 0x02BB	; 0x8002bb <ptrINT0>
    1504:	f0 91 bc 02 	lds	r31, 0x02BC	; 0x8002bc <ptrINT0+0x1>
    1508:	30 97       	sbiw	r30, 0x00	; 0
    150a:	09 f0       	breq	.+2      	; 0x150e <__vector_1+0x30>
    150c:	09 95       	icall
}
    150e:	ff 91       	pop	r31
    1510:	ef 91       	pop	r30
    1512:	bf 91       	pop	r27
    1514:	af 91       	pop	r26
    1516:	9f 91       	pop	r25
    1518:	8f 91       	pop	r24
    151a:	7f 91       	pop	r23
    151c:	6f 91       	pop	r22
    151e:	5f 91       	pop	r21
    1520:	4f 91       	pop	r20
    1522:	3f 91       	pop	r19
    1524:	2f 91       	pop	r18
    1526:	0f 90       	pop	r0
    1528:	0f be       	out	0x3f, r0	; 63
    152a:	0f 90       	pop	r0
    152c:	1f 90       	pop	r1
    152e:	18 95       	reti

00001530 <__vector_2>:

ISR (EXT_INT_1)
{
    1530:	1f 92       	push	r1
    1532:	0f 92       	push	r0
    1534:	0f b6       	in	r0, 0x3f	; 63
    1536:	0f 92       	push	r0
    1538:	11 24       	eor	r1, r1
    153a:	2f 93       	push	r18
    153c:	3f 93       	push	r19
    153e:	4f 93       	push	r20
    1540:	5f 93       	push	r21
    1542:	6f 93       	push	r22
    1544:	7f 93       	push	r23
    1546:	8f 93       	push	r24
    1548:	9f 93       	push	r25
    154a:	af 93       	push	r26
    154c:	bf 93       	push	r27
    154e:	ef 93       	push	r30
    1550:	ff 93       	push	r31
	if(ptrINT1) ptrINT1();
    1552:	e0 91 b9 02 	lds	r30, 0x02B9	; 0x8002b9 <ptrINT1>
    1556:	f0 91 ba 02 	lds	r31, 0x02BA	; 0x8002ba <ptrINT1+0x1>
    155a:	30 97       	sbiw	r30, 0x00	; 0
    155c:	09 f0       	breq	.+2      	; 0x1560 <__vector_2+0x30>
    155e:	09 95       	icall
}
    1560:	ff 91       	pop	r31
    1562:	ef 91       	pop	r30
    1564:	bf 91       	pop	r27
    1566:	af 91       	pop	r26
    1568:	9f 91       	pop	r25
    156a:	8f 91       	pop	r24
    156c:	7f 91       	pop	r23
    156e:	6f 91       	pop	r22
    1570:	5f 91       	pop	r21
    1572:	4f 91       	pop	r20
    1574:	3f 91       	pop	r19
    1576:	2f 91       	pop	r18
    1578:	0f 90       	pop	r0
    157a:	0f be       	out	0x3f, r0	; 63
    157c:	0f 90       	pop	r0
    157e:	1f 90       	pop	r1
    1580:	18 95       	reti

00001582 <__vector_3>:

ISR (EXT_INT_2)
{
    1582:	1f 92       	push	r1
    1584:	0f 92       	push	r0
    1586:	0f b6       	in	r0, 0x3f	; 63
    1588:	0f 92       	push	r0
    158a:	11 24       	eor	r1, r1
    158c:	2f 93       	push	r18
    158e:	3f 93       	push	r19
    1590:	4f 93       	push	r20
    1592:	5f 93       	push	r21
    1594:	6f 93       	push	r22
    1596:	7f 93       	push	r23
    1598:	8f 93       	push	r24
    159a:	9f 93       	push	r25
    159c:	af 93       	push	r26
    159e:	bf 93       	push	r27
    15a0:	ef 93       	push	r30
    15a2:	ff 93       	push	r31
	if(ptrINT2) ptrINT2();
    15a4:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <ptrINT2>
    15a8:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <ptrINT2+0x1>
    15ac:	30 97       	sbiw	r30, 0x00	; 0
    15ae:	09 f0       	breq	.+2      	; 0x15b2 <__vector_3+0x30>
    15b0:	09 95       	icall
    15b2:	ff 91       	pop	r31
    15b4:	ef 91       	pop	r30
    15b6:	bf 91       	pop	r27
    15b8:	af 91       	pop	r26
    15ba:	9f 91       	pop	r25
    15bc:	8f 91       	pop	r24
    15be:	7f 91       	pop	r23
    15c0:	6f 91       	pop	r22
    15c2:	5f 91       	pop	r21
    15c4:	4f 91       	pop	r20
    15c6:	3f 91       	pop	r19
    15c8:	2f 91       	pop	r18
    15ca:	0f 90       	pop	r0
    15cc:	0f be       	out	0x3f, r0	; 63
    15ce:	0f 90       	pop	r0
    15d0:	1f 90       	pop	r1
    15d2:	18 95       	reti

000015d4 <SPI_MasterInit>:
	{
		return SPI_NOK;
	}
	
	return SPI_OK;
}
    15d4:	8d b1       	in	r24, 0x0d	; 13
    15d6:	80 61       	ori	r24, 0x10	; 16
    15d8:	8d b9       	out	0x0d, r24	; 13
    15da:	8d b1       	in	r24, 0x0d	; 13
    15dc:	9e b1       	in	r25, 0x0e	; 14
    15de:	8e 7f       	andi	r24, 0xFE	; 254
    15e0:	9c 7f       	andi	r25, 0xFC	; 252
    15e2:	9e b9       	out	0x0e, r25	; 14
    15e4:	8d b9       	out	0x0d, r24	; 13
    15e6:	8d b1       	in	r24, 0x0d	; 13
    15e8:	9e b1       	in	r25, 0x0e	; 14
    15ea:	93 60       	ori	r25, 0x03	; 3
    15ec:	9e b9       	out	0x0e, r25	; 14
    15ee:	8d b9       	out	0x0d, r24	; 13
    15f0:	8d b1       	in	r24, 0x0d	; 13
    15f2:	87 7f       	andi	r24, 0xF7	; 247
    15f4:	8d b9       	out	0x0d, r24	; 13
    15f6:	8d b1       	in	r24, 0x0d	; 13
    15f8:	8b 7f       	andi	r24, 0xFB	; 251
    15fa:	8d b9       	out	0x0d, r24	; 13
    15fc:	8d b1       	in	r24, 0x0d	; 13
    15fe:	80 64       	ori	r24, 0x40	; 64
    1600:	8d b9       	out	0x0d, r24	; 13
    1602:	08 95       	ret

00001604 <SPI_TranscieveChar>:
    1604:	61 15       	cp	r22, r1
    1606:	71 05       	cpc	r23, r1
    1608:	f9 f0       	breq	.+62     	; 0x1648 <SPI_TranscieveChar+0x44>
    160a:	8f b9       	out	0x0f, r24	; 15
    160c:	80 e0       	ldi	r24, 0x00	; 0
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	dc 01       	movw	r26, r24
    1612:	03 c0       	rjmp	.+6      	; 0x161a <SPI_TranscieveChar+0x16>
    1614:	01 96       	adiw	r24, 0x01	; 1
    1616:	a1 1d       	adc	r26, r1
    1618:	b1 1d       	adc	r27, r1
    161a:	77 99       	sbic	0x0e, 7	; 14
    161c:	07 c0       	rjmp	.+14     	; 0x162c <SPI_TranscieveChar+0x28>
    161e:	80 3a       	cpi	r24, 0xA0	; 160
    1620:	26 e8       	ldi	r18, 0x86	; 134
    1622:	92 07       	cpc	r25, r18
    1624:	21 e0       	ldi	r18, 0x01	; 1
    1626:	a2 07       	cpc	r26, r18
    1628:	b1 05       	cpc	r27, r1
    162a:	a0 f3       	brcs	.-24     	; 0x1614 <SPI_TranscieveChar+0x10>
    162c:	80 3a       	cpi	r24, 0xA0	; 160
    162e:	96 48       	sbci	r25, 0x86	; 134
    1630:	a1 40       	sbci	r26, 0x01	; 1
    1632:	b1 05       	cpc	r27, r1
    1634:	59 f0       	breq	.+22     	; 0x164c <SPI_TranscieveChar+0x48>
    1636:	8f b1       	in	r24, 0x0f	; 15
    1638:	fb 01       	movw	r30, r22
    163a:	80 83       	st	Z, r24
    163c:	f1 e2       	ldi	r31, 0x21	; 33
    163e:	fa 95       	dec	r31
    1640:	f1 f7       	brne	.-4      	; 0x163e <SPI_TranscieveChar+0x3a>
    1642:	00 00       	nop
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	08 95       	ret
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	08 95       	ret
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	08 95       	ret

00001650 <__vector_12>:

/*************************************************************************************************************
 * 													  ISRs
 ************************************************************************************************************/
ISR(SPI_STC_INT)
{
    1650:	1f 92       	push	r1
    1652:	0f 92       	push	r0
    1654:	0f b6       	in	r0, 0x3f	; 63
    1656:	0f 92       	push	r0
    1658:	11 24       	eor	r1, r1
    165a:	2f 93       	push	r18
    165c:	3f 93       	push	r19
    165e:	8f 93       	push	r24
    1660:	9f 93       	push	r25
    1662:	ef 93       	push	r30
    1664:	ff 93       	push	r31
	/*------------------------ Reception ------------------------*/
	u8_g_SlaveReceive = SPDR;
    1666:	8f b1       	in	r24, 0x0f	; 15
    1668:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <u8_g_SlaveReceive>
	//DIO_s8SETPortVal(DIO_PORTA, u8_g_SlaveReceive);
	
	/* If Max size is exceeded, start overriding data */
	if(u8_g_SlaveRxIndex == SPI_BUFFER_SIZE) u8_g_SlaveRxIndex = 0;
    166c:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <u8_g_SlaveRxIndex>
    1670:	9f 30       	cpi	r25, 0x0F	; 15
    1672:	11 f4       	brne	.+4      	; 0x1678 <__vector_12+0x28>
    1674:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <u8_g_SlaveRxIndex>
	if(u8_g_SlaveReceive != DATA_END)
    1678:	83 32       	cpi	r24, 0x23	; 35
    167a:	59 f0       	breq	.+22     	; 0x1692 <__vector_12+0x42>
	{
		/* Store received byte in buffer */
		arr_g_SlaveRxBuffer[u8_g_SlaveRxIndex] = u8_g_SlaveReceive;
    167c:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <u8_g_SlaveRxIndex>
    1680:	e9 2f       	mov	r30, r25
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	e3 54       	subi	r30, 0x43	; 67
    1686:	fd 4f       	sbci	r31, 0xFD	; 253
    1688:	80 83       	st	Z, r24
		u8_g_SlaveRxIndex++;
    168a:	9f 5f       	subi	r25, 0xFF	; 255
    168c:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <u8_g_SlaveRxIndex>
    1690:	04 c0       	rjmp	.+8      	; 0x169a <__vector_12+0x4a>
	}
	else
	{	// Get the number of received bytes
		u8_g_SlaveRxLen = u8_g_SlaveRxIndex;
    1692:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <u8_g_SlaveRxIndex>
    1696:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <u8_g_SlaveRxLen>
	}
	
	/*------------------------- Sending -------------------------*/
	//u8_g_SlaveTxIndex++;
	if((u8_g_SlaveTxIndex < u8_g_SlaveTxLen) && (pu8_g_SlaveTxPtr != NULL))
    169a:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <u8_g_SlaveTxIndex>
    169e:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <u8_g_SlaveTxLen>
    16a2:	89 17       	cp	r24, r25
    16a4:	88 f4       	brcc	.+34     	; 0x16c8 <__vector_12+0x78>
    16a6:	20 91 cc 02 	lds	r18, 0x02CC	; 0x8002cc <pu8_g_SlaveTxPtr>
    16aa:	30 91 cd 02 	lds	r19, 0x02CD	; 0x8002cd <pu8_g_SlaveTxPtr+0x1>
    16ae:	21 15       	cp	r18, r1
    16b0:	31 05       	cpc	r19, r1
    16b2:	51 f0       	breq	.+20     	; 0x16c8 <__vector_12+0x78>
	{
		SPDR = pu8_g_SlaveTxPtr[u8_g_SlaveTxIndex++];
    16b4:	91 e0       	ldi	r25, 0x01	; 1
    16b6:	98 0f       	add	r25, r24
    16b8:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <u8_g_SlaveTxIndex>
    16bc:	f9 01       	movw	r30, r18
    16be:	e8 0f       	add	r30, r24
    16c0:	f1 1d       	adc	r31, r1
    16c2:	80 81       	ld	r24, Z
    16c4:	8f b9       	out	0x0f, r24	; 15
    16c6:	04 c0       	rjmp	.+8      	; 0x16d0 <__vector_12+0x80>
	}
	else if(u8_g_SlaveTxIndex >= u8_g_SlaveTxLen)
    16c8:	89 17       	cp	r24, r25
    16ca:	10 f0       	brcs	.+4      	; 0x16d0 <__vector_12+0x80>
	{
		SPDR = DATA_END;
    16cc:	83 e2       	ldi	r24, 0x23	; 35
    16ce:	8f b9       	out	0x0f, r24	; 15
	}
    16d0:	ff 91       	pop	r31
    16d2:	ef 91       	pop	r30
    16d4:	9f 91       	pop	r25
    16d6:	8f 91       	pop	r24
    16d8:	3f 91       	pop	r19
    16da:	2f 91       	pop	r18
    16dc:	0f 90       	pop	r0
    16de:	0f be       	out	0x3f, r0	; 63
    16e0:	0f 90       	pop	r0
    16e2:	1f 90       	pop	r1
    16e4:	18 95       	reti

000016e6 <TIM0_voidInit>:
	else
	{
		return TIM_NOK;
	}
	return TIM_OK;
}
    16e6:	81 30       	cpi	r24, 0x01	; 1
    16e8:	61 f0       	breq	.+24     	; 0x1702 <TIM0_voidInit+0x1c>
    16ea:	28 f0       	brcs	.+10     	; 0x16f6 <TIM0_voidInit+0x10>
    16ec:	82 30       	cpi	r24, 0x02	; 2
    16ee:	29 f0       	breq	.+10     	; 0x16fa <TIM0_voidInit+0x14>
    16f0:	83 30       	cpi	r24, 0x03	; 3
    16f2:	29 f0       	breq	.+10     	; 0x16fe <TIM0_voidInit+0x18>
    16f4:	0f c0       	rjmp	.+30     	; 0x1714 <TIM0_voidInit+0x2e>
    16f6:	20 e0       	ldi	r18, 0x00	; 0
    16f8:	05 c0       	rjmp	.+10     	; 0x1704 <TIM0_voidInit+0x1e>
    16fa:	28 e0       	ldi	r18, 0x08	; 8
    16fc:	03 c0       	rjmp	.+6      	; 0x1704 <TIM0_voidInit+0x1e>
    16fe:	28 e4       	ldi	r18, 0x48	; 72
    1700:	01 c0       	rjmp	.+2      	; 0x1704 <TIM0_voidInit+0x1e>
    1702:	20 e4       	ldi	r18, 0x40	; 64
    1704:	93 b7       	in	r25, 0x33	; 51
    1706:	97 7b       	andi	r25, 0xB7	; 183
    1708:	93 bf       	out	0x33, r25	; 51
    170a:	83 b7       	in	r24, 0x33	; 51
    170c:	82 2b       	or	r24, r18
    170e:	83 bf       	out	0x33, r24	; 51
    1710:	80 e0       	ldi	r24, 0x00	; 0
    1712:	08 95       	ret
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	08 95       	ret

00001718 <TIM0_Start>:
    1718:	9f ef       	ldi	r25, 0xFF	; 255
    171a:	98 0f       	add	r25, r24
    171c:	97 30       	cpi	r25, 0x07	; 7
    171e:	40 f4       	brcc	.+16     	; 0x1730 <TIM0_Start+0x18>
    1720:	93 b7       	in	r25, 0x33	; 51
    1722:	98 7f       	andi	r25, 0xF8	; 248
    1724:	93 bf       	out	0x33, r25	; 51
    1726:	93 b7       	in	r25, 0x33	; 51
    1728:	89 2b       	or	r24, r25
    172a:	83 bf       	out	0x33, r24	; 51
    172c:	80 e0       	ldi	r24, 0x00	; 0
    172e:	08 95       	ret
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	08 95       	ret

00001734 <TIM0_Stop>:
    1734:	83 b7       	in	r24, 0x33	; 51
    1736:	88 7f       	andi	r24, 0xF8	; 248
    1738:	83 bf       	out	0x33, r24	; 51
    173a:	12 be       	out	0x32, r1	; 50
    173c:	88 b7       	in	r24, 0x38	; 56
    173e:	8e 7f       	andi	r24, 0xFE	; 254
    1740:	88 bf       	out	0x38, r24	; 56
    1742:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <u8_gs_OVFCount>
    1746:	08 95       	ret

00001748 <TIM0_SetValue>:
    1748:	82 bf       	out	0x32, r24	; 50
    174a:	08 95       	ret

0000174c <TIM0_GetOVF>:
    174c:	fc 01       	movw	r30, r24
    174e:	89 2b       	or	r24, r25
    1750:	29 f0       	breq	.+10     	; 0x175c <TIM0_GetOVF+0x10>
    1752:	98 b7       	in	r25, 0x38	; 56
    1754:	91 70       	andi	r25, 0x01	; 1
    1756:	90 83       	st	Z, r25
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	08 95       	ret
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	08 95       	ret

00001760 <TIM0_ClearOVF>:
    1760:	88 b7       	in	r24, 0x38	; 56
    1762:	81 60       	ori	r24, 0x01	; 1
    1764:	88 bf       	out	0x38, r24	; 56
    1766:	08 95       	ret

00001768 <TIM0_GetState>:
    1768:	00 97       	sbiw	r24, 0x00	; 0
    176a:	61 f0       	breq	.+24     	; 0x1784 <TIM0_GetState+0x1c>
    176c:	03 b6       	in	r0, 0x33	; 51
    176e:	00 fe       	sbrs	r0, 0
    1770:	05 c0       	rjmp	.+10     	; 0x177c <TIM0_GetState+0x14>
    1772:	21 e0       	ldi	r18, 0x01	; 1
    1774:	fc 01       	movw	r30, r24
    1776:	20 83       	st	Z, r18
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	08 95       	ret
    177c:	fc 01       	movw	r30, r24
    177e:	10 82       	st	Z, r1
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	08 95       	ret
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	08 95       	ret

00001788 <__vector_11>:


/*========================== ISRs =============================*/

ISR(TIM0_OVF_INT)
{
    1788:	1f 92       	push	r1
    178a:	0f 92       	push	r0
    178c:	0f b6       	in	r0, 0x3f	; 63
    178e:	0f 92       	push	r0
    1790:	11 24       	eor	r1, r1
    1792:	2f 93       	push	r18
    1794:	3f 93       	push	r19
    1796:	4f 93       	push	r20
    1798:	5f 93       	push	r21
    179a:	6f 93       	push	r22
    179c:	7f 93       	push	r23
    179e:	8f 93       	push	r24
    17a0:	9f 93       	push	r25
    17a2:	af 93       	push	r26
    17a4:	bf 93       	push	r27
    17a6:	ef 93       	push	r30
    17a8:	ff 93       	push	r31
	if(TIM0_OVFCallbackFn != NULL)
    17aa:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <TIM0_OVFCallbackFn>
    17ae:	90 91 d1 02 	lds	r25, 0x02D1	; 0x8002d1 <TIM0_OVFCallbackFn+0x1>
    17b2:	89 2b       	or	r24, r25
    17b4:	b1 f0       	breq	.+44     	; 0x17e2 <__vector_11+0x5a>
	{
		/* Delay is complete */
		if(u8_gs_OVFCount == u8_g_TotalOVF)
    17b6:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <u8_gs_OVFCount>
    17ba:	90 91 d3 02 	lds	r25, 0x02D3	; 0x8002d3 <u8_g_TotalOVF>
    17be:	89 13       	cpse	r24, r25
    17c0:	0d c0       	rjmp	.+26     	; 0x17dc <__vector_11+0x54>
		{
			/* Stop the timer */
			TIM0_Stop();
    17c2:	0e 94 9a 0b 	call	0x1734	; 0x1734 <TIM0_Stop>
			
			/* Reset the OVF counter */
			u8_gs_OVFCount = 0;
    17c6:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <u8_gs_OVFCount>
			
			/* Disable OVF interrupt */
			CLEAR_BIT(TIMSK, TIMSK_TOIE0);
    17ca:	89 b7       	in	r24, 0x39	; 57
    17cc:	8e 7f       	andi	r24, 0xFE	; 254
    17ce:	89 bf       	out	0x39, r24	; 57
			
			/* Call the Callback function */
			TIM0_OVFCallbackFn();
    17d0:	e0 91 d0 02 	lds	r30, 0x02D0	; 0x8002d0 <TIM0_OVFCallbackFn>
    17d4:	f0 91 d1 02 	lds	r31, 0x02D1	; 0x8002d1 <TIM0_OVFCallbackFn+0x1>
    17d8:	09 95       	icall
    17da:	03 c0       	rjmp	.+6      	; 0x17e2 <__vector_11+0x5a>
		}
		else
		{
			/* Increment the overflow count */
			u8_gs_OVFCount++;
    17dc:	8f 5f       	subi	r24, 0xFF	; 255
    17de:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <u8_gs_OVFCount>
		}
	}
}
    17e2:	ff 91       	pop	r31
    17e4:	ef 91       	pop	r30
    17e6:	bf 91       	pop	r27
    17e8:	af 91       	pop	r26
    17ea:	9f 91       	pop	r25
    17ec:	8f 91       	pop	r24
    17ee:	7f 91       	pop	r23
    17f0:	6f 91       	pop	r22
    17f2:	5f 91       	pop	r21
    17f4:	4f 91       	pop	r20
    17f6:	3f 91       	pop	r19
    17f8:	2f 91       	pop	r18
    17fa:	0f 90       	pop	r0
    17fc:	0f be       	out	0x3f, r0	; 63
    17fe:	0f 90       	pop	r0
    1800:	1f 90       	pop	r1
    1802:	18 95       	reti

00001804 <enuTimer2_init>:
	enu_timerStatus_t errorStatus = TIMER_OK;

	CLEAR_BIT(TIMSK_REG, TOIE2);

	return errorStatus;
}
    1804:	84 30       	cpi	r24, 0x04	; 4
    1806:	40 f5       	brcc	.+80     	; 0x1858 <enuTimer2_init+0x54>
    1808:	81 30       	cpi	r24, 0x01	; 1
    180a:	71 f0       	breq	.+28     	; 0x1828 <enuTimer2_init+0x24>
    180c:	28 f0       	brcs	.+10     	; 0x1818 <enuTimer2_init+0x14>
    180e:	82 30       	cpi	r24, 0x02	; 2
    1810:	99 f0       	breq	.+38     	; 0x1838 <enuTimer2_init+0x34>
    1812:	83 30       	cpi	r24, 0x03	; 3
    1814:	c9 f0       	breq	.+50     	; 0x1848 <enuTimer2_init+0x44>
    1816:	22 c0       	rjmp	.+68     	; 0x185c <enuTimer2_init+0x58>
    1818:	85 b5       	in	r24, 0x25	; 37
    181a:	87 7f       	andi	r24, 0xF7	; 247
    181c:	85 bd       	out	0x25, r24	; 37
    181e:	85 b5       	in	r24, 0x25	; 37
    1820:	8f 7b       	andi	r24, 0xBF	; 191
    1822:	85 bd       	out	0x25, r24	; 37
    1824:	80 e0       	ldi	r24, 0x00	; 0
    1826:	08 95       	ret
    1828:	85 b5       	in	r24, 0x25	; 37
    182a:	87 7f       	andi	r24, 0xF7	; 247
    182c:	85 bd       	out	0x25, r24	; 37
    182e:	85 b5       	in	r24, 0x25	; 37
    1830:	80 64       	ori	r24, 0x40	; 64
    1832:	85 bd       	out	0x25, r24	; 37
    1834:	80 e0       	ldi	r24, 0x00	; 0
    1836:	08 95       	ret
    1838:	85 b5       	in	r24, 0x25	; 37
    183a:	88 60       	ori	r24, 0x08	; 8
    183c:	85 bd       	out	0x25, r24	; 37
    183e:	85 b5       	in	r24, 0x25	; 37
    1840:	8f 7b       	andi	r24, 0xBF	; 191
    1842:	85 bd       	out	0x25, r24	; 37
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	08 95       	ret
    1848:	85 b5       	in	r24, 0x25	; 37
    184a:	88 60       	ori	r24, 0x08	; 8
    184c:	85 bd       	out	0x25, r24	; 37
    184e:	85 b5       	in	r24, 0x25	; 37
    1850:	80 64       	ori	r24, 0x40	; 64
    1852:	85 bd       	out	0x25, r24	; 37
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	08 95       	ret
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	08 95       	ret
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	08 95       	ret

00001860 <u8Timer2_setPrescallar>:
    1860:	88 30       	cpi	r24, 0x08	; 8
    1862:	70 f4       	brcc	.+28     	; 0x1880 <u8Timer2_setPrescallar+0x20>
    1864:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <global_prescaller>
    1868:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <global_timerStatus>
    186c:	91 30       	cpi	r25, 0x01	; 1
    186e:	51 f4       	brne	.+20     	; 0x1884 <u8Timer2_setPrescallar+0x24>
    1870:	95 b5       	in	r25, 0x25	; 37
    1872:	98 7f       	andi	r25, 0xF8	; 248
    1874:	89 2b       	or	r24, r25
    1876:	95 b5       	in	r25, 0x25	; 37
    1878:	89 2b       	or	r24, r25
    187a:	85 bd       	out	0x25, r24	; 37
    187c:	80 e0       	ldi	r24, 0x00	; 0
    187e:	08 95       	ret
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	08 95       	ret
    1884:	80 e0       	ldi	r24, 0x00	; 0
    1886:	08 95       	ret

00001888 <vidTimer2_OvfIrqEnable>:
    1888:	89 b7       	in	r24, 0x39	; 57
    188a:	80 64       	ori	r24, 0x40	; 64
    188c:	89 bf       	out	0x39, r24	; 57
    188e:	8f b7       	in	r24, 0x3f	; 63
    1890:	80 68       	ori	r24, 0x80	; 128
    1892:	8f bf       	out	0x3f, r24	; 63
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	08 95       	ret

00001898 <vidTimer2_start>:
/*************************************************************************************************************/
enu_timerStatus_t vidTimer2_start(void)
{
	enu_timerStatus_t errorStatus = TIMER_OK;

	TCCR2_REG |=  global_prescaller << PRESCALLER_OFFSET;
    1898:	95 b5       	in	r25, 0x25	; 37
    189a:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <global_prescaller>
    189e:	89 2b       	or	r24, r25
    18a0:	85 bd       	out	0x25, r24	; 37
	global_timerStatus  = RUNNING;
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <global_timerStatus>

	return errorStatus;
}
    18a8:	80 e0       	ldi	r24, 0x00	; 0
    18aa:	08 95       	ret

000018ac <vidTimer2_stop>:
/*************************************************************************************************************/
enu_timerStatus_t vidTimer2_stop(void)
{
	enu_timerStatus_t errorStatus = TIMER_OK;

	TCCR2_REG &=  PRESCALLER_CLR_MSK;
    18ac:	85 b5       	in	r24, 0x25	; 37
    18ae:	88 7f       	andi	r24, 0xF8	; 248
    18b0:	85 bd       	out	0x25, r24	; 37
	global_timerStatus = STOPPED;
    18b2:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <global_timerStatus>

	return errorStatus;
}
    18b6:	80 e0       	ldi	r24, 0x00	; 0
    18b8:	08 95       	ret

000018ba <u8Timer2_setTime_ms>:
/*************************************************************************************************************/
enu_timerStatus_t u8Timer2_setTime_ms(Uint32_t u32_time_ms)
{
    18ba:	8f 92       	push	r8
    18bc:	9f 92       	push	r9
    18be:	af 92       	push	r10
    18c0:	bf 92       	push	r11
    18c2:	cf 92       	push	r12
    18c4:	df 92       	push	r13
    18c6:	ef 92       	push	r14
    18c8:	ff 92       	push	r15
	enu_timerStatus_t errorStatus = TIMER_OK;
	Uint32_t desired_ticks;
	float32_t tick_time_ms;
	if( u32_time_ms < MAX_TIM_MS )
    18ca:	68 38       	cpi	r22, 0x88	; 136
    18cc:	23 e1       	ldi	r18, 0x13	; 19
    18ce:	72 07       	cpc	r23, r18
    18d0:	81 05       	cpc	r24, r1
    18d2:	91 05       	cpc	r25, r1
    18d4:	08 f0       	brcs	.+2      	; 0x18d8 <u8Timer2_setTime_ms+0x1e>
    18d6:	60 c0       	rjmp	.+192    	; 0x1998 <u8Timer2_setTime_ms+0xde>
    18d8:	6b 01       	movw	r12, r22
    18da:	7c 01       	movw	r14, r24
	{
		tick_time_ms = (float32_t)prescaller_map[global_prescaller] / ((Uint32_t)F_CPU / 1000U)  ;
    18dc:	e0 91 db 02 	lds	r30, 0x02DB	; 0x8002db <global_prescaller>
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	ee 0f       	add	r30, r30
    18e4:	ff 1f       	adc	r31, r31
    18e6:	ee 55       	subi	r30, 0x5E	; 94
    18e8:	fd 4f       	sbci	r31, 0xFD	; 253
    18ea:	60 81       	ld	r22, Z
    18ec:	71 81       	ldd	r23, Z+1	; 0x01
    18ee:	80 e0       	ldi	r24, 0x00	; 0
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <__floatunsisf>
    18f6:	20 e0       	ldi	r18, 0x00	; 0
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	4a ef       	ldi	r20, 0xFA	; 250
    18fc:	55 e4       	ldi	r21, 0x45	; 69
    18fe:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__divsf3>
    1902:	4b 01       	movw	r8, r22
    1904:	5c 01       	movw	r10, r24
		desired_ticks = u32_time_ms / tick_time_ms;
    1906:	c7 01       	movw	r24, r14
    1908:	b6 01       	movw	r22, r12
    190a:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <__floatunsisf>
    190e:	a5 01       	movw	r20, r10
    1910:	94 01       	movw	r18, r8
    1912:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__divsf3>
    1916:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <__fixunssfsi>

		/* Compare ticks with OVF_ticks */
		if(desired_ticks == OVF_TICKS)
    191a:	61 15       	cp	r22, r1
    191c:	21 e0       	ldi	r18, 0x01	; 1
    191e:	72 07       	cpc	r23, r18
    1920:	81 05       	cpc	r24, r1
    1922:	91 05       	cpc	r25, r1
    1924:	29 f4       	brne	.+10     	; 0x1930 <u8Timer2_setTime_ms+0x76>
		{
			global_ovf = 1;
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <global_ovf>
	return errorStatus;
}
/*************************************************************************************************************/
enu_timerStatus_t u8Timer2_setTime_ms(Uint32_t u32_time_ms)
{
	enu_timerStatus_t errorStatus = TIMER_OK;
    192c:	80 e0       	ldi	r24, 0x00	; 0
    192e:	39 c0       	rjmp	.+114    	; 0x19a2 <u8Timer2_setTime_ms+0xe8>
		/* Compare ticks with OVF_ticks */
		if(desired_ticks == OVF_TICKS)
		{
			global_ovf = 1;
		}
		else if(desired_ticks < OVF_TICKS)
    1930:	6f 3f       	cpi	r22, 0xFF	; 255
    1932:	71 05       	cpc	r23, r1
    1934:	81 05       	cpc	r24, r1
    1936:	91 05       	cpc	r25, r1
    1938:	09 f0       	breq	.+2      	; 0x193c <u8Timer2_setTime_ms+0x82>
    193a:	78 f4       	brcc	.+30     	; 0x195a <u8Timer2_setTime_ms+0xa0>
		{
			preload = OVF_TICKS - desired_ticks;
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	31 e0       	ldi	r19, 0x01	; 1
    1940:	c9 01       	movw	r24, r18
    1942:	86 1b       	sub	r24, r22
    1944:	97 0b       	sbc	r25, r23
    1946:	90 93 d8 02 	sts	0x02D8, r25	; 0x8002d8 <preload+0x1>
    194a:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <preload>
			TCNT2_REG = preload;
    194e:	84 bd       	out	0x24, r24	; 36
			global_ovf = 1;
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <global_ovf>
	return errorStatus;
}
/*************************************************************************************************************/
enu_timerStatus_t u8Timer2_setTime_ms(Uint32_t u32_time_ms)
{
	enu_timerStatus_t errorStatus = TIMER_OK;
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	24 c0       	rjmp	.+72     	; 0x19a2 <u8Timer2_setTime_ms+0xe8>
		{
			preload = OVF_TICKS - desired_ticks;
			TCNT2_REG = preload;
			global_ovf = 1;
		}
		else if(desired_ticks > OVF_TICKS)
    195a:	61 30       	cpi	r22, 0x01	; 1
    195c:	21 e0       	ldi	r18, 0x01	; 1
    195e:	72 07       	cpc	r23, r18
    1960:	81 05       	cpc	r24, r1
    1962:	91 05       	cpc	r25, r1
    1964:	d8 f0       	brcs	.+54     	; 0x199c <u8Timer2_setTime_ms+0xe2>
		{
			global_ovf = (Uchar8_t)(desired_ticks / OVF_TICKS);
    1966:	70 93 d9 02 	sts	0x02D9, r23	; 0x8002d9 <global_ovf>
			preload = (uint16_t)(OVF_TICKS - (desired_ticks % OVF_TICKS ));
    196a:	77 27       	eor	r23, r23
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	91 e0       	ldi	r25, 0x01	; 1
    1970:	86 1b       	sub	r24, r22
    1972:	97 0b       	sbc	r25, r23
    1974:	90 93 d8 02 	sts	0x02D8, r25	; 0x8002d8 <preload+0x1>
    1978:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <preload>
			TCNT2_REG = preload;
    197c:	84 bd       	out	0x24, r24	; 36
			if (preload > 0U)
    197e:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <preload>
    1982:	90 91 d8 02 	lds	r25, 0x02D8	; 0x8002d8 <preload+0x1>
    1986:	89 2b       	or	r24, r25
    1988:	59 f0       	breq	.+22     	; 0x19a0 <u8Timer2_setTime_ms+0xe6>
			{
				global_ovf++;
    198a:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <global_ovf>
    198e:	8f 5f       	subi	r24, 0xFF	; 255
    1990:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <global_ovf>
	return errorStatus;
}
/*************************************************************************************************************/
enu_timerStatus_t u8Timer2_setTime_ms(Uint32_t u32_time_ms)
{
	enu_timerStatus_t errorStatus = TIMER_OK;
    1994:	80 e0       	ldi	r24, 0x00	; 0
    1996:	05 c0       	rjmp	.+10     	; 0x19a2 <u8Timer2_setTime_ms+0xe8>
			}
		}
	}
		else
		{
			errorStatus = TIMER_NOK;
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	03 c0       	rjmp	.+6      	; 0x19a2 <u8Timer2_setTime_ms+0xe8>
	return errorStatus;
}
/*************************************************************************************************************/
enu_timerStatus_t u8Timer2_setTime_ms(Uint32_t u32_time_ms)
{
	enu_timerStatus_t errorStatus = TIMER_OK;
    199c:	80 e0       	ldi	r24, 0x00	; 0
    199e:	01 c0       	rjmp	.+2      	; 0x19a2 <u8Timer2_setTime_ms+0xe8>
    19a0:	80 e0       	ldi	r24, 0x00	; 0
			errorStatus = TIMER_NOK;
		}


		return errorStatus;
	}
    19a2:	ff 90       	pop	r15
    19a4:	ef 90       	pop	r14
    19a6:	df 90       	pop	r13
    19a8:	cf 90       	pop	r12
    19aa:	bf 90       	pop	r11
    19ac:	af 90       	pop	r10
    19ae:	9f 90       	pop	r9
    19b0:	8f 90       	pop	r8
    19b2:	08 95       	ret

000019b4 <vidTimer2_setcbf_OVF>:

/*************************************************************************************************************/
void vidTimer2_setcbf_OVF(cbf_t cbf)
{
	if (cbf != NULL)
    19b4:	00 97       	sbiw	r24, 0x00	; 0
    19b6:	21 f0       	breq	.+8      	; 0x19c0 <vidTimer2_setcbf_OVF+0xc>
	{
		globalCallFunc = cbf;
    19b8:	90 93 d6 02 	sts	0x02D6, r25	; 0x8002d6 <globalCallFunc+0x1>
    19bc:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <globalCallFunc>
    19c0:	08 95       	ret

000019c2 <__vector_5>:

/*************************************************************************************************************
 * 							ISR Interrupt Handling
 ************************************************************************************************************/
ISR(TIMER2_OVF_vect)
{
    19c2:	1f 92       	push	r1
    19c4:	0f 92       	push	r0
    19c6:	0f b6       	in	r0, 0x3f	; 63
    19c8:	0f 92       	push	r0
    19ca:	11 24       	eor	r1, r1
    19cc:	2f 93       	push	r18
    19ce:	3f 93       	push	r19
    19d0:	4f 93       	push	r20
    19d2:	5f 93       	push	r21
    19d4:	6f 93       	push	r22
    19d6:	7f 93       	push	r23
    19d8:	8f 93       	push	r24
    19da:	9f 93       	push	r25
    19dc:	af 93       	push	r26
    19de:	bf 93       	push	r27
    19e0:	ef 93       	push	r30
    19e2:	ff 93       	push	r31
	static Uchar8_t counter = 0;
	counter++;
    19e4:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <counter.1731>
    19e8:	8f 5f       	subi	r24, 0xFF	; 255
    19ea:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <counter.1731>
	if(counter == global_ovf)
    19ee:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <global_ovf>
    19f2:	89 13       	cpse	r24, r25
    19f4:	0c c0       	rjmp	.+24     	; 0x1a0e <__vector_5+0x4c>
	{
		if (globalCallFunc != NULL)
    19f6:	e0 91 d5 02 	lds	r30, 0x02D5	; 0x8002d5 <globalCallFunc>
    19fa:	f0 91 d6 02 	lds	r31, 0x02D6	; 0x8002d6 <globalCallFunc+0x1>
    19fe:	30 97       	sbiw	r30, 0x00	; 0
    1a00:	31 f0       	breq	.+12     	; 0x1a0e <__vector_5+0x4c>
		{
			counter = 0;
    1a02:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <counter.1731>

			globalCallFunc();
    1a06:	09 95       	icall
			TCNT2_REG = preload;
    1a08:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <preload>
    1a0c:	84 bd       	out	0x24, r24	; 36
//			global_ovf = 0;
//			vidTimer1_stop();
		}
	}
}
    1a0e:	ff 91       	pop	r31
    1a10:	ef 91       	pop	r30
    1a12:	bf 91       	pop	r27
    1a14:	af 91       	pop	r26
    1a16:	9f 91       	pop	r25
    1a18:	8f 91       	pop	r24
    1a1a:	7f 91       	pop	r23
    1a1c:	6f 91       	pop	r22
    1a1e:	5f 91       	pop	r21
    1a20:	4f 91       	pop	r20
    1a22:	3f 91       	pop	r19
    1a24:	2f 91       	pop	r18
    1a26:	0f 90       	pop	r0
    1a28:	0f be       	out	0x3f, r0	; 63
    1a2a:	0f 90       	pop	r0
    1a2c:	1f 90       	pop	r1
    1a2e:	18 95       	reti

00001a30 <__subsf3>:
    1a30:	50 58       	subi	r21, 0x80	; 128

00001a32 <__addsf3>:
    1a32:	bb 27       	eor	r27, r27
    1a34:	aa 27       	eor	r26, r26
    1a36:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__addsf3x>
    1a3a:	0c 94 a3 0e 	jmp	0x1d46	; 0x1d46 <__fp_round>
    1a3e:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <__fp_pscA>
    1a42:	38 f0       	brcs	.+14     	; 0x1a52 <__addsf3+0x20>
    1a44:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__fp_pscB>
    1a48:	20 f0       	brcs	.+8      	; 0x1a52 <__addsf3+0x20>
    1a4a:	39 f4       	brne	.+14     	; 0x1a5a <__addsf3+0x28>
    1a4c:	9f 3f       	cpi	r25, 0xFF	; 255
    1a4e:	19 f4       	brne	.+6      	; 0x1a56 <__addsf3+0x24>
    1a50:	26 f4       	brtc	.+8      	; 0x1a5a <__addsf3+0x28>
    1a52:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <__fp_nan>
    1a56:	0e f4       	brtc	.+2      	; 0x1a5a <__addsf3+0x28>
    1a58:	e0 95       	com	r30
    1a5a:	e7 fb       	bst	r30, 7
    1a5c:	0c 94 8c 0e 	jmp	0x1d18	; 0x1d18 <__fp_inf>

00001a60 <__addsf3x>:
    1a60:	e9 2f       	mov	r30, r25
    1a62:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <__fp_split3>
    1a66:	58 f3       	brcs	.-42     	; 0x1a3e <__addsf3+0xc>
    1a68:	ba 17       	cp	r27, r26
    1a6a:	62 07       	cpc	r22, r18
    1a6c:	73 07       	cpc	r23, r19
    1a6e:	84 07       	cpc	r24, r20
    1a70:	95 07       	cpc	r25, r21
    1a72:	20 f0       	brcs	.+8      	; 0x1a7c <__addsf3x+0x1c>
    1a74:	79 f4       	brne	.+30     	; 0x1a94 <__addsf3x+0x34>
    1a76:	a6 f5       	brtc	.+104    	; 0x1ae0 <__addsf3x+0x80>
    1a78:	0c 94 d6 0e 	jmp	0x1dac	; 0x1dac <__fp_zero>
    1a7c:	0e f4       	brtc	.+2      	; 0x1a80 <__addsf3x+0x20>
    1a7e:	e0 95       	com	r30
    1a80:	0b 2e       	mov	r0, r27
    1a82:	ba 2f       	mov	r27, r26
    1a84:	a0 2d       	mov	r26, r0
    1a86:	0b 01       	movw	r0, r22
    1a88:	b9 01       	movw	r22, r18
    1a8a:	90 01       	movw	r18, r0
    1a8c:	0c 01       	movw	r0, r24
    1a8e:	ca 01       	movw	r24, r20
    1a90:	a0 01       	movw	r20, r0
    1a92:	11 24       	eor	r1, r1
    1a94:	ff 27       	eor	r31, r31
    1a96:	59 1b       	sub	r21, r25
    1a98:	99 f0       	breq	.+38     	; 0x1ac0 <__addsf3x+0x60>
    1a9a:	59 3f       	cpi	r21, 0xF9	; 249
    1a9c:	50 f4       	brcc	.+20     	; 0x1ab2 <__addsf3x+0x52>
    1a9e:	50 3e       	cpi	r21, 0xE0	; 224
    1aa0:	68 f1       	brcs	.+90     	; 0x1afc <__addsf3x+0x9c>
    1aa2:	1a 16       	cp	r1, r26
    1aa4:	f0 40       	sbci	r31, 0x00	; 0
    1aa6:	a2 2f       	mov	r26, r18
    1aa8:	23 2f       	mov	r18, r19
    1aaa:	34 2f       	mov	r19, r20
    1aac:	44 27       	eor	r20, r20
    1aae:	58 5f       	subi	r21, 0xF8	; 248
    1ab0:	f3 cf       	rjmp	.-26     	; 0x1a98 <__addsf3x+0x38>
    1ab2:	46 95       	lsr	r20
    1ab4:	37 95       	ror	r19
    1ab6:	27 95       	ror	r18
    1ab8:	a7 95       	ror	r26
    1aba:	f0 40       	sbci	r31, 0x00	; 0
    1abc:	53 95       	inc	r21
    1abe:	c9 f7       	brne	.-14     	; 0x1ab2 <__addsf3x+0x52>
    1ac0:	7e f4       	brtc	.+30     	; 0x1ae0 <__addsf3x+0x80>
    1ac2:	1f 16       	cp	r1, r31
    1ac4:	ba 0b       	sbc	r27, r26
    1ac6:	62 0b       	sbc	r22, r18
    1ac8:	73 0b       	sbc	r23, r19
    1aca:	84 0b       	sbc	r24, r20
    1acc:	ba f0       	brmi	.+46     	; 0x1afc <__addsf3x+0x9c>
    1ace:	91 50       	subi	r25, 0x01	; 1
    1ad0:	a1 f0       	breq	.+40     	; 0x1afa <__addsf3x+0x9a>
    1ad2:	ff 0f       	add	r31, r31
    1ad4:	bb 1f       	adc	r27, r27
    1ad6:	66 1f       	adc	r22, r22
    1ad8:	77 1f       	adc	r23, r23
    1ada:	88 1f       	adc	r24, r24
    1adc:	c2 f7       	brpl	.-16     	; 0x1ace <__addsf3x+0x6e>
    1ade:	0e c0       	rjmp	.+28     	; 0x1afc <__addsf3x+0x9c>
    1ae0:	ba 0f       	add	r27, r26
    1ae2:	62 1f       	adc	r22, r18
    1ae4:	73 1f       	adc	r23, r19
    1ae6:	84 1f       	adc	r24, r20
    1ae8:	48 f4       	brcc	.+18     	; 0x1afc <__addsf3x+0x9c>
    1aea:	87 95       	ror	r24
    1aec:	77 95       	ror	r23
    1aee:	67 95       	ror	r22
    1af0:	b7 95       	ror	r27
    1af2:	f7 95       	ror	r31
    1af4:	9e 3f       	cpi	r25, 0xFE	; 254
    1af6:	08 f0       	brcs	.+2      	; 0x1afa <__addsf3x+0x9a>
    1af8:	b0 cf       	rjmp	.-160    	; 0x1a5a <__addsf3+0x28>
    1afa:	93 95       	inc	r25
    1afc:	88 0f       	add	r24, r24
    1afe:	08 f0       	brcs	.+2      	; 0x1b02 <__addsf3x+0xa2>
    1b00:	99 27       	eor	r25, r25
    1b02:	ee 0f       	add	r30, r30
    1b04:	97 95       	ror	r25
    1b06:	87 95       	ror	r24
    1b08:	08 95       	ret

00001b0a <__cmpsf2>:
    1b0a:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <__fp_cmp>
    1b0e:	08 f4       	brcc	.+2      	; 0x1b12 <__cmpsf2+0x8>
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	08 95       	ret

00001b14 <__divsf3>:
    1b14:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__divsf3x>
    1b18:	0c 94 a3 0e 	jmp	0x1d46	; 0x1d46 <__fp_round>
    1b1c:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__fp_pscB>
    1b20:	58 f0       	brcs	.+22     	; 0x1b38 <__divsf3+0x24>
    1b22:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <__fp_pscA>
    1b26:	40 f0       	brcs	.+16     	; 0x1b38 <__divsf3+0x24>
    1b28:	29 f4       	brne	.+10     	; 0x1b34 <__divsf3+0x20>
    1b2a:	5f 3f       	cpi	r21, 0xFF	; 255
    1b2c:	29 f0       	breq	.+10     	; 0x1b38 <__divsf3+0x24>
    1b2e:	0c 94 8c 0e 	jmp	0x1d18	; 0x1d18 <__fp_inf>
    1b32:	51 11       	cpse	r21, r1
    1b34:	0c 94 d7 0e 	jmp	0x1dae	; 0x1dae <__fp_szero>
    1b38:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <__fp_nan>

00001b3c <__divsf3x>:
    1b3c:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <__fp_split3>
    1b40:	68 f3       	brcs	.-38     	; 0x1b1c <__divsf3+0x8>

00001b42 <__divsf3_pse>:
    1b42:	99 23       	and	r25, r25
    1b44:	b1 f3       	breq	.-20     	; 0x1b32 <__divsf3+0x1e>
    1b46:	55 23       	and	r21, r21
    1b48:	91 f3       	breq	.-28     	; 0x1b2e <__divsf3+0x1a>
    1b4a:	95 1b       	sub	r25, r21
    1b4c:	55 0b       	sbc	r21, r21
    1b4e:	bb 27       	eor	r27, r27
    1b50:	aa 27       	eor	r26, r26
    1b52:	62 17       	cp	r22, r18
    1b54:	73 07       	cpc	r23, r19
    1b56:	84 07       	cpc	r24, r20
    1b58:	38 f0       	brcs	.+14     	; 0x1b68 <__divsf3_pse+0x26>
    1b5a:	9f 5f       	subi	r25, 0xFF	; 255
    1b5c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b5e:	22 0f       	add	r18, r18
    1b60:	33 1f       	adc	r19, r19
    1b62:	44 1f       	adc	r20, r20
    1b64:	aa 1f       	adc	r26, r26
    1b66:	a9 f3       	breq	.-22     	; 0x1b52 <__divsf3_pse+0x10>
    1b68:	35 d0       	rcall	.+106    	; 0x1bd4 <__divsf3_pse+0x92>
    1b6a:	0e 2e       	mov	r0, r30
    1b6c:	3a f0       	brmi	.+14     	; 0x1b7c <__divsf3_pse+0x3a>
    1b6e:	e0 e8       	ldi	r30, 0x80	; 128
    1b70:	32 d0       	rcall	.+100    	; 0x1bd6 <__divsf3_pse+0x94>
    1b72:	91 50       	subi	r25, 0x01	; 1
    1b74:	50 40       	sbci	r21, 0x00	; 0
    1b76:	e6 95       	lsr	r30
    1b78:	00 1c       	adc	r0, r0
    1b7a:	ca f7       	brpl	.-14     	; 0x1b6e <__divsf3_pse+0x2c>
    1b7c:	2b d0       	rcall	.+86     	; 0x1bd4 <__divsf3_pse+0x92>
    1b7e:	fe 2f       	mov	r31, r30
    1b80:	29 d0       	rcall	.+82     	; 0x1bd4 <__divsf3_pse+0x92>
    1b82:	66 0f       	add	r22, r22
    1b84:	77 1f       	adc	r23, r23
    1b86:	88 1f       	adc	r24, r24
    1b88:	bb 1f       	adc	r27, r27
    1b8a:	26 17       	cp	r18, r22
    1b8c:	37 07       	cpc	r19, r23
    1b8e:	48 07       	cpc	r20, r24
    1b90:	ab 07       	cpc	r26, r27
    1b92:	b0 e8       	ldi	r27, 0x80	; 128
    1b94:	09 f0       	breq	.+2      	; 0x1b98 <__divsf3_pse+0x56>
    1b96:	bb 0b       	sbc	r27, r27
    1b98:	80 2d       	mov	r24, r0
    1b9a:	bf 01       	movw	r22, r30
    1b9c:	ff 27       	eor	r31, r31
    1b9e:	93 58       	subi	r25, 0x83	; 131
    1ba0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ba2:	3a f0       	brmi	.+14     	; 0x1bb2 <__divsf3_pse+0x70>
    1ba4:	9e 3f       	cpi	r25, 0xFE	; 254
    1ba6:	51 05       	cpc	r21, r1
    1ba8:	78 f0       	brcs	.+30     	; 0x1bc8 <__divsf3_pse+0x86>
    1baa:	0c 94 8c 0e 	jmp	0x1d18	; 0x1d18 <__fp_inf>
    1bae:	0c 94 d7 0e 	jmp	0x1dae	; 0x1dae <__fp_szero>
    1bb2:	5f 3f       	cpi	r21, 0xFF	; 255
    1bb4:	e4 f3       	brlt	.-8      	; 0x1bae <__divsf3_pse+0x6c>
    1bb6:	98 3e       	cpi	r25, 0xE8	; 232
    1bb8:	d4 f3       	brlt	.-12     	; 0x1bae <__divsf3_pse+0x6c>
    1bba:	86 95       	lsr	r24
    1bbc:	77 95       	ror	r23
    1bbe:	67 95       	ror	r22
    1bc0:	b7 95       	ror	r27
    1bc2:	f7 95       	ror	r31
    1bc4:	9f 5f       	subi	r25, 0xFF	; 255
    1bc6:	c9 f7       	brne	.-14     	; 0x1bba <__divsf3_pse+0x78>
    1bc8:	88 0f       	add	r24, r24
    1bca:	91 1d       	adc	r25, r1
    1bcc:	96 95       	lsr	r25
    1bce:	87 95       	ror	r24
    1bd0:	97 f9       	bld	r25, 7
    1bd2:	08 95       	ret
    1bd4:	e1 e0       	ldi	r30, 0x01	; 1
    1bd6:	66 0f       	add	r22, r22
    1bd8:	77 1f       	adc	r23, r23
    1bda:	88 1f       	adc	r24, r24
    1bdc:	bb 1f       	adc	r27, r27
    1bde:	62 17       	cp	r22, r18
    1be0:	73 07       	cpc	r23, r19
    1be2:	84 07       	cpc	r24, r20
    1be4:	ba 07       	cpc	r27, r26
    1be6:	20 f0       	brcs	.+8      	; 0x1bf0 <__divsf3_pse+0xae>
    1be8:	62 1b       	sub	r22, r18
    1bea:	73 0b       	sbc	r23, r19
    1bec:	84 0b       	sbc	r24, r20
    1bee:	ba 0b       	sbc	r27, r26
    1bf0:	ee 1f       	adc	r30, r30
    1bf2:	88 f7       	brcc	.-30     	; 0x1bd6 <__divsf3_pse+0x94>
    1bf4:	e0 95       	com	r30
    1bf6:	08 95       	ret

00001bf8 <__fixunssfsi>:
    1bf8:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <__fp_splitA>
    1bfc:	88 f0       	brcs	.+34     	; 0x1c20 <__fixunssfsi+0x28>
    1bfe:	9f 57       	subi	r25, 0x7F	; 127
    1c00:	98 f0       	brcs	.+38     	; 0x1c28 <__fixunssfsi+0x30>
    1c02:	b9 2f       	mov	r27, r25
    1c04:	99 27       	eor	r25, r25
    1c06:	b7 51       	subi	r27, 0x17	; 23
    1c08:	b0 f0       	brcs	.+44     	; 0x1c36 <__fixunssfsi+0x3e>
    1c0a:	e1 f0       	breq	.+56     	; 0x1c44 <__fixunssfsi+0x4c>
    1c0c:	66 0f       	add	r22, r22
    1c0e:	77 1f       	adc	r23, r23
    1c10:	88 1f       	adc	r24, r24
    1c12:	99 1f       	adc	r25, r25
    1c14:	1a f0       	brmi	.+6      	; 0x1c1c <__fixunssfsi+0x24>
    1c16:	ba 95       	dec	r27
    1c18:	c9 f7       	brne	.-14     	; 0x1c0c <__fixunssfsi+0x14>
    1c1a:	14 c0       	rjmp	.+40     	; 0x1c44 <__fixunssfsi+0x4c>
    1c1c:	b1 30       	cpi	r27, 0x01	; 1
    1c1e:	91 f0       	breq	.+36     	; 0x1c44 <__fixunssfsi+0x4c>
    1c20:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <__fp_zero>
    1c24:	b1 e0       	ldi	r27, 0x01	; 1
    1c26:	08 95       	ret
    1c28:	0c 94 d6 0e 	jmp	0x1dac	; 0x1dac <__fp_zero>
    1c2c:	67 2f       	mov	r22, r23
    1c2e:	78 2f       	mov	r23, r24
    1c30:	88 27       	eor	r24, r24
    1c32:	b8 5f       	subi	r27, 0xF8	; 248
    1c34:	39 f0       	breq	.+14     	; 0x1c44 <__fixunssfsi+0x4c>
    1c36:	b9 3f       	cpi	r27, 0xF9	; 249
    1c38:	cc f3       	brlt	.-14     	; 0x1c2c <__fixunssfsi+0x34>
    1c3a:	86 95       	lsr	r24
    1c3c:	77 95       	ror	r23
    1c3e:	67 95       	ror	r22
    1c40:	b3 95       	inc	r27
    1c42:	d9 f7       	brne	.-10     	; 0x1c3a <__fixunssfsi+0x42>
    1c44:	3e f4       	brtc	.+14     	; 0x1c54 <__fixunssfsi+0x5c>
    1c46:	90 95       	com	r25
    1c48:	80 95       	com	r24
    1c4a:	70 95       	com	r23
    1c4c:	61 95       	neg	r22
    1c4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c50:	8f 4f       	sbci	r24, 0xFF	; 255
    1c52:	9f 4f       	sbci	r25, 0xFF	; 255
    1c54:	08 95       	ret

00001c56 <__floatunsisf>:
    1c56:	e8 94       	clt
    1c58:	09 c0       	rjmp	.+18     	; 0x1c6c <__floatsisf+0x12>

00001c5a <__floatsisf>:
    1c5a:	97 fb       	bst	r25, 7
    1c5c:	3e f4       	brtc	.+14     	; 0x1c6c <__floatsisf+0x12>
    1c5e:	90 95       	com	r25
    1c60:	80 95       	com	r24
    1c62:	70 95       	com	r23
    1c64:	61 95       	neg	r22
    1c66:	7f 4f       	sbci	r23, 0xFF	; 255
    1c68:	8f 4f       	sbci	r24, 0xFF	; 255
    1c6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c6c:	99 23       	and	r25, r25
    1c6e:	a9 f0       	breq	.+42     	; 0x1c9a <__floatsisf+0x40>
    1c70:	f9 2f       	mov	r31, r25
    1c72:	96 e9       	ldi	r25, 0x96	; 150
    1c74:	bb 27       	eor	r27, r27
    1c76:	93 95       	inc	r25
    1c78:	f6 95       	lsr	r31
    1c7a:	87 95       	ror	r24
    1c7c:	77 95       	ror	r23
    1c7e:	67 95       	ror	r22
    1c80:	b7 95       	ror	r27
    1c82:	f1 11       	cpse	r31, r1
    1c84:	f8 cf       	rjmp	.-16     	; 0x1c76 <__floatsisf+0x1c>
    1c86:	fa f4       	brpl	.+62     	; 0x1cc6 <__floatsisf+0x6c>
    1c88:	bb 0f       	add	r27, r27
    1c8a:	11 f4       	brne	.+4      	; 0x1c90 <__floatsisf+0x36>
    1c8c:	60 ff       	sbrs	r22, 0
    1c8e:	1b c0       	rjmp	.+54     	; 0x1cc6 <__floatsisf+0x6c>
    1c90:	6f 5f       	subi	r22, 0xFF	; 255
    1c92:	7f 4f       	sbci	r23, 0xFF	; 255
    1c94:	8f 4f       	sbci	r24, 0xFF	; 255
    1c96:	9f 4f       	sbci	r25, 0xFF	; 255
    1c98:	16 c0       	rjmp	.+44     	; 0x1cc6 <__floatsisf+0x6c>
    1c9a:	88 23       	and	r24, r24
    1c9c:	11 f0       	breq	.+4      	; 0x1ca2 <__floatsisf+0x48>
    1c9e:	96 e9       	ldi	r25, 0x96	; 150
    1ca0:	11 c0       	rjmp	.+34     	; 0x1cc4 <__floatsisf+0x6a>
    1ca2:	77 23       	and	r23, r23
    1ca4:	21 f0       	breq	.+8      	; 0x1cae <__floatsisf+0x54>
    1ca6:	9e e8       	ldi	r25, 0x8E	; 142
    1ca8:	87 2f       	mov	r24, r23
    1caa:	76 2f       	mov	r23, r22
    1cac:	05 c0       	rjmp	.+10     	; 0x1cb8 <__floatsisf+0x5e>
    1cae:	66 23       	and	r22, r22
    1cb0:	71 f0       	breq	.+28     	; 0x1cce <__floatsisf+0x74>
    1cb2:	96 e8       	ldi	r25, 0x86	; 134
    1cb4:	86 2f       	mov	r24, r22
    1cb6:	70 e0       	ldi	r23, 0x00	; 0
    1cb8:	60 e0       	ldi	r22, 0x00	; 0
    1cba:	2a f0       	brmi	.+10     	; 0x1cc6 <__floatsisf+0x6c>
    1cbc:	9a 95       	dec	r25
    1cbe:	66 0f       	add	r22, r22
    1cc0:	77 1f       	adc	r23, r23
    1cc2:	88 1f       	adc	r24, r24
    1cc4:	da f7       	brpl	.-10     	; 0x1cbc <__floatsisf+0x62>
    1cc6:	88 0f       	add	r24, r24
    1cc8:	96 95       	lsr	r25
    1cca:	87 95       	ror	r24
    1ccc:	97 f9       	bld	r25, 7
    1cce:	08 95       	ret

00001cd0 <__fp_cmp>:
    1cd0:	99 0f       	add	r25, r25
    1cd2:	00 08       	sbc	r0, r0
    1cd4:	55 0f       	add	r21, r21
    1cd6:	aa 0b       	sbc	r26, r26
    1cd8:	e0 e8       	ldi	r30, 0x80	; 128
    1cda:	fe ef       	ldi	r31, 0xFE	; 254
    1cdc:	16 16       	cp	r1, r22
    1cde:	17 06       	cpc	r1, r23
    1ce0:	e8 07       	cpc	r30, r24
    1ce2:	f9 07       	cpc	r31, r25
    1ce4:	c0 f0       	brcs	.+48     	; 0x1d16 <__fp_cmp+0x46>
    1ce6:	12 16       	cp	r1, r18
    1ce8:	13 06       	cpc	r1, r19
    1cea:	e4 07       	cpc	r30, r20
    1cec:	f5 07       	cpc	r31, r21
    1cee:	98 f0       	brcs	.+38     	; 0x1d16 <__fp_cmp+0x46>
    1cf0:	62 1b       	sub	r22, r18
    1cf2:	73 0b       	sbc	r23, r19
    1cf4:	84 0b       	sbc	r24, r20
    1cf6:	95 0b       	sbc	r25, r21
    1cf8:	39 f4       	brne	.+14     	; 0x1d08 <__fp_cmp+0x38>
    1cfa:	0a 26       	eor	r0, r26
    1cfc:	61 f0       	breq	.+24     	; 0x1d16 <__fp_cmp+0x46>
    1cfe:	23 2b       	or	r18, r19
    1d00:	24 2b       	or	r18, r20
    1d02:	25 2b       	or	r18, r21
    1d04:	21 f4       	brne	.+8      	; 0x1d0e <__fp_cmp+0x3e>
    1d06:	08 95       	ret
    1d08:	0a 26       	eor	r0, r26
    1d0a:	09 f4       	brne	.+2      	; 0x1d0e <__fp_cmp+0x3e>
    1d0c:	a1 40       	sbci	r26, 0x01	; 1
    1d0e:	a6 95       	lsr	r26
    1d10:	8f ef       	ldi	r24, 0xFF	; 255
    1d12:	81 1d       	adc	r24, r1
    1d14:	81 1d       	adc	r24, r1
    1d16:	08 95       	ret

00001d18 <__fp_inf>:
    1d18:	97 f9       	bld	r25, 7
    1d1a:	9f 67       	ori	r25, 0x7F	; 127
    1d1c:	80 e8       	ldi	r24, 0x80	; 128
    1d1e:	70 e0       	ldi	r23, 0x00	; 0
    1d20:	60 e0       	ldi	r22, 0x00	; 0
    1d22:	08 95       	ret

00001d24 <__fp_nan>:
    1d24:	9f ef       	ldi	r25, 0xFF	; 255
    1d26:	80 ec       	ldi	r24, 0xC0	; 192
    1d28:	08 95       	ret

00001d2a <__fp_pscA>:
    1d2a:	00 24       	eor	r0, r0
    1d2c:	0a 94       	dec	r0
    1d2e:	16 16       	cp	r1, r22
    1d30:	17 06       	cpc	r1, r23
    1d32:	18 06       	cpc	r1, r24
    1d34:	09 06       	cpc	r0, r25
    1d36:	08 95       	ret

00001d38 <__fp_pscB>:
    1d38:	00 24       	eor	r0, r0
    1d3a:	0a 94       	dec	r0
    1d3c:	12 16       	cp	r1, r18
    1d3e:	13 06       	cpc	r1, r19
    1d40:	14 06       	cpc	r1, r20
    1d42:	05 06       	cpc	r0, r21
    1d44:	08 95       	ret

00001d46 <__fp_round>:
    1d46:	09 2e       	mov	r0, r25
    1d48:	03 94       	inc	r0
    1d4a:	00 0c       	add	r0, r0
    1d4c:	11 f4       	brne	.+4      	; 0x1d52 <__fp_round+0xc>
    1d4e:	88 23       	and	r24, r24
    1d50:	52 f0       	brmi	.+20     	; 0x1d66 <__fp_round+0x20>
    1d52:	bb 0f       	add	r27, r27
    1d54:	40 f4       	brcc	.+16     	; 0x1d66 <__fp_round+0x20>
    1d56:	bf 2b       	or	r27, r31
    1d58:	11 f4       	brne	.+4      	; 0x1d5e <__fp_round+0x18>
    1d5a:	60 ff       	sbrs	r22, 0
    1d5c:	04 c0       	rjmp	.+8      	; 0x1d66 <__fp_round+0x20>
    1d5e:	6f 5f       	subi	r22, 0xFF	; 255
    1d60:	7f 4f       	sbci	r23, 0xFF	; 255
    1d62:	8f 4f       	sbci	r24, 0xFF	; 255
    1d64:	9f 4f       	sbci	r25, 0xFF	; 255
    1d66:	08 95       	ret

00001d68 <__fp_split3>:
    1d68:	57 fd       	sbrc	r21, 7
    1d6a:	90 58       	subi	r25, 0x80	; 128
    1d6c:	44 0f       	add	r20, r20
    1d6e:	55 1f       	adc	r21, r21
    1d70:	59 f0       	breq	.+22     	; 0x1d88 <__fp_splitA+0x10>
    1d72:	5f 3f       	cpi	r21, 0xFF	; 255
    1d74:	71 f0       	breq	.+28     	; 0x1d92 <__fp_splitA+0x1a>
    1d76:	47 95       	ror	r20

00001d78 <__fp_splitA>:
    1d78:	88 0f       	add	r24, r24
    1d7a:	97 fb       	bst	r25, 7
    1d7c:	99 1f       	adc	r25, r25
    1d7e:	61 f0       	breq	.+24     	; 0x1d98 <__fp_splitA+0x20>
    1d80:	9f 3f       	cpi	r25, 0xFF	; 255
    1d82:	79 f0       	breq	.+30     	; 0x1da2 <__fp_splitA+0x2a>
    1d84:	87 95       	ror	r24
    1d86:	08 95       	ret
    1d88:	12 16       	cp	r1, r18
    1d8a:	13 06       	cpc	r1, r19
    1d8c:	14 06       	cpc	r1, r20
    1d8e:	55 1f       	adc	r21, r21
    1d90:	f2 cf       	rjmp	.-28     	; 0x1d76 <__fp_split3+0xe>
    1d92:	46 95       	lsr	r20
    1d94:	f1 df       	rcall	.-30     	; 0x1d78 <__fp_splitA>
    1d96:	08 c0       	rjmp	.+16     	; 0x1da8 <__fp_splitA+0x30>
    1d98:	16 16       	cp	r1, r22
    1d9a:	17 06       	cpc	r1, r23
    1d9c:	18 06       	cpc	r1, r24
    1d9e:	99 1f       	adc	r25, r25
    1da0:	f1 cf       	rjmp	.-30     	; 0x1d84 <__fp_splitA+0xc>
    1da2:	86 95       	lsr	r24
    1da4:	71 05       	cpc	r23, r1
    1da6:	61 05       	cpc	r22, r1
    1da8:	08 94       	sec
    1daa:	08 95       	ret

00001dac <__fp_zero>:
    1dac:	e8 94       	clt

00001dae <__fp_szero>:
    1dae:	bb 27       	eor	r27, r27
    1db0:	66 27       	eor	r22, r22
    1db2:	77 27       	eor	r23, r23
    1db4:	cb 01       	movw	r24, r22
    1db6:	97 f9       	bld	r25, 7
    1db8:	08 95       	ret

00001dba <__mulsf3>:
    1dba:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__mulsf3x>
    1dbe:	0c 94 a3 0e 	jmp	0x1d46	; 0x1d46 <__fp_round>
    1dc2:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <__fp_pscA>
    1dc6:	38 f0       	brcs	.+14     	; 0x1dd6 <__mulsf3+0x1c>
    1dc8:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__fp_pscB>
    1dcc:	20 f0       	brcs	.+8      	; 0x1dd6 <__mulsf3+0x1c>
    1dce:	95 23       	and	r25, r21
    1dd0:	11 f0       	breq	.+4      	; 0x1dd6 <__mulsf3+0x1c>
    1dd2:	0c 94 8c 0e 	jmp	0x1d18	; 0x1d18 <__fp_inf>
    1dd6:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <__fp_nan>
    1dda:	11 24       	eor	r1, r1
    1ddc:	0c 94 d7 0e 	jmp	0x1dae	; 0x1dae <__fp_szero>

00001de0 <__mulsf3x>:
    1de0:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <__fp_split3>
    1de4:	70 f3       	brcs	.-36     	; 0x1dc2 <__mulsf3+0x8>

00001de6 <__mulsf3_pse>:
    1de6:	95 9f       	mul	r25, r21
    1de8:	c1 f3       	breq	.-16     	; 0x1dda <__mulsf3+0x20>
    1dea:	95 0f       	add	r25, r21
    1dec:	50 e0       	ldi	r21, 0x00	; 0
    1dee:	55 1f       	adc	r21, r21
    1df0:	62 9f       	mul	r22, r18
    1df2:	f0 01       	movw	r30, r0
    1df4:	72 9f       	mul	r23, r18
    1df6:	bb 27       	eor	r27, r27
    1df8:	f0 0d       	add	r31, r0
    1dfa:	b1 1d       	adc	r27, r1
    1dfc:	63 9f       	mul	r22, r19
    1dfe:	aa 27       	eor	r26, r26
    1e00:	f0 0d       	add	r31, r0
    1e02:	b1 1d       	adc	r27, r1
    1e04:	aa 1f       	adc	r26, r26
    1e06:	64 9f       	mul	r22, r20
    1e08:	66 27       	eor	r22, r22
    1e0a:	b0 0d       	add	r27, r0
    1e0c:	a1 1d       	adc	r26, r1
    1e0e:	66 1f       	adc	r22, r22
    1e10:	82 9f       	mul	r24, r18
    1e12:	22 27       	eor	r18, r18
    1e14:	b0 0d       	add	r27, r0
    1e16:	a1 1d       	adc	r26, r1
    1e18:	62 1f       	adc	r22, r18
    1e1a:	73 9f       	mul	r23, r19
    1e1c:	b0 0d       	add	r27, r0
    1e1e:	a1 1d       	adc	r26, r1
    1e20:	62 1f       	adc	r22, r18
    1e22:	83 9f       	mul	r24, r19
    1e24:	a0 0d       	add	r26, r0
    1e26:	61 1d       	adc	r22, r1
    1e28:	22 1f       	adc	r18, r18
    1e2a:	74 9f       	mul	r23, r20
    1e2c:	33 27       	eor	r19, r19
    1e2e:	a0 0d       	add	r26, r0
    1e30:	61 1d       	adc	r22, r1
    1e32:	23 1f       	adc	r18, r19
    1e34:	84 9f       	mul	r24, r20
    1e36:	60 0d       	add	r22, r0
    1e38:	21 1d       	adc	r18, r1
    1e3a:	82 2f       	mov	r24, r18
    1e3c:	76 2f       	mov	r23, r22
    1e3e:	6a 2f       	mov	r22, r26
    1e40:	11 24       	eor	r1, r1
    1e42:	9f 57       	subi	r25, 0x7F	; 127
    1e44:	50 40       	sbci	r21, 0x00	; 0
    1e46:	9a f0       	brmi	.+38     	; 0x1e6e <__mulsf3_pse+0x88>
    1e48:	f1 f0       	breq	.+60     	; 0x1e86 <__mulsf3_pse+0xa0>
    1e4a:	88 23       	and	r24, r24
    1e4c:	4a f0       	brmi	.+18     	; 0x1e60 <__mulsf3_pse+0x7a>
    1e4e:	ee 0f       	add	r30, r30
    1e50:	ff 1f       	adc	r31, r31
    1e52:	bb 1f       	adc	r27, r27
    1e54:	66 1f       	adc	r22, r22
    1e56:	77 1f       	adc	r23, r23
    1e58:	88 1f       	adc	r24, r24
    1e5a:	91 50       	subi	r25, 0x01	; 1
    1e5c:	50 40       	sbci	r21, 0x00	; 0
    1e5e:	a9 f7       	brne	.-22     	; 0x1e4a <__mulsf3_pse+0x64>
    1e60:	9e 3f       	cpi	r25, 0xFE	; 254
    1e62:	51 05       	cpc	r21, r1
    1e64:	80 f0       	brcs	.+32     	; 0x1e86 <__mulsf3_pse+0xa0>
    1e66:	0c 94 8c 0e 	jmp	0x1d18	; 0x1d18 <__fp_inf>
    1e6a:	0c 94 d7 0e 	jmp	0x1dae	; 0x1dae <__fp_szero>
    1e6e:	5f 3f       	cpi	r21, 0xFF	; 255
    1e70:	e4 f3       	brlt	.-8      	; 0x1e6a <__mulsf3_pse+0x84>
    1e72:	98 3e       	cpi	r25, 0xE8	; 232
    1e74:	d4 f3       	brlt	.-12     	; 0x1e6a <__mulsf3_pse+0x84>
    1e76:	86 95       	lsr	r24
    1e78:	77 95       	ror	r23
    1e7a:	67 95       	ror	r22
    1e7c:	b7 95       	ror	r27
    1e7e:	f7 95       	ror	r31
    1e80:	e7 95       	ror	r30
    1e82:	9f 5f       	subi	r25, 0xFF	; 255
    1e84:	c1 f7       	brne	.-16     	; 0x1e76 <__mulsf3_pse+0x90>
    1e86:	fe 2b       	or	r31, r30
    1e88:	88 0f       	add	r24, r24
    1e8a:	91 1d       	adc	r25, r1
    1e8c:	96 95       	lsr	r25
    1e8e:	87 95       	ror	r24
    1e90:	97 f9       	bld	r25, 7
    1e92:	08 95       	ret

00001e94 <__mulsi3>:
    1e94:	db 01       	movw	r26, r22
    1e96:	8f 93       	push	r24
    1e98:	9f 93       	push	r25
    1e9a:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__muluhisi3>
    1e9e:	bf 91       	pop	r27
    1ea0:	af 91       	pop	r26
    1ea2:	a2 9f       	mul	r26, r18
    1ea4:	80 0d       	add	r24, r0
    1ea6:	91 1d       	adc	r25, r1
    1ea8:	a3 9f       	mul	r26, r19
    1eaa:	90 0d       	add	r25, r0
    1eac:	b2 9f       	mul	r27, r18
    1eae:	90 0d       	add	r25, r0
    1eb0:	11 24       	eor	r1, r1
    1eb2:	08 95       	ret

00001eb4 <__udivmodsi4>:
    1eb4:	a1 e2       	ldi	r26, 0x21	; 33
    1eb6:	1a 2e       	mov	r1, r26
    1eb8:	aa 1b       	sub	r26, r26
    1eba:	bb 1b       	sub	r27, r27
    1ebc:	fd 01       	movw	r30, r26
    1ebe:	0d c0       	rjmp	.+26     	; 0x1eda <__udivmodsi4_ep>

00001ec0 <__udivmodsi4_loop>:
    1ec0:	aa 1f       	adc	r26, r26
    1ec2:	bb 1f       	adc	r27, r27
    1ec4:	ee 1f       	adc	r30, r30
    1ec6:	ff 1f       	adc	r31, r31
    1ec8:	a2 17       	cp	r26, r18
    1eca:	b3 07       	cpc	r27, r19
    1ecc:	e4 07       	cpc	r30, r20
    1ece:	f5 07       	cpc	r31, r21
    1ed0:	20 f0       	brcs	.+8      	; 0x1eda <__udivmodsi4_ep>
    1ed2:	a2 1b       	sub	r26, r18
    1ed4:	b3 0b       	sbc	r27, r19
    1ed6:	e4 0b       	sbc	r30, r20
    1ed8:	f5 0b       	sbc	r31, r21

00001eda <__udivmodsi4_ep>:
    1eda:	66 1f       	adc	r22, r22
    1edc:	77 1f       	adc	r23, r23
    1ede:	88 1f       	adc	r24, r24
    1ee0:	99 1f       	adc	r25, r25
    1ee2:	1a 94       	dec	r1
    1ee4:	69 f7       	brne	.-38     	; 0x1ec0 <__udivmodsi4_loop>
    1ee6:	60 95       	com	r22
    1ee8:	70 95       	com	r23
    1eea:	80 95       	com	r24
    1eec:	90 95       	com	r25
    1eee:	9b 01       	movw	r18, r22
    1ef0:	ac 01       	movw	r20, r24
    1ef2:	bd 01       	movw	r22, r26
    1ef4:	cf 01       	movw	r24, r30
    1ef6:	08 95       	ret

00001ef8 <__muluhisi3>:
    1ef8:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__umulhisi3>
    1efc:	a5 9f       	mul	r26, r21
    1efe:	90 0d       	add	r25, r0
    1f00:	b4 9f       	mul	r27, r20
    1f02:	90 0d       	add	r25, r0
    1f04:	a4 9f       	mul	r26, r20
    1f06:	80 0d       	add	r24, r0
    1f08:	91 1d       	adc	r25, r1
    1f0a:	11 24       	eor	r1, r1
    1f0c:	08 95       	ret

00001f0e <__umulhisi3>:
    1f0e:	a2 9f       	mul	r26, r18
    1f10:	b0 01       	movw	r22, r0
    1f12:	b3 9f       	mul	r27, r19
    1f14:	c0 01       	movw	r24, r0
    1f16:	a3 9f       	mul	r26, r19
    1f18:	70 0d       	add	r23, r0
    1f1a:	81 1d       	adc	r24, r1
    1f1c:	11 24       	eor	r1, r1
    1f1e:	91 1d       	adc	r25, r1
    1f20:	b2 9f       	mul	r27, r18
    1f22:	70 0d       	add	r23, r0
    1f24:	81 1d       	adc	r24, r1
    1f26:	11 24       	eor	r1, r1
    1f28:	91 1d       	adc	r25, r1
    1f2a:	08 95       	ret

00001f2c <atof>:
    1f2c:	66 27       	eor	r22, r22
    1f2e:	77 27       	eor	r23, r23
    1f30:	0c 94 aa 0f 	jmp	0x1f54	; 0x1f54 <strtod>

00001f34 <strcmp>:
    1f34:	fb 01       	movw	r30, r22
    1f36:	dc 01       	movw	r26, r24
    1f38:	8d 91       	ld	r24, X+
    1f3a:	01 90       	ld	r0, Z+
    1f3c:	80 19       	sub	r24, r0
    1f3e:	01 10       	cpse	r0, r1
    1f40:	d9 f3       	breq	.-10     	; 0x1f38 <strcmp+0x4>
    1f42:	99 0b       	sbc	r25, r25
    1f44:	08 95       	ret

00001f46 <strcpy>:
    1f46:	fb 01       	movw	r30, r22
    1f48:	dc 01       	movw	r26, r24
    1f4a:	01 90       	ld	r0, Z+
    1f4c:	0d 92       	st	X+, r0
    1f4e:	00 20       	and	r0, r0
    1f50:	e1 f7       	brne	.-8      	; 0x1f4a <strcpy+0x4>
    1f52:	08 95       	ret

00001f54 <strtod>:
    1f54:	a0 e0       	ldi	r26, 0x00	; 0
    1f56:	b0 e0       	ldi	r27, 0x00	; 0
    1f58:	e0 eb       	ldi	r30, 0xB0	; 176
    1f5a:	ff e0       	ldi	r31, 0x0F	; 15
    1f5c:	0c 94 22 11 	jmp	0x2244	; 0x2244 <__prologue_saves__+0xc>
    1f60:	ec 01       	movw	r28, r24
    1f62:	6b 01       	movw	r12, r22
    1f64:	61 15       	cp	r22, r1
    1f66:	71 05       	cpc	r23, r1
    1f68:	19 f0       	breq	.+6      	; 0x1f70 <strtod+0x1c>
    1f6a:	fb 01       	movw	r30, r22
    1f6c:	91 83       	std	Z+1, r25	; 0x01
    1f6e:	80 83       	st	Z, r24
    1f70:	7e 01       	movw	r14, r28
    1f72:	ff ef       	ldi	r31, 0xFF	; 255
    1f74:	ef 1a       	sub	r14, r31
    1f76:	ff 0a       	sbc	r15, r31
    1f78:	08 81       	ld	r16, Y
    1f7a:	80 2f       	mov	r24, r16
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <isspace>
    1f82:	89 2b       	or	r24, r25
    1f84:	11 f0       	breq	.+4      	; 0x1f8a <strtod+0x36>
    1f86:	e7 01       	movw	r28, r14
    1f88:	f3 cf       	rjmp	.-26     	; 0x1f70 <strtod+0x1c>
    1f8a:	0d 32       	cpi	r16, 0x2D	; 45
    1f8c:	39 f4       	brne	.+14     	; 0x1f9c <strtod+0x48>
    1f8e:	7e 01       	movw	r14, r28
    1f90:	82 e0       	ldi	r24, 0x02	; 2
    1f92:	e8 0e       	add	r14, r24
    1f94:	f1 1c       	adc	r15, r1
    1f96:	09 81       	ldd	r16, Y+1	; 0x01
    1f98:	11 e0       	ldi	r17, 0x01	; 1
    1f9a:	08 c0       	rjmp	.+16     	; 0x1fac <strtod+0x58>
    1f9c:	0b 32       	cpi	r16, 0x2B	; 43
    1f9e:	29 f4       	brne	.+10     	; 0x1faa <strtod+0x56>
    1fa0:	7e 01       	movw	r14, r28
    1fa2:	92 e0       	ldi	r25, 0x02	; 2
    1fa4:	e9 0e       	add	r14, r25
    1fa6:	f1 1c       	adc	r15, r1
    1fa8:	09 81       	ldd	r16, Y+1	; 0x01
    1faa:	10 e0       	ldi	r17, 0x00	; 0
    1fac:	e7 01       	movw	r28, r14
    1fae:	21 97       	sbiw	r28, 0x01	; 1
    1fb0:	43 e0       	ldi	r20, 0x03	; 3
    1fb2:	50 e0       	ldi	r21, 0x00	; 0
    1fb4:	6c e5       	ldi	r22, 0x5C	; 92
    1fb6:	70 e0       	ldi	r23, 0x00	; 0
    1fb8:	ce 01       	movw	r24, r28
    1fba:	0e 94 01 11 	call	0x2202	; 0x2202 <strncasecmp_P>
    1fbe:	89 2b       	or	r24, r25
    1fc0:	c1 f4       	brne	.+48     	; 0x1ff2 <strtod+0x9e>
    1fc2:	23 96       	adiw	r28, 0x03	; 3
    1fc4:	45 e0       	ldi	r20, 0x05	; 5
    1fc6:	50 e0       	ldi	r21, 0x00	; 0
    1fc8:	67 e5       	ldi	r22, 0x57	; 87
    1fca:	70 e0       	ldi	r23, 0x00	; 0
    1fcc:	ce 01       	movw	r24, r28
    1fce:	0e 94 01 11 	call	0x2202	; 0x2202 <strncasecmp_P>
    1fd2:	89 2b       	or	r24, r25
    1fd4:	09 f4       	brne	.+2      	; 0x1fd8 <strtod+0x84>
    1fd6:	25 96       	adiw	r28, 0x05	; 5
    1fd8:	c1 14       	cp	r12, r1
    1fda:	d1 04       	cpc	r13, r1
    1fdc:	19 f0       	breq	.+6      	; 0x1fe4 <strtod+0x90>
    1fde:	f6 01       	movw	r30, r12
    1fe0:	d1 83       	std	Z+1, r29	; 0x01
    1fe2:	c0 83       	st	Z, r28
    1fe4:	11 11       	cpse	r17, r1
    1fe6:	f6 c0       	rjmp	.+492    	; 0x21d4 <strtod+0x280>
    1fe8:	60 e0       	ldi	r22, 0x00	; 0
    1fea:	70 e0       	ldi	r23, 0x00	; 0
    1fec:	80 e8       	ldi	r24, 0x80	; 128
    1fee:	9f e7       	ldi	r25, 0x7F	; 127
    1ff0:	fa c0       	rjmp	.+500    	; 0x21e6 <strtod+0x292>
    1ff2:	43 e0       	ldi	r20, 0x03	; 3
    1ff4:	50 e0       	ldi	r21, 0x00	; 0
    1ff6:	64 e5       	ldi	r22, 0x54	; 84
    1ff8:	70 e0       	ldi	r23, 0x00	; 0
    1ffa:	ce 01       	movw	r24, r28
    1ffc:	0e 94 01 11 	call	0x2202	; 0x2202 <strncasecmp_P>
    2000:	89 2b       	or	r24, r25
    2002:	59 f4       	brne	.+22     	; 0x201a <strtod+0xc6>
    2004:	c1 14       	cp	r12, r1
    2006:	d1 04       	cpc	r13, r1
    2008:	09 f4       	brne	.+2      	; 0x200c <strtod+0xb8>
    200a:	e9 c0       	rjmp	.+466    	; 0x21de <strtod+0x28a>
    200c:	f2 e0       	ldi	r31, 0x02	; 2
    200e:	ef 0e       	add	r14, r31
    2010:	f1 1c       	adc	r15, r1
    2012:	f6 01       	movw	r30, r12
    2014:	f1 82       	std	Z+1, r15	; 0x01
    2016:	e0 82       	st	Z, r14
    2018:	e2 c0       	rjmp	.+452    	; 0x21de <strtod+0x28a>
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	a9 01       	movw	r20, r18
    2020:	c0 e0       	ldi	r28, 0x00	; 0
    2022:	d0 e0       	ldi	r29, 0x00	; 0
    2024:	f7 01       	movw	r30, r14
    2026:	80 ed       	ldi	r24, 0xD0	; 208
    2028:	a8 2e       	mov	r10, r24
    202a:	a0 0e       	add	r10, r16
    202c:	89 e0       	ldi	r24, 0x09	; 9
    202e:	8a 15       	cp	r24, r10
    2030:	30 f1       	brcs	.+76     	; 0x207e <strtod+0x12a>
    2032:	91 2f       	mov	r25, r17
    2034:	92 60       	ori	r25, 0x02	; 2
    2036:	b9 2e       	mov	r11, r25
    2038:	81 2f       	mov	r24, r17
    203a:	88 70       	andi	r24, 0x08	; 8
    203c:	12 ff       	sbrs	r17, 2
    203e:	04 c0       	rjmp	.+8      	; 0x2048 <strtod+0xf4>
    2040:	81 11       	cpse	r24, r1
    2042:	24 c0       	rjmp	.+72     	; 0x208c <strtod+0x138>
    2044:	21 96       	adiw	r28, 0x01	; 1
    2046:	22 c0       	rjmp	.+68     	; 0x208c <strtod+0x138>
    2048:	81 11       	cpse	r24, r1
    204a:	21 97       	sbiw	r28, 0x01	; 1
    204c:	a5 e0       	ldi	r26, 0x05	; 5
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__muluhisi3>
    2054:	dc 01       	movw	r26, r24
    2056:	cb 01       	movw	r24, r22
    2058:	88 0f       	add	r24, r24
    205a:	99 1f       	adc	r25, r25
    205c:	aa 1f       	adc	r26, r26
    205e:	bb 1f       	adc	r27, r27
    2060:	9c 01       	movw	r18, r24
    2062:	ad 01       	movw	r20, r26
    2064:	2a 0d       	add	r18, r10
    2066:	31 1d       	adc	r19, r1
    2068:	41 1d       	adc	r20, r1
    206a:	51 1d       	adc	r21, r1
    206c:	28 39       	cpi	r18, 0x98	; 152
    206e:	89 e9       	ldi	r24, 0x99	; 153
    2070:	38 07       	cpc	r19, r24
    2072:	48 07       	cpc	r20, r24
    2074:	89 e1       	ldi	r24, 0x19	; 25
    2076:	58 07       	cpc	r21, r24
    2078:	48 f0       	brcs	.+18     	; 0x208c <strtod+0x138>
    207a:	16 60       	ori	r17, 0x06	; 6
    207c:	06 c0       	rjmp	.+12     	; 0x208a <strtod+0x136>
    207e:	9e ef       	ldi	r25, 0xFE	; 254
    2080:	a9 12       	cpse	r10, r25
    2082:	0a c0       	rjmp	.+20     	; 0x2098 <strtod+0x144>
    2084:	13 fd       	sbrc	r17, 3
    2086:	40 c0       	rjmp	.+128    	; 0x2108 <strtod+0x1b4>
    2088:	18 60       	ori	r17, 0x08	; 8
    208a:	b1 2e       	mov	r11, r17
    208c:	8f ef       	ldi	r24, 0xFF	; 255
    208e:	e8 1a       	sub	r14, r24
    2090:	f8 0a       	sbc	r15, r24
    2092:	00 81       	ld	r16, Z
    2094:	1b 2d       	mov	r17, r11
    2096:	c6 cf       	rjmp	.-116    	; 0x2024 <strtod+0xd0>
    2098:	80 2f       	mov	r24, r16
    209a:	8f 7d       	andi	r24, 0xDF	; 223
    209c:	85 34       	cpi	r24, 0x45	; 69
    209e:	a1 f5       	brne	.+104    	; 0x2108 <strtod+0x1b4>
    20a0:	80 81       	ld	r24, Z
    20a2:	8d 32       	cpi	r24, 0x2D	; 45
    20a4:	11 f4       	brne	.+4      	; 0x20aa <strtod+0x156>
    20a6:	10 61       	ori	r17, 0x10	; 16
    20a8:	06 c0       	rjmp	.+12     	; 0x20b6 <strtod+0x162>
    20aa:	8b 32       	cpi	r24, 0x2B	; 43
    20ac:	21 f0       	breq	.+8      	; 0x20b6 <strtod+0x162>
    20ae:	31 96       	adiw	r30, 0x01	; 1
    20b0:	61 e0       	ldi	r22, 0x01	; 1
    20b2:	70 e0       	ldi	r23, 0x00	; 0
    20b4:	04 c0       	rjmp	.+8      	; 0x20be <strtod+0x16a>
    20b6:	81 81       	ldd	r24, Z+1	; 0x01
    20b8:	32 96       	adiw	r30, 0x02	; 2
    20ba:	62 e0       	ldi	r22, 0x02	; 2
    20bc:	70 e0       	ldi	r23, 0x00	; 0
    20be:	80 53       	subi	r24, 0x30	; 48
    20c0:	8a 30       	cpi	r24, 0x0A	; 10
    20c2:	18 f0       	brcs	.+6      	; 0x20ca <strtod+0x176>
    20c4:	e6 1b       	sub	r30, r22
    20c6:	f7 0b       	sbc	r31, r23
    20c8:	1f c0       	rjmp	.+62     	; 0x2108 <strtod+0x1b4>
    20ca:	60 e0       	ldi	r22, 0x00	; 0
    20cc:	70 e0       	ldi	r23, 0x00	; 0
    20ce:	60 38       	cpi	r22, 0x80	; 128
    20d0:	9c e0       	ldi	r25, 0x0C	; 12
    20d2:	79 07       	cpc	r23, r25
    20d4:	5c f4       	brge	.+22     	; 0x20ec <strtod+0x198>
    20d6:	db 01       	movw	r26, r22
    20d8:	aa 0f       	add	r26, r26
    20da:	bb 1f       	adc	r27, r27
    20dc:	aa 0f       	add	r26, r26
    20de:	bb 1f       	adc	r27, r27
    20e0:	6a 0f       	add	r22, r26
    20e2:	7b 1f       	adc	r23, r27
    20e4:	66 0f       	add	r22, r22
    20e6:	77 1f       	adc	r23, r23
    20e8:	68 0f       	add	r22, r24
    20ea:	71 1d       	adc	r23, r1
    20ec:	31 96       	adiw	r30, 0x01	; 1
    20ee:	df 01       	movw	r26, r30
    20f0:	11 97       	sbiw	r26, 0x01	; 1
    20f2:	8c 91       	ld	r24, X
    20f4:	80 53       	subi	r24, 0x30	; 48
    20f6:	8a 30       	cpi	r24, 0x0A	; 10
    20f8:	50 f3       	brcs	.-44     	; 0x20ce <strtod+0x17a>
    20fa:	14 ff       	sbrs	r17, 4
    20fc:	03 c0       	rjmp	.+6      	; 0x2104 <strtod+0x1b0>
    20fe:	71 95       	neg	r23
    2100:	61 95       	neg	r22
    2102:	71 09       	sbc	r23, r1
    2104:	c6 0f       	add	r28, r22
    2106:	d7 1f       	adc	r29, r23
    2108:	11 ff       	sbrs	r17, 1
    210a:	08 c0       	rjmp	.+16     	; 0x211c <strtod+0x1c8>
    210c:	c1 14       	cp	r12, r1
    210e:	d1 04       	cpc	r13, r1
    2110:	29 f0       	breq	.+10     	; 0x211c <strtod+0x1c8>
    2112:	cf 01       	movw	r24, r30
    2114:	01 97       	sbiw	r24, 0x01	; 1
    2116:	f6 01       	movw	r30, r12
    2118:	91 83       	std	Z+1, r25	; 0x01
    211a:	80 83       	st	Z, r24
    211c:	ca 01       	movw	r24, r20
    211e:	b9 01       	movw	r22, r18
    2120:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <__floatunsisf>
    2124:	21 2f       	mov	r18, r17
    2126:	23 70       	andi	r18, 0x03	; 3
    2128:	23 30       	cpi	r18, 0x03	; 3
    212a:	19 f0       	breq	.+6      	; 0x2132 <strtod+0x1de>
    212c:	4b 01       	movw	r8, r22
    212e:	5c 01       	movw	r10, r24
    2130:	06 c0       	rjmp	.+12     	; 0x213e <strtod+0x1ea>
    2132:	4b 01       	movw	r8, r22
    2134:	5c 01       	movw	r10, r24
    2136:	b7 fa       	bst	r11, 7
    2138:	b0 94       	com	r11
    213a:	b7 f8       	bld	r11, 7
    213c:	b0 94       	com	r11
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	a9 01       	movw	r20, r18
    2144:	c5 01       	movw	r24, r10
    2146:	b4 01       	movw	r22, r8
    2148:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__cmpsf2>
    214c:	88 23       	and	r24, r24
    214e:	09 f4       	brne	.+2      	; 0x2152 <strtod+0x1fe>
    2150:	3e c0       	rjmp	.+124    	; 0x21ce <strtod+0x27a>
    2152:	d7 ff       	sbrs	r29, 7
    2154:	06 c0       	rjmp	.+12     	; 0x2162 <strtod+0x20e>
    2156:	d1 95       	neg	r29
    2158:	c1 95       	neg	r28
    215a:	d1 09       	sbc	r29, r1
    215c:	03 e7       	ldi	r16, 0x73	; 115
    215e:	10 e0       	ldi	r17, 0x00	; 0
    2160:	02 c0       	rjmp	.+4      	; 0x2166 <strtod+0x212>
    2162:	0b e8       	ldi	r16, 0x8B	; 139
    2164:	10 e0       	ldi	r17, 0x00	; 0
    2166:	68 01       	movw	r12, r16
    2168:	f8 e1       	ldi	r31, 0x18	; 24
    216a:	cf 1a       	sub	r12, r31
    216c:	d1 08       	sbc	r13, r1
    216e:	90 e2       	ldi	r25, 0x20	; 32
    2170:	e9 2e       	mov	r14, r25
    2172:	f1 2c       	mov	r15, r1
    2174:	ce 15       	cp	r28, r14
    2176:	df 05       	cpc	r29, r15
    2178:	74 f0       	brlt	.+28     	; 0x2196 <strtod+0x242>
    217a:	f8 01       	movw	r30, r16
    217c:	25 91       	lpm	r18, Z+
    217e:	35 91       	lpm	r19, Z+
    2180:	45 91       	lpm	r20, Z+
    2182:	54 91       	lpm	r21, Z
    2184:	c5 01       	movw	r24, r10
    2186:	b4 01       	movw	r22, r8
    2188:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <__mulsf3>
    218c:	4b 01       	movw	r8, r22
    218e:	5c 01       	movw	r10, r24
    2190:	ce 19       	sub	r28, r14
    2192:	df 09       	sbc	r29, r15
    2194:	ef cf       	rjmp	.-34     	; 0x2174 <strtod+0x220>
    2196:	04 50       	subi	r16, 0x04	; 4
    2198:	11 09       	sbc	r17, r1
    219a:	f5 94       	asr	r15
    219c:	e7 94       	ror	r14
    219e:	0c 15       	cp	r16, r12
    21a0:	1d 05       	cpc	r17, r13
    21a2:	41 f7       	brne	.-48     	; 0x2174 <strtod+0x220>
    21a4:	8a 2d       	mov	r24, r10
    21a6:	88 0f       	add	r24, r24
    21a8:	8b 2d       	mov	r24, r11
    21aa:	88 1f       	adc	r24, r24
    21ac:	8f 3f       	cpi	r24, 0xFF	; 255
    21ae:	49 f0       	breq	.+18     	; 0x21c2 <strtod+0x26e>
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	a9 01       	movw	r20, r18
    21b6:	c5 01       	movw	r24, r10
    21b8:	b4 01       	movw	r22, r8
    21ba:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__cmpsf2>
    21be:	81 11       	cpse	r24, r1
    21c0:	06 c0       	rjmp	.+12     	; 0x21ce <strtod+0x27a>
    21c2:	82 e2       	ldi	r24, 0x22	; 34
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	90 93 02 03 	sts	0x0302, r25	; 0x800302 <errno+0x1>
    21ca:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <errno>
    21ce:	c5 01       	movw	r24, r10
    21d0:	b4 01       	movw	r22, r8
    21d2:	09 c0       	rjmp	.+18     	; 0x21e6 <strtod+0x292>
    21d4:	60 e0       	ldi	r22, 0x00	; 0
    21d6:	70 e0       	ldi	r23, 0x00	; 0
    21d8:	80 e8       	ldi	r24, 0x80	; 128
    21da:	9f ef       	ldi	r25, 0xFF	; 255
    21dc:	04 c0       	rjmp	.+8      	; 0x21e6 <strtod+0x292>
    21de:	60 e0       	ldi	r22, 0x00	; 0
    21e0:	70 e0       	ldi	r23, 0x00	; 0
    21e2:	80 ec       	ldi	r24, 0xC0	; 192
    21e4:	9f e7       	ldi	r25, 0x7F	; 127
    21e6:	cd b7       	in	r28, 0x3d	; 61
    21e8:	de b7       	in	r29, 0x3e	; 62
    21ea:	ec e0       	ldi	r30, 0x0C	; 12
    21ec:	0c 94 3e 11 	jmp	0x227c	; 0x227c <__epilogue_restores__+0xc>

000021f0 <isspace>:
    21f0:	91 11       	cpse	r25, r1
    21f2:	0c 94 19 11 	jmp	0x2232	; 0x2232 <__ctype_isfalse>
    21f6:	80 32       	cpi	r24, 0x20	; 32
    21f8:	19 f0       	breq	.+6      	; 0x2200 <isspace+0x10>
    21fa:	89 50       	subi	r24, 0x09	; 9
    21fc:	85 50       	subi	r24, 0x05	; 5
    21fe:	c8 f7       	brcc	.-14     	; 0x21f2 <isspace+0x2>
    2200:	08 95       	ret

00002202 <strncasecmp_P>:
    2202:	fb 01       	movw	r30, r22
    2204:	dc 01       	movw	r26, r24
    2206:	41 50       	subi	r20, 0x01	; 1
    2208:	50 40       	sbci	r21, 0x00	; 0
    220a:	88 f0       	brcs	.+34     	; 0x222e <strncasecmp_P+0x2c>
    220c:	8d 91       	ld	r24, X+
    220e:	81 34       	cpi	r24, 0x41	; 65
    2210:	1c f0       	brlt	.+6      	; 0x2218 <strncasecmp_P+0x16>
    2212:	8b 35       	cpi	r24, 0x5B	; 91
    2214:	0c f4       	brge	.+2      	; 0x2218 <strncasecmp_P+0x16>
    2216:	80 5e       	subi	r24, 0xE0	; 224
    2218:	65 91       	lpm	r22, Z+
    221a:	61 34       	cpi	r22, 0x41	; 65
    221c:	1c f0       	brlt	.+6      	; 0x2224 <strncasecmp_P+0x22>
    221e:	6b 35       	cpi	r22, 0x5B	; 91
    2220:	0c f4       	brge	.+2      	; 0x2224 <strncasecmp_P+0x22>
    2222:	60 5e       	subi	r22, 0xE0	; 224
    2224:	86 1b       	sub	r24, r22
    2226:	61 11       	cpse	r22, r1
    2228:	71 f3       	breq	.-36     	; 0x2206 <strncasecmp_P+0x4>
    222a:	99 0b       	sbc	r25, r25
    222c:	08 95       	ret
    222e:	88 1b       	sub	r24, r24
    2230:	fc cf       	rjmp	.-8      	; 0x222a <strncasecmp_P+0x28>

00002232 <__ctype_isfalse>:
    2232:	99 27       	eor	r25, r25
    2234:	88 27       	eor	r24, r24

00002236 <__ctype_istrue>:
    2236:	08 95       	ret

00002238 <__prologue_saves__>:
    2238:	2f 92       	push	r2
    223a:	3f 92       	push	r3
    223c:	4f 92       	push	r4
    223e:	5f 92       	push	r5
    2240:	6f 92       	push	r6
    2242:	7f 92       	push	r7
    2244:	8f 92       	push	r8
    2246:	9f 92       	push	r9
    2248:	af 92       	push	r10
    224a:	bf 92       	push	r11
    224c:	cf 92       	push	r12
    224e:	df 92       	push	r13
    2250:	ef 92       	push	r14
    2252:	ff 92       	push	r15
    2254:	0f 93       	push	r16
    2256:	1f 93       	push	r17
    2258:	cf 93       	push	r28
    225a:	df 93       	push	r29
    225c:	cd b7       	in	r28, 0x3d	; 61
    225e:	de b7       	in	r29, 0x3e	; 62
    2260:	ca 1b       	sub	r28, r26
    2262:	db 0b       	sbc	r29, r27
    2264:	0f b6       	in	r0, 0x3f	; 63
    2266:	f8 94       	cli
    2268:	de bf       	out	0x3e, r29	; 62
    226a:	0f be       	out	0x3f, r0	; 63
    226c:	cd bf       	out	0x3d, r28	; 61
    226e:	09 94       	ijmp

00002270 <__epilogue_restores__>:
    2270:	2a 88       	ldd	r2, Y+18	; 0x12
    2272:	39 88       	ldd	r3, Y+17	; 0x11
    2274:	48 88       	ldd	r4, Y+16	; 0x10
    2276:	5f 84       	ldd	r5, Y+15	; 0x0f
    2278:	6e 84       	ldd	r6, Y+14	; 0x0e
    227a:	7d 84       	ldd	r7, Y+13	; 0x0d
    227c:	8c 84       	ldd	r8, Y+12	; 0x0c
    227e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2280:	aa 84       	ldd	r10, Y+10	; 0x0a
    2282:	b9 84       	ldd	r11, Y+9	; 0x09
    2284:	c8 84       	ldd	r12, Y+8	; 0x08
    2286:	df 80       	ldd	r13, Y+7	; 0x07
    2288:	ee 80       	ldd	r14, Y+6	; 0x06
    228a:	fd 80       	ldd	r15, Y+5	; 0x05
    228c:	0c 81       	ldd	r16, Y+4	; 0x04
    228e:	1b 81       	ldd	r17, Y+3	; 0x03
    2290:	aa 81       	ldd	r26, Y+2	; 0x02
    2292:	b9 81       	ldd	r27, Y+1	; 0x01
    2294:	ce 0f       	add	r28, r30
    2296:	d1 1d       	adc	r29, r1
    2298:	0f b6       	in	r0, 0x3f	; 63
    229a:	f8 94       	cli
    229c:	de bf       	out	0x3e, r29	; 62
    229e:	0f be       	out	0x3f, r0	; 63
    22a0:	cd bf       	out	0x3d, r28	; 61
    22a2:	ed 01       	movw	r28, r26
    22a4:	08 95       	ret

000022a6 <_exit>:
    22a6:	f8 94       	cli

000022a8 <__stop_program>:
    22a8:	ff cf       	rjmp	.-2      	; 0x22a8 <__stop_program>
