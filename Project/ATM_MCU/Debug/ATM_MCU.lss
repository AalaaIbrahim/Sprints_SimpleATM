
ATM_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000954  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  00000954  000009e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  008000a2  008000a2  00000a2a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a2a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00000a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e16  00000000  00000000  00000cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f65  00000000  00000000  00003ade  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000172a  00000000  00000000  00004a43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000590  00000000  00000000  00006170  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d69  00000000  00000000  00006700  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b13  00000000  00000000  00007469  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  00008f7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__vector_1>
   8:	0c 94 0b 04 	jmp	0x816	; 0x816 <__vector_2>
   c:	0c 94 34 04 	jmp	0x868	; 0x868 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3a       	cpi	r26, 0xA2	; 162
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 ea       	ldi	r26, 0xA2	; 162
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 3c       	cpi	r26, 0xC5	; 197
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 3e 03 	call	0x67c	; 0x67c <main>
  8a:	0c 94 a8 04 	jmp	0x950	; 0x950 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_Init>:
// 
void APP_Init(void)
{
 
 	//(void)HButton_Init(DIO_PINB_2);
 	(void)KEYPAD_init();
  92:	0e 94 a5 00 	call	0x14a	; 0x14a <KEYPAD_init>
 	//(void)HTimer_enInit();
 	//(void)HTimer_enCBF(timer_ovfCount);
 	(void)HLCD_vidInit();
  96:	0e 94 5f 02 	call	0x4be	; 0x4be <HLCD_vidInit>
  9a:	08 95       	ret

0000009c <APP_Start>:
 //
 		///*TODO*/
 //
 	//}
	 
	 Get_pin(ATMpin);
  9c:	84 ea       	ldi	r24, 0xA4	; 164
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 53 00 	call	0xa6	; 0xa6 <Get_pin>
  a4:	08 95       	ret

000000a6 <Get_pin>:
VUchar8_t setFlag = 0;
extern VUchar8_t keys_arr [10];
VUchar8_t Entered_amount [] = "0000.00";

EN_PinState Get_pin(Uchar8_t *enteredpin)
{
  a6:	ef 92       	push	r14
  a8:	ff 92       	push	r15
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	7c 01       	movw	r14, r24
	Uchar8_t colPos=0;
	HLCD_gotoXY(0,0);
  b4:	60 e0       	ldi	r22, 0x00	; 0
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	0e 94 12 03 	call	0x624	; 0x624 <HLCD_gotoXY>
	HLCD_WriteString("Enter Your pin");
  bc:	85 e8       	ldi	r24, 0x85	; 133
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 26 03 	call	0x64c	; 0x64c <HLCD_WriteString>
	Uchar8_t BTN,loc_counter=0;
  c4:	d0 e0       	ldi	r29, 0x00	; 0
extern VUchar8_t keys_arr [10];
VUchar8_t Entered_amount [] = "0000.00";

EN_PinState Get_pin(Uchar8_t *enteredpin)
{
	Uchar8_t colPos=0;
  c6:	10 e0       	ldi	r17, 0x00	; 0
	HLCD_gotoXY(0,0);
	HLCD_WriteString("Enter Your pin");
	Uchar8_t BTN,loc_counter=0;
	while (loc_counter < 4 && !setFlag)
  c8:	2e c0       	rjmp	.+92     	; 0x126 <Get_pin+0x80>
	{
		
		BTN = KEYPAD_GetButton();
  ca:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <KEYPAD_GetButton>
  ce:	c8 2f       	mov	r28, r24
		if(BTN == KEY_NOTHING)continue;
  d0:	88 23       	and	r24, r24
  d2:	49 f1       	breq	.+82     	; 0x126 <Get_pin+0x80>
		else if(ZeroFlag == 1 )
  d4:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <ZeroFlag>
  d8:	81 30       	cpi	r24, 0x01	; 1
  da:	89 f4       	brne	.+34     	; 0xfe <Get_pin+0x58>
		{
			HLCD_gotoXY(1,colPos++);
  dc:	c1 e0       	ldi	r28, 0x01	; 1
  de:	c1 0f       	add	r28, r17
  e0:	61 2f       	mov	r22, r17
  e2:	0e 94 12 03 	call	0x624	; 0x624 <HLCD_gotoXY>
			HLCD_vidWriteChar('*');
  e6:	8a e2       	ldi	r24, 0x2A	; 42
  e8:	0e 94 ae 02 	call	0x55c	; 0x55c <HLCD_vidWriteChar>
			enteredpin[loc_counter] = 0;
  ec:	f7 01       	movw	r30, r14
  ee:	ed 0f       	add	r30, r29
  f0:	f1 1d       	adc	r31, r1
  f2:	10 82       	st	Z, r1
			ZeroFlag = 0;
  f4:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <ZeroFlag>
			loc_counter++;
  f8:	df 5f       	subi	r29, 0xFF	; 255
		
		BTN = KEYPAD_GetButton();
		if(BTN == KEY_NOTHING)continue;
		else if(ZeroFlag == 1 )
		{
			HLCD_gotoXY(1,colPos++);
  fa:	1c 2f       	mov	r17, r28
  fc:	14 c0       	rjmp	.+40     	; 0x126 <Get_pin+0x80>
			loc_counter++;
			
		}
		else
		{
			HLCD_gotoXY(1,colPos++);
  fe:	01 e0       	ldi	r16, 0x01	; 1
 100:	01 0f       	add	r16, r17
 102:	61 2f       	mov	r22, r17
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	0e 94 12 03 	call	0x624	; 0x624 <HLCD_gotoXY>
			HLCD_vidWriteChar('*');
 10a:	8a e2       	ldi	r24, 0x2A	; 42
 10c:	0e 94 ae 02 	call	0x55c	; 0x55c <HLCD_vidWriteChar>
			enteredpin[loc_counter] = keys_arr[BTN-1];
 110:	d7 01       	movw	r26, r14
 112:	ad 0f       	add	r26, r29
 114:	b1 1d       	adc	r27, r1
 116:	ec 2f       	mov	r30, r28
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	e1 5a       	subi	r30, 0xA1	; 161
 11c:	ff 4f       	sbci	r31, 0xFF	; 255
 11e:	80 81       	ld	r24, Z
 120:	8c 93       	st	X, r24
			loc_counter++;
 122:	df 5f       	subi	r29, 0xFF	; 255
			loc_counter++;
			
		}
		else
		{
			HLCD_gotoXY(1,colPos++);
 124:	10 2f       	mov	r17, r16
{
	Uchar8_t colPos=0;
	HLCD_gotoXY(0,0);
	HLCD_WriteString("Enter Your pin");
	Uchar8_t BTN,loc_counter=0;
	while (loc_counter < 4 && !setFlag)
 126:	d4 30       	cpi	r29, 0x04	; 4
 128:	20 f4       	brcc	.+8      	; 0x132 <Get_pin+0x8c>
 12a:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <__data_end>
 12e:	88 23       	and	r24, r24
 130:	61 f2       	breq	.-104    	; 0xca <Get_pin+0x24>
			loc_counter++;
		}
		
		
	}
	if(loc_counter<4)
 132:	d4 30       	cpi	r29, 0x04	; 4
 134:	10 f4       	brcc	.+4      	; 0x13a <Get_pin+0x94>
	{
		return PIN_NOT_OK;
 136:	84 e0       	ldi	r24, 0x04	; 4
 138:	01 c0       	rjmp	.+2      	; 0x13c <Get_pin+0x96>
	}
	else {
		return PIN_OK;
 13a:	83 e0       	ldi	r24, 0x03	; 3
	    }
}
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	1f 91       	pop	r17
 142:	0f 91       	pop	r16
 144:	ff 90       	pop	r15
 146:	ef 90       	pop	r14
 148:	08 95       	ret

0000014a <KEYPAD_init>:
 * 											Function Implementation
 ************************************************************************************************************/
void KEYPAD_init()
{
	// INITIALIZE ROWS AS OUTPUTS
	DIO_s8SETPinDir(R1,OUTPUT);
 14a:	61 e0       	ldi	r22, 0x01	; 1
 14c:	82 e1       	ldi	r24, 0x12	; 18
 14e:	0e 94 43 03 	call	0x686	; 0x686 <DIO_s8SETPinDir>
	DIO_s8SETPinDir(R2,OUTPUT);
 152:	61 e0       	ldi	r22, 0x01	; 1
 154:	83 e1       	ldi	r24, 0x13	; 19
 156:	0e 94 43 03 	call	0x686	; 0x686 <DIO_s8SETPinDir>
	DIO_s8SETPinDir(R3,OUTPUT);
 15a:	61 e0       	ldi	r22, 0x01	; 1
 15c:	84 e1       	ldi	r24, 0x14	; 20
 15e:	0e 94 43 03 	call	0x686	; 0x686 <DIO_s8SETPinDir>
	// INITIALIZE COLUMNS AS INPUTS
	DIO_s8SETPinDir(C1,INPUT);
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	85 e1       	ldi	r24, 0x15	; 21
 166:	0e 94 43 03 	call	0x686	; 0x686 <DIO_s8SETPinDir>
	DIO_s8SETPinDir(C2,INPUT);
 16a:	60 e0       	ldi	r22, 0x00	; 0
 16c:	86 e1       	ldi	r24, 0x16	; 22
 16e:	0e 94 43 03 	call	0x686	; 0x686 <DIO_s8SETPinDir>
	DIO_s8SETPinDir(C3,INPUT);
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	87 e1       	ldi	r24, 0x17	; 23
 176:	0e 94 43 03 	call	0x686	; 0x686 <DIO_s8SETPinDir>
 17a:	08 95       	ret

0000017c <checkR1>:
	
	
}
EN_KEYPAD_BTNS checkR1()
{
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	1f 92       	push	r1
 182:	cd b7       	in	r28, 0x3d	; 61
 184:	de b7       	in	r29, 0x3e	; 62
	DIO_s8SETPinVal(C1,HIGH);
 186:	61 e0       	ldi	r22, 0x01	; 1
 188:	85 e1       	ldi	r24, 0x15	; 21
 18a:	0e 94 83 03 	call	0x706	; 0x706 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C2,HIGH);
 18e:	61 e0       	ldi	r22, 0x01	; 1
 190:	86 e1       	ldi	r24, 0x16	; 22
 192:	0e 94 83 03 	call	0x706	; 0x706 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C3,HIGH);
 196:	61 e0       	ldi	r22, 0x01	; 1
 198:	87 e1       	ldi	r24, 0x17	; 23
 19a:	0e 94 83 03 	call	0x706	; 0x706 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R2,HIGH);
 19e:	61 e0       	ldi	r22, 0x01	; 1
 1a0:	83 e1       	ldi	r24, 0x13	; 19
 1a2:	0e 94 83 03 	call	0x706	; 0x706 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R3,HIGH);
 1a6:	61 e0       	ldi	r22, 0x01	; 1
 1a8:	84 e1       	ldi	r24, 0x14	; 20
 1aa:	0e 94 83 03 	call	0x706	; 0x706 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R1,LOW);
 1ae:	60 e0       	ldi	r22, 0x00	; 0
 1b0:	82 e1       	ldi	r24, 0x12	; 18
 1b2:	0e 94 83 03 	call	0x706	; 0x706 <DIO_s8SETPinVal>
	
	Uchar8_t val = 1;
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C1,&val);
 1ba:	be 01       	movw	r22, r28
 1bc:	6f 5f       	subi	r22, 0xFF	; 255
 1be:	7f 4f       	sbci	r23, 0xFF	; 255
 1c0:	85 e1       	ldi	r24, 0x15	; 21
 1c2:	0e 94 c3 03 	call	0x786	; 0x786 <DIO_s8GETPinVal>
	if(val == 0)
 1c6:	89 81       	ldd	r24, Y+1	; 0x01
 1c8:	88 23       	and	r24, r24
 1ca:	39 f0       	breq	.+14     	; 0x1da <checkR1+0x5e>
 1cc:	0b c0       	rjmp	.+22     	; 0x1e4 <checkR1+0x68>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C1,&val);
 1ce:	be 01       	movw	r22, r28
 1d0:	6f 5f       	subi	r22, 0xFF	; 255
 1d2:	7f 4f       	sbci	r23, 0xFF	; 255
 1d4:	85 e1       	ldi	r24, 0x15	; 21
 1d6:	0e 94 c3 03 	call	0x786	; 0x786 <DIO_s8GETPinVal>
	
	Uchar8_t val = 1;
	DIO_s8GETPinVal(C1,&val);
	if(val == 0)
	{
		while (val == 0)
 1da:	89 81       	ldd	r24, Y+1	; 0x01
 1dc:	88 23       	and	r24, r24
 1de:	b9 f3       	breq	.-18     	; 0x1ce <checkR1+0x52>
		{
			DIO_s8GETPinVal(C1,&val);
		}
		return KEY_1;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	2e c0       	rjmp	.+92     	; 0x240 <checkR1+0xc4>
	}
	val = 1;
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C2,&val);
 1e8:	be 01       	movw	r22, r28
 1ea:	6f 5f       	subi	r22, 0xFF	; 255
 1ec:	7f 4f       	sbci	r23, 0xFF	; 255
 1ee:	86 e1       	ldi	r24, 0x16	; 22
 1f0:	0e 94 c3 03 	call	0x786	; 0x786 <DIO_s8GETPinVal>
	if(val == 0)
 1f4:	89 81       	ldd	r24, Y+1	; 0x01
 1f6:	88 23       	and	r24, r24
 1f8:	39 f0       	breq	.+14     	; 0x208 <checkR1+0x8c>
 1fa:	0b c0       	rjmp	.+22     	; 0x212 <checkR1+0x96>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C2,&val);
 1fc:	be 01       	movw	r22, r28
 1fe:	6f 5f       	subi	r22, 0xFF	; 255
 200:	7f 4f       	sbci	r23, 0xFF	; 255
 202:	86 e1       	ldi	r24, 0x16	; 22
 204:	0e 94 c3 03 	call	0x786	; 0x786 <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C2,&val);
	if(val == 0)
	{
		while (val == 0)
 208:	89 81       	ldd	r24, Y+1	; 0x01
 20a:	88 23       	and	r24, r24
 20c:	b9 f3       	breq	.-18     	; 0x1fc <checkR1+0x80>
		{
			DIO_s8GETPinVal(C2,&val);
		}
		return KEY_2;
 20e:	82 e0       	ldi	r24, 0x02	; 2
 210:	17 c0       	rjmp	.+46     	; 0x240 <checkR1+0xc4>
	}
	val = 1;
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C3,&val);
 216:	be 01       	movw	r22, r28
 218:	6f 5f       	subi	r22, 0xFF	; 255
 21a:	7f 4f       	sbci	r23, 0xFF	; 255
 21c:	87 e1       	ldi	r24, 0x17	; 23
 21e:	0e 94 c3 03 	call	0x786	; 0x786 <DIO_s8GETPinVal>
	if(val == 0)
 222:	89 81       	ldd	r24, Y+1	; 0x01
 224:	88 23       	and	r24, r24
 226:	41 f0       	breq	.+16     	; 0x238 <checkR1+0xbc>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_3;
	}
	return KEY_NOTHING;
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	0a c0       	rjmp	.+20     	; 0x240 <checkR1+0xc4>
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C3,&val);
 22c:	be 01       	movw	r22, r28
 22e:	6f 5f       	subi	r22, 0xFF	; 255
 230:	7f 4f       	sbci	r23, 0xFF	; 255
 232:	87 e1       	ldi	r24, 0x17	; 23
 234:	0e 94 c3 03 	call	0x786	; 0x786 <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
 238:	89 81       	ldd	r24, Y+1	; 0x01
 23a:	88 23       	and	r24, r24
 23c:	b9 f3       	breq	.-18     	; 0x22c <checkR1+0xb0>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_3;
 23e:	83 e0       	ldi	r24, 0x03	; 3
	}
	return KEY_NOTHING;
	
}
 240:	0f 90       	pop	r0
 242:	df 91       	pop	r29
 244:	cf 91       	pop	r28
 246:	08 95       	ret

00000248 <checkR2>:
EN_KEYPAD_BTNS checkR2()
{
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
 24c:	1f 92       	push	r1
 24e:	cd b7       	in	r28, 0x3d	; 61
 250:	de b7       	in	r29, 0x3e	; 62
	
	DIO_s8SETPinVal(C1,HIGH);
 252:	61 e0       	ldi	r22, 0x01	; 1
 254:	85 e1       	ldi	r24, 0x15	; 21
 256:	0e 94 83 03 	call	0x706	; 0x706 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C2,HIGH);
 25a:	61 e0       	ldi	r22, 0x01	; 1
 25c:	86 e1       	ldi	r24, 0x16	; 22
 25e:	0e 94 83 03 	call	0x706	; 0x706 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C3,HIGH);
 262:	61 e0       	ldi	r22, 0x01	; 1
 264:	87 e1       	ldi	r24, 0x17	; 23
 266:	0e 94 83 03 	call	0x706	; 0x706 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R1,HIGH);
 26a:	61 e0       	ldi	r22, 0x01	; 1
 26c:	82 e1       	ldi	r24, 0x12	; 18
 26e:	0e 94 83 03 	call	0x706	; 0x706 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R3,HIGH);
 272:	61 e0       	ldi	r22, 0x01	; 1
 274:	84 e1       	ldi	r24, 0x14	; 20
 276:	0e 94 83 03 	call	0x706	; 0x706 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R2,LOW);
 27a:	60 e0       	ldi	r22, 0x00	; 0
 27c:	83 e1       	ldi	r24, 0x13	; 19
 27e:	0e 94 83 03 	call	0x706	; 0x706 <DIO_s8SETPinVal>
	
	Uchar8_t val = 1;
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C1,&val);
 286:	be 01       	movw	r22, r28
 288:	6f 5f       	subi	r22, 0xFF	; 255
 28a:	7f 4f       	sbci	r23, 0xFF	; 255
 28c:	85 e1       	ldi	r24, 0x15	; 21
 28e:	0e 94 c3 03 	call	0x786	; 0x786 <DIO_s8GETPinVal>
	if(val == 0)
 292:	89 81       	ldd	r24, Y+1	; 0x01
 294:	88 23       	and	r24, r24
 296:	39 f0       	breq	.+14     	; 0x2a6 <checkR2+0x5e>
 298:	0b c0       	rjmp	.+22     	; 0x2b0 <checkR2+0x68>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C1,&val);
 29a:	be 01       	movw	r22, r28
 29c:	6f 5f       	subi	r22, 0xFF	; 255
 29e:	7f 4f       	sbci	r23, 0xFF	; 255
 2a0:	85 e1       	ldi	r24, 0x15	; 21
 2a2:	0e 94 c3 03 	call	0x786	; 0x786 <DIO_s8GETPinVal>
	
	Uchar8_t val = 1;
	DIO_s8GETPinVal(C1,&val);
	if(val == 0)
	{
		while (val == 0)
 2a6:	89 81       	ldd	r24, Y+1	; 0x01
 2a8:	88 23       	and	r24, r24
 2aa:	b9 f3       	breq	.-18     	; 0x29a <checkR2+0x52>
		{
			DIO_s8GETPinVal(C1,&val);
		}
		return KEY_4;
 2ac:	84 e0       	ldi	r24, 0x04	; 4
 2ae:	2e c0       	rjmp	.+92     	; 0x30c <checkR2+0xc4>
	}
	val = 1;
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C2,&val);
 2b4:	be 01       	movw	r22, r28
 2b6:	6f 5f       	subi	r22, 0xFF	; 255
 2b8:	7f 4f       	sbci	r23, 0xFF	; 255
 2ba:	86 e1       	ldi	r24, 0x16	; 22
 2bc:	0e 94 c3 03 	call	0x786	; 0x786 <DIO_s8GETPinVal>
	if(val == 0)
 2c0:	89 81       	ldd	r24, Y+1	; 0x01
 2c2:	88 23       	and	r24, r24
 2c4:	39 f0       	breq	.+14     	; 0x2d4 <checkR2+0x8c>
 2c6:	0b c0       	rjmp	.+22     	; 0x2de <checkR2+0x96>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C2,&val);
 2c8:	be 01       	movw	r22, r28
 2ca:	6f 5f       	subi	r22, 0xFF	; 255
 2cc:	7f 4f       	sbci	r23, 0xFF	; 255
 2ce:	86 e1       	ldi	r24, 0x16	; 22
 2d0:	0e 94 c3 03 	call	0x786	; 0x786 <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C2,&val);
	if(val == 0)
	{
		while (val == 0)
 2d4:	89 81       	ldd	r24, Y+1	; 0x01
 2d6:	88 23       	and	r24, r24
 2d8:	b9 f3       	breq	.-18     	; 0x2c8 <checkR2+0x80>
		{
			DIO_s8GETPinVal(C2,&val);
		}
		return KEY_5;
 2da:	85 e0       	ldi	r24, 0x05	; 5
 2dc:	17 c0       	rjmp	.+46     	; 0x30c <checkR2+0xc4>
	}
	val = 1;
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C3,&val);
 2e2:	be 01       	movw	r22, r28
 2e4:	6f 5f       	subi	r22, 0xFF	; 255
 2e6:	7f 4f       	sbci	r23, 0xFF	; 255
 2e8:	87 e1       	ldi	r24, 0x17	; 23
 2ea:	0e 94 c3 03 	call	0x786	; 0x786 <DIO_s8GETPinVal>
	if(val == 0)
 2ee:	89 81       	ldd	r24, Y+1	; 0x01
 2f0:	88 23       	and	r24, r24
 2f2:	41 f0       	breq	.+16     	; 0x304 <checkR2+0xbc>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_6;
	}
	return KEY_NOTHING;
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	0a c0       	rjmp	.+20     	; 0x30c <checkR2+0xc4>
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C3,&val);
 2f8:	be 01       	movw	r22, r28
 2fa:	6f 5f       	subi	r22, 0xFF	; 255
 2fc:	7f 4f       	sbci	r23, 0xFF	; 255
 2fe:	87 e1       	ldi	r24, 0x17	; 23
 300:	0e 94 c3 03 	call	0x786	; 0x786 <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
 304:	89 81       	ldd	r24, Y+1	; 0x01
 306:	88 23       	and	r24, r24
 308:	b9 f3       	breq	.-18     	; 0x2f8 <checkR2+0xb0>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_6;
 30a:	86 e0       	ldi	r24, 0x06	; 6
	}
	return KEY_NOTHING;
	
}
 30c:	0f 90       	pop	r0
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	08 95       	ret

00000314 <checkR3>:
EN_KEYPAD_BTNS checkR3()
{
 314:	cf 93       	push	r28
 316:	df 93       	push	r29
 318:	1f 92       	push	r1
 31a:	cd b7       	in	r28, 0x3d	; 61
 31c:	de b7       	in	r29, 0x3e	; 62
	
	DIO_s8SETPinVal(C1,HIGH);
 31e:	61 e0       	ldi	r22, 0x01	; 1
 320:	85 e1       	ldi	r24, 0x15	; 21
 322:	0e 94 83 03 	call	0x706	; 0x706 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C2,HIGH);
 326:	61 e0       	ldi	r22, 0x01	; 1
 328:	86 e1       	ldi	r24, 0x16	; 22
 32a:	0e 94 83 03 	call	0x706	; 0x706 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C3,HIGH);
 32e:	61 e0       	ldi	r22, 0x01	; 1
 330:	87 e1       	ldi	r24, 0x17	; 23
 332:	0e 94 83 03 	call	0x706	; 0x706 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R1,HIGH);
 336:	61 e0       	ldi	r22, 0x01	; 1
 338:	82 e1       	ldi	r24, 0x12	; 18
 33a:	0e 94 83 03 	call	0x706	; 0x706 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R2,HIGH);
 33e:	61 e0       	ldi	r22, 0x01	; 1
 340:	83 e1       	ldi	r24, 0x13	; 19
 342:	0e 94 83 03 	call	0x706	; 0x706 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R3,LOW);
 346:	60 e0       	ldi	r22, 0x00	; 0
 348:	84 e1       	ldi	r24, 0x14	; 20
 34a:	0e 94 83 03 	call	0x706	; 0x706 <DIO_s8SETPinVal>
	
	Uchar8_t val = 1;
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C1,&val);
 352:	be 01       	movw	r22, r28
 354:	6f 5f       	subi	r22, 0xFF	; 255
 356:	7f 4f       	sbci	r23, 0xFF	; 255
 358:	85 e1       	ldi	r24, 0x15	; 21
 35a:	0e 94 c3 03 	call	0x786	; 0x786 <DIO_s8GETPinVal>
	if(val == 0)
 35e:	89 81       	ldd	r24, Y+1	; 0x01
 360:	88 23       	and	r24, r24
 362:	39 f0       	breq	.+14     	; 0x372 <checkR3+0x5e>
 364:	0b c0       	rjmp	.+22     	; 0x37c <checkR3+0x68>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C1,&val);
 366:	be 01       	movw	r22, r28
 368:	6f 5f       	subi	r22, 0xFF	; 255
 36a:	7f 4f       	sbci	r23, 0xFF	; 255
 36c:	85 e1       	ldi	r24, 0x15	; 21
 36e:	0e 94 c3 03 	call	0x786	; 0x786 <DIO_s8GETPinVal>
	
	Uchar8_t val = 1;
	DIO_s8GETPinVal(C1,&val);
	if(val == 0)
	{
		while (val == 0)
 372:	89 81       	ldd	r24, Y+1	; 0x01
 374:	88 23       	and	r24, r24
 376:	b9 f3       	breq	.-18     	; 0x366 <checkR3+0x52>
		{
			DIO_s8GETPinVal(C1,&val);
		}
		return KEY_7;
 378:	87 e0       	ldi	r24, 0x07	; 7
 37a:	2e c0       	rjmp	.+92     	; 0x3d8 <checkR3+0xc4>
	}
	val = 1;
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C2,&val);
 380:	be 01       	movw	r22, r28
 382:	6f 5f       	subi	r22, 0xFF	; 255
 384:	7f 4f       	sbci	r23, 0xFF	; 255
 386:	86 e1       	ldi	r24, 0x16	; 22
 388:	0e 94 c3 03 	call	0x786	; 0x786 <DIO_s8GETPinVal>
	if(val == 0)
 38c:	89 81       	ldd	r24, Y+1	; 0x01
 38e:	88 23       	and	r24, r24
 390:	39 f0       	breq	.+14     	; 0x3a0 <checkR3+0x8c>
 392:	0b c0       	rjmp	.+22     	; 0x3aa <checkR3+0x96>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C2,&val);
 394:	be 01       	movw	r22, r28
 396:	6f 5f       	subi	r22, 0xFF	; 255
 398:	7f 4f       	sbci	r23, 0xFF	; 255
 39a:	86 e1       	ldi	r24, 0x16	; 22
 39c:	0e 94 c3 03 	call	0x786	; 0x786 <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C2,&val);
	if(val == 0)
	{
		while (val == 0)
 3a0:	89 81       	ldd	r24, Y+1	; 0x01
 3a2:	88 23       	and	r24, r24
 3a4:	b9 f3       	breq	.-18     	; 0x394 <checkR3+0x80>
		{
			DIO_s8GETPinVal(C2,&val);
		}
		return KEY_8;
 3a6:	88 e0       	ldi	r24, 0x08	; 8
 3a8:	17 c0       	rjmp	.+46     	; 0x3d8 <checkR3+0xc4>
	}
	val = 1;
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C3,&val);
 3ae:	be 01       	movw	r22, r28
 3b0:	6f 5f       	subi	r22, 0xFF	; 255
 3b2:	7f 4f       	sbci	r23, 0xFF	; 255
 3b4:	87 e1       	ldi	r24, 0x17	; 23
 3b6:	0e 94 c3 03 	call	0x786	; 0x786 <DIO_s8GETPinVal>
	if(val == 0)
 3ba:	89 81       	ldd	r24, Y+1	; 0x01
 3bc:	88 23       	and	r24, r24
 3be:	41 f0       	breq	.+16     	; 0x3d0 <checkR3+0xbc>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_9;
	}
	return KEY_NOTHING;
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	0a c0       	rjmp	.+20     	; 0x3d8 <checkR3+0xc4>
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C3,&val);
 3c4:	be 01       	movw	r22, r28
 3c6:	6f 5f       	subi	r22, 0xFF	; 255
 3c8:	7f 4f       	sbci	r23, 0xFF	; 255
 3ca:	87 e1       	ldi	r24, 0x17	; 23
 3cc:	0e 94 c3 03 	call	0x786	; 0x786 <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
 3d0:	89 81       	ldd	r24, Y+1	; 0x01
 3d2:	88 23       	and	r24, r24
 3d4:	b9 f3       	breq	.-18     	; 0x3c4 <checkR3+0xb0>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_9;
 3d6:	89 e0       	ldi	r24, 0x09	; 9
	}
	return KEY_NOTHING;
}
 3d8:	0f 90       	pop	r0
 3da:	df 91       	pop	r29
 3dc:	cf 91       	pop	r28
 3de:	08 95       	ret

000003e0 <KEYPAD_GetButton>:
EN_KEYPAD_BTNS KEYPAD_GetButton()
{
	EN_KEYPAD_BTNS PRESSED = KEY_NOTHING;
	while(PRESSED == KEY_NOTHING)
	{
		PRESSED = checkR1();
 3e0:	0e 94 be 00 	call	0x17c	; 0x17c <checkR1>
		if(PRESSED != KEY_NOTHING) return PRESSED;
 3e4:	81 11       	cpse	r24, r1
 3e6:	06 c0       	rjmp	.+12     	; 0x3f4 <KEYPAD_GetButton+0x14>
		PRESSED = checkR2();
 3e8:	0e 94 24 01 	call	0x248	; 0x248 <checkR2>
		if(PRESSED != KEY_NOTHING) return PRESSED;
 3ec:	81 11       	cpse	r24, r1
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <KEYPAD_GetButton+0x14>
		PRESSED = checkR3();
 3f0:	0e 94 8a 01 	call	0x314	; 0x314 <checkR3>
		if(PRESSED != KEY_NOTHING) return PRESSED;
		return KEY_NOTHING;
	}
	
	return KEY_NOTHING;
}
 3f4:	08 95       	ret

000003f6 <HLCD_vidWritecmd>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3f6:	1f 93       	push	r17
 3f8:	cf 93       	push	r28
 3fa:	df 93       	push	r29
 3fc:	d8 2f       	mov	r29, r24
 3fe:	60 e0       	ldi	r22, 0x00	; 0
 400:	82 e0       	ldi	r24, 0x02	; 2
 402:	0e 94 83 03 	call	0x706	; 0x706 <DIO_s8SETPinVal>
 406:	60 e0       	ldi	r22, 0x00	; 0
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	0e 94 83 03 	call	0x706	; 0x706 <DIO_s8SETPinVal>
 40e:	1d 2f       	mov	r17, r29
 410:	12 95       	swap	r17
 412:	1f 70       	andi	r17, 0x0F	; 15
 414:	c0 e0       	ldi	r28, 0x00	; 0
 416:	11 c0       	rjmp	.+34     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 418:	ec 2f       	mov	r30, r28
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	61 2f       	mov	r22, r17
 41e:	70 e0       	ldi	r23, 0x00	; 0
 420:	0c 2e       	mov	r0, r28
 422:	02 c0       	rjmp	.+4      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 424:	75 95       	asr	r23
 426:	67 95       	ror	r22
 428:	0a 94       	dec	r0
 42a:	e2 f7       	brpl	.-8      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 42c:	61 70       	andi	r22, 0x01	; 1
 42e:	e7 59       	subi	r30, 0x97	; 151
 430:	ff 4f       	sbci	r31, 0xFF	; 255
 432:	80 81       	ld	r24, Z
 434:	0e 94 83 03 	call	0x706	; 0x706 <DIO_s8SETPinVal>
 438:	cf 5f       	subi	r28, 0xFF	; 255
 43a:	c4 30       	cpi	r28, 0x04	; 4
 43c:	68 f3       	brcs	.-38     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 43e:	61 e0       	ldi	r22, 0x01	; 1
 440:	83 e0       	ldi	r24, 0x03	; 3
 442:	0e 94 83 03 	call	0x706	; 0x706 <DIO_s8SETPinVal>
 446:	89 ef       	ldi	r24, 0xF9	; 249
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	01 97       	sbiw	r24, 0x01	; 1
 44c:	f1 f7       	brne	.-4      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 44e:	00 c0       	rjmp	.+0      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 450:	00 00       	nop
 452:	60 e0       	ldi	r22, 0x00	; 0
 454:	83 e0       	ldi	r24, 0x03	; 3
 456:	0e 94 83 03 	call	0x706	; 0x706 <DIO_s8SETPinVal>
 45a:	92 e4       	ldi	r25, 0x42	; 66
 45c:	9a 95       	dec	r25
 45e:	f1 f7       	brne	.-4      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 460:	00 c0       	rjmp	.+0      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 462:	df 70       	andi	r29, 0x0F	; 15
 464:	c0 e0       	ldi	r28, 0x00	; 0
 466:	11 c0       	rjmp	.+34     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 468:	ec 2f       	mov	r30, r28
 46a:	f0 e0       	ldi	r31, 0x00	; 0
 46c:	6d 2f       	mov	r22, r29
 46e:	70 e0       	ldi	r23, 0x00	; 0
 470:	0c 2e       	mov	r0, r28
 472:	02 c0       	rjmp	.+4      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 474:	75 95       	asr	r23
 476:	67 95       	ror	r22
 478:	0a 94       	dec	r0
 47a:	e2 f7       	brpl	.-8      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 47c:	61 70       	andi	r22, 0x01	; 1
 47e:	e7 59       	subi	r30, 0x97	; 151
 480:	ff 4f       	sbci	r31, 0xFF	; 255
 482:	80 81       	ld	r24, Z
 484:	0e 94 83 03 	call	0x706	; 0x706 <DIO_s8SETPinVal>
 488:	cf 5f       	subi	r28, 0xFF	; 255
 48a:	c4 30       	cpi	r28, 0x04	; 4
 48c:	68 f3       	brcs	.-38     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 48e:	61 e0       	ldi	r22, 0x01	; 1
 490:	83 e0       	ldi	r24, 0x03	; 3
 492:	0e 94 83 03 	call	0x706	; 0x706 <DIO_s8SETPinVal>
 496:	89 ef       	ldi	r24, 0xF9	; 249
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	01 97       	sbiw	r24, 0x01	; 1
 49c:	f1 f7       	brne	.-4      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 49e:	00 c0       	rjmp	.+0      	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
 4a0:	00 00       	nop
 4a2:	60 e0       	ldi	r22, 0x00	; 0
 4a4:	83 e0       	ldi	r24, 0x03	; 3
 4a6:	0e 94 83 03 	call	0x706	; 0x706 <DIO_s8SETPinVal>
 4aa:	83 ef       	ldi	r24, 0xF3	; 243
 4ac:	91 e0       	ldi	r25, 0x01	; 1
 4ae:	01 97       	sbiw	r24, 0x01	; 1
 4b0:	f1 f7       	brne	.-4      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 4b4:	00 00       	nop
 4b6:	df 91       	pop	r29
 4b8:	cf 91       	pop	r28
 4ba:	1f 91       	pop	r17
 4bc:	08 95       	ret

000004be <HLCD_vidInit>:
 4be:	cf 93       	push	r28
 4c0:	c0 e0       	ldi	r28, 0x00	; 0
 4c2:	09 c0       	rjmp	.+18     	; 0x4d6 <HLCD_vidInit+0x18>
 4c4:	ec 2f       	mov	r30, r28
 4c6:	f0 e0       	ldi	r31, 0x00	; 0
 4c8:	e7 59       	subi	r30, 0x97	; 151
 4ca:	ff 4f       	sbci	r31, 0xFF	; 255
 4cc:	61 e0       	ldi	r22, 0x01	; 1
 4ce:	80 81       	ld	r24, Z
 4d0:	0e 94 43 03 	call	0x686	; 0x686 <DIO_s8SETPinDir>
 4d4:	cf 5f       	subi	r28, 0xFF	; 255
 4d6:	c4 30       	cpi	r28, 0x04	; 4
 4d8:	a8 f3       	brcs	.-22     	; 0x4c4 <HLCD_vidInit+0x6>
 4da:	61 e0       	ldi	r22, 0x01	; 1
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	0e 94 43 03 	call	0x686	; 0x686 <DIO_s8SETPinDir>
 4e2:	61 e0       	ldi	r22, 0x01	; 1
 4e4:	82 e0       	ldi	r24, 0x02	; 2
 4e6:	0e 94 43 03 	call	0x686	; 0x686 <DIO_s8SETPinDir>
 4ea:	61 e0       	ldi	r22, 0x01	; 1
 4ec:	83 e0       	ldi	r24, 0x03	; 3
 4ee:	0e 94 43 03 	call	0x686	; 0x686 <DIO_s8SETPinDir>
 4f2:	8f e0       	ldi	r24, 0x0F	; 15
 4f4:	97 e2       	ldi	r25, 0x27	; 39
 4f6:	01 97       	sbiw	r24, 0x01	; 1
 4f8:	f1 f7       	brne	.-4      	; 0x4f6 <HLCD_vidInit+0x38>
 4fa:	00 c0       	rjmp	.+0      	; 0x4fc <HLCD_vidInit+0x3e>
 4fc:	00 00       	nop
 4fe:	82 e0       	ldi	r24, 0x02	; 2
 500:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <HLCD_vidWritecmd>
 504:	89 ef       	ldi	r24, 0xF9	; 249
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	01 97       	sbiw	r24, 0x01	; 1
 50a:	f1 f7       	brne	.-4      	; 0x508 <HLCD_vidInit+0x4a>
 50c:	00 c0       	rjmp	.+0      	; 0x50e <HLCD_vidInit+0x50>
 50e:	00 00       	nop
 510:	88 e2       	ldi	r24, 0x28	; 40
 512:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <HLCD_vidWritecmd>
 516:	89 ef       	ldi	r24, 0xF9	; 249
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	01 97       	sbiw	r24, 0x01	; 1
 51c:	f1 f7       	brne	.-4      	; 0x51a <HLCD_vidInit+0x5c>
 51e:	00 c0       	rjmp	.+0      	; 0x520 <HLCD_vidInit+0x62>
 520:	00 00       	nop
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <HLCD_vidWritecmd>
 528:	87 ee       	ldi	r24, 0xE7	; 231
 52a:	93 e0       	ldi	r25, 0x03	; 3
 52c:	01 97       	sbiw	r24, 0x01	; 1
 52e:	f1 f7       	brne	.-4      	; 0x52c <HLCD_vidInit+0x6e>
 530:	00 c0       	rjmp	.+0      	; 0x532 <HLCD_vidInit+0x74>
 532:	00 00       	nop
 534:	86 e0       	ldi	r24, 0x06	; 6
 536:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <HLCD_vidWritecmd>
 53a:	89 ef       	ldi	r24, 0xF9	; 249
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	01 97       	sbiw	r24, 0x01	; 1
 540:	f1 f7       	brne	.-4      	; 0x53e <HLCD_vidInit+0x80>
 542:	00 c0       	rjmp	.+0      	; 0x544 <HLCD_vidInit+0x86>
 544:	00 00       	nop
 546:	8e e0       	ldi	r24, 0x0E	; 14
 548:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <HLCD_vidWritecmd>
 54c:	89 ef       	ldi	r24, 0xF9	; 249
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	01 97       	sbiw	r24, 0x01	; 1
 552:	f1 f7       	brne	.-4      	; 0x550 <HLCD_vidInit+0x92>
 554:	00 c0       	rjmp	.+0      	; 0x556 <HLCD_vidInit+0x98>
 556:	00 00       	nop
 558:	cf 91       	pop	r28
 55a:	08 95       	ret

0000055c <HLCD_vidWriteChar>:
 55c:	1f 93       	push	r17
 55e:	cf 93       	push	r28
 560:	df 93       	push	r29
 562:	d8 2f       	mov	r29, r24
 564:	60 e0       	ldi	r22, 0x00	; 0
 566:	82 e0       	ldi	r24, 0x02	; 2
 568:	0e 94 83 03 	call	0x706	; 0x706 <DIO_s8SETPinVal>
 56c:	61 e0       	ldi	r22, 0x01	; 1
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	0e 94 83 03 	call	0x706	; 0x706 <DIO_s8SETPinVal>
 574:	1d 2f       	mov	r17, r29
 576:	12 95       	swap	r17
 578:	1f 70       	andi	r17, 0x0F	; 15
 57a:	c0 e0       	ldi	r28, 0x00	; 0
 57c:	11 c0       	rjmp	.+34     	; 0x5a0 <HLCD_vidWriteChar+0x44>
 57e:	ec 2f       	mov	r30, r28
 580:	f0 e0       	ldi	r31, 0x00	; 0
 582:	61 2f       	mov	r22, r17
 584:	70 e0       	ldi	r23, 0x00	; 0
 586:	0c 2e       	mov	r0, r28
 588:	02 c0       	rjmp	.+4      	; 0x58e <HLCD_vidWriteChar+0x32>
 58a:	75 95       	asr	r23
 58c:	67 95       	ror	r22
 58e:	0a 94       	dec	r0
 590:	e2 f7       	brpl	.-8      	; 0x58a <HLCD_vidWriteChar+0x2e>
 592:	61 70       	andi	r22, 0x01	; 1
 594:	e7 59       	subi	r30, 0x97	; 151
 596:	ff 4f       	sbci	r31, 0xFF	; 255
 598:	80 81       	ld	r24, Z
 59a:	0e 94 83 03 	call	0x706	; 0x706 <DIO_s8SETPinVal>
 59e:	cf 5f       	subi	r28, 0xFF	; 255
 5a0:	c4 30       	cpi	r28, 0x04	; 4
 5a2:	68 f3       	brcs	.-38     	; 0x57e <HLCD_vidWriteChar+0x22>
 5a4:	61 e0       	ldi	r22, 0x01	; 1
 5a6:	83 e0       	ldi	r24, 0x03	; 3
 5a8:	0e 94 83 03 	call	0x706	; 0x706 <DIO_s8SETPinVal>
 5ac:	89 ef       	ldi	r24, 0xF9	; 249
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	01 97       	sbiw	r24, 0x01	; 1
 5b2:	f1 f7       	brne	.-4      	; 0x5b0 <HLCD_vidWriteChar+0x54>
 5b4:	00 c0       	rjmp	.+0      	; 0x5b6 <HLCD_vidWriteChar+0x5a>
 5b6:	00 00       	nop
 5b8:	60 e0       	ldi	r22, 0x00	; 0
 5ba:	83 e0       	ldi	r24, 0x03	; 3
 5bc:	0e 94 83 03 	call	0x706	; 0x706 <DIO_s8SETPinVal>
 5c0:	92 e4       	ldi	r25, 0x42	; 66
 5c2:	9a 95       	dec	r25
 5c4:	f1 f7       	brne	.-4      	; 0x5c2 <HLCD_vidWriteChar+0x66>
 5c6:	00 c0       	rjmp	.+0      	; 0x5c8 <HLCD_vidWriteChar+0x6c>
 5c8:	df 70       	andi	r29, 0x0F	; 15
 5ca:	c0 e0       	ldi	r28, 0x00	; 0
 5cc:	11 c0       	rjmp	.+34     	; 0x5f0 <HLCD_vidWriteChar+0x94>
 5ce:	ec 2f       	mov	r30, r28
 5d0:	f0 e0       	ldi	r31, 0x00	; 0
 5d2:	6d 2f       	mov	r22, r29
 5d4:	70 e0       	ldi	r23, 0x00	; 0
 5d6:	0c 2e       	mov	r0, r28
 5d8:	02 c0       	rjmp	.+4      	; 0x5de <HLCD_vidWriteChar+0x82>
 5da:	75 95       	asr	r23
 5dc:	67 95       	ror	r22
 5de:	0a 94       	dec	r0
 5e0:	e2 f7       	brpl	.-8      	; 0x5da <HLCD_vidWriteChar+0x7e>
 5e2:	61 70       	andi	r22, 0x01	; 1
 5e4:	e7 59       	subi	r30, 0x97	; 151
 5e6:	ff 4f       	sbci	r31, 0xFF	; 255
 5e8:	80 81       	ld	r24, Z
 5ea:	0e 94 83 03 	call	0x706	; 0x706 <DIO_s8SETPinVal>
 5ee:	cf 5f       	subi	r28, 0xFF	; 255
 5f0:	c4 30       	cpi	r28, 0x04	; 4
 5f2:	68 f3       	brcs	.-38     	; 0x5ce <HLCD_vidWriteChar+0x72>
 5f4:	61 e0       	ldi	r22, 0x01	; 1
 5f6:	83 e0       	ldi	r24, 0x03	; 3
 5f8:	0e 94 83 03 	call	0x706	; 0x706 <DIO_s8SETPinVal>
 5fc:	89 ef       	ldi	r24, 0xF9	; 249
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	01 97       	sbiw	r24, 0x01	; 1
 602:	f1 f7       	brne	.-4      	; 0x600 <HLCD_vidWriteChar+0xa4>
 604:	00 c0       	rjmp	.+0      	; 0x606 <HLCD_vidWriteChar+0xaa>
 606:	00 00       	nop
 608:	60 e0       	ldi	r22, 0x00	; 0
 60a:	83 e0       	ldi	r24, 0x03	; 3
 60c:	0e 94 83 03 	call	0x706	; 0x706 <DIO_s8SETPinVal>
 610:	83 ef       	ldi	r24, 0xF3	; 243
 612:	91 e0       	ldi	r25, 0x01	; 1
 614:	01 97       	sbiw	r24, 0x01	; 1
 616:	f1 f7       	brne	.-4      	; 0x614 <HLCD_vidWriteChar+0xb8>
 618:	00 c0       	rjmp	.+0      	; 0x61a <HLCD_vidWriteChar+0xbe>
 61a:	00 00       	nop
 61c:	df 91       	pop	r29
 61e:	cf 91       	pop	r28
 620:	1f 91       	pop	r17
 622:	08 95       	ret

00000624 <HLCD_gotoXY>:
 * 				  pos -> take colom number from 0 ~ 16
 * return		: void
 * */
void HLCD_gotoXY(Uchar8_t row, Uchar8_t pos)
{
	if (row==0 && pos < 16)
 624:	81 11       	cpse	r24, r1
 626:	08 c0       	rjmp	.+16     	; 0x638 <HLCD_gotoXY+0x14>
 628:	60 31       	cpi	r22, 0x10	; 16
 62a:	30 f4       	brcc	.+12     	; 0x638 <HLCD_gotoXY+0x14>
	{
		HLCD_vidWritecmd((pos & 0x0F)| 0x80);
 62c:	86 2f       	mov	r24, r22
 62e:	8f 70       	andi	r24, 0x0F	; 15
 630:	80 68       	ori	r24, 0x80	; 128
 632:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <HLCD_vidWritecmd>
 636:	08 95       	ret
	}
	else if (row==1 && pos < 16)
 638:	81 30       	cpi	r24, 0x01	; 1
 63a:	39 f4       	brne	.+14     	; 0x64a <HLCD_gotoXY+0x26>
 63c:	60 31       	cpi	r22, 0x10	; 16
 63e:	28 f4       	brcc	.+10     	; 0x64a <HLCD_gotoXY+0x26>
	{
		HLCD_vidWritecmd((pos & 0x0F)| 0xC0);
 640:	86 2f       	mov	r24, r22
 642:	8f 70       	andi	r24, 0x0F	; 15
 644:	80 6c       	ori	r24, 0xC0	; 192
 646:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <HLCD_vidWritecmd>
 64a:	08 95       	ret

0000064c <HLCD_WriteString>:
 * description 	: func to write string on lcd
 * input param 	: str --> which take string as argument
 * return		: void
 * */
void HLCD_WriteString(const char* str)
{
 64c:	0f 93       	push	r16
 64e:	1f 93       	push	r17
 650:	cf 93       	push	r28
 652:	df 93       	push	r29
 654:	8c 01       	movw	r16, r24
	Uint16_t count = 0;
	Uchar8_t string = str[count];
 656:	fc 01       	movw	r30, r24
 658:	80 81       	ld	r24, Z
 * input param 	: str --> which take string as argument
 * return		: void
 * */
void HLCD_WriteString(const char* str)
{
	Uint16_t count = 0;
 65a:	c0 e0       	ldi	r28, 0x00	; 0
 65c:	d0 e0       	ldi	r29, 0x00	; 0
	Uchar8_t string = str[count];
	while(string)
 65e:	07 c0       	rjmp	.+14     	; 0x66e <HLCD_WriteString+0x22>
	{
		HLCD_vidWriteChar(string);
 660:	0e 94 ae 02 	call	0x55c	; 0x55c <HLCD_vidWriteChar>
		string = str[++count];
 664:	21 96       	adiw	r28, 0x01	; 1
 666:	f8 01       	movw	r30, r16
 668:	ec 0f       	add	r30, r28
 66a:	fd 1f       	adc	r31, r29
 66c:	80 81       	ld	r24, Z
 * */
void HLCD_WriteString(const char* str)
{
	Uint16_t count = 0;
	Uchar8_t string = str[count];
	while(string)
 66e:	81 11       	cpse	r24, r1
 670:	f7 cf       	rjmp	.-18     	; 0x660 <HLCD_WriteString+0x14>
	{
		HLCD_vidWriteChar(string);
		string = str[++count];
	}
}
 672:	df 91       	pop	r29
 674:	cf 91       	pop	r28
 676:	1f 91       	pop	r17
 678:	0f 91       	pop	r16
 67a:	08 95       	ret

0000067c <main>:
 */ 


int main(void)
{
	APP_Init();
 67c:	0e 94 49 00 	call	0x92	; 0x92 <APP_Init>
	APP_Start();
 680:	0e 94 4e 00 	call	0x9c	; 0x9c <APP_Start>
 684:	ff cf       	rjmp	.-2      	; 0x684 <main+0x8>

00000686 <DIO_s8SETPinDir>:
	{
		errStatus = E_NOK;
	}
	return errStatus;

}
 686:	80 32       	cpi	r24, 0x20	; 32
 688:	c0 f5       	brcc	.+112    	; 0x6fa <DIO_s8SETPinDir+0x74>
 68a:	62 30       	cpi	r22, 0x02	; 2
 68c:	c0 f5       	brcc	.+112    	; 0x6fe <DIO_s8SETPinDir+0x78>
 68e:	e8 2f       	mov	r30, r24
 690:	e6 95       	lsr	r30
 692:	e6 95       	lsr	r30
 694:	e6 95       	lsr	r30
 696:	87 70       	andi	r24, 0x07	; 7
 698:	61 11       	cpse	r22, r1
 69a:	17 c0       	rjmp	.+46     	; 0x6ca <DIO_s8SETPinDir+0x44>
 69c:	f0 e0       	ldi	r31, 0x00	; 0
 69e:	ee 0f       	add	r30, r30
 6a0:	ff 1f       	adc	r31, r31
 6a2:	eb 58       	subi	r30, 0x8B	; 139
 6a4:	ff 4f       	sbci	r31, 0xFF	; 255
 6a6:	01 90       	ld	r0, Z+
 6a8:	f0 81       	ld	r31, Z
 6aa:	e0 2d       	mov	r30, r0
 6ac:	40 81       	ld	r20, Z
 6ae:	21 e0       	ldi	r18, 0x01	; 1
 6b0:	30 e0       	ldi	r19, 0x00	; 0
 6b2:	b9 01       	movw	r22, r18
 6b4:	02 c0       	rjmp	.+4      	; 0x6ba <DIO_s8SETPinDir+0x34>
 6b6:	66 0f       	add	r22, r22
 6b8:	77 1f       	adc	r23, r23
 6ba:	8a 95       	dec	r24
 6bc:	e2 f7       	brpl	.-8      	; 0x6b6 <DIO_s8SETPinDir+0x30>
 6be:	cb 01       	movw	r24, r22
 6c0:	80 95       	com	r24
 6c2:	84 23       	and	r24, r20
 6c4:	80 83       	st	Z, r24
 6c6:	80 e0       	ldi	r24, 0x00	; 0
 6c8:	08 95       	ret
 6ca:	61 30       	cpi	r22, 0x01	; 1
 6cc:	d1 f4       	brne	.+52     	; 0x702 <DIO_s8SETPinDir+0x7c>
 6ce:	f0 e0       	ldi	r31, 0x00	; 0
 6d0:	ee 0f       	add	r30, r30
 6d2:	ff 1f       	adc	r31, r31
 6d4:	eb 58       	subi	r30, 0x8B	; 139
 6d6:	ff 4f       	sbci	r31, 0xFF	; 255
 6d8:	01 90       	ld	r0, Z+
 6da:	f0 81       	ld	r31, Z
 6dc:	e0 2d       	mov	r30, r0
 6de:	40 81       	ld	r20, Z
 6e0:	21 e0       	ldi	r18, 0x01	; 1
 6e2:	30 e0       	ldi	r19, 0x00	; 0
 6e4:	b9 01       	movw	r22, r18
 6e6:	02 c0       	rjmp	.+4      	; 0x6ec <DIO_s8SETPinDir+0x66>
 6e8:	66 0f       	add	r22, r22
 6ea:	77 1f       	adc	r23, r23
 6ec:	8a 95       	dec	r24
 6ee:	e2 f7       	brpl	.-8      	; 0x6e8 <DIO_s8SETPinDir+0x62>
 6f0:	cb 01       	movw	r24, r22
 6f2:	84 2b       	or	r24, r20
 6f4:	80 83       	st	Z, r24
 6f6:	80 e0       	ldi	r24, 0x00	; 0
 6f8:	08 95       	ret
 6fa:	8f ef       	ldi	r24, 0xFF	; 255
 6fc:	08 95       	ret
 6fe:	8f ef       	ldi	r24, 0xFF	; 255
 700:	08 95       	ret
 702:	80 e0       	ldi	r24, 0x00	; 0
 704:	08 95       	ret

00000706 <DIO_s8SETPinVal>:
 706:	80 32       	cpi	r24, 0x20	; 32
 708:	c0 f5       	brcc	.+112    	; 0x77a <DIO_s8SETPinVal+0x74>
 70a:	62 30       	cpi	r22, 0x02	; 2
 70c:	c0 f5       	brcc	.+112    	; 0x77e <DIO_s8SETPinVal+0x78>
 70e:	e8 2f       	mov	r30, r24
 710:	e6 95       	lsr	r30
 712:	e6 95       	lsr	r30
 714:	e6 95       	lsr	r30
 716:	87 70       	andi	r24, 0x07	; 7
 718:	61 11       	cpse	r22, r1
 71a:	17 c0       	rjmp	.+46     	; 0x74a <DIO_s8SETPinVal+0x44>
 71c:	f0 e0       	ldi	r31, 0x00	; 0
 71e:	ee 0f       	add	r30, r30
 720:	ff 1f       	adc	r31, r31
 722:	e3 58       	subi	r30, 0x83	; 131
 724:	ff 4f       	sbci	r31, 0xFF	; 255
 726:	01 90       	ld	r0, Z+
 728:	f0 81       	ld	r31, Z
 72a:	e0 2d       	mov	r30, r0
 72c:	40 81       	ld	r20, Z
 72e:	21 e0       	ldi	r18, 0x01	; 1
 730:	30 e0       	ldi	r19, 0x00	; 0
 732:	b9 01       	movw	r22, r18
 734:	02 c0       	rjmp	.+4      	; 0x73a <DIO_s8SETPinVal+0x34>
 736:	66 0f       	add	r22, r22
 738:	77 1f       	adc	r23, r23
 73a:	8a 95       	dec	r24
 73c:	e2 f7       	brpl	.-8      	; 0x736 <DIO_s8SETPinVal+0x30>
 73e:	cb 01       	movw	r24, r22
 740:	80 95       	com	r24
 742:	84 23       	and	r24, r20
 744:	80 83       	st	Z, r24
 746:	80 e0       	ldi	r24, 0x00	; 0
 748:	08 95       	ret
 74a:	61 30       	cpi	r22, 0x01	; 1
 74c:	d1 f4       	brne	.+52     	; 0x782 <DIO_s8SETPinVal+0x7c>
 74e:	f0 e0       	ldi	r31, 0x00	; 0
 750:	ee 0f       	add	r30, r30
 752:	ff 1f       	adc	r31, r31
 754:	e3 58       	subi	r30, 0x83	; 131
 756:	ff 4f       	sbci	r31, 0xFF	; 255
 758:	01 90       	ld	r0, Z+
 75a:	f0 81       	ld	r31, Z
 75c:	e0 2d       	mov	r30, r0
 75e:	40 81       	ld	r20, Z
 760:	21 e0       	ldi	r18, 0x01	; 1
 762:	30 e0       	ldi	r19, 0x00	; 0
 764:	b9 01       	movw	r22, r18
 766:	02 c0       	rjmp	.+4      	; 0x76c <DIO_s8SETPinVal+0x66>
 768:	66 0f       	add	r22, r22
 76a:	77 1f       	adc	r23, r23
 76c:	8a 95       	dec	r24
 76e:	e2 f7       	brpl	.-8      	; 0x768 <DIO_s8SETPinVal+0x62>
 770:	cb 01       	movw	r24, r22
 772:	84 2b       	or	r24, r20
 774:	80 83       	st	Z, r24
 776:	80 e0       	ldi	r24, 0x00	; 0
 778:	08 95       	ret
 77a:	8f ef       	ldi	r24, 0xFF	; 255
 77c:	08 95       	ret
 77e:	8f ef       	ldi	r24, 0xFF	; 255
 780:	08 95       	ret
 782:	80 e0       	ldi	r24, 0x00	; 0
 784:	08 95       	ret

00000786 <DIO_s8GETPinVal>:
Uchar8_t DIO_s8GETPinVal (enu_pin enPinCopy, Uchar8_t* pu8Val)
{
	Uchar8_t errStatus = E_OK;
	Uchar8_t portID;
	Uchar8_t pinID;
	if (enPinCopy < PIN_INVALID)
 786:	80 32       	cpi	r24, 0x20	; 32
 788:	d8 f4       	brcc	.+54     	; 0x7c0 <DIO_s8GETPinVal+0x3a>
	{
		portID = enPinCopy/8;
 78a:	e8 2f       	mov	r30, r24
 78c:	e6 95       	lsr	r30
 78e:	e6 95       	lsr	r30
 790:	e6 95       	lsr	r30
		pinID  = enPinCopy%8;
 792:	87 70       	andi	r24, 0x07	; 7

		*pu8Val = GET_BIT(*pinReg[portID], pinID);
 794:	f0 e0       	ldi	r31, 0x00	; 0
 796:	ee 0f       	add	r30, r30
 798:	ff 1f       	adc	r31, r31
 79a:	e3 59       	subi	r30, 0x93	; 147
 79c:	ff 4f       	sbci	r31, 0xFF	; 255
 79e:	01 90       	ld	r0, Z+
 7a0:	f0 81       	ld	r31, Z
 7a2:	e0 2d       	mov	r30, r0
 7a4:	20 81       	ld	r18, Z
 7a6:	30 e0       	ldi	r19, 0x00	; 0
 7a8:	a9 01       	movw	r20, r18
 7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <DIO_s8GETPinVal+0x2a>
 7ac:	55 95       	asr	r21
 7ae:	47 95       	ror	r20
 7b0:	8a 95       	dec	r24
 7b2:	e2 f7       	brpl	.-8      	; 0x7ac <DIO_s8GETPinVal+0x26>
 7b4:	ca 01       	movw	r24, r20
 7b6:	81 70       	andi	r24, 0x01	; 1
 7b8:	fb 01       	movw	r30, r22
 7ba:	80 83       	st	Z, r24

}

Uchar8_t DIO_s8GETPinVal (enu_pin enPinCopy, Uchar8_t* pu8Val)
{
	Uchar8_t errStatus = E_OK;
 7bc:	80 e0       	ldi	r24, 0x00	; 0
 7be:	08 95       	ret
		*pu8Val = GET_BIT(*pinReg[portID], pinID);

	}
	else
	{
		errStatus = E_NOK;
 7c0:	8f ef       	ldi	r24, 0xFF	; 255
	}
	return errStatus;
 7c2:	08 95       	ret

000007c4 <__vector_1>:
	return EXTINT_OK;
}


ISR (EXT_INT_0)
{
 7c4:	1f 92       	push	r1
 7c6:	0f 92       	push	r0
 7c8:	0f b6       	in	r0, 0x3f	; 63
 7ca:	0f 92       	push	r0
 7cc:	11 24       	eor	r1, r1
 7ce:	2f 93       	push	r18
 7d0:	3f 93       	push	r19
 7d2:	4f 93       	push	r20
 7d4:	5f 93       	push	r21
 7d6:	6f 93       	push	r22
 7d8:	7f 93       	push	r23
 7da:	8f 93       	push	r24
 7dc:	9f 93       	push	r25
 7de:	af 93       	push	r26
 7e0:	bf 93       	push	r27
 7e2:	ef 93       	push	r30
 7e4:	ff 93       	push	r31
	if(ptrINT0) ptrINT0();
 7e6:	e0 91 ad 00 	lds	r30, 0x00AD	; 0x8000ad <ptrINT0>
 7ea:	f0 91 ae 00 	lds	r31, 0x00AE	; 0x8000ae <ptrINT0+0x1>
 7ee:	30 97       	sbiw	r30, 0x00	; 0
 7f0:	09 f0       	breq	.+2      	; 0x7f4 <__vector_1+0x30>
 7f2:	09 95       	icall
}
 7f4:	ff 91       	pop	r31
 7f6:	ef 91       	pop	r30
 7f8:	bf 91       	pop	r27
 7fa:	af 91       	pop	r26
 7fc:	9f 91       	pop	r25
 7fe:	8f 91       	pop	r24
 800:	7f 91       	pop	r23
 802:	6f 91       	pop	r22
 804:	5f 91       	pop	r21
 806:	4f 91       	pop	r20
 808:	3f 91       	pop	r19
 80a:	2f 91       	pop	r18
 80c:	0f 90       	pop	r0
 80e:	0f be       	out	0x3f, r0	; 63
 810:	0f 90       	pop	r0
 812:	1f 90       	pop	r1
 814:	18 95       	reti

00000816 <__vector_2>:

ISR (EXT_INT_1)
{
 816:	1f 92       	push	r1
 818:	0f 92       	push	r0
 81a:	0f b6       	in	r0, 0x3f	; 63
 81c:	0f 92       	push	r0
 81e:	11 24       	eor	r1, r1
 820:	2f 93       	push	r18
 822:	3f 93       	push	r19
 824:	4f 93       	push	r20
 826:	5f 93       	push	r21
 828:	6f 93       	push	r22
 82a:	7f 93       	push	r23
 82c:	8f 93       	push	r24
 82e:	9f 93       	push	r25
 830:	af 93       	push	r26
 832:	bf 93       	push	r27
 834:	ef 93       	push	r30
 836:	ff 93       	push	r31
	if(ptrINT1) ptrINT1();
 838:	e0 91 ab 00 	lds	r30, 0x00AB	; 0x8000ab <ptrINT1>
 83c:	f0 91 ac 00 	lds	r31, 0x00AC	; 0x8000ac <ptrINT1+0x1>
 840:	30 97       	sbiw	r30, 0x00	; 0
 842:	09 f0       	breq	.+2      	; 0x846 <__vector_2+0x30>
 844:	09 95       	icall
}
 846:	ff 91       	pop	r31
 848:	ef 91       	pop	r30
 84a:	bf 91       	pop	r27
 84c:	af 91       	pop	r26
 84e:	9f 91       	pop	r25
 850:	8f 91       	pop	r24
 852:	7f 91       	pop	r23
 854:	6f 91       	pop	r22
 856:	5f 91       	pop	r21
 858:	4f 91       	pop	r20
 85a:	3f 91       	pop	r19
 85c:	2f 91       	pop	r18
 85e:	0f 90       	pop	r0
 860:	0f be       	out	0x3f, r0	; 63
 862:	0f 90       	pop	r0
 864:	1f 90       	pop	r1
 866:	18 95       	reti

00000868 <__vector_3>:

ISR (EXT_INT_2)
{
 868:	1f 92       	push	r1
 86a:	0f 92       	push	r0
 86c:	0f b6       	in	r0, 0x3f	; 63
 86e:	0f 92       	push	r0
 870:	11 24       	eor	r1, r1
 872:	2f 93       	push	r18
 874:	3f 93       	push	r19
 876:	4f 93       	push	r20
 878:	5f 93       	push	r21
 87a:	6f 93       	push	r22
 87c:	7f 93       	push	r23
 87e:	8f 93       	push	r24
 880:	9f 93       	push	r25
 882:	af 93       	push	r26
 884:	bf 93       	push	r27
 886:	ef 93       	push	r30
 888:	ff 93       	push	r31
	if(ptrINT2) ptrINT2();
 88a:	e0 91 a9 00 	lds	r30, 0x00A9	; 0x8000a9 <ptrINT2>
 88e:	f0 91 aa 00 	lds	r31, 0x00AA	; 0x8000aa <ptrINT2+0x1>
 892:	30 97       	sbiw	r30, 0x00	; 0
 894:	09 f0       	breq	.+2      	; 0x898 <__vector_3+0x30>
 896:	09 95       	icall
 898:	ff 91       	pop	r31
 89a:	ef 91       	pop	r30
 89c:	bf 91       	pop	r27
 89e:	af 91       	pop	r26
 8a0:	9f 91       	pop	r25
 8a2:	8f 91       	pop	r24
 8a4:	7f 91       	pop	r23
 8a6:	6f 91       	pop	r22
 8a8:	5f 91       	pop	r21
 8aa:	4f 91       	pop	r20
 8ac:	3f 91       	pop	r19
 8ae:	2f 91       	pop	r18
 8b0:	0f 90       	pop	r0
 8b2:	0f be       	out	0x3f, r0	; 63
 8b4:	0f 90       	pop	r0
 8b6:	1f 90       	pop	r1
 8b8:	18 95       	reti

000008ba <__vector_12>:

/*************************************************************************************************************
 * 													  ISRs
 ************************************************************************************************************/
ISR(SPI_STC_INT)
{
 8ba:	1f 92       	push	r1
 8bc:	0f 92       	push	r0
 8be:	0f b6       	in	r0, 0x3f	; 63
 8c0:	0f 92       	push	r0
 8c2:	11 24       	eor	r1, r1
 8c4:	2f 93       	push	r18
 8c6:	3f 93       	push	r19
 8c8:	8f 93       	push	r24
 8ca:	9f 93       	push	r25
 8cc:	ef 93       	push	r30
 8ce:	ff 93       	push	r31
	/*------------------------ Reception ------------------------*/
	u8_g_SlaveReceive = SPDR;
 8d0:	8f b1       	in	r24, 0x0f	; 15
 8d2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <u8_g_SlaveReceive>
	//DIO_s8SETPortVal(DIO_PORTA, u8_g_SlaveReceive);
	
	/* If Max size is exceeded, start overriding data */
	if(u8_g_SlaveRxIndex == SPI_BUFFER_SIZE) u8_g_SlaveRxIndex = 0;
 8d6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <u8_g_SlaveRxIndex>
 8da:	9f 30       	cpi	r25, 0x0F	; 15
 8dc:	11 f4       	brne	.+4      	; 0x8e2 <__vector_12+0x28>
 8de:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <u8_g_SlaveRxIndex>
	if(u8_g_SlaveReceive != DATA_END)
 8e2:	83 32       	cpi	r24, 0x23	; 35
 8e4:	59 f0       	breq	.+22     	; 0x8fc <__vector_12+0x42>
	{
		/* Store received byte in buffer */
		arr_g_SlaveRxBuffer[u8_g_SlaveRxIndex] = u8_g_SlaveReceive;
 8e6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <u8_g_SlaveRxIndex>
 8ea:	e9 2f       	mov	r30, r25
 8ec:	f0 e0       	ldi	r31, 0x00	; 0
 8ee:	e1 55       	subi	r30, 0x51	; 81
 8f0:	ff 4f       	sbci	r31, 0xFF	; 255
 8f2:	80 83       	st	Z, r24
		u8_g_SlaveRxIndex++;
 8f4:	9f 5f       	subi	r25, 0xFF	; 255
 8f6:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <u8_g_SlaveRxIndex>
 8fa:	04 c0       	rjmp	.+8      	; 0x904 <__vector_12+0x4a>
	}
	else
	{	// Get the number of received bytes
		u8_g_SlaveRxLen = u8_g_SlaveRxIndex;
 8fc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <u8_g_SlaveRxIndex>
 900:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <u8_g_SlaveRxLen>
	}
	
	/*------------------------- Sending -------------------------*/
	//u8_g_SlaveTxIndex++;
	if((u8_g_SlaveTxIndex < u8_g_SlaveTxLen) && (pu8_g_SlaveTxPtr != NULL))
 904:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <u8_g_SlaveTxIndex>
 908:	90 91 c4 00 	lds	r25, 0x00C4	; 0x8000c4 <u8_g_SlaveTxLen>
 90c:	89 17       	cp	r24, r25
 90e:	88 f4       	brcc	.+34     	; 0x932 <__vector_12+0x78>
 910:	20 91 be 00 	lds	r18, 0x00BE	; 0x8000be <pu8_g_SlaveTxPtr>
 914:	30 91 bf 00 	lds	r19, 0x00BF	; 0x8000bf <pu8_g_SlaveTxPtr+0x1>
 918:	21 15       	cp	r18, r1
 91a:	31 05       	cpc	r19, r1
 91c:	51 f0       	breq	.+20     	; 0x932 <__vector_12+0x78>
	{
		SPDR = pu8_g_SlaveTxPtr[u8_g_SlaveTxIndex++];
 91e:	91 e0       	ldi	r25, 0x01	; 1
 920:	98 0f       	add	r25, r24
 922:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <u8_g_SlaveTxIndex>
 926:	f9 01       	movw	r30, r18
 928:	e8 0f       	add	r30, r24
 92a:	f1 1d       	adc	r31, r1
 92c:	80 81       	ld	r24, Z
 92e:	8f b9       	out	0x0f, r24	; 15
 930:	04 c0       	rjmp	.+8      	; 0x93a <__vector_12+0x80>
	}
	else if(u8_g_SlaveTxIndex >= u8_g_SlaveTxLen)
 932:	89 17       	cp	r24, r25
 934:	10 f0       	brcs	.+4      	; 0x93a <__vector_12+0x80>
	{
		SPDR = DATA_END;
 936:	83 e2       	ldi	r24, 0x23	; 35
 938:	8f b9       	out	0x0f, r24	; 15
	}
 93a:	ff 91       	pop	r31
 93c:	ef 91       	pop	r30
 93e:	9f 91       	pop	r25
 940:	8f 91       	pop	r24
 942:	3f 91       	pop	r19
 944:	2f 91       	pop	r18
 946:	0f 90       	pop	r0
 948:	0f be       	out	0x3f, r0	; 63
 94a:	0f 90       	pop	r0
 94c:	1f 90       	pop	r1
 94e:	18 95       	reti

00000950 <_exit>:
 950:	f8 94       	cli

00000952 <__stop_program>:
 952:	ff cf       	rjmp	.-2      	; 0x952 <__stop_program>
