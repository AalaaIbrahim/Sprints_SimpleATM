
ATM_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002332  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000238  00800060  00002332  000023c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005b  00800298  00800298  000025fe  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000025fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000265c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000530  00000000  00000000  00002698  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000065b7  00000000  00000000  00002bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d8f  00000000  00000000  0000917f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000032ba  00000000  00000000  0000af0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d30  00000000  00000000  0000e1c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001aba  00000000  00000000  0000eef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003507  00000000  00000000  000109b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003e8  00000000  00000000  00013eb9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
       4:	0c 94 a4 0a 	jmp	0x1548	; 0x1548 <__vector_1>
       8:	0c 94 cd 0a 	jmp	0x159a	; 0x159a <__vector_2>
       c:	0c 94 f6 0a 	jmp	0x15ec	; 0x15ec <__vector_3>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 2c 0d 	jmp	0x1a58	; 0x1a58 <__vector_5>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 f9 0b 	jmp	0x17f2	; 0x17f2 <__vector_11>
      30:	0c 94 5d 0b 	jmp	0x16ba	; 0x16ba <__vector_12>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	4e 41       	sbci	r20, 0x1E	; 30
      56:	4e 49       	Address 0x00000056 is out of bounds.
.word	0xffff	; ????

00000057 <pstr_inity>:
      57:	49 4e 49 54 59                                      INITY

0000005c <pstr_inf>:
      5c:	49 4e 46                                            INF

0000005f <pwr_m10>:
      5f:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      6f:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000077 <pwr_p10>:
      77:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      87:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000090 <__ctors_end>:
      90:	11 24       	eor	r1, r1
      92:	1f be       	out	0x3f, r1	; 63
      94:	cf e5       	ldi	r28, 0x5F	; 95
      96:	d8 e0       	ldi	r29, 0x08	; 8
      98:	de bf       	out	0x3e, r29	; 62
      9a:	cd bf       	out	0x3d, r28	; 61

0000009c <__do_copy_data>:
      9c:	12 e0       	ldi	r17, 0x02	; 2
      9e:	a0 e6       	ldi	r26, 0x60	; 96
      a0:	b0 e0       	ldi	r27, 0x00	; 0
      a2:	e2 e3       	ldi	r30, 0x32	; 50
      a4:	f3 e2       	ldi	r31, 0x23	; 35
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
      a8:	05 90       	lpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a8 39       	cpi	r26, 0x98	; 152
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	a8 e9       	ldi	r26, 0x98	; 152
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a3 3f       	cpi	r26, 0xF3	; 243
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 55 09 	call	0x12aa	; 0x12aa <main>
      c6:	0c 94 97 11 	jmp	0x232e	; 0x232e <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <TriggerCallBack>:
************************************************************************************************************/


void TriggerCallBack(void)
{
	TriggerState = TRIGGER;
      ce:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
      d2:	08 95       	ret

000000d4 <timer_ovfCount>:
 * RETURN			: void
 */

void timer_ovfCount(void)
{
	global_u8OVFCounter++;
      d4:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <global_u8OVFCounter>
      d8:	8f 5f       	subi	r24, 0xFF	; 255
      da:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <global_u8OVFCounter>
      de:	08 95       	ret

000000e0 <APP_Init>:
}
void APP_Init(void)
{
	
	//(void)HButton_Init(DIO_PINB_2);
	(void)KEYPAD_init();
      e0:	0e 94 11 06 	call	0xc22	; 0xc22 <KEYPAD_init>
	(void)HTimer_enInit();
      e4:	0e 94 7d 05 	call	0xafa	; 0xafa <HTimer_enInit>
	(void)HTimer_enCBF(timer_ovfCount);
      e8:	8a e6       	ldi	r24, 0x6A	; 106
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	0e 94 8f 05 	call	0xb1e	; 0xb1e <HTimer_enCBF>
	(void)HLCD_vidInit();
      f0:	0e 94 cb 07 	call	0xf96	; 0xf96 <HLCD_vidInit>
	(void)HSPI_MasterInit();
      f4:	0e 94 6e 04 	call	0x8dc	; 0x8dc <HSPI_MasterInit>
	(void)H_EXTINT_create(EXTINT0, ANY_LOGICAL_CHANGE,TriggerCallBack);
      f8:	47 e6       	ldi	r20, 0x67	; 103
      fa:	50 e0       	ldi	r21, 0x00	; 0
      fc:	63 e0       	ldi	r22, 0x03	; 3
      fe:	80 e0       	ldi	r24, 0x00	; 0
     100:	0e 94 97 05 	call	0xb2e	; 0xb2e <H_EXTINT_create>
	(void)SwICU_Init();
     104:	0e 94 bb 05 	call	0xb76	; 0xb76 <SwICU_Init>
	(void)BUZ_Init(&st_g_Buzzer);
     108:	84 e6       	ldi	r24, 0x64	; 100
     10a:	91 e0       	ldi	r25, 0x01	; 1
     10c:	0e 94 56 04 	call	0x8ac	; 0x8ac <BUZ_Init>
	(void)HButton_ExtIntInit(DIO_PINB_2);
     110:	8a e0       	ldi	r24, 0x0A	; 10
     112:	0e 94 4f 04 	call	0x89e	; 0x89e <HButton_ExtIntInit>
	(void)H_EXTINT_create(EXTINT2, FALLING_EDGE,EXTINT_FUNC);
     116:	42 e7       	ldi	r20, 0x72	; 114
     118:	51 e0       	ldi	r21, 0x01	; 1
     11a:	61 e0       	ldi	r22, 0x01	; 1
     11c:	82 e0       	ldi	r24, 0x02	; 2
     11e:	0e 94 97 05 	call	0xb2e	; 0xb2e <H_EXTINT_create>
     122:	08 95       	ret

00000124 <APP_Start>:


void APP_Start(void)
{
			
	switch(TriggerState)
     124:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     128:	81 30       	cpi	r24, 0x01	; 1
     12a:	79 f1       	breq	.+94     	; 0x18a <APP_Start+0x66>
     12c:	18 f0       	brcs	.+6      	; 0x134 <APP_Start+0x10>
     12e:	82 30       	cpi	r24, 0x02	; 2
     130:	b1 f1       	breq	.+108    	; 0x19e <APP_Start+0x7a>
     132:	08 95       	ret
	{
		case TRIGGER:
		{
			welcomeFlag = 0;
     134:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <welcomeFlag>
			if(Get_pin(ATMpin)==PIN_NOT_OK)break;
     138:	8c e9       	ldi	r24, 0x9C	; 156
     13a:	92 e0       	ldi	r25, 0x02	; 2
     13c:	0e 94 14 02 	call	0x428	; 0x428 <Get_pin>
     140:	84 30       	cpi	r24, 0x04	; 4
     142:	09 f4       	brne	.+2      	; 0x146 <APP_Start+0x22>
     144:	ce c0       	rjmp	.+412    	; 0x2e2 <APP_Start+0x1be>
			if(ATM_ValidatePIN() == PIN_MATCHED)
     146:	0e 94 49 03 	call	0x692	; 0x692 <ATM_ValidatePIN>
     14a:	81 11       	cpse	r24, r1
     14c:	04 c0       	rjmp	.+8      	; 0x156 <APP_Start+0x32>
			{
				TriggerState = CHECKING;
     14e:	82 e0       	ldi	r24, 0x02	; 2
     150:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     154:	08 95       	ret
                  
			}
			else
			{
				trialsFlag++;
     156:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <__data_end>
     15a:	8f 5f       	subi	r24, 0xFF	; 255
     15c:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <__data_end>
				/* Lock system if max tries exceeded */
				if(trialsFlag == 3)
     160:	83 30       	cpi	r24, 0x03	; 3
     162:	09 f0       	breq	.+2      	; 0x166 <APP_Start+0x42>
     164:	be c0       	rjmp	.+380    	; 0x2e2 <APP_Start+0x1be>
				{
					HLCD_ClrDisplay();
     166:	0e 94 7e 08 	call	0x10fc	; 0x10fc <HLCD_ClrDisplay>
					HLCD_gotoXY(0,4);
     16a:	64 e0       	ldi	r22, 0x04	; 4
     16c:	80 e0       	ldi	r24, 0x00	; 0
     16e:	0e 94 91 08 	call	0x1122	; 0x1122 <HLCD_gotoXY>
					HLCD_WriteString("LOCKED");
     172:	8a e8       	ldi	r24, 0x8A	; 138
     174:	91 e0       	ldi	r25, 0x01	; 1
     176:	0e 94 a5 08 	call	0x114a	; 0x114a <HLCD_WriteString>
					deinitAtm(&st_g_Buzzer);
     17a:	84 e6       	ldi	r24, 0x64	; 100
     17c:	91 e0       	ldi	r25, 0x01	; 1
     17e:	0e 94 45 03 	call	0x68a	; 0x68a <deinitAtm>
					TriggerState = IDLE;
     182:	83 e0       	ldi	r24, 0x03	; 3
     184:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     188:	08 95       	ret
			//TriggerState = N_TRIGGER;
			break;
		}
		case N_TRIGGER:
		{
			if(welcomeFlag == 0)
     18a:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <welcomeFlag>
     18e:	81 11       	cpse	r24, r1
     190:	a8 c0       	rjmp	.+336    	; 0x2e2 <APP_Start+0x1be>
			{
				Welcome();
     192:	0e 94 a6 01 	call	0x34c	; 0x34c <Welcome>
				welcomeFlag = 1;
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <welcomeFlag>
     19c:	08 95       	ret
			break;
		}
        case CHECKING:
       {

		get_amount_left(Entered_amount);
     19e:	81 e6       	ldi	r24, 0x61	; 97
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	0e 94 a9 02 	call	0x552	; 0x552 <get_amount_left>
		HLCD_ClrDisplay();
     1a6:	0e 94 7e 08 	call	0x10fc	; 0x10fc <HLCD_ClrDisplay>
		DB_CHECK = DATABASE_checking(CARDpan,Entered_amount,&newAMOUNT);
     1aa:	46 ec       	ldi	r20, 0xC6	; 198
     1ac:	52 e0       	ldi	r21, 0x02	; 2
     1ae:	61 e6       	ldi	r22, 0x61	; 97
     1b0:	70 e0       	ldi	r23, 0x00	; 0
     1b2:	84 ed       	ldi	r24, 0xD4	; 212
     1b4:	92 e0       	ldi	r25, 0x02	; 2
     1b6:	0e 94 2a 04 	call	0x854	; 0x854 <DATABASE_checking>
     1ba:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <DB_CHECK>
		switch(DB_CHECK){
     1be:	82 30       	cpi	r24, 0x02	; 2
     1c0:	d1 f1       	breq	.+116    	; 0x236 <APP_Start+0x112>
     1c2:	28 f4       	brcc	.+10     	; 0x1ce <APP_Start+0xaa>
     1c4:	88 23       	and	r24, r24
     1c6:	51 f0       	breq	.+20     	; 0x1dc <APP_Start+0xb8>
     1c8:	81 30       	cpi	r24, 0x01	; 1
     1ca:	b1 f0       	breq	.+44     	; 0x1f8 <APP_Start+0xd4>
     1cc:	08 95       	ret
     1ce:	83 30       	cpi	r24, 0x03	; 3
     1d0:	09 f4       	brne	.+2      	; 0x1d4 <APP_Start+0xb0>
     1d2:	50 c0       	rjmp	.+160    	; 0x274 <APP_Start+0x150>
     1d4:	84 30       	cpi	r24, 0x04	; 4
     1d6:	09 f4       	brne	.+2      	; 0x1da <APP_Start+0xb6>
     1d8:	6a c0       	rjmp	.+212    	; 0x2ae <APP_Start+0x18a>
     1da:	08 95       	ret
			case APPROVED:
			{
				ATM_ApprovedCard(newAMOUNT);
     1dc:	60 91 c6 02 	lds	r22, 0x02C6	; 0x8002c6 <newAMOUNT>
     1e0:	70 91 c7 02 	lds	r23, 0x02C7	; 0x8002c7 <newAMOUNT+0x1>
     1e4:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <newAMOUNT+0x2>
     1e8:	90 91 c9 02 	lds	r25, 0x02C9	; 0x8002c9 <newAMOUNT+0x3>
     1ec:	0e 94 c2 01 	call	0x384	; 0x384 <ATM_ApprovedCard>
				TriggerState = N_TRIGGER;
     1f0:	81 e0       	ldi	r24, 0x01	; 1
     1f2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				break;
     1f6:	08 95       	ret
			}
			case FRAUD_CARD:
			{
				deinitAtm(&st_g_Buzzer);
     1f8:	84 e6       	ldi	r24, 0x64	; 100
     1fa:	91 e0       	ldi	r25, 0x01	; 1
     1fc:	0e 94 45 03 	call	0x68a	; 0x68a <deinitAtm>
				HLCD_gotoXY(0, 4);
     200:	64 e0       	ldi	r22, 0x04	; 4
     202:	80 e0       	ldi	r24, 0x00	; 0
     204:	0e 94 91 08 	call	0x1122	; 0x1122 <HLCD_gotoXY>
				HLCD_WriteString("This is a");
     208:	81 e9       	ldi	r24, 0x91	; 145
     20a:	91 e0       	ldi	r25, 0x01	; 1
     20c:	0e 94 a5 08 	call	0x114a	; 0x114a <HLCD_WriteString>
				HLCD_gotoXY(1, 2);
     210:	62 e0       	ldi	r22, 0x02	; 2
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	0e 94 91 08 	call	0x1122	; 0x1122 <HLCD_gotoXY>
				HLCD_WriteString("Fraud Card");
     218:	8b e9       	ldi	r24, 0x9B	; 155
     21a:	91 e0       	ldi	r25, 0x01	; 1
     21c:	0e 94 a5 08 	call	0x114a	; 0x114a <HLCD_WriteString>
				HTIM0_SyncDelay(1, Seconds);
     220:	42 e0       	ldi	r20, 0x02	; 2
     222:	61 e0       	ldi	r22, 0x01	; 1
     224:	70 e0       	ldi	r23, 0x00	; 0
     226:	80 e0       	ldi	r24, 0x00	; 0
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	0e 94 d7 04 	call	0x9ae	; 0x9ae <HTIM0_SyncDelay>
				TriggerState = IDLE;
     22e:	83 e0       	ldi	r24, 0x03	; 3
     230:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				break;
     234:	08 95       	ret
			}
			case CARD_STOLEN:
			{
				deinitAtm(&st_g_Buzzer);
     236:	84 e6       	ldi	r24, 0x64	; 100
     238:	91 e0       	ldi	r25, 0x01	; 1
     23a:	0e 94 45 03 	call	0x68a	; 0x68a <deinitAtm>
				HLCD_gotoXY(0, 4);
     23e:	64 e0       	ldi	r22, 0x04	; 4
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	0e 94 91 08 	call	0x1122	; 0x1122 <HLCD_gotoXY>
				HLCD_WriteString("This Card ");
     246:	86 ea       	ldi	r24, 0xA6	; 166
     248:	91 e0       	ldi	r25, 0x01	; 1
     24a:	0e 94 a5 08 	call	0x114a	; 0x114a <HLCD_WriteString>
				HLCD_gotoXY(1, 2);
     24e:	62 e0       	ldi	r22, 0x02	; 2
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	0e 94 91 08 	call	0x1122	; 0x1122 <HLCD_gotoXY>
				HLCD_WriteString("is Stolen");
     256:	81 eb       	ldi	r24, 0xB1	; 177
     258:	91 e0       	ldi	r25, 0x01	; 1
     25a:	0e 94 a5 08 	call	0x114a	; 0x114a <HLCD_WriteString>
				HTIM0_SyncDelay(1, Seconds);
     25e:	42 e0       	ldi	r20, 0x02	; 2
     260:	61 e0       	ldi	r22, 0x01	; 1
     262:	70 e0       	ldi	r23, 0x00	; 0
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	0e 94 d7 04 	call	0x9ae	; 0x9ae <HTIM0_SyncDelay>
				TriggerState = IDLE;
     26c:	83 e0       	ldi	r24, 0x03	; 3
     26e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				break;
     272:	08 95       	ret
			}
			case EXCEED_MAX_DAILY_AMOUNT:
			{
				
				HLCD_gotoXY(0, 4);
     274:	64 e0       	ldi	r22, 0x04	; 4
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	0e 94 91 08 	call	0x1122	; 0x1122 <HLCD_gotoXY>
				HLCD_WriteString("Max Limit ");
     27c:	8b eb       	ldi	r24, 0xBB	; 187
     27e:	91 e0       	ldi	r25, 0x01	; 1
     280:	0e 94 a5 08 	call	0x114a	; 0x114a <HLCD_WriteString>
				HLCD_gotoXY(1, 2);
     284:	62 e0       	ldi	r22, 0x02	; 2
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	0e 94 91 08 	call	0x1122	; 0x1122 <HLCD_gotoXY>
				HLCD_WriteString("is Exceeded");
     28c:	86 ec       	ldi	r24, 0xC6	; 198
     28e:	91 e0       	ldi	r25, 0x01	; 1
     290:	0e 94 a5 08 	call	0x114a	; 0x114a <HLCD_WriteString>
				HTIM0_SyncDelay(1, Seconds);
     294:	42 e0       	ldi	r20, 0x02	; 2
     296:	61 e0       	ldi	r22, 0x01	; 1
     298:	70 e0       	ldi	r23, 0x00	; 0
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	0e 94 d7 04 	call	0x9ae	; 0x9ae <HTIM0_SyncDelay>
				HLCD_ClrDisplay();
     2a2:	0e 94 7e 08 	call	0x10fc	; 0x10fc <HLCD_ClrDisplay>
				TriggerState = CHECKING;
     2a6:	82 e0       	ldi	r24, 0x02	; 2
     2a8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				break;
     2ac:	08 95       	ret
			}
			case INSUFFICIENT_FUND:
			{
				
				HLCD_gotoXY(0, 4);
     2ae:	64 e0       	ldi	r22, 0x04	; 4
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	0e 94 91 08 	call	0x1122	; 0x1122 <HLCD_gotoXY>
				HLCD_WriteString("INSUFFICIENT ");
     2b6:	82 ed       	ldi	r24, 0xD2	; 210
     2b8:	91 e0       	ldi	r25, 0x01	; 1
     2ba:	0e 94 a5 08 	call	0x114a	; 0x114a <HLCD_WriteString>
				HLCD_gotoXY(1, 2);
     2be:	62 e0       	ldi	r22, 0x02	; 2
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	0e 94 91 08 	call	0x1122	; 0x1122 <HLCD_gotoXY>
				HLCD_WriteString("FUND");
     2c6:	80 ee       	ldi	r24, 0xE0	; 224
     2c8:	91 e0       	ldi	r25, 0x01	; 1
     2ca:	0e 94 a5 08 	call	0x114a	; 0x114a <HLCD_WriteString>
				HTIM0_SyncDelay(1, Seconds);
     2ce:	42 e0       	ldi	r20, 0x02	; 2
     2d0:	61 e0       	ldi	r22, 0x01	; 1
     2d2:	70 e0       	ldi	r23, 0x00	; 0
     2d4:	80 e0       	ldi	r24, 0x00	; 0
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	0e 94 d7 04 	call	0x9ae	; 0x9ae <HTIM0_SyncDelay>
				
				TriggerState = CHECKING;
     2dc:	82 e0       	ldi	r24, 0x02	; 2
     2de:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     2e2:	08 95       	ret

000002e4 <EXTINT_FUNC>:
	//Uchar8_t arr_g_CardPIN[5];
	//Uchar8_t arr_g_CardPAN[20];

	void Card_Trigger(void)
	{
		u8_g_ReceivePIN = 1;
     2e4:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <counter.2217>
     2e8:	81 11       	cpse	r24, r1
     2ea:	10 c0       	rjmp	.+32     	; 0x30c <EXTINT_FUNC+0x28>
     2ec:	64 e6       	ldi	r22, 0x64	; 100
     2ee:	70 e0       	ldi	r23, 0x00	; 0
     2f0:	80 e0       	ldi	r24, 0x00	; 0
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	0e 94 87 05 	call	0xb0e	; 0xb0e <HTimer_vidDelayMs>
     2f8:	42 e7       	ldi	r20, 0x72	; 114
     2fa:	51 e0       	ldi	r21, 0x01	; 1
     2fc:	62 e0       	ldi	r22, 0x02	; 2
     2fe:	82 e0       	ldi	r24, 0x02	; 2
     300:	0e 94 97 05 	call	0xb2e	; 0xb2e <H_EXTINT_create>
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <counter.2217>
     30a:	08 95       	ret
     30c:	81 30       	cpi	r24, 0x01	; 1
     30e:	e9 f4       	brne	.+58     	; 0x34a <EXTINT_FUNC+0x66>
     310:	0e 94 8c 05 	call	0xb18	; 0xb18 <HTimer_enStop>
     314:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <global_u8OVFCounter>
     318:	9f ef       	ldi	r25, 0xFF	; 255
     31a:	98 0f       	add	r25, r24
     31c:	93 31       	cpi	r25, 0x13	; 19
     31e:	18 f4       	brcc	.+6      	; 0x326 <EXTINT_FUNC+0x42>
     320:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <myState>
     324:	05 c0       	rjmp	.+10     	; 0x330 <EXTINT_FUNC+0x4c>
     326:	84 31       	cpi	r24, 0x14	; 20
     328:	18 f0       	brcs	.+6      	; 0x330 <EXTINT_FUNC+0x4c>
     32a:	81 e0       	ldi	r24, 0x01	; 1
     32c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <myState>
     330:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <global_u8OVFCounter>
     334:	42 e7       	ldi	r20, 0x72	; 114
     336:	51 e0       	ldi	r21, 0x01	; 1
     338:	61 e0       	ldi	r22, 0x01	; 1
     33a:	82 e0       	ldi	r24, 0x02	; 2
     33c:	0e 94 97 05 	call	0xb2e	; 0xb2e <H_EXTINT_create>
     340:	8a e0       	ldi	r24, 0x0A	; 10
     342:	0e 94 4f 04 	call	0x89e	; 0x89e <HButton_ExtIntInit>
     346:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <counter.2217>
     34a:	08 95       	ret

0000034c <Welcome>:
     34c:	0e 94 7e 08 	call	0x10fc	; 0x10fc <HLCD_ClrDisplay>
     350:	60 e0       	ldi	r22, 0x00	; 0
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	0e 94 91 08 	call	0x1122	; 0x1122 <HLCD_gotoXY>
     358:	85 ee       	ldi	r24, 0xE5	; 229
     35a:	91 e0       	ldi	r25, 0x01	; 1
     35c:	0e 94 a5 08 	call	0x114a	; 0x114a <HLCD_WriteString>
     360:	42 e0       	ldi	r20, 0x02	; 2
     362:	61 e0       	ldi	r22, 0x01	; 1
     364:	70 e0       	ldi	r23, 0x00	; 0
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	0e 94 d7 04 	call	0x9ae	; 0x9ae <HTIM0_SyncDelay>
     36e:	0e 94 7e 08 	call	0x10fc	; 0x10fc <HLCD_ClrDisplay>
     372:	60 e0       	ldi	r22, 0x00	; 0
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	0e 94 91 08 	call	0x1122	; 0x1122 <HLCD_gotoXY>
     37a:	84 ef       	ldi	r24, 0xF4	; 244
     37c:	91 e0       	ldi	r25, 0x01	; 1
     37e:	0e 94 a5 08 	call	0x114a	; 0x114a <HLCD_WriteString>
     382:	08 95       	ret

00000384 <ATM_ApprovedCard>:
     384:	cf 92       	push	r12
     386:	df 92       	push	r13
     388:	ef 92       	push	r14
     38a:	ff 92       	push	r15
     38c:	6b 01       	movw	r12, r22
     38e:	7c 01       	movw	r14, r24
     390:	64 e0       	ldi	r22, 0x04	; 4
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	0e 94 91 08 	call	0x1122	; 0x1122 <HLCD_gotoXY>
     398:	85 e0       	ldi	r24, 0x05	; 5
     39a:	92 e0       	ldi	r25, 0x02	; 2
     39c:	0e 94 a5 08 	call	0x114a	; 0x114a <HLCD_WriteString>
     3a0:	62 e0       	ldi	r22, 0x02	; 2
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	0e 94 91 08 	call	0x1122	; 0x1122 <HLCD_gotoXY>
     3a8:	8e e0       	ldi	r24, 0x0E	; 14
     3aa:	92 e0       	ldi	r25, 0x02	; 2
     3ac:	0e 94 a5 08 	call	0x114a	; 0x114a <HLCD_WriteString>
     3b0:	42 e0       	ldi	r20, 0x02	; 2
     3b2:	61 e0       	ldi	r22, 0x01	; 1
     3b4:	70 e0       	ldi	r23, 0x00	; 0
     3b6:	80 e0       	ldi	r24, 0x00	; 0
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	0e 94 d7 04 	call	0x9ae	; 0x9ae <HTIM0_SyncDelay>
     3be:	0e 94 7e 08 	call	0x10fc	; 0x10fc <HLCD_ClrDisplay>
     3c2:	64 e0       	ldi	r22, 0x04	; 4
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	0e 94 91 08 	call	0x1122	; 0x1122 <HLCD_gotoXY>
     3ca:	8a e1       	ldi	r24, 0x1A	; 26
     3cc:	92 e0       	ldi	r25, 0x02	; 2
     3ce:	0e 94 a5 08 	call	0x114a	; 0x114a <HLCD_WriteString>
     3d2:	60 e0       	ldi	r22, 0x00	; 0
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	0e 94 91 08 	call	0x1122	; 0x1122 <HLCD_gotoXY>
     3da:	84 e2       	ldi	r24, 0x24	; 36
     3dc:	92 e0       	ldi	r25, 0x02	; 2
     3de:	0e 94 a5 08 	call	0x114a	; 0x114a <HLCD_WriteString>
     3e2:	c7 01       	movw	r24, r14
     3e4:	b6 01       	movw	r22, r12
     3e6:	0e 94 bd 08 	call	0x117a	; 0x117a <HLCD_DisplayFloat>
     3ea:	42 e0       	ldi	r20, 0x02	; 2
     3ec:	61 e0       	ldi	r22, 0x01	; 1
     3ee:	70 e0       	ldi	r23, 0x00	; 0
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	0e 94 d7 04 	call	0x9ae	; 0x9ae <HTIM0_SyncDelay>
     3f8:	0e 94 7e 08 	call	0x10fc	; 0x10fc <HLCD_ClrDisplay>
     3fc:	61 e0       	ldi	r22, 0x01	; 1
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	0e 94 91 08 	call	0x1122	; 0x1122 <HLCD_gotoXY>
     404:	8e e2       	ldi	r24, 0x2E	; 46
     406:	92 e0       	ldi	r25, 0x02	; 2
     408:	0e 94 a5 08 	call	0x114a	; 0x114a <HLCD_WriteString>
     40c:	42 e0       	ldi	r20, 0x02	; 2
     40e:	61 e0       	ldi	r22, 0x01	; 1
     410:	70 e0       	ldi	r23, 0x00	; 0
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	0e 94 d7 04 	call	0x9ae	; 0x9ae <HTIM0_SyncDelay>
     41a:	0e 94 7e 08 	call	0x10fc	; 0x10fc <HLCD_ClrDisplay>
     41e:	ff 90       	pop	r15
     420:	ef 90       	pop	r14
     422:	df 90       	pop	r13
     424:	cf 90       	pop	r12
     426:	08 95       	ret

00000428 <Get_pin>:
     428:	ef 92       	push	r14
     42a:	ff 92       	push	r15
     42c:	0f 93       	push	r16
     42e:	1f 93       	push	r17
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	8c 01       	movw	r16, r24
     436:	0e 94 7e 08 	call	0x10fc	; 0x10fc <HLCD_ClrDisplay>
     43a:	60 e0       	ldi	r22, 0x00	; 0
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	0e 94 91 08 	call	0x1122	; 0x1122 <HLCD_gotoXY>
     442:	8c e3       	ldi	r24, 0x3C	; 60
     444:	92 e0       	ldi	r25, 0x02	; 2
     446:	0e 94 a5 08 	call	0x114a	; 0x114a <HLCD_WriteString>
     44a:	d0 e0       	ldi	r29, 0x00	; 0
     44c:	f1 2c       	mov	r15, r1
     44e:	33 c0       	rjmp	.+102    	; 0x4b6 <Get_pin+0x8e>
     450:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <KEYPAD_GetButton>
     454:	c8 2f       	mov	r28, r24
     456:	81 11       	cpse	r24, r1
     458:	18 c0       	rjmp	.+48     	; 0x48a <Get_pin+0x62>
     45a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <myState>
     45e:	81 11       	cpse	r24, r1
     460:	2a c0       	rjmp	.+84     	; 0x4b6 <Get_pin+0x8e>
     462:	82 e0       	ldi	r24, 0x02	; 2
     464:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <myState>
     468:	f8 01       	movw	r30, r16
     46a:	ed 0f       	add	r30, r29
     46c:	f1 1d       	adc	r31, r1
     46e:	80 e3       	ldi	r24, 0x30	; 48
     470:	80 83       	st	Z, r24
     472:	c1 e0       	ldi	r28, 0x01	; 1
     474:	cf 0d       	add	r28, r15
     476:	6f 2d       	mov	r22, r15
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	0e 94 91 08 	call	0x1122	; 0x1122 <HLCD_gotoXY>
     47e:	80 e3       	ldi	r24, 0x30	; 48
     480:	0e 94 1a 08 	call	0x1034	; 0x1034 <HLCD_vidWriteChar>
     484:	df 5f       	subi	r29, 0xFF	; 255
     486:	fc 2e       	mov	r15, r28
     488:	16 c0       	rjmp	.+44     	; 0x4b6 <Get_pin+0x8e>
     48a:	88 23       	and	r24, r24
     48c:	a1 f0       	breq	.+40     	; 0x4b6 <Get_pin+0x8e>
     48e:	ee 24       	eor	r14, r14
     490:	e3 94       	inc	r14
     492:	ef 0c       	add	r14, r15
     494:	6f 2d       	mov	r22, r15
     496:	81 e0       	ldi	r24, 0x01	; 1
     498:	0e 94 91 08 	call	0x1122	; 0x1122 <HLCD_gotoXY>
     49c:	d8 01       	movw	r26, r16
     49e:	ad 0f       	add	r26, r29
     4a0:	b1 1d       	adc	r27, r1
     4a2:	ec 2f       	mov	r30, r28
     4a4:	f0 e0       	ldi	r31, 0x00	; 0
     4a6:	ec 59       	subi	r30, 0x9C	; 156
     4a8:	fe 4f       	sbci	r31, 0xFE	; 254
     4aa:	80 81       	ld	r24, Z
     4ac:	8c 93       	st	X, r24
     4ae:	0e 94 1a 08 	call	0x1034	; 0x1034 <HLCD_vidWriteChar>
     4b2:	df 5f       	subi	r29, 0xFF	; 255
     4b4:	fe 2c       	mov	r15, r14
     4b6:	d4 30       	cpi	r29, 0x04	; 4
     4b8:	20 f4       	brcc	.+8      	; 0x4c2 <Get_pin+0x9a>
     4ba:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <myState>
     4be:	81 30       	cpi	r24, 0x01	; 1
     4c0:	39 f6       	brne	.-114    	; 0x450 <Get_pin+0x28>
     4c2:	d4 30       	cpi	r29, 0x04	; 4
     4c4:	78 f4       	brcc	.+30     	; 0x4e4 <Get_pin+0xbc>
     4c6:	82 e0       	ldi	r24, 0x02	; 2
     4c8:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <myState>
     4cc:	0e 94 7e 08 	call	0x10fc	; 0x10fc <HLCD_ClrDisplay>
     4d0:	60 e0       	ldi	r22, 0x00	; 0
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	0e 94 91 08 	call	0x1122	; 0x1122 <HLCD_gotoXY>
     4d8:	8b e4       	ldi	r24, 0x4B	; 75
     4da:	92 e0       	ldi	r25, 0x02	; 2
     4dc:	0e 94 a5 08 	call	0x114a	; 0x114a <HLCD_WriteString>
     4e0:	84 e0       	ldi	r24, 0x04	; 4
     4e2:	01 c0       	rjmp	.+2      	; 0x4e6 <Get_pin+0xbe>
     4e4:	83 e0       	ldi	r24, 0x03	; 3
     4e6:	df 91       	pop	r29
     4e8:	cf 91       	pop	r28
     4ea:	1f 91       	pop	r17
     4ec:	0f 91       	pop	r16
     4ee:	ff 90       	pop	r15
     4f0:	ef 90       	pop	r14
     4f2:	08 95       	ret

000004f4 <PIN_checkPinMatching>:
     4f4:	00 97       	sbiw	r24, 0x00	; 0
     4f6:	49 f1       	breq	.+82     	; 0x54a <PIN_checkPinMatching+0x56>
     4f8:	61 15       	cp	r22, r1
     4fa:	71 05       	cpc	r23, r1
     4fc:	41 f1       	breq	.+80     	; 0x54e <PIN_checkPinMatching+0x5a>
     4fe:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <strcmp>
     502:	89 2b       	or	r24, r25
     504:	89 f4       	brne	.+34     	; 0x528 <PIN_checkPinMatching+0x34>
     506:	0e 94 7e 08 	call	0x10fc	; 0x10fc <HLCD_ClrDisplay>
     50a:	81 e5       	ldi	r24, 0x51	; 81
     50c:	92 e0       	ldi	r25, 0x02	; 2
     50e:	0e 94 a5 08 	call	0x114a	; 0x114a <HLCD_WriteString>
     512:	2f e3       	ldi	r18, 0x3F	; 63
     514:	82 e4       	ldi	r24, 0x42	; 66
     516:	9f e0       	ldi	r25, 0x0F	; 15
     518:	21 50       	subi	r18, 0x01	; 1
     51a:	80 40       	sbci	r24, 0x00	; 0
     51c:	90 40       	sbci	r25, 0x00	; 0
     51e:	e1 f7       	brne	.-8      	; 0x518 <PIN_checkPinMatching+0x24>
     520:	00 c0       	rjmp	.+0      	; 0x522 <PIN_checkPinMatching+0x2e>
     522:	00 00       	nop
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	08 95       	ret
     528:	0e 94 7e 08 	call	0x10fc	; 0x10fc <HLCD_ClrDisplay>
     52c:	8d e5       	ldi	r24, 0x5D	; 93
     52e:	92 e0       	ldi	r25, 0x02	; 2
     530:	0e 94 a5 08 	call	0x114a	; 0x114a <HLCD_WriteString>
     534:	2f e3       	ldi	r18, 0x3F	; 63
     536:	82 e4       	ldi	r24, 0x42	; 66
     538:	9f e0       	ldi	r25, 0x0F	; 15
     53a:	21 50       	subi	r18, 0x01	; 1
     53c:	80 40       	sbci	r24, 0x00	; 0
     53e:	90 40       	sbci	r25, 0x00	; 0
     540:	e1 f7       	brne	.-8      	; 0x53a <PIN_checkPinMatching+0x46>
     542:	00 c0       	rjmp	.+0      	; 0x544 <PIN_checkPinMatching+0x50>
     544:	00 00       	nop
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	08 95       	ret
     54a:	82 e0       	ldi	r24, 0x02	; 2
     54c:	08 95       	ret
     54e:	82 e0       	ldi	r24, 0x02	; 2
     550:	08 95       	ret

00000552 <get_amount_left>:
     552:	df 92       	push	r13
     554:	ef 92       	push	r14
     556:	ff 92       	push	r15
     558:	0f 93       	push	r16
     55a:	1f 93       	push	r17
     55c:	cf 93       	push	r28
     55e:	df 93       	push	r29
     560:	7c 01       	movw	r14, r24
     562:	0e 94 7e 08 	call	0x10fc	; 0x10fc <HLCD_ClrDisplay>
     566:	60 e0       	ldi	r22, 0x00	; 0
     568:	80 e0       	ldi	r24, 0x00	; 0
     56a:	0e 94 91 08 	call	0x1122	; 0x1122 <HLCD_gotoXY>
     56e:	8d e6       	ldi	r24, 0x6D	; 109
     570:	92 e0       	ldi	r25, 0x02	; 2
     572:	0e 94 a5 08 	call	0x114a	; 0x114a <HLCD_WriteString>
     576:	60 e0       	ldi	r22, 0x00	; 0
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	0e 94 91 08 	call	0x1122	; 0x1122 <HLCD_gotoXY>
     57e:	c7 01       	movw	r24, r14
     580:	0e 94 a5 08 	call	0x114a	; 0x114a <HLCD_WriteString>
     584:	d1 2c       	mov	r13, r1
     586:	71 c0       	rjmp	.+226    	; 0x66a <get_amount_left+0x118>
     588:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <KEYPAD_GetButton>
     58c:	d8 2f       	mov	r29, r24
     58e:	81 11       	cpse	r24, r1
     590:	59 c0       	rjmp	.+178    	; 0x644 <get_amount_left+0xf2>
     592:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <myState>
     596:	81 11       	cpse	r24, r1
     598:	68 c0       	rjmp	.+208    	; 0x66a <get_amount_left+0x118>
     59a:	82 e0       	ldi	r24, 0x02	; 2
     59c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <myState>
     5a0:	c0 e0       	ldi	r28, 0x00	; 0
     5a2:	20 c0       	rjmp	.+64     	; 0x5e4 <get_amount_left+0x92>
     5a4:	c3 30       	cpi	r28, 0x03	; 3
     5a6:	79 f4       	brne	.+30     	; 0x5c6 <get_amount_left+0x74>
     5a8:	87 01       	movw	r16, r14
     5aa:	0c 0f       	add	r16, r28
     5ac:	11 1d       	adc	r17, r1
     5ae:	f8 01       	movw	r30, r16
     5b0:	82 81       	ldd	r24, Z+2	; 0x02
     5b2:	80 83       	st	Z, r24
     5b4:	6c 2f       	mov	r22, r28
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	0e 94 91 08 	call	0x1122	; 0x1122 <HLCD_gotoXY>
     5bc:	f8 01       	movw	r30, r16
     5be:	80 81       	ld	r24, Z
     5c0:	0e 94 1a 08 	call	0x1034	; 0x1034 <HLCD_vidWriteChar>
     5c4:	c5 e0       	ldi	r28, 0x05	; 5
     5c6:	87 01       	movw	r16, r14
     5c8:	0c 0f       	add	r16, r28
     5ca:	11 1d       	adc	r17, r1
     5cc:	f8 01       	movw	r30, r16
     5ce:	81 81       	ldd	r24, Z+1	; 0x01
     5d0:	80 83       	st	Z, r24
     5d2:	6c 2f       	mov	r22, r28
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	0e 94 91 08 	call	0x1122	; 0x1122 <HLCD_gotoXY>
     5da:	f8 01       	movw	r30, r16
     5dc:	80 81       	ld	r24, Z
     5de:	0e 94 1a 08 	call	0x1034	; 0x1034 <HLCD_vidWriteChar>
     5e2:	cf 5f       	subi	r28, 0xFF	; 255
     5e4:	c6 30       	cpi	r28, 0x06	; 6
     5e6:	f0 f2       	brcs	.-68     	; 0x5a4 <get_amount_left+0x52>
     5e8:	80 e3       	ldi	r24, 0x30	; 48
     5ea:	f7 01       	movw	r30, r14
     5ec:	86 83       	std	Z+6, r24	; 0x06
     5ee:	66 e0       	ldi	r22, 0x06	; 6
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	0e 94 91 08 	call	0x1122	; 0x1122 <HLCD_gotoXY>
     5f6:	f7 01       	movw	r30, r14
     5f8:	86 81       	ldd	r24, Z+6	; 0x06
     5fa:	0e 94 1a 08 	call	0x1034	; 0x1034 <HLCD_vidWriteChar>
     5fe:	d3 94       	inc	r13
     600:	34 c0       	rjmp	.+104    	; 0x66a <get_amount_left+0x118>
     602:	c3 30       	cpi	r28, 0x03	; 3
     604:	79 f4       	brne	.+30     	; 0x624 <get_amount_left+0xd2>
     606:	87 01       	movw	r16, r14
     608:	0c 0f       	add	r16, r28
     60a:	11 1d       	adc	r17, r1
     60c:	f8 01       	movw	r30, r16
     60e:	82 81       	ldd	r24, Z+2	; 0x02
     610:	80 83       	st	Z, r24
     612:	6c 2f       	mov	r22, r28
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	0e 94 91 08 	call	0x1122	; 0x1122 <HLCD_gotoXY>
     61a:	f8 01       	movw	r30, r16
     61c:	80 81       	ld	r24, Z
     61e:	0e 94 1a 08 	call	0x1034	; 0x1034 <HLCD_vidWriteChar>
     622:	c5 e0       	ldi	r28, 0x05	; 5
     624:	87 01       	movw	r16, r14
     626:	0c 0f       	add	r16, r28
     628:	11 1d       	adc	r17, r1
     62a:	f8 01       	movw	r30, r16
     62c:	81 81       	ldd	r24, Z+1	; 0x01
     62e:	80 83       	st	Z, r24
     630:	6c 2f       	mov	r22, r28
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	0e 94 91 08 	call	0x1122	; 0x1122 <HLCD_gotoXY>
     638:	f8 01       	movw	r30, r16
     63a:	80 81       	ld	r24, Z
     63c:	0e 94 1a 08 	call	0x1034	; 0x1034 <HLCD_vidWriteChar>
     640:	cf 5f       	subi	r28, 0xFF	; 255
     642:	01 c0       	rjmp	.+2      	; 0x646 <get_amount_left+0xf4>
     644:	c0 e0       	ldi	r28, 0x00	; 0
     646:	c6 30       	cpi	r28, 0x06	; 6
     648:	e0 f2       	brcs	.-72     	; 0x602 <get_amount_left+0xb0>
     64a:	ed 2f       	mov	r30, r29
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	ec 59       	subi	r30, 0x9C	; 156
     650:	fe 4f       	sbci	r31, 0xFE	; 254
     652:	80 81       	ld	r24, Z
     654:	f7 01       	movw	r30, r14
     656:	86 83       	std	Z+6, r24	; 0x06
     658:	66 e0       	ldi	r22, 0x06	; 6
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	0e 94 91 08 	call	0x1122	; 0x1122 <HLCD_gotoXY>
     660:	f7 01       	movw	r30, r14
     662:	86 81       	ldd	r24, Z+6	; 0x06
     664:	0e 94 1a 08 	call	0x1034	; 0x1034 <HLCD_vidWriteChar>
     668:	d3 94       	inc	r13
     66a:	f5 e0       	ldi	r31, 0x05	; 5
     66c:	fd 15       	cp	r31, r13
     66e:	28 f0       	brcs	.+10     	; 0x67a <get_amount_left+0x128>
     670:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <myState>
     674:	81 30       	cpi	r24, 0x01	; 1
     676:	09 f0       	breq	.+2      	; 0x67a <get_amount_left+0x128>
     678:	87 cf       	rjmp	.-242    	; 0x588 <get_amount_left+0x36>
     67a:	df 91       	pop	r29
     67c:	cf 91       	pop	r28
     67e:	1f 91       	pop	r17
     680:	0f 91       	pop	r16
     682:	ff 90       	pop	r15
     684:	ef 90       	pop	r14
     686:	df 90       	pop	r13
     688:	08 95       	ret

0000068a <deinitAtm>:
     68a:	61 e0       	ldi	r22, 0x01	; 1
     68c:	0e 94 64 04 	call	0x8c8	; 0x8c8 <BUZ_SetState>
     690:	08 95       	ret

00000692 <ATM_ValidatePIN>:
	EN_PinState ATM_ValidatePIN(void)
	{
		EN_PinState u8_l_MatchPIN;
		
		/* Request PIN From Card */
		HSPI_SendChar(ATM_REQUEST_PIN);
     692:	80 e5       	ldi	r24, 0x50	; 80
     694:	0e 94 89 04 	call	0x912	; 0x912 <HSPI_SendChar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     698:	81 ee       	ldi	r24, 0xE1	; 225
     69a:	94 e0       	ldi	r25, 0x04	; 4
     69c:	01 97       	sbiw	r24, 0x01	; 1
     69e:	f1 f7       	brne	.-4      	; 0x69c <ATM_ValidatePIN+0xa>
     6a0:	00 c0       	rjmp	.+0      	; 0x6a2 <ATM_ValidatePIN+0x10>
     6a2:	00 00       	nop
		_delay_ms(5);
		HSPI_ReceiveData(CARDpin, 5);
     6a4:	65 e0       	ldi	r22, 0x05	; 5
     6a6:	8b ec       	ldi	r24, 0xCB	; 203
     6a8:	92 e0       	ldi	r25, 0x02	; 2
     6aa:	0e 94 a3 04 	call	0x946	; 0x946 <HSPI_ReceiveData>
		//HLCD_WriteString("Received ");
		//HLCD_WriteString(CARDpin);
		//_delay_ms(3000);
		
		/* Request PIN From Card */
		HSPI_SendChar(ATM_REQUEST_PAN);
     6ae:	87 e4       	ldi	r24, 0x47	; 71
     6b0:	0e 94 89 04 	call	0x912	; 0x912 <HSPI_SendChar>
     6b4:	81 ee       	ldi	r24, 0xE1	; 225
     6b6:	94 e0       	ldi	r25, 0x04	; 4
     6b8:	01 97       	sbiw	r24, 0x01	; 1
     6ba:	f1 f7       	brne	.-4      	; 0x6b8 <ATM_ValidatePIN+0x26>
     6bc:	00 c0       	rjmp	.+0      	; 0x6be <ATM_ValidatePIN+0x2c>
     6be:	00 00       	nop
		_delay_ms(5);
		HSPI_ReceiveData(CARDpan, 20);
     6c0:	64 e1       	ldi	r22, 0x14	; 20
     6c2:	84 ed       	ldi	r24, 0xD4	; 212
     6c4:	92 e0       	ldi	r25, 0x02	; 2
     6c6:	0e 94 a3 04 	call	0x946	; 0x946 <HSPI_ReceiveData>
		//HLCD_WriteString("Received ");
		//HLCD_gotoXY(1,0);
		//HLCD_WriteString(CARDpan);
		//_delay_ms(10000);
		
		u8_l_MatchPIN = PIN_checkPinMatching(CARDpin, ATMpin);
     6ca:	6c e9       	ldi	r22, 0x9C	; 156
     6cc:	72 e0       	ldi	r23, 0x02	; 2
     6ce:	8b ec       	ldi	r24, 0xCB	; 203
     6d0:	92 e0       	ldi	r25, 0x02	; 2
     6d2:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <PIN_checkPinMatching>
		
		return u8_l_MatchPIN;
	}
     6d6:	08 95       	ret

000006d8 <isBelowMaxDailyAmount>:
};

EN_dataError_t isBelowMaxDailyAmount(Uchar8_t * amount)
{
    EN_dataError_t LOCAL_returnValue = APPROVED;
    Schar8_t state = strcmp(amount,MAX_TRANS_AMOUNT);
     6d8:	6a e7       	ldi	r22, 0x7A	; 122
     6da:	72 e0       	ldi	r23, 0x02	; 2
     6dc:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <strcmp>
    if( state>0) LOCAL_returnValue = EXCEED_MAX_DAILY_AMOUNT;
     6e0:	18 16       	cp	r1, r24
     6e2:	14 f0       	brlt	.+4      	; 0x6e8 <isBelowMaxDailyAmount+0x10>

};

EN_dataError_t isBelowMaxDailyAmount(Uchar8_t * amount)
{
    EN_dataError_t LOCAL_returnValue = APPROVED;
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	08 95       	ret
    Schar8_t state = strcmp(amount,MAX_TRANS_AMOUNT);
    if( state>0) LOCAL_returnValue = EXCEED_MAX_DAILY_AMOUNT;
     6e8:	83 e0       	ldi	r24, 0x03	; 3
    return LOCAL_returnValue;
}
     6ea:	08 95       	ret

000006ec <isValidPanAccount>:


EN_dataError_t isValidPanAccount(Uchar8_t * pan)
{
     6ec:	0f 93       	push	r16
     6ee:	1f 93       	push	r17
     6f0:	cf 93       	push	r28
     6f2:	8c 01       	movw	r16, r24
	EN_dataError_t LOCAL_returnValue = FRAUD_CARD;
    Uchar8_t loc_Counter;
    Schar8_t state;
    for(loc_Counter = 0 ; loc_Counter<DB_SIZE;loc_Counter++)
     6f4:	c0 e0       	ldi	r28, 0x00	; 0
     6f6:	0c c0       	rjmp	.+24     	; 0x710 <isValidPanAccount+0x24>
    {
     state = strcmp(pan,accountsDB[loc_Counter].primaryAccountNumber);
     6f8:	89 e1       	ldi	r24, 0x19	; 25
     6fa:	c8 9f       	mul	r28, r24
     6fc:	b0 01       	movw	r22, r0
     6fe:	11 24       	eor	r1, r1
     700:	61 59       	subi	r22, 0x91	; 145
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	c8 01       	movw	r24, r16
     706:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <strcmp>
     if(state == 0 )
     70a:	88 23       	and	r24, r24
     70c:	29 f0       	breq	.+10     	; 0x718 <isValidPanAccount+0x2c>
EN_dataError_t isValidPanAccount(Uchar8_t * pan)
{
	EN_dataError_t LOCAL_returnValue = FRAUD_CARD;
    Uchar8_t loc_Counter;
    Schar8_t state;
    for(loc_Counter = 0 ; loc_Counter<DB_SIZE;loc_Counter++)
     70e:	cf 5f       	subi	r28, 0xFF	; 255
     710:	ca 30       	cpi	r28, 0x0A	; 10
     712:	90 f3       	brcs	.-28     	; 0x6f8 <isValidPanAccount+0xc>
}


EN_dataError_t isValidPanAccount(Uchar8_t * pan)
{
	EN_dataError_t LOCAL_returnValue = FRAUD_CARD;
     714:	81 e0       	ldi	r24, 0x01	; 1
     716:	01 c0       	rjmp	.+2      	; 0x71a <isValidPanAccount+0x2e>
    for(loc_Counter = 0 ; loc_Counter<DB_SIZE;loc_Counter++)
    {
     state = strcmp(pan,accountsDB[loc_Counter].primaryAccountNumber);
     if(state == 0 )
      {
         LOCAL_returnValue = APPROVED;
     718:	80 e0       	ldi	r24, 0x00	; 0
         break;
      }
    }
	return LOCAL_returnValue;
}
     71a:	cf 91       	pop	r28
     71c:	1f 91       	pop	r17
     71e:	0f 91       	pop	r16
     720:	08 95       	ret

00000722 <isRunningAccount>:


EN_dataError_t isRunningAccount(Uchar8_t * pan)
{
     722:	ef 92       	push	r14
     724:	ff 92       	push	r15
     726:	0f 93       	push	r16
     728:	1f 93       	push	r17
     72a:	cf 93       	push	r28
     72c:	7c 01       	movw	r14, r24
	EN_dataError_t LOCAL_returnValue = CARD_STOLEN;
	Uchar8_t loc_Counter;
	Schar8_t state;
	for(loc_Counter = 0 ; loc_Counter<DB_SIZE;loc_Counter++)
     72e:	c0 e0       	ldi	r28, 0x00	; 0
     730:	1d c0       	rjmp	.+58     	; 0x76c <isRunningAccount+0x4a>
	{
		state = strcmp(pan,accountsDB[loc_Counter].primaryAccountNumber);
     732:	0c 2f       	mov	r16, r28
     734:	10 e0       	ldi	r17, 0x00	; 0
     736:	89 e1       	ldi	r24, 0x19	; 25
     738:	80 9f       	mul	r24, r16
     73a:	b0 01       	movw	r22, r0
     73c:	81 9f       	mul	r24, r17
     73e:	70 0d       	add	r23, r0
     740:	11 24       	eor	r1, r1
     742:	61 59       	subi	r22, 0x91	; 145
     744:	7f 4f       	sbci	r23, 0xFF	; 255
     746:	c7 01       	movw	r24, r14
     748:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <strcmp>
		if(state == 0 )
     74c:	81 11       	cpse	r24, r1
     74e:	0d c0       	rjmp	.+26     	; 0x76a <isRunningAccount+0x48>
		{
            if(accountsDB[loc_Counter].state == RUNNING)
     750:	89 e1       	ldi	r24, 0x19	; 25
     752:	80 9f       	mul	r24, r16
     754:	f0 01       	movw	r30, r0
     756:	81 9f       	mul	r24, r17
     758:	f0 0d       	add	r31, r0
     75a:	11 24       	eor	r1, r1
     75c:	e6 59       	subi	r30, 0x96	; 150
     75e:	ff 4f       	sbci	r31, 0xFF	; 255
     760:	84 81       	ldd	r24, Z+4	; 0x04
     762:	88 23       	and	r24, r24
     764:	39 f0       	breq	.+14     	; 0x774 <isRunningAccount+0x52>
}


EN_dataError_t isRunningAccount(Uchar8_t * pan)
{
	EN_dataError_t LOCAL_returnValue = CARD_STOLEN;
     766:	82 e0       	ldi	r24, 0x02	; 2
     768:	06 c0       	rjmp	.+12     	; 0x776 <isRunningAccount+0x54>
	Uchar8_t loc_Counter;
	Schar8_t state;
	for(loc_Counter = 0 ; loc_Counter<DB_SIZE;loc_Counter++)
     76a:	cf 5f       	subi	r28, 0xFF	; 255
     76c:	ca 30       	cpi	r28, 0x0A	; 10
     76e:	08 f3       	brcs	.-62     	; 0x732 <isRunningAccount+0x10>
}


EN_dataError_t isRunningAccount(Uchar8_t * pan)
{
	EN_dataError_t LOCAL_returnValue = CARD_STOLEN;
     770:	82 e0       	ldi	r24, 0x02	; 2
     772:	01 c0       	rjmp	.+2      	; 0x776 <isRunningAccount+0x54>
	{
		state = strcmp(pan,accountsDB[loc_Counter].primaryAccountNumber);
		if(state == 0 )
		{
            if(accountsDB[loc_Counter].state == RUNNING)
			LOCAL_returnValue = APPROVED;
     774:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	}
	return LOCAL_returnValue;
}
     776:	cf 91       	pop	r28
     778:	1f 91       	pop	r17
     77a:	0f 91       	pop	r16
     77c:	ff 90       	pop	r15
     77e:	ef 90       	pop	r14
     780:	08 95       	ret

00000782 <isValidAccountAmount>:

EN_dataError_t isValidAccountAmount(Uchar8_t * pan,Uchar8_t * amount,float32_t *newAmount)
{
     782:	4f 92       	push	r4
     784:	5f 92       	push	r5
     786:	6f 92       	push	r6
     788:	7f 92       	push	r7
     78a:	8f 92       	push	r8
     78c:	9f 92       	push	r9
     78e:	af 92       	push	r10
     790:	bf 92       	push	r11
     792:	cf 92       	push	r12
     794:	df 92       	push	r13
     796:	ef 92       	push	r14
     798:	ff 92       	push	r15
     79a:	0f 93       	push	r16
     79c:	1f 93       	push	r17
     79e:	cf 93       	push	r28
     7a0:	7c 01       	movw	r14, r24
     7a2:	cb 01       	movw	r24, r22
     7a4:	6a 01       	movw	r12, r20
    float32_t Conv_amount = atof(amount);
     7a6:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <atof>
     7aa:	4b 01       	movw	r8, r22
     7ac:	5c 01       	movw	r10, r24
	EN_dataError_t LOCAL_returnValue = INSUFFICIENT_FUND;
	Uchar8_t loc_Counter;
	Schar8_t state;
	for(loc_Counter = 0 ; loc_Counter<DB_SIZE;loc_Counter++)
     7ae:	c0 e0       	ldi	r28, 0x00	; 0
     7b0:	3d c0       	rjmp	.+122    	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
	{
		state = strcmp(pan,accountsDB[loc_Counter].primaryAccountNumber);
     7b2:	0c 2f       	mov	r16, r28
     7b4:	10 e0       	ldi	r17, 0x00	; 0
     7b6:	89 e1       	ldi	r24, 0x19	; 25
     7b8:	80 9f       	mul	r24, r16
     7ba:	b0 01       	movw	r22, r0
     7bc:	81 9f       	mul	r24, r17
     7be:	70 0d       	add	r23, r0
     7c0:	11 24       	eor	r1, r1
     7c2:	61 59       	subi	r22, 0x91	; 145
     7c4:	7f 4f       	sbci	r23, 0xFF	; 255
     7c6:	c7 01       	movw	r24, r14
     7c8:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <strcmp>
		if(state == 0 )
     7cc:	81 11       	cpse	r24, r1
     7ce:	2d c0       	rjmp	.+90     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
		{
			if(accountsDB[loc_Counter].balance >= Conv_amount)
     7d0:	89 e1       	ldi	r24, 0x19	; 25
     7d2:	80 9f       	mul	r24, r16
     7d4:	f0 01       	movw	r30, r0
     7d6:	81 9f       	mul	r24, r17
     7d8:	f0 0d       	add	r31, r0
     7da:	11 24       	eor	r1, r1
     7dc:	e6 59       	subi	r30, 0x96	; 150
     7de:	ff 4f       	sbci	r31, 0xFF	; 255
     7e0:	40 80       	ld	r4, Z
     7e2:	51 80       	ldd	r5, Z+1	; 0x01
     7e4:	62 80       	ldd	r6, Z+2	; 0x02
     7e6:	73 80       	ldd	r7, Z+3	; 0x03
     7e8:	a3 01       	movw	r20, r6
     7ea:	92 01       	movw	r18, r4
     7ec:	c5 01       	movw	r24, r10
     7ee:	b4 01       	movw	r22, r8
     7f0:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <__cmpsf2>
     7f4:	18 16       	cp	r1, r24
     7f6:	cc f0       	brlt	.+50     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
            {
              accountsDB[loc_Counter].balance-=Conv_amount;
     7f8:	a5 01       	movw	r20, r10
     7fa:	94 01       	movw	r18, r8
     7fc:	c3 01       	movw	r24, r6
     7fe:	b2 01       	movw	r22, r4
     800:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__subsf3>
     804:	29 e1       	ldi	r18, 0x19	; 25
     806:	20 9f       	mul	r18, r16
     808:	f0 01       	movw	r30, r0
     80a:	21 9f       	mul	r18, r17
     80c:	f0 0d       	add	r31, r0
     80e:	11 24       	eor	r1, r1
     810:	e6 59       	subi	r30, 0x96	; 150
     812:	ff 4f       	sbci	r31, 0xFF	; 255
     814:	60 83       	st	Z, r22
     816:	71 83       	std	Z+1, r23	; 0x01
     818:	82 83       	std	Z+2, r24	; 0x02
     81a:	93 83       	std	Z+3, r25	; 0x03
              *newAmount = accountsDB[loc_Counter].balance;
     81c:	f6 01       	movw	r30, r12
     81e:	60 83       	st	Z, r22
     820:	71 83       	std	Z+1, r23	; 0x01
     822:	82 83       	std	Z+2, r24	; 0x02
     824:	93 83       	std	Z+3, r25	; 0x03
              LOCAL_returnValue = APPROVED;
     826:	80 e0       	ldi	r24, 0x00	; 0
              break;
     828:	05 c0       	rjmp	.+10     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
{
    float32_t Conv_amount = atof(amount);
	EN_dataError_t LOCAL_returnValue = INSUFFICIENT_FUND;
	Uchar8_t loc_Counter;
	Schar8_t state;
	for(loc_Counter = 0 ; loc_Counter<DB_SIZE;loc_Counter++)
     82a:	cf 5f       	subi	r28, 0xFF	; 255
     82c:	ca 30       	cpi	r28, 0x0A	; 10
     82e:	08 f4       	brcc	.+2      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
     830:	c0 cf       	rjmp	.-128    	; 0x7b2 <isValidAccountAmount+0x30>
}

EN_dataError_t isValidAccountAmount(Uchar8_t * pan,Uchar8_t * amount,float32_t *newAmount)
{
    float32_t Conv_amount = atof(amount);
	EN_dataError_t LOCAL_returnValue = INSUFFICIENT_FUND;
     832:	84 e0       	ldi	r24, 0x04	; 4
            }
			
		}
	}
	return LOCAL_returnValue;
}
     834:	cf 91       	pop	r28
     836:	1f 91       	pop	r17
     838:	0f 91       	pop	r16
     83a:	ff 90       	pop	r15
     83c:	ef 90       	pop	r14
     83e:	df 90       	pop	r13
     840:	cf 90       	pop	r12
     842:	bf 90       	pop	r11
     844:	af 90       	pop	r10
     846:	9f 90       	pop	r9
     848:	8f 90       	pop	r8
     84a:	7f 90       	pop	r7
     84c:	6f 90       	pop	r6
     84e:	5f 90       	pop	r5
     850:	4f 90       	pop	r4
     852:	08 95       	ret

00000854 <DATABASE_checking>:


EN_dataError_t DATABASE_checking (Uchar8_t * pan,Uchar8_t * amount,float32_t *newAmount)
{
     854:	ef 92       	push	r14
     856:	ff 92       	push	r15
     858:	0f 93       	push	r16
     85a:	1f 93       	push	r17
     85c:	cf 93       	push	r28
     85e:	df 93       	push	r29
     860:	ec 01       	movw	r28, r24
     862:	8b 01       	movw	r16, r22
     864:	7a 01       	movw	r14, r20
    
    EN_dataError_t Returend_Val;
    Returend_Val = isValidPanAccount(pan);
     866:	0e 94 76 03 	call	0x6ec	; 0x6ec <isValidPanAccount>
    if(Returend_Val == FRAUD_CARD) return Returend_Val;
     86a:	81 30       	cpi	r24, 0x01	; 1
     86c:	89 f0       	breq	.+34     	; 0x890 <__stack+0x31>
    Returend_Val = isRunningAccount(pan);
     86e:	ce 01       	movw	r24, r28
     870:	0e 94 91 03 	call	0x722	; 0x722 <isRunningAccount>
    if(Returend_Val == CARD_STOLEN) return Returend_Val;
     874:	82 30       	cpi	r24, 0x02	; 2
     876:	61 f0       	breq	.+24     	; 0x890 <__stack+0x31>
    Returend_Val = isBelowMaxDailyAmount(amount);
     878:	c8 01       	movw	r24, r16
     87a:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <isBelowMaxDailyAmount>
    if(Returend_Val == EXCEED_MAX_DAILY_AMOUNT) return Returend_Val;
     87e:	83 30       	cpi	r24, 0x03	; 3
     880:	39 f0       	breq	.+14     	; 0x890 <__stack+0x31>
    Returend_Val = isValidAccountAmount(pan , amount,newAmount);
     882:	a7 01       	movw	r20, r14
     884:	b8 01       	movw	r22, r16
     886:	ce 01       	movw	r24, r28
     888:	0e 94 c1 03 	call	0x782	; 0x782 <isValidAccountAmount>
    if(Returend_Val == INSUFFICIENT_FUND) return Returend_Val;
     88c:	84 30       	cpi	r24, 0x04	; 4
     88e:	01 f0       	breq	.+0      	; 0x890 <__stack+0x31>
    
    
    Returend_Val = APPROVED;
    
    
     890:	df 91       	pop	r29
     892:	cf 91       	pop	r28
     894:	1f 91       	pop	r17
     896:	0f 91       	pop	r16
     898:	ff 90       	pop	r15
     89a:	ef 90       	pop	r14
     89c:	08 95       	ret

0000089e <HButton_ExtIntInit>:

enu_buttonError_t HButton_ExtIntInit(enu_pin en_pinx)
{
	enu_buttonError_t errorStatus = BUTTON_OK;

	if ( en_pinx < PIN_INVALID )
     89e:	80 32       	cpi	r24, 0x20	; 32
     8a0:	18 f4       	brcc	.+6      	; 0x8a8 <HButton_ExtIntInit+0xa>
	{
		DIO_s8SETPinVal(en_pinx, HIGH);
     8a2:	61 e0       	ldi	r22, 0x01	; 1
     8a4:	0e 94 9a 09 	call	0x1334	; 0x1334 <DIO_s8SETPinVal>
	{
		errorStatus = BUTTON_OK;
	}

	return errorStatus;
}
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	08 95       	ret

000008ac <BUZ_Init>:

/*************************************************************************************************************
 * 											Function Implementation
 ************************************************************************************************************/
void BUZ_Init(st_Buzzer_t* pst_a_buzzer)
{
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
     8b0:	ec 01       	movw	r28, r24
	DIO_s8SETPinDir(pst_a_buzzer->BuzzerPin, OUTPUT);
     8b2:	61 e0       	ldi	r22, 0x01	; 1
     8b4:	88 81       	ld	r24, Y
     8b6:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <DIO_s8SETPinDir>
	DIO_s8SETPinVal(pst_a_buzzer->BuzzerPin, LOW);
     8ba:	60 e0       	ldi	r22, 0x00	; 0
     8bc:	88 81       	ld	r24, Y
     8be:	0e 94 9a 09 	call	0x1334	; 0x1334 <DIO_s8SETPinVal>
}
     8c2:	df 91       	pop	r29
     8c4:	cf 91       	pop	r28
     8c6:	08 95       	ret

000008c8 <BUZ_SetState>:

en_BuzzerErrorState_t BUZ_Enable(st_Buzzer_t* pst_a_buzzer);
en_BuzzerErrorState_t BUZ_SetState(st_Buzzer_t* pst_a_buzzer, en_BuzzerState_t u16_a_state)
{
	if(pst_a_buzzer != NULL)
     8c8:	00 97       	sbiw	r24, 0x00	; 0
     8ca:	31 f0       	breq	.+12     	; 0x8d8 <BUZ_SetState+0x10>
     8cc:	fc 01       	movw	r30, r24
	{
		DIO_s8SETPinVal(pst_a_buzzer->BuzzerPin, u16_a_state);
     8ce:	80 81       	ld	r24, Z
     8d0:	0e 94 9a 09 	call	0x1334	; 0x1334 <DIO_s8SETPinVal>
	else
	{
		return BUZ_NOK;
	}
	
	return BUZ_OK;
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	08 95       	ret
	{
		DIO_s8SETPinVal(pst_a_buzzer->BuzzerPin, u16_a_state);
	}
	else
	{
		return BUZ_NOK;
     8d8:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return BUZ_OK;
     8da:	08 95       	ret

000008dc <HSPI_MasterInit>:
	{
		return HSPI_NOK;
	}
	
	return HSPI_OK;	
}
     8dc:	61 e0       	ldi	r22, 0x01	; 1
     8de:	8d e0       	ldi	r24, 0x0D	; 13
     8e0:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <DIO_s8SETPinDir>
     8e4:	61 e0       	ldi	r22, 0x01	; 1
     8e6:	8f e0       	ldi	r24, 0x0F	; 15
     8e8:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <DIO_s8SETPinDir>
     8ec:	61 e0       	ldi	r22, 0x01	; 1
     8ee:	8c e0       	ldi	r24, 0x0C	; 12
     8f0:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <DIO_s8SETPinDir>
     8f4:	61 e0       	ldi	r22, 0x01	; 1
     8f6:	8c e0       	ldi	r24, 0x0C	; 12
     8f8:	0e 94 9a 09 	call	0x1334	; 0x1334 <DIO_s8SETPinVal>
     8fc:	60 e0       	ldi	r22, 0x00	; 0
     8fe:	8e e0       	ldi	r24, 0x0E	; 14
     900:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <DIO_s8SETPinDir>
     904:	63 e0       	ldi	r22, 0x03	; 3
     906:	8a e0       	ldi	r24, 0x0A	; 10
     908:	0e 94 04 0a 	call	0x1408	; 0x1408 <EXTINT_init>
     90c:	0e 94 1f 0b 	call	0x163e	; 0x163e <SPI_MasterInit>
     910:	08 95       	ret

00000912 <HSPI_SendChar>:
     912:	1f 93       	push	r17
     914:	cf 93       	push	r28
     916:	df 93       	push	r29
     918:	1f 92       	push	r1
     91a:	cd b7       	in	r28, 0x3d	; 61
     91c:	de b7       	in	r29, 0x3e	; 62
     91e:	18 2f       	mov	r17, r24
     920:	60 e0       	ldi	r22, 0x00	; 0
     922:	8c e0       	ldi	r24, 0x0C	; 12
     924:	0e 94 9a 09 	call	0x1334	; 0x1334 <DIO_s8SETPinVal>
     928:	be 01       	movw	r22, r28
     92a:	6f 5f       	subi	r22, 0xFF	; 255
     92c:	7f 4f       	sbci	r23, 0xFF	; 255
     92e:	81 2f       	mov	r24, r17
     930:	0e 94 37 0b 	call	0x166e	; 0x166e <SPI_TranscieveChar>
     934:	61 e0       	ldi	r22, 0x01	; 1
     936:	8c e0       	ldi	r24, 0x0C	; 12
     938:	0e 94 9a 09 	call	0x1334	; 0x1334 <DIO_s8SETPinVal>
     93c:	0f 90       	pop	r0
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	1f 91       	pop	r17
     944:	08 95       	ret

00000946 <HSPI_ReceiveData>:
 * \param u8_a_DataSize: size of storage buffer
 * 
 * \return en_HSPI_ErrorState_t
 */
void HSPI_ReceiveData(Uchar8_t *pu8_a_data, Uchar8_t u8_a_DataSize)
{
     946:	cf 92       	push	r12
     948:	df 92       	push	r13
     94a:	ef 92       	push	r14
     94c:	ff 92       	push	r15
     94e:	0f 93       	push	r16
     950:	1f 93       	push	r17
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
     956:	1f 92       	push	r1
     958:	cd b7       	in	r28, 0x3d	; 61
     95a:	de b7       	in	r29, 0x3e	; 62
     95c:	6c 01       	movw	r12, r24
     95e:	06 2f       	mov	r16, r22
	Uchar8_t u8_l_DataIterator = 0, u8_l_dummyVar;

	/* Select Slave */
	DIO_s8SETPinVal(HSPI_SS, LOW);	
     960:	60 e0       	ldi	r22, 0x00	; 0
     962:	8c e0       	ldi	r24, 0x0C	; 12
     964:	0e 94 9a 09 	call	0x1334	; 0x1334 <DIO_s8SETPinVal>

	/* Initiate communication with dummy bit for synchronization */
	SPI_TranscieveChar(DATA_END, &u8_l_dummyVar);
     968:	be 01       	movw	r22, r28
     96a:	6f 5f       	subi	r22, 0xFF	; 255
     96c:	7f 4f       	sbci	r23, 0xFF	; 255
     96e:	83 e2       	ldi	r24, 0x23	; 35
     970:	0e 94 37 0b 	call	0x166e	; 0x166e <SPI_TranscieveChar>
 * 
 * \return en_HSPI_ErrorState_t
 */
void HSPI_ReceiveData(Uchar8_t *pu8_a_data, Uchar8_t u8_a_DataSize)
{
	Uchar8_t u8_l_DataIterator = 0, u8_l_dummyVar;
     974:	10 e0       	ldi	r17, 0x00	; 0
	/* Initiate communication with dummy bit for synchronization */
	SPI_TranscieveChar(DATA_END, &u8_l_dummyVar);
	
	do
	{
		SPI_TranscieveChar(DATA_END, &pu8_a_data[u8_l_DataIterator]);
     976:	76 01       	movw	r14, r12
     978:	e1 0e       	add	r14, r17
     97a:	f1 1c       	adc	r15, r1
     97c:	b7 01       	movw	r22, r14
     97e:	83 e2       	ldi	r24, 0x23	; 35
     980:	0e 94 37 0b 	call	0x166e	; 0x166e <SPI_TranscieveChar>
						
	}while((pu8_a_data[u8_l_DataIterator++]!=DATA_END) && (u8_l_DataIterator < u8_a_DataSize));
     984:	1f 5f       	subi	r17, 0xFF	; 255
     986:	f7 01       	movw	r30, r14
     988:	80 81       	ld	r24, Z
     98a:	83 32       	cpi	r24, 0x23	; 35
     98c:	11 f0       	breq	.+4      	; 0x992 <HSPI_ReceiveData+0x4c>
     98e:	10 17       	cp	r17, r16
     990:	90 f3       	brcs	.-28     	; 0x976 <HSPI_ReceiveData+0x30>
	
	/* Deselect Slave */
	DIO_s8SETPinVal(HSPI_SS, HIGH);
     992:	61 e0       	ldi	r22, 0x01	; 1
     994:	8c e0       	ldi	r24, 0x0C	; 12
     996:	0e 94 9a 09 	call	0x1334	; 0x1334 <DIO_s8SETPinVal>
}
     99a:	0f 90       	pop	r0
     99c:	df 91       	pop	r29
     99e:	cf 91       	pop	r28
     9a0:	1f 91       	pop	r17
     9a2:	0f 91       	pop	r16
     9a4:	ff 90       	pop	r15
     9a6:	ef 90       	pop	r14
     9a8:	df 90       	pop	r13
     9aa:	cf 90       	pop	r12
     9ac:	08 95       	ret

000009ae <HTIM0_SyncDelay>:
extern Uchar8_t u8_g_TotalOVF;

/*================================= Function Implementation =================================*/

en_HTIMErrorState_t HTIM0_SyncDelay(Uint32_t u32_a_delay, en_timeUnits_t Copy_timeUnit)
{
     9ae:	8f 92       	push	r8
     9b0:	9f 92       	push	r9
     9b2:	af 92       	push	r10
     9b4:	bf 92       	push	r11
     9b6:	cf 92       	push	r12
     9b8:	df 92       	push	r13
     9ba:	ef 92       	push	r14
     9bc:	ff 92       	push	r15
     9be:	0f 93       	push	r16
     9c0:	1f 93       	push	r17
     9c2:	cf 93       	push	r28
     9c4:	df 93       	push	r29
     9c6:	00 d0       	rcall	.+0      	; 0x9c8 <HTIM0_SyncDelay+0x1a>
     9c8:	cd b7       	in	r28, 0x3d	; 61
     9ca:	de b7       	in	r29, 0x3e	; 62
     9cc:	6b 01       	movw	r12, r22
     9ce:	7c 01       	movw	r14, r24
	Uchar8_t u8_l_prescaler, Local_TotalOverFlows, Local_OverFlowCounter=0, u8_l_OverflowFlag, u8_l_TimState;
	Uint16_t Local_TotalTicks;
	float Local_TickTime;
	
	/* Get Value in micro seconds */
	if(Copy_timeUnit == Seconds)	{u32_a_delay *= SEC_TO_uSEC;}
     9d0:	42 30       	cpi	r20, 0x02	; 2
     9d2:	59 f4       	brne	.+22     	; 0x9ea <HTIM0_SyncDelay+0x3c>
     9d4:	9b 01       	movw	r18, r22
     9d6:	ac 01       	movw	r20, r24
     9d8:	60 e4       	ldi	r22, 0x40	; 64
     9da:	72 e4       	ldi	r23, 0x42	; 66
     9dc:	8f e0       	ldi	r24, 0x0F	; 15
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__mulsi3>
     9e4:	6b 01       	movw	r12, r22
     9e6:	7c 01       	movw	r14, r24
     9e8:	0d c0       	rjmp	.+26     	; 0xa04 <HTIM0_SyncDelay+0x56>
	else if(Copy_timeUnit == mSeconds)	{u32_a_delay *= mSEC_TO_uSEC;}
     9ea:	41 30       	cpi	r20, 0x01	; 1
     9ec:	49 f4       	brne	.+18     	; 0xa00 <HTIM0_SyncDelay+0x52>
     9ee:	a8 ee       	ldi	r26, 0xE8	; 232
     9f0:	b3 e0       	ldi	r27, 0x03	; 3
     9f2:	9b 01       	movw	r18, r22
     9f4:	ac 01       	movw	r20, r24
     9f6:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__muluhisi3>
     9fa:	6b 01       	movw	r12, r22
     9fc:	7c 01       	movw	r14, r24
     9fe:	02 c0       	rjmp	.+4      	; 0xa04 <HTIM0_SyncDelay+0x56>
	else if(Copy_timeUnit == uSeconds)	{/* Do Nothing */}
     a00:	41 11       	cpse	r20, r1
     a02:	6b c0       	rjmp	.+214    	; 0xada <HTIM0_SyncDelay+0x12c>
	else return TIM_NOK;
	
	/* Set prescaler according to delay time */
	if(u32_a_delay < MAX_CLK_DEV1_DELAY  )	{u8_l_prescaler = TIM_DIV_BY_1;}
     a04:	88 e8       	ldi	r24, 0x88	; 136
     a06:	c8 16       	cp	r12, r24
     a08:	83 e1       	ldi	r24, 0x13	; 19
     a0a:	d8 06       	cpc	r13, r24
     a0c:	e1 04       	cpc	r14, r1
     a0e:	f1 04       	cpc	r15, r1
     a10:	c8 f0       	brcs	.+50     	; 0xa44 <HTIM0_SyncDelay+0x96>
	else if(u32_a_delay < MAX_CLK_DEV8_DELAY  ) {u8_l_prescaler = TIM_DIV_BY_8;}
     a12:	88 ea       	ldi	r24, 0xA8	; 168
     a14:	c8 16       	cp	r12, r24
     a16:	81 e6       	ldi	r24, 0x61	; 97
     a18:	d8 06       	cpc	r13, r24
     a1a:	e1 04       	cpc	r14, r1
     a1c:	f1 04       	cpc	r15, r1
     a1e:	a0 f0       	brcs	.+40     	; 0xa48 <HTIM0_SyncDelay+0x9a>
	else if(u32_a_delay < MAX_CLK_DEV64_DELAY ) {u8_l_prescaler = TIM_DIV_BY_64;}
     a20:	88 e4       	ldi	r24, 0x48	; 72
     a22:	c8 16       	cp	r12, r24
     a24:	88 ee       	ldi	r24, 0xE8	; 232
     a26:	d8 06       	cpc	r13, r24
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	e8 06       	cpc	r14, r24
     a2c:	f1 04       	cpc	r15, r1
     a2e:	70 f0       	brcs	.+28     	; 0xa4c <HTIM0_SyncDelay+0x9e>
	else if(u32_a_delay < MAX_CLK_DEV256_DELAY) {u8_l_prescaler = TIM_DIV_BY_256;}
     a30:	80 e2       	ldi	r24, 0x20	; 32
     a32:	c8 16       	cp	r12, r24
     a34:	81 ea       	ldi	r24, 0xA1	; 161
     a36:	d8 06       	cpc	r13, r24
     a38:	87 e0       	ldi	r24, 0x07	; 7
     a3a:	e8 06       	cpc	r14, r24
     a3c:	f1 04       	cpc	r15, r1
     a3e:	40 f4       	brcc	.+16     	; 0xa50 <HTIM0_SyncDelay+0xa2>
     a40:	14 e0       	ldi	r17, 0x04	; 4
     a42:	07 c0       	rjmp	.+14     	; 0xa52 <HTIM0_SyncDelay+0xa4>
	else if(Copy_timeUnit == mSeconds)	{u32_a_delay *= mSEC_TO_uSEC;}
	else if(Copy_timeUnit == uSeconds)	{/* Do Nothing */}
	else return TIM_NOK;
	
	/* Set prescaler according to delay time */
	if(u32_a_delay < MAX_CLK_DEV1_DELAY  )	{u8_l_prescaler = TIM_DIV_BY_1;}
     a44:	11 e0       	ldi	r17, 0x01	; 1
     a46:	05 c0       	rjmp	.+10     	; 0xa52 <HTIM0_SyncDelay+0xa4>
	else if(u32_a_delay < MAX_CLK_DEV8_DELAY  ) {u8_l_prescaler = TIM_DIV_BY_8;}
     a48:	12 e0       	ldi	r17, 0x02	; 2
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <HTIM0_SyncDelay+0xa4>
	else if(u32_a_delay < MAX_CLK_DEV64_DELAY ) {u8_l_prescaler = TIM_DIV_BY_64;}
     a4c:	13 e0       	ldi	r17, 0x03	; 3
     a4e:	01 c0       	rjmp	.+2      	; 0xa52 <HTIM0_SyncDelay+0xa4>
	else if(u32_a_delay < MAX_CLK_DEV256_DELAY) {u8_l_prescaler = TIM_DIV_BY_256;}
	else {u8_l_prescaler = TIM_DIV_BY_1024;}
     a50:	15 e0       	ldi	r17, 0x05	; 5
	
	Local_TickTime = arr_gs_prescalers[u8_l_prescaler-1]/TIM0_PRESCALER;
     a52:	e1 2f       	mov	r30, r17
     a54:	f0 e0       	ldi	r31, 0x00	; 0
     a56:	31 97       	sbiw	r30, 0x01	; 1
     a58:	ee 0f       	add	r30, r30
     a5a:	ff 1f       	adc	r31, r31
     a5c:	ee 57       	subi	r30, 0x7E	; 126
     a5e:	fd 4f       	sbci	r31, 0xFD	; 253
     a60:	60 81       	ld	r22, Z
     a62:	71 81       	ldd	r23, Z+1	; 0x01
     a64:	76 95       	lsr	r23
     a66:	67 95       	ror	r22
     a68:	76 95       	lsr	r23
     a6a:	67 95       	ror	r22
     a6c:	76 95       	lsr	r23
     a6e:	67 95       	ror	r22
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	0e 94 76 0e 	call	0x1cec	; 0x1cec <__floatunsisf>
     a78:	4b 01       	movw	r8, r22
     a7a:	5c 01       	movw	r10, r24
	Local_TotalTicks = (Uint16_t)(u32_a_delay/Local_TickTime);
     a7c:	c7 01       	movw	r24, r14
     a7e:	b6 01       	movw	r22, r12
     a80:	0e 94 76 0e 	call	0x1cec	; 0x1cec <__floatunsisf>
     a84:	a5 01       	movw	r20, r10
     a86:	94 01       	movw	r18, r8
     a88:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__divsf3>
     a8c:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <__fixunssfsi>
     a90:	f6 2e       	mov	r15, r22
	Local_TotalOverFlows = Local_TotalTicks/TIM0_MAX_TICKS;
     a92:	07 2f       	mov	r16, r23
	
	/* Initialize timer in normal mode */
	TIM0_voidInit(NormalMode);
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	0e 94 a8 0b 	call	0x1750	; 0x1750 <TIM0_voidInit>
	
	/* Set timer start value */
	TIM0_SetValue(TIM0_MAX_TICKS-(Local_TotalTicks%TIM0_MAX_TICKS));
     a9a:	8f 2d       	mov	r24, r15
     a9c:	81 95       	neg	r24
     a9e:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <TIM0_SetValue>
	
	/* Start Timer */
	TIM0_Start(u8_l_prescaler);
     aa2:	81 2f       	mov	r24, r17
     aa4:	0e 94 c1 0b 	call	0x1782	; 0x1782 <TIM0_Start>

/*================================= Function Implementation =================================*/

en_HTIMErrorState_t HTIM0_SyncDelay(Uint32_t u32_a_delay, en_timeUnits_t Copy_timeUnit)
{
	Uchar8_t u8_l_prescaler, Local_TotalOverFlows, Local_OverFlowCounter=0, u8_l_OverflowFlag, u8_l_TimState;
     aa8:	10 e0       	ldi	r17, 0x00	; 0
	TIM0_SetValue(TIM0_MAX_TICKS-(Local_TotalTicks%TIM0_MAX_TICKS));
	
	/* Start Timer */
	TIM0_Start(u8_l_prescaler);
	
	while(Local_OverFlowCounter <= Local_TotalOverFlows)
     aaa:	11 c0       	rjmp	.+34     	; 0xace <HTIM0_SyncDelay+0x120>
	{
		/* Wait until the overflow flag is raised */
		do
		{
			TIM0_GetOVF(&u8_l_OverflowFlag);
     aac:	ce 01       	movw	r24, r28
     aae:	01 96       	adiw	r24, 0x01	; 1
     ab0:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <TIM0_GetOVF>
			TIM0_GetState(&u8_l_TimState);
     ab4:	ce 01       	movw	r24, r28
     ab6:	02 96       	adiw	r24, 0x02	; 2
     ab8:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <TIM0_GetState>
		}
		while(!u8_l_OverflowFlag && u8_l_TimState);
     abc:	89 81       	ldd	r24, Y+1	; 0x01
     abe:	81 11       	cpse	r24, r1
     ac0:	03 c0       	rjmp	.+6      	; 0xac8 <HTIM0_SyncDelay+0x11a>
     ac2:	8a 81       	ldd	r24, Y+2	; 0x02
     ac4:	81 11       	cpse	r24, r1
     ac6:	f2 cf       	rjmp	.-28     	; 0xaac <HTIM0_SyncDelay+0xfe>
		
		/* Clear the overflow flag */
		TIM0_ClearOVF();
     ac8:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <TIM0_ClearOVF>
		
		Local_OverFlowCounter++;
     acc:	1f 5f       	subi	r17, 0xFF	; 255
	TIM0_SetValue(TIM0_MAX_TICKS-(Local_TotalTicks%TIM0_MAX_TICKS));
	
	/* Start Timer */
	TIM0_Start(u8_l_prescaler);
	
	while(Local_OverFlowCounter <= Local_TotalOverFlows)
     ace:	01 17       	cp	r16, r17
     ad0:	68 f7       	brcc	.-38     	; 0xaac <HTIM0_SyncDelay+0xfe>
		TIM0_ClearOVF();
		
		Local_OverFlowCounter++;
	}
	
	TIM0_Stop();
     ad2:	0e 94 cf 0b 	call	0x179e	; 0x179e <TIM0_Stop>
	
	return TIM_OK;
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	01 c0       	rjmp	.+2      	; 0xadc <HTIM0_SyncDelay+0x12e>
	
	/* Get Value in micro seconds */
	if(Copy_timeUnit == Seconds)	{u32_a_delay *= SEC_TO_uSEC;}
	else if(Copy_timeUnit == mSeconds)	{u32_a_delay *= mSEC_TO_uSEC;}
	else if(Copy_timeUnit == uSeconds)	{/* Do Nothing */}
	else return TIM_NOK;
     ada:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	TIM0_Stop();
	
	return TIM_OK;
}
     adc:	0f 90       	pop	r0
     ade:	0f 90       	pop	r0
     ae0:	df 91       	pop	r29
     ae2:	cf 91       	pop	r28
     ae4:	1f 91       	pop	r17
     ae6:	0f 91       	pop	r16
     ae8:	ff 90       	pop	r15
     aea:	ef 90       	pop	r14
     aec:	df 90       	pop	r13
     aee:	cf 90       	pop	r12
     af0:	bf 90       	pop	r11
     af2:	af 90       	pop	r10
     af4:	9f 90       	pop	r9
     af6:	8f 90       	pop	r8
     af8:	08 95       	ret

00000afa <HTimer_enInit>:
 ************************************************************************************************************/
enu_HTimerError_t HTimer_enInit(void)
{
	enu_HTimerError_t errorStatus = TIMER_OK;

	(void)enuTimer2_init (OVF_MODE);
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	0e 94 4d 0c 	call	0x189a	; 0x189a <enuTimer2_init>
	(void)u8Timer2_setPrescallar(TIMER_PRE_256);
     b00:	84 e0       	ldi	r24, 0x04	; 4
     b02:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <u8Timer2_setPrescallar>
	(void)vidTimer2_OvfIrqEnable();
     b06:	0e 94 8f 0c 	call	0x191e	; 0x191e <vidTimer2_OvfIrqEnable>

	return errorStatus;

}
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	08 95       	ret

00000b0e <HTimer_vidDelayMs>:
/*************************************************************************************************************/
void HTimer_vidDelayMs( Uint32_t u32_delay )
{
	(void)u8Timer2_setTime_ms(u32_delay);
     b0e:	0e 94 a8 0c 	call	0x1950	; 0x1950 <u8Timer2_setTime_ms>
	(void)vidTimer2_start();
     b12:	0e 94 97 0c 	call	0x192e	; 0x192e <vidTimer2_start>
     b16:	08 95       	ret

00000b18 <HTimer_enStop>:

enu_HTimerError_t HTimer_enStop(void)
{
	enu_HTimerError_t errorStatus;

	errorStatus = vidTimer2_stop();
     b18:	0e 94 a1 0c 	call	0x1942	; 0x1942 <vidTimer2_stop>

	return errorStatus;

}
     b1c:	08 95       	ret

00000b1e <HTimer_enCBF>:
/*************************************************************************************************************/
enu_HTimerError_t HTimer_enCBF(ptr_funcc pFunc)
{
	enu_HTimerError_t errorStatus = TIMER_OK;

	if(pFunc != NULL)
     b1e:	00 97       	sbiw	r24, 0x00	; 0
     b20:	21 f0       	breq	.+8      	; 0xb2a <HTimer_enCBF+0xc>
	{
		vidTimer2_setcbf_OVF(pFunc);
     b22:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <vidTimer2_setcbf_OVF>

}
/*************************************************************************************************************/
enu_HTimerError_t HTimer_enCBF(ptr_funcc pFunc)
{
	enu_HTimerError_t errorStatus = TIMER_OK;
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	08 95       	ret
	if(pFunc != NULL)
	{
		vidTimer2_setcbf_OVF(pFunc);

	}else{
		errorStatus = TIMER_NOK;
     b2a:	81 e0       	ldi	r24, 0x01	; 1
	}

	return errorStatus;

}
     b2c:	08 95       	ret

00000b2e <H_EXTINT_create>:
ARGS        : takes the EXINT_NUMBER( INT0,INT1 OR INT2) and sense control and and pointer to the function we want to execute when interrupt occurs.
return      : return EXTINT_OK if the EXINT_NUMBER initializes correctly, EXTINT_NOT_OK otherwise
*/

EN_EXTINT_ERROR H_EXTINT_create(EN_EXINT_NUMBER INTx ,EN_Sence_Control INTxSense,void(*ptrfunc)(void))
{
     b2e:	0f 93       	push	r16
     b30:	1f 93       	push	r17
     b32:	cf 93       	push	r28
     b34:	c8 2f       	mov	r28, r24
     b36:	8a 01       	movw	r16, r20
	if(!EXTINT_init(INTx,INTxSense) && !EXTINT_CallBack(INTx,ptrfunc)) return EXTINT_OK;
     b38:	0e 94 04 0a 	call	0x1408	; 0x1408 <EXTINT_init>
     b3c:	81 11       	cpse	r24, r1
     b3e:	07 c0       	rjmp	.+14     	; 0xb4e <H_EXTINT_create+0x20>
     b40:	b8 01       	movw	r22, r16
     b42:	8c 2f       	mov	r24, r28
     b44:	0e 94 8b 0a 	call	0x1516	; 0x1516 <EXTINT_CallBack>
     b48:	81 11       	cpse	r24, r1
     b4a:	03 c0       	rjmp	.+6      	; 0xb52 <H_EXTINT_create+0x24>
     b4c:	03 c0       	rjmp	.+6      	; 0xb54 <H_EXTINT_create+0x26>
	return EXTINT_NOT_OK;
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	01 c0       	rjmp	.+2      	; 0xb54 <H_EXTINT_create+0x26>
     b52:	81 e0       	ldi	r24, 0x01	; 1
	
     b54:	cf 91       	pop	r28
     b56:	1f 91       	pop	r17
     b58:	0f 91       	pop	r16
     b5a:	08 95       	ret

00000b5c <EXTI2_RisingEdgeNotification>:


void EXTI2_RisingEdgeNotification(void)
{
	/* Start Timer */
	TIM1_Start(TIM1_CLK_DIV_BY_1024);
     b5c:	85 e0       	ldi	r24, 0x05	; 5
     b5e:	0e 94 37 0c 	call	0x186e	; 0x186e <TIM1_Start>
	
	/* Set the interrupt to be triggered on a falling edge */
	EXTINT_init(EXTINT2, FALLING_EDGE);
     b62:	61 e0       	ldi	r22, 0x01	; 1
     b64:	82 e0       	ldi	r24, 0x02	; 2
     b66:	0e 94 04 0a 	call	0x1408	; 0x1408 <EXTINT_init>
	EXTINT_CallBack(EXTINT2, EXTI2_FallingEdgeNotification);
     b6a:	67 ee       	ldi	r22, 0xE7	; 231
     b6c:	75 e0       	ldi	r23, 0x05	; 5
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	0e 94 8b 0a 	call	0x1516	; 0x1516 <EXTINT_CallBack>
     b74:	08 95       	ret

00000b76 <SwICU_Init>:
void (*FallingEdge_CBF)(void) = NULL; 


void SwICU_Init(void)
{
	DIO_s8SETPinDir(DIO_PINB_2, INPUT);
     b76:	60 e0       	ldi	r22, 0x00	; 0
     b78:	8a e0       	ldi	r24, 0x0A	; 10
     b7a:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <DIO_s8SETPinDir>
	/* Set extint to be triggered on rising edge at first (button is pulled down) */
	EXTINT_init(EXTINT2, RISING_EDGE);
     b7e:	62 e0       	ldi	r22, 0x02	; 2
     b80:	82 e0       	ldi	r24, 0x02	; 2
     b82:	0e 94 04 0a 	call	0x1408	; 0x1408 <EXTINT_init>
	
// 	RisingEdge_CBF = EXTI2_RisingEdgeNotification;
// 	FallingEdge_CBF = EXTI2_FallingEdgeNotification;
		
	EXTINT_CallBack(EXTINT2, EXTI2_RisingEdgeNotification);
     b86:	6e ea       	ldi	r22, 0xAE	; 174
     b88:	75 e0       	ldi	r23, 0x05	; 5
     b8a:	82 e0       	ldi	r24, 0x02	; 2
     b8c:	0e 94 8b 0a 	call	0x1516	; 0x1516 <EXTINT_CallBack>
     b90:	08 95       	ret

00000b92 <SwICU_GetTime>:
}

Uint16_t SwICU_GetTime(Uint16_t u16_a_TimCount)
{
     b92:	cf 92       	push	r12
     b94:	df 92       	push	r13
     b96:	ef 92       	push	r14
     b98:	ff 92       	push	r15
     b9a:	cf 93       	push	r28
     b9c:	df 93       	push	r29
     b9e:	ec 01       	movw	r28, r24
	Uint16_t u16_l_msTime;
	float32_t f32_l_TickTime;
	
	f32_l_TickTime = TIM1_GetTickTime();
     ba0:	0e 94 48 0c 	call	0x1890	; 0x1890 <TIM1_GetTickTime>
     ba4:	6b 01       	movw	r12, r22
     ba6:	7c 01       	movw	r14, r24
	u16_l_msTime = (Uint16_t)(f32_l_TickTime * u16_a_TimCount);
     ba8:	be 01       	movw	r22, r28
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	0e 94 76 0e 	call	0x1cec	; 0x1cec <__floatunsisf>
     bb2:	a7 01       	movw	r20, r14
     bb4:	96 01       	movw	r18, r12
     bb6:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__mulsf3>
     bba:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <__fixunssfsi>

	return u16_l_msTime;
}
     bbe:	cb 01       	movw	r24, r22
     bc0:	df 91       	pop	r29
     bc2:	cf 91       	pop	r28
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	df 90       	pop	r13
     bca:	cf 90       	pop	r12
     bcc:	08 95       	ret

00000bce <EXTI2_FallingEdgeNotification>:


void EXTI2_FallingEdgeNotification(void)
{		
	/* Get timer value */
	u16_g_TimerCount = TIM1_GetValue();
     bce:	0e 94 45 0c 	call	0x188a	; 0x188a <TIM1_GetValue>
     bd2:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <u16_g_TimerCount+0x1>
     bd6:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <u16_g_TimerCount>
	
	/* Stop the timer */
	TIM1_Stop();
     bda:	0e 94 3f 0c 	call	0x187e	; 0x187e <TIM1_Stop>
	
	u16_g_msTime = SwICU_GetTime(u16_g_TimerCount);
     bde:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <u16_g_TimerCount>
     be2:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <u16_g_TimerCount+0x1>
     be6:	0e 94 c9 05 	call	0xb92	; 0xb92 <SwICU_GetTime>
     bea:	90 93 ea 02 	sts	0x02EA, r25	; 0x8002ea <u16_g_msTime+0x1>
     bee:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <u16_g_msTime>

	/* Set the interrupt to be triggered on a falling edge */
	EXTINT_init(EXTINT2, RISING_EDGE);
     bf2:	62 e0       	ldi	r22, 0x02	; 2
     bf4:	82 e0       	ldi	r24, 0x02	; 2
     bf6:	0e 94 04 0a 	call	0x1408	; 0x1408 <EXTINT_init>
	EXTINT_CallBack(EXTINT2, EXTI2_RisingEdgeNotification);
     bfa:	6e ea       	ldi	r22, 0xAE	; 174
     bfc:	75 e0       	ldi	r23, 0x05	; 5
     bfe:	82 e0       	ldi	r24, 0x02	; 2
     c00:	0e 94 8b 0a 	call	0x1516	; 0x1516 <EXTINT_CallBack>
	
	/* Check Enter or Zero */
	if(u16_g_msTime >= (Uint16_t)2000) EnterCheck = 1;
     c04:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <u16_g_msTime>
     c08:	90 91 ea 02 	lds	r25, 0x02EA	; 0x8002ea <u16_g_msTime+0x1>
     c0c:	80 3d       	cpi	r24, 0xD0	; 208
     c0e:	97 40       	sbci	r25, 0x07	; 7
     c10:	20 f0       	brcs	.+8      	; 0xc1a <EXTI2_FallingEdgeNotification+0x4c>
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <EnterCheck>
     c18:	08 95       	ret
	else ZeroCheck = 1;
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <ZeroCheck>
     c20:	08 95       	ret

00000c22 <KEYPAD_init>:
 * 											Function Implementation
 ************************************************************************************************************/
void KEYPAD_init()
{
	// INITIALIZE ROWS AS OUTPUTS
	DIO_s8SETPinDir(R1,OUTPUT);
     c22:	61 e0       	ldi	r22, 0x01	; 1
     c24:	82 e1       	ldi	r24, 0x12	; 18
     c26:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <DIO_s8SETPinDir>
	DIO_s8SETPinDir(R2,OUTPUT);
     c2a:	61 e0       	ldi	r22, 0x01	; 1
     c2c:	83 e1       	ldi	r24, 0x13	; 19
     c2e:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <DIO_s8SETPinDir>
	DIO_s8SETPinDir(R3,OUTPUT);
     c32:	61 e0       	ldi	r22, 0x01	; 1
     c34:	84 e1       	ldi	r24, 0x14	; 20
     c36:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <DIO_s8SETPinDir>
	// INITIALIZE COLUMNS AS INPUTS
	DIO_s8SETPinDir(C1,INPUT);
     c3a:	60 e0       	ldi	r22, 0x00	; 0
     c3c:	85 e1       	ldi	r24, 0x15	; 21
     c3e:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <DIO_s8SETPinDir>
	DIO_s8SETPinDir(C2,INPUT);
     c42:	60 e0       	ldi	r22, 0x00	; 0
     c44:	86 e1       	ldi	r24, 0x16	; 22
     c46:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <DIO_s8SETPinDir>
	DIO_s8SETPinDir(C3,INPUT);
     c4a:	60 e0       	ldi	r22, 0x00	; 0
     c4c:	87 e1       	ldi	r24, 0x17	; 23
     c4e:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <DIO_s8SETPinDir>
     c52:	08 95       	ret

00000c54 <checkR1>:
	
	
}
EN_KEYPAD_BTNS checkR1()
{
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
     c58:	1f 92       	push	r1
     c5a:	cd b7       	in	r28, 0x3d	; 61
     c5c:	de b7       	in	r29, 0x3e	; 62
	DIO_s8SETPinVal(C1,HIGH);
     c5e:	61 e0       	ldi	r22, 0x01	; 1
     c60:	85 e1       	ldi	r24, 0x15	; 21
     c62:	0e 94 9a 09 	call	0x1334	; 0x1334 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C2,HIGH);
     c66:	61 e0       	ldi	r22, 0x01	; 1
     c68:	86 e1       	ldi	r24, 0x16	; 22
     c6a:	0e 94 9a 09 	call	0x1334	; 0x1334 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C3,HIGH);
     c6e:	61 e0       	ldi	r22, 0x01	; 1
     c70:	87 e1       	ldi	r24, 0x17	; 23
     c72:	0e 94 9a 09 	call	0x1334	; 0x1334 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R2,HIGH);
     c76:	61 e0       	ldi	r22, 0x01	; 1
     c78:	83 e1       	ldi	r24, 0x13	; 19
     c7a:	0e 94 9a 09 	call	0x1334	; 0x1334 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R3,HIGH);
     c7e:	61 e0       	ldi	r22, 0x01	; 1
     c80:	84 e1       	ldi	r24, 0x14	; 20
     c82:	0e 94 9a 09 	call	0x1334	; 0x1334 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R1,LOW);
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	82 e1       	ldi	r24, 0x12	; 18
     c8a:	0e 94 9a 09 	call	0x1334	; 0x1334 <DIO_s8SETPinVal>
	
	Uchar8_t val = 1;
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C1,&val);
     c92:	be 01       	movw	r22, r28
     c94:	6f 5f       	subi	r22, 0xFF	; 255
     c96:	7f 4f       	sbci	r23, 0xFF	; 255
     c98:	85 e1       	ldi	r24, 0x15	; 21
     c9a:	0e 94 da 09 	call	0x13b4	; 0x13b4 <DIO_s8GETPinVal>
	if(val == 0)
     c9e:	89 81       	ldd	r24, Y+1	; 0x01
     ca0:	88 23       	and	r24, r24
     ca2:	39 f0       	breq	.+14     	; 0xcb2 <checkR1+0x5e>
     ca4:	0b c0       	rjmp	.+22     	; 0xcbc <checkR1+0x68>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C1,&val);
     ca6:	be 01       	movw	r22, r28
     ca8:	6f 5f       	subi	r22, 0xFF	; 255
     caa:	7f 4f       	sbci	r23, 0xFF	; 255
     cac:	85 e1       	ldi	r24, 0x15	; 21
     cae:	0e 94 da 09 	call	0x13b4	; 0x13b4 <DIO_s8GETPinVal>
	
	Uchar8_t val = 1;
	DIO_s8GETPinVal(C1,&val);
	if(val == 0)
	{
		while (val == 0)
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	88 23       	and	r24, r24
     cb6:	b9 f3       	breq	.-18     	; 0xca6 <checkR1+0x52>
		{
			DIO_s8GETPinVal(C1,&val);
		}
		return KEY_1;
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	2e c0       	rjmp	.+92     	; 0xd18 <checkR1+0xc4>
	}
	val = 1;
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C2,&val);
     cc0:	be 01       	movw	r22, r28
     cc2:	6f 5f       	subi	r22, 0xFF	; 255
     cc4:	7f 4f       	sbci	r23, 0xFF	; 255
     cc6:	86 e1       	ldi	r24, 0x16	; 22
     cc8:	0e 94 da 09 	call	0x13b4	; 0x13b4 <DIO_s8GETPinVal>
	if(val == 0)
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	88 23       	and	r24, r24
     cd0:	39 f0       	breq	.+14     	; 0xce0 <checkR1+0x8c>
     cd2:	0b c0       	rjmp	.+22     	; 0xcea <checkR1+0x96>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C2,&val);
     cd4:	be 01       	movw	r22, r28
     cd6:	6f 5f       	subi	r22, 0xFF	; 255
     cd8:	7f 4f       	sbci	r23, 0xFF	; 255
     cda:	86 e1       	ldi	r24, 0x16	; 22
     cdc:	0e 94 da 09 	call	0x13b4	; 0x13b4 <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C2,&val);
	if(val == 0)
	{
		while (val == 0)
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	88 23       	and	r24, r24
     ce4:	b9 f3       	breq	.-18     	; 0xcd4 <checkR1+0x80>
		{
			DIO_s8GETPinVal(C2,&val);
		}
		return KEY_2;
     ce6:	82 e0       	ldi	r24, 0x02	; 2
     ce8:	17 c0       	rjmp	.+46     	; 0xd18 <checkR1+0xc4>
	}
	val = 1;
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C3,&val);
     cee:	be 01       	movw	r22, r28
     cf0:	6f 5f       	subi	r22, 0xFF	; 255
     cf2:	7f 4f       	sbci	r23, 0xFF	; 255
     cf4:	87 e1       	ldi	r24, 0x17	; 23
     cf6:	0e 94 da 09 	call	0x13b4	; 0x13b4 <DIO_s8GETPinVal>
	if(val == 0)
     cfa:	89 81       	ldd	r24, Y+1	; 0x01
     cfc:	88 23       	and	r24, r24
     cfe:	41 f0       	breq	.+16     	; 0xd10 <checkR1+0xbc>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_3;
	}
	return KEY_NOTHING;
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	0a c0       	rjmp	.+20     	; 0xd18 <checkR1+0xc4>
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C3,&val);
     d04:	be 01       	movw	r22, r28
     d06:	6f 5f       	subi	r22, 0xFF	; 255
     d08:	7f 4f       	sbci	r23, 0xFF	; 255
     d0a:	87 e1       	ldi	r24, 0x17	; 23
     d0c:	0e 94 da 09 	call	0x13b4	; 0x13b4 <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
     d10:	89 81       	ldd	r24, Y+1	; 0x01
     d12:	88 23       	and	r24, r24
     d14:	b9 f3       	breq	.-18     	; 0xd04 <checkR1+0xb0>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_3;
     d16:	83 e0       	ldi	r24, 0x03	; 3
	}
	return KEY_NOTHING;
	
}
     d18:	0f 90       	pop	r0
     d1a:	df 91       	pop	r29
     d1c:	cf 91       	pop	r28
     d1e:	08 95       	ret

00000d20 <checkR2>:
EN_KEYPAD_BTNS checkR2()
{
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
     d24:	1f 92       	push	r1
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
	
	DIO_s8SETPinVal(C1,HIGH);
     d2a:	61 e0       	ldi	r22, 0x01	; 1
     d2c:	85 e1       	ldi	r24, 0x15	; 21
     d2e:	0e 94 9a 09 	call	0x1334	; 0x1334 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C2,HIGH);
     d32:	61 e0       	ldi	r22, 0x01	; 1
     d34:	86 e1       	ldi	r24, 0x16	; 22
     d36:	0e 94 9a 09 	call	0x1334	; 0x1334 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C3,HIGH);
     d3a:	61 e0       	ldi	r22, 0x01	; 1
     d3c:	87 e1       	ldi	r24, 0x17	; 23
     d3e:	0e 94 9a 09 	call	0x1334	; 0x1334 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R1,HIGH);
     d42:	61 e0       	ldi	r22, 0x01	; 1
     d44:	82 e1       	ldi	r24, 0x12	; 18
     d46:	0e 94 9a 09 	call	0x1334	; 0x1334 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R3,HIGH);
     d4a:	61 e0       	ldi	r22, 0x01	; 1
     d4c:	84 e1       	ldi	r24, 0x14	; 20
     d4e:	0e 94 9a 09 	call	0x1334	; 0x1334 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R2,LOW);
     d52:	60 e0       	ldi	r22, 0x00	; 0
     d54:	83 e1       	ldi	r24, 0x13	; 19
     d56:	0e 94 9a 09 	call	0x1334	; 0x1334 <DIO_s8SETPinVal>
	
	Uchar8_t val = 1;
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C1,&val);
     d5e:	be 01       	movw	r22, r28
     d60:	6f 5f       	subi	r22, 0xFF	; 255
     d62:	7f 4f       	sbci	r23, 0xFF	; 255
     d64:	85 e1       	ldi	r24, 0x15	; 21
     d66:	0e 94 da 09 	call	0x13b4	; 0x13b4 <DIO_s8GETPinVal>
	if(val == 0)
     d6a:	89 81       	ldd	r24, Y+1	; 0x01
     d6c:	88 23       	and	r24, r24
     d6e:	39 f0       	breq	.+14     	; 0xd7e <checkR2+0x5e>
     d70:	0b c0       	rjmp	.+22     	; 0xd88 <checkR2+0x68>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C1,&val);
     d72:	be 01       	movw	r22, r28
     d74:	6f 5f       	subi	r22, 0xFF	; 255
     d76:	7f 4f       	sbci	r23, 0xFF	; 255
     d78:	85 e1       	ldi	r24, 0x15	; 21
     d7a:	0e 94 da 09 	call	0x13b4	; 0x13b4 <DIO_s8GETPinVal>
	
	Uchar8_t val = 1;
	DIO_s8GETPinVal(C1,&val);
	if(val == 0)
	{
		while (val == 0)
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
     d80:	88 23       	and	r24, r24
     d82:	b9 f3       	breq	.-18     	; 0xd72 <checkR2+0x52>
		{
			DIO_s8GETPinVal(C1,&val);
		}
		return KEY_4;
     d84:	84 e0       	ldi	r24, 0x04	; 4
     d86:	2e c0       	rjmp	.+92     	; 0xde4 <checkR2+0xc4>
	}
	val = 1;
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C2,&val);
     d8c:	be 01       	movw	r22, r28
     d8e:	6f 5f       	subi	r22, 0xFF	; 255
     d90:	7f 4f       	sbci	r23, 0xFF	; 255
     d92:	86 e1       	ldi	r24, 0x16	; 22
     d94:	0e 94 da 09 	call	0x13b4	; 0x13b4 <DIO_s8GETPinVal>
	if(val == 0)
     d98:	89 81       	ldd	r24, Y+1	; 0x01
     d9a:	88 23       	and	r24, r24
     d9c:	39 f0       	breq	.+14     	; 0xdac <checkR2+0x8c>
     d9e:	0b c0       	rjmp	.+22     	; 0xdb6 <checkR2+0x96>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C2,&val);
     da0:	be 01       	movw	r22, r28
     da2:	6f 5f       	subi	r22, 0xFF	; 255
     da4:	7f 4f       	sbci	r23, 0xFF	; 255
     da6:	86 e1       	ldi	r24, 0x16	; 22
     da8:	0e 94 da 09 	call	0x13b4	; 0x13b4 <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C2,&val);
	if(val == 0)
	{
		while (val == 0)
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	88 23       	and	r24, r24
     db0:	b9 f3       	breq	.-18     	; 0xda0 <checkR2+0x80>
		{
			DIO_s8GETPinVal(C2,&val);
		}
		return KEY_5;
     db2:	85 e0       	ldi	r24, 0x05	; 5
     db4:	17 c0       	rjmp	.+46     	; 0xde4 <checkR2+0xc4>
	}
	val = 1;
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C3,&val);
     dba:	be 01       	movw	r22, r28
     dbc:	6f 5f       	subi	r22, 0xFF	; 255
     dbe:	7f 4f       	sbci	r23, 0xFF	; 255
     dc0:	87 e1       	ldi	r24, 0x17	; 23
     dc2:	0e 94 da 09 	call	0x13b4	; 0x13b4 <DIO_s8GETPinVal>
	if(val == 0)
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	88 23       	and	r24, r24
     dca:	41 f0       	breq	.+16     	; 0xddc <checkR2+0xbc>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_6;
	}
	return KEY_NOTHING;
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	0a c0       	rjmp	.+20     	; 0xde4 <checkR2+0xc4>
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C3,&val);
     dd0:	be 01       	movw	r22, r28
     dd2:	6f 5f       	subi	r22, 0xFF	; 255
     dd4:	7f 4f       	sbci	r23, 0xFF	; 255
     dd6:	87 e1       	ldi	r24, 0x17	; 23
     dd8:	0e 94 da 09 	call	0x13b4	; 0x13b4 <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
     ddc:	89 81       	ldd	r24, Y+1	; 0x01
     dde:	88 23       	and	r24, r24
     de0:	b9 f3       	breq	.-18     	; 0xdd0 <checkR2+0xb0>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_6;
     de2:	86 e0       	ldi	r24, 0x06	; 6
	}
	return KEY_NOTHING;
	
}
     de4:	0f 90       	pop	r0
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
     dea:	08 95       	ret

00000dec <checkR3>:
EN_KEYPAD_BTNS checkR3()
{
     dec:	cf 93       	push	r28
     dee:	df 93       	push	r29
     df0:	1f 92       	push	r1
     df2:	cd b7       	in	r28, 0x3d	; 61
     df4:	de b7       	in	r29, 0x3e	; 62
	
	DIO_s8SETPinVal(C1,HIGH);
     df6:	61 e0       	ldi	r22, 0x01	; 1
     df8:	85 e1       	ldi	r24, 0x15	; 21
     dfa:	0e 94 9a 09 	call	0x1334	; 0x1334 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C2,HIGH);
     dfe:	61 e0       	ldi	r22, 0x01	; 1
     e00:	86 e1       	ldi	r24, 0x16	; 22
     e02:	0e 94 9a 09 	call	0x1334	; 0x1334 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C3,HIGH);
     e06:	61 e0       	ldi	r22, 0x01	; 1
     e08:	87 e1       	ldi	r24, 0x17	; 23
     e0a:	0e 94 9a 09 	call	0x1334	; 0x1334 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R1,HIGH);
     e0e:	61 e0       	ldi	r22, 0x01	; 1
     e10:	82 e1       	ldi	r24, 0x12	; 18
     e12:	0e 94 9a 09 	call	0x1334	; 0x1334 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R2,HIGH);
     e16:	61 e0       	ldi	r22, 0x01	; 1
     e18:	83 e1       	ldi	r24, 0x13	; 19
     e1a:	0e 94 9a 09 	call	0x1334	; 0x1334 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R3,LOW);
     e1e:	60 e0       	ldi	r22, 0x00	; 0
     e20:	84 e1       	ldi	r24, 0x14	; 20
     e22:	0e 94 9a 09 	call	0x1334	; 0x1334 <DIO_s8SETPinVal>
	
	Uchar8_t val = 1;
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C1,&val);
     e2a:	be 01       	movw	r22, r28
     e2c:	6f 5f       	subi	r22, 0xFF	; 255
     e2e:	7f 4f       	sbci	r23, 0xFF	; 255
     e30:	85 e1       	ldi	r24, 0x15	; 21
     e32:	0e 94 da 09 	call	0x13b4	; 0x13b4 <DIO_s8GETPinVal>
	if(val == 0)
     e36:	89 81       	ldd	r24, Y+1	; 0x01
     e38:	88 23       	and	r24, r24
     e3a:	39 f0       	breq	.+14     	; 0xe4a <checkR3+0x5e>
     e3c:	0b c0       	rjmp	.+22     	; 0xe54 <checkR3+0x68>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C1,&val);
     e3e:	be 01       	movw	r22, r28
     e40:	6f 5f       	subi	r22, 0xFF	; 255
     e42:	7f 4f       	sbci	r23, 0xFF	; 255
     e44:	85 e1       	ldi	r24, 0x15	; 21
     e46:	0e 94 da 09 	call	0x13b4	; 0x13b4 <DIO_s8GETPinVal>
	
	Uchar8_t val = 1;
	DIO_s8GETPinVal(C1,&val);
	if(val == 0)
	{
		while (val == 0)
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	88 23       	and	r24, r24
     e4e:	b9 f3       	breq	.-18     	; 0xe3e <checkR3+0x52>
		{
			DIO_s8GETPinVal(C1,&val);
		}
		return KEY_7;
     e50:	87 e0       	ldi	r24, 0x07	; 7
     e52:	2e c0       	rjmp	.+92     	; 0xeb0 <checkR3+0xc4>
	}
	val = 1;
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C2,&val);
     e58:	be 01       	movw	r22, r28
     e5a:	6f 5f       	subi	r22, 0xFF	; 255
     e5c:	7f 4f       	sbci	r23, 0xFF	; 255
     e5e:	86 e1       	ldi	r24, 0x16	; 22
     e60:	0e 94 da 09 	call	0x13b4	; 0x13b4 <DIO_s8GETPinVal>
	if(val == 0)
     e64:	89 81       	ldd	r24, Y+1	; 0x01
     e66:	88 23       	and	r24, r24
     e68:	39 f0       	breq	.+14     	; 0xe78 <checkR3+0x8c>
     e6a:	0b c0       	rjmp	.+22     	; 0xe82 <checkR3+0x96>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C2,&val);
     e6c:	be 01       	movw	r22, r28
     e6e:	6f 5f       	subi	r22, 0xFF	; 255
     e70:	7f 4f       	sbci	r23, 0xFF	; 255
     e72:	86 e1       	ldi	r24, 0x16	; 22
     e74:	0e 94 da 09 	call	0x13b4	; 0x13b4 <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C2,&val);
	if(val == 0)
	{
		while (val == 0)
     e78:	89 81       	ldd	r24, Y+1	; 0x01
     e7a:	88 23       	and	r24, r24
     e7c:	b9 f3       	breq	.-18     	; 0xe6c <checkR3+0x80>
		{
			DIO_s8GETPinVal(C2,&val);
		}
		return KEY_8;
     e7e:	88 e0       	ldi	r24, 0x08	; 8
     e80:	17 c0       	rjmp	.+46     	; 0xeb0 <checkR3+0xc4>
	}
	val = 1;
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C3,&val);
     e86:	be 01       	movw	r22, r28
     e88:	6f 5f       	subi	r22, 0xFF	; 255
     e8a:	7f 4f       	sbci	r23, 0xFF	; 255
     e8c:	87 e1       	ldi	r24, 0x17	; 23
     e8e:	0e 94 da 09 	call	0x13b4	; 0x13b4 <DIO_s8GETPinVal>
	if(val == 0)
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	88 23       	and	r24, r24
     e96:	41 f0       	breq	.+16     	; 0xea8 <checkR3+0xbc>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_9;
	}
	return KEY_NOTHING;
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	0a c0       	rjmp	.+20     	; 0xeb0 <checkR3+0xc4>
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C3,&val);
     e9c:	be 01       	movw	r22, r28
     e9e:	6f 5f       	subi	r22, 0xFF	; 255
     ea0:	7f 4f       	sbci	r23, 0xFF	; 255
     ea2:	87 e1       	ldi	r24, 0x17	; 23
     ea4:	0e 94 da 09 	call	0x13b4	; 0x13b4 <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	88 23       	and	r24, r24
     eac:	b9 f3       	breq	.-18     	; 0xe9c <checkR3+0xb0>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_9;
     eae:	89 e0       	ldi	r24, 0x09	; 9
	}
	return KEY_NOTHING;
}
     eb0:	0f 90       	pop	r0
     eb2:	df 91       	pop	r29
     eb4:	cf 91       	pop	r28
     eb6:	08 95       	ret

00000eb8 <KEYPAD_GetButton>:
EN_KEYPAD_BTNS KEYPAD_GetButton()
{
	EN_KEYPAD_BTNS PRESSED = KEY_NOTHING;
	while(PRESSED == KEY_NOTHING)
	{
		PRESSED = checkR1();
     eb8:	0e 94 2a 06 	call	0xc54	; 0xc54 <checkR1>
		if(PRESSED != KEY_NOTHING) return PRESSED;
     ebc:	81 11       	cpse	r24, r1
     ebe:	06 c0       	rjmp	.+12     	; 0xecc <KEYPAD_GetButton+0x14>
		PRESSED = checkR2();
     ec0:	0e 94 90 06 	call	0xd20	; 0xd20 <checkR2>
		if(PRESSED != KEY_NOTHING) return PRESSED;
     ec4:	81 11       	cpse	r24, r1
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <KEYPAD_GetButton+0x14>
		PRESSED = checkR3();
     ec8:	0e 94 f6 06 	call	0xdec	; 0xdec <checkR3>
		if(PRESSED != KEY_NOTHING) return PRESSED;
		return KEY_NOTHING;
	}
	
	return KEY_NOTHING;
}
     ecc:	08 95       	ret

00000ece <HLCD_vidWritecmd>:
		for (Uchar8_t i = 0; i < 8 ; i++)
		{
			HLCD_vidWriteChar(pu8custom[i]);
		}
	}
}
     ece:	1f 93       	push	r17
     ed0:	cf 93       	push	r28
     ed2:	df 93       	push	r29
     ed4:	d8 2f       	mov	r29, r24
     ed6:	60 e0       	ldi	r22, 0x00	; 0
     ed8:	82 e0       	ldi	r24, 0x02	; 2
     eda:	0e 94 9a 09 	call	0x1334	; 0x1334 <DIO_s8SETPinVal>
     ede:	60 e0       	ldi	r22, 0x00	; 0
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	0e 94 9a 09 	call	0x1334	; 0x1334 <DIO_s8SETPinVal>
     ee6:	1d 2f       	mov	r17, r29
     ee8:	12 95       	swap	r17
     eea:	1f 70       	andi	r17, 0x0F	; 15
     eec:	c0 e0       	ldi	r28, 0x00	; 0
     eee:	11 c0       	rjmp	.+34     	; 0xf12 <HLCD_vidWritecmd+0x44>
     ef0:	ec 2f       	mov	r30, r28
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	61 2f       	mov	r22, r17
     ef6:	70 e0       	ldi	r23, 0x00	; 0
     ef8:	0c 2e       	mov	r0, r28
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <HLCD_vidWritecmd+0x32>
     efc:	75 95       	asr	r23
     efe:	67 95       	ror	r22
     f00:	0a 94       	dec	r0
     f02:	e2 f7       	brpl	.-8      	; 0xefc <HLCD_vidWritecmd+0x2e>
     f04:	61 70       	andi	r22, 0x01	; 1
     f06:	e2 59       	subi	r30, 0x92	; 146
     f08:	fe 4f       	sbci	r31, 0xFE	; 254
     f0a:	80 81       	ld	r24, Z
     f0c:	0e 94 9a 09 	call	0x1334	; 0x1334 <DIO_s8SETPinVal>
     f10:	cf 5f       	subi	r28, 0xFF	; 255
     f12:	c4 30       	cpi	r28, 0x04	; 4
     f14:	68 f3       	brcs	.-38     	; 0xef0 <HLCD_vidWritecmd+0x22>
     f16:	61 e0       	ldi	r22, 0x01	; 1
     f18:	83 e0       	ldi	r24, 0x03	; 3
     f1a:	0e 94 9a 09 	call	0x1334	; 0x1334 <DIO_s8SETPinVal>
     f1e:	89 ef       	ldi	r24, 0xF9	; 249
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	01 97       	sbiw	r24, 0x01	; 1
     f24:	f1 f7       	brne	.-4      	; 0xf22 <HLCD_vidWritecmd+0x54>
     f26:	00 c0       	rjmp	.+0      	; 0xf28 <HLCD_vidWritecmd+0x5a>
     f28:	00 00       	nop
     f2a:	60 e0       	ldi	r22, 0x00	; 0
     f2c:	83 e0       	ldi	r24, 0x03	; 3
     f2e:	0e 94 9a 09 	call	0x1334	; 0x1334 <DIO_s8SETPinVal>
     f32:	92 e4       	ldi	r25, 0x42	; 66
     f34:	9a 95       	dec	r25
     f36:	f1 f7       	brne	.-4      	; 0xf34 <HLCD_vidWritecmd+0x66>
     f38:	00 c0       	rjmp	.+0      	; 0xf3a <HLCD_vidWritecmd+0x6c>
     f3a:	df 70       	andi	r29, 0x0F	; 15
     f3c:	c0 e0       	ldi	r28, 0x00	; 0
     f3e:	11 c0       	rjmp	.+34     	; 0xf62 <HLCD_vidWritecmd+0x94>
     f40:	ec 2f       	mov	r30, r28
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	6d 2f       	mov	r22, r29
     f46:	70 e0       	ldi	r23, 0x00	; 0
     f48:	0c 2e       	mov	r0, r28
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <HLCD_vidWritecmd+0x82>
     f4c:	75 95       	asr	r23
     f4e:	67 95       	ror	r22
     f50:	0a 94       	dec	r0
     f52:	e2 f7       	brpl	.-8      	; 0xf4c <HLCD_vidWritecmd+0x7e>
     f54:	61 70       	andi	r22, 0x01	; 1
     f56:	e2 59       	subi	r30, 0x92	; 146
     f58:	fe 4f       	sbci	r31, 0xFE	; 254
     f5a:	80 81       	ld	r24, Z
     f5c:	0e 94 9a 09 	call	0x1334	; 0x1334 <DIO_s8SETPinVal>
     f60:	cf 5f       	subi	r28, 0xFF	; 255
     f62:	c4 30       	cpi	r28, 0x04	; 4
     f64:	68 f3       	brcs	.-38     	; 0xf40 <HLCD_vidWritecmd+0x72>
     f66:	61 e0       	ldi	r22, 0x01	; 1
     f68:	83 e0       	ldi	r24, 0x03	; 3
     f6a:	0e 94 9a 09 	call	0x1334	; 0x1334 <DIO_s8SETPinVal>
     f6e:	89 ef       	ldi	r24, 0xF9	; 249
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	01 97       	sbiw	r24, 0x01	; 1
     f74:	f1 f7       	brne	.-4      	; 0xf72 <HLCD_vidWritecmd+0xa4>
     f76:	00 c0       	rjmp	.+0      	; 0xf78 <HLCD_vidWritecmd+0xaa>
     f78:	00 00       	nop
     f7a:	60 e0       	ldi	r22, 0x00	; 0
     f7c:	83 e0       	ldi	r24, 0x03	; 3
     f7e:	0e 94 9a 09 	call	0x1334	; 0x1334 <DIO_s8SETPinVal>
     f82:	83 ef       	ldi	r24, 0xF3	; 243
     f84:	91 e0       	ldi	r25, 0x01	; 1
     f86:	01 97       	sbiw	r24, 0x01	; 1
     f88:	f1 f7       	brne	.-4      	; 0xf86 <HLCD_vidWritecmd+0xb8>
     f8a:	00 c0       	rjmp	.+0      	; 0xf8c <HLCD_vidWritecmd+0xbe>
     f8c:	00 00       	nop
     f8e:	df 91       	pop	r29
     f90:	cf 91       	pop	r28
     f92:	1f 91       	pop	r17
     f94:	08 95       	ret

00000f96 <HLCD_vidInit>:
     f96:	cf 93       	push	r28
     f98:	c0 e0       	ldi	r28, 0x00	; 0
     f9a:	09 c0       	rjmp	.+18     	; 0xfae <HLCD_vidInit+0x18>
     f9c:	ec 2f       	mov	r30, r28
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	e2 59       	subi	r30, 0x92	; 146
     fa2:	fe 4f       	sbci	r31, 0xFE	; 254
     fa4:	61 e0       	ldi	r22, 0x01	; 1
     fa6:	80 81       	ld	r24, Z
     fa8:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <DIO_s8SETPinDir>
     fac:	cf 5f       	subi	r28, 0xFF	; 255
     fae:	c4 30       	cpi	r28, 0x04	; 4
     fb0:	a8 f3       	brcs	.-22     	; 0xf9c <HLCD_vidInit+0x6>
     fb2:	61 e0       	ldi	r22, 0x01	; 1
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <DIO_s8SETPinDir>
     fba:	61 e0       	ldi	r22, 0x01	; 1
     fbc:	82 e0       	ldi	r24, 0x02	; 2
     fbe:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <DIO_s8SETPinDir>
     fc2:	61 e0       	ldi	r22, 0x01	; 1
     fc4:	83 e0       	ldi	r24, 0x03	; 3
     fc6:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <DIO_s8SETPinDir>
     fca:	8f e0       	ldi	r24, 0x0F	; 15
     fcc:	97 e2       	ldi	r25, 0x27	; 39
     fce:	01 97       	sbiw	r24, 0x01	; 1
     fd0:	f1 f7       	brne	.-4      	; 0xfce <HLCD_vidInit+0x38>
     fd2:	00 c0       	rjmp	.+0      	; 0xfd4 <HLCD_vidInit+0x3e>
     fd4:	00 00       	nop
     fd6:	82 e0       	ldi	r24, 0x02	; 2
     fd8:	0e 94 67 07 	call	0xece	; 0xece <HLCD_vidWritecmd>
     fdc:	89 ef       	ldi	r24, 0xF9	; 249
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	01 97       	sbiw	r24, 0x01	; 1
     fe2:	f1 f7       	brne	.-4      	; 0xfe0 <HLCD_vidInit+0x4a>
     fe4:	00 c0       	rjmp	.+0      	; 0xfe6 <HLCD_vidInit+0x50>
     fe6:	00 00       	nop
     fe8:	88 e2       	ldi	r24, 0x28	; 40
     fea:	0e 94 67 07 	call	0xece	; 0xece <HLCD_vidWritecmd>
     fee:	89 ef       	ldi	r24, 0xF9	; 249
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	01 97       	sbiw	r24, 0x01	; 1
     ff4:	f1 f7       	brne	.-4      	; 0xff2 <HLCD_vidInit+0x5c>
     ff6:	00 c0       	rjmp	.+0      	; 0xff8 <HLCD_vidInit+0x62>
     ff8:	00 00       	nop
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	0e 94 67 07 	call	0xece	; 0xece <HLCD_vidWritecmd>
    1000:	87 ee       	ldi	r24, 0xE7	; 231
    1002:	93 e0       	ldi	r25, 0x03	; 3
    1004:	01 97       	sbiw	r24, 0x01	; 1
    1006:	f1 f7       	brne	.-4      	; 0x1004 <HLCD_vidInit+0x6e>
    1008:	00 c0       	rjmp	.+0      	; 0x100a <HLCD_vidInit+0x74>
    100a:	00 00       	nop
    100c:	86 e0       	ldi	r24, 0x06	; 6
    100e:	0e 94 67 07 	call	0xece	; 0xece <HLCD_vidWritecmd>
    1012:	89 ef       	ldi	r24, 0xF9	; 249
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	01 97       	sbiw	r24, 0x01	; 1
    1018:	f1 f7       	brne	.-4      	; 0x1016 <HLCD_vidInit+0x80>
    101a:	00 c0       	rjmp	.+0      	; 0x101c <HLCD_vidInit+0x86>
    101c:	00 00       	nop
    101e:	8e e0       	ldi	r24, 0x0E	; 14
    1020:	0e 94 67 07 	call	0xece	; 0xece <HLCD_vidWritecmd>
    1024:	89 ef       	ldi	r24, 0xF9	; 249
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	01 97       	sbiw	r24, 0x01	; 1
    102a:	f1 f7       	brne	.-4      	; 0x1028 <HLCD_vidInit+0x92>
    102c:	00 c0       	rjmp	.+0      	; 0x102e <HLCD_vidInit+0x98>
    102e:	00 00       	nop
    1030:	cf 91       	pop	r28
    1032:	08 95       	ret

00001034 <HLCD_vidWriteChar>:
    1034:	1f 93       	push	r17
    1036:	cf 93       	push	r28
    1038:	df 93       	push	r29
    103a:	d8 2f       	mov	r29, r24
    103c:	60 e0       	ldi	r22, 0x00	; 0
    103e:	82 e0       	ldi	r24, 0x02	; 2
    1040:	0e 94 9a 09 	call	0x1334	; 0x1334 <DIO_s8SETPinVal>
    1044:	61 e0       	ldi	r22, 0x01	; 1
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	0e 94 9a 09 	call	0x1334	; 0x1334 <DIO_s8SETPinVal>
    104c:	1d 2f       	mov	r17, r29
    104e:	12 95       	swap	r17
    1050:	1f 70       	andi	r17, 0x0F	; 15
    1052:	c0 e0       	ldi	r28, 0x00	; 0
    1054:	11 c0       	rjmp	.+34     	; 0x1078 <HLCD_vidWriteChar+0x44>
    1056:	ec 2f       	mov	r30, r28
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	61 2f       	mov	r22, r17
    105c:	70 e0       	ldi	r23, 0x00	; 0
    105e:	0c 2e       	mov	r0, r28
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <HLCD_vidWriteChar+0x32>
    1062:	75 95       	asr	r23
    1064:	67 95       	ror	r22
    1066:	0a 94       	dec	r0
    1068:	e2 f7       	brpl	.-8      	; 0x1062 <HLCD_vidWriteChar+0x2e>
    106a:	61 70       	andi	r22, 0x01	; 1
    106c:	e2 59       	subi	r30, 0x92	; 146
    106e:	fe 4f       	sbci	r31, 0xFE	; 254
    1070:	80 81       	ld	r24, Z
    1072:	0e 94 9a 09 	call	0x1334	; 0x1334 <DIO_s8SETPinVal>
    1076:	cf 5f       	subi	r28, 0xFF	; 255
    1078:	c4 30       	cpi	r28, 0x04	; 4
    107a:	68 f3       	brcs	.-38     	; 0x1056 <HLCD_vidWriteChar+0x22>
    107c:	61 e0       	ldi	r22, 0x01	; 1
    107e:	83 e0       	ldi	r24, 0x03	; 3
    1080:	0e 94 9a 09 	call	0x1334	; 0x1334 <DIO_s8SETPinVal>
    1084:	89 ef       	ldi	r24, 0xF9	; 249
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	01 97       	sbiw	r24, 0x01	; 1
    108a:	f1 f7       	brne	.-4      	; 0x1088 <HLCD_vidWriteChar+0x54>
    108c:	00 c0       	rjmp	.+0      	; 0x108e <HLCD_vidWriteChar+0x5a>
    108e:	00 00       	nop
    1090:	60 e0       	ldi	r22, 0x00	; 0
    1092:	83 e0       	ldi	r24, 0x03	; 3
    1094:	0e 94 9a 09 	call	0x1334	; 0x1334 <DIO_s8SETPinVal>
    1098:	92 e4       	ldi	r25, 0x42	; 66
    109a:	9a 95       	dec	r25
    109c:	f1 f7       	brne	.-4      	; 0x109a <HLCD_vidWriteChar+0x66>
    109e:	00 c0       	rjmp	.+0      	; 0x10a0 <HLCD_vidWriteChar+0x6c>
    10a0:	df 70       	andi	r29, 0x0F	; 15
    10a2:	c0 e0       	ldi	r28, 0x00	; 0
    10a4:	11 c0       	rjmp	.+34     	; 0x10c8 <HLCD_vidWriteChar+0x94>
    10a6:	ec 2f       	mov	r30, r28
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	6d 2f       	mov	r22, r29
    10ac:	70 e0       	ldi	r23, 0x00	; 0
    10ae:	0c 2e       	mov	r0, r28
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <HLCD_vidWriteChar+0x82>
    10b2:	75 95       	asr	r23
    10b4:	67 95       	ror	r22
    10b6:	0a 94       	dec	r0
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <HLCD_vidWriteChar+0x7e>
    10ba:	61 70       	andi	r22, 0x01	; 1
    10bc:	e2 59       	subi	r30, 0x92	; 146
    10be:	fe 4f       	sbci	r31, 0xFE	; 254
    10c0:	80 81       	ld	r24, Z
    10c2:	0e 94 9a 09 	call	0x1334	; 0x1334 <DIO_s8SETPinVal>
    10c6:	cf 5f       	subi	r28, 0xFF	; 255
    10c8:	c4 30       	cpi	r28, 0x04	; 4
    10ca:	68 f3       	brcs	.-38     	; 0x10a6 <HLCD_vidWriteChar+0x72>
    10cc:	61 e0       	ldi	r22, 0x01	; 1
    10ce:	83 e0       	ldi	r24, 0x03	; 3
    10d0:	0e 94 9a 09 	call	0x1334	; 0x1334 <DIO_s8SETPinVal>
    10d4:	89 ef       	ldi	r24, 0xF9	; 249
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	01 97       	sbiw	r24, 0x01	; 1
    10da:	f1 f7       	brne	.-4      	; 0x10d8 <HLCD_vidWriteChar+0xa4>
    10dc:	00 c0       	rjmp	.+0      	; 0x10de <HLCD_vidWriteChar+0xaa>
    10de:	00 00       	nop
    10e0:	60 e0       	ldi	r22, 0x00	; 0
    10e2:	83 e0       	ldi	r24, 0x03	; 3
    10e4:	0e 94 9a 09 	call	0x1334	; 0x1334 <DIO_s8SETPinVal>
    10e8:	83 ef       	ldi	r24, 0xF3	; 243
    10ea:	91 e0       	ldi	r25, 0x01	; 1
    10ec:	01 97       	sbiw	r24, 0x01	; 1
    10ee:	f1 f7       	brne	.-4      	; 0x10ec <HLCD_vidWriteChar+0xb8>
    10f0:	00 c0       	rjmp	.+0      	; 0x10f2 <HLCD_vidWriteChar+0xbe>
    10f2:	00 00       	nop
    10f4:	df 91       	pop	r29
    10f6:	cf 91       	pop	r28
    10f8:	1f 91       	pop	r17
    10fa:	08 95       	ret

000010fc <HLCD_ClrDisplay>:
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	0e 94 67 07 	call	0xece	; 0xece <HLCD_vidWritecmd>
    1102:	87 ee       	ldi	r24, 0xE7	; 231
    1104:	93 e0       	ldi	r25, 0x03	; 3
    1106:	01 97       	sbiw	r24, 0x01	; 1
    1108:	f1 f7       	brne	.-4      	; 0x1106 <HLCD_ClrDisplay+0xa>
    110a:	00 c0       	rjmp	.+0      	; 0x110c <HLCD_ClrDisplay+0x10>
    110c:	00 00       	nop
    110e:	82 e0       	ldi	r24, 0x02	; 2
    1110:	0e 94 67 07 	call	0xece	; 0xece <HLCD_vidWritecmd>
    1114:	87 ee       	ldi	r24, 0xE7	; 231
    1116:	93 e0       	ldi	r25, 0x03	; 3
    1118:	01 97       	sbiw	r24, 0x01	; 1
    111a:	f1 f7       	brne	.-4      	; 0x1118 <HLCD_ClrDisplay+0x1c>
    111c:	00 c0       	rjmp	.+0      	; 0x111e <HLCD_ClrDisplay+0x22>
    111e:	00 00       	nop
    1120:	08 95       	ret

00001122 <HLCD_gotoXY>:
    1122:	81 11       	cpse	r24, r1
    1124:	08 c0       	rjmp	.+16     	; 0x1136 <HLCD_gotoXY+0x14>
    1126:	60 31       	cpi	r22, 0x10	; 16
    1128:	30 f4       	brcc	.+12     	; 0x1136 <HLCD_gotoXY+0x14>
    112a:	86 2f       	mov	r24, r22
    112c:	8f 70       	andi	r24, 0x0F	; 15
    112e:	80 68       	ori	r24, 0x80	; 128
    1130:	0e 94 67 07 	call	0xece	; 0xece <HLCD_vidWritecmd>
    1134:	08 95       	ret
    1136:	81 30       	cpi	r24, 0x01	; 1
    1138:	39 f4       	brne	.+14     	; 0x1148 <HLCD_gotoXY+0x26>
    113a:	60 31       	cpi	r22, 0x10	; 16
    113c:	28 f4       	brcc	.+10     	; 0x1148 <HLCD_gotoXY+0x26>
    113e:	86 2f       	mov	r24, r22
    1140:	8f 70       	andi	r24, 0x0F	; 15
    1142:	80 6c       	ori	r24, 0xC0	; 192
    1144:	0e 94 67 07 	call	0xece	; 0xece <HLCD_vidWritecmd>
    1148:	08 95       	ret

0000114a <HLCD_WriteString>:
    114a:	0f 93       	push	r16
    114c:	1f 93       	push	r17
    114e:	cf 93       	push	r28
    1150:	df 93       	push	r29
    1152:	8c 01       	movw	r16, r24
    1154:	fc 01       	movw	r30, r24
    1156:	80 81       	ld	r24, Z
    1158:	c0 e0       	ldi	r28, 0x00	; 0
    115a:	d0 e0       	ldi	r29, 0x00	; 0
    115c:	07 c0       	rjmp	.+14     	; 0x116c <HLCD_WriteString+0x22>
    115e:	0e 94 1a 08 	call	0x1034	; 0x1034 <HLCD_vidWriteChar>
    1162:	21 96       	adiw	r28, 0x01	; 1
    1164:	f8 01       	movw	r30, r16
    1166:	ec 0f       	add	r30, r28
    1168:	fd 1f       	adc	r31, r29
    116a:	80 81       	ld	r24, Z
    116c:	81 11       	cpse	r24, r1
    116e:	f7 cf       	rjmp	.-18     	; 0x115e <HLCD_WriteString+0x14>
    1170:	df 91       	pop	r29
    1172:	cf 91       	pop	r28
    1174:	1f 91       	pop	r17
    1176:	0f 91       	pop	r16
    1178:	08 95       	ret

0000117a <HLCD_DisplayFloat>:
 * input param 	:
 * 				  f32_a_number -> the floating point number to display
 * return		: void
 * */
void HLCD_DisplayFloat(float32_t f32_a_number)
{
    117a:	8f 92       	push	r8
    117c:	9f 92       	push	r9
    117e:	af 92       	push	r10
    1180:	bf 92       	push	r11
    1182:	cf 92       	push	r12
    1184:	df 92       	push	r13
    1186:	ef 92       	push	r14
    1188:	ff 92       	push	r15
    118a:	1f 93       	push	r17
    118c:	cf 93       	push	r28
    118e:	df 93       	push	r29
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	2c 97       	sbiw	r28, 0x0c	; 12
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	f8 94       	cli
    119a:	de bf       	out	0x3e, r29	; 62
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	cd bf       	out	0x3d, r28	; 61
    11a0:	4b 01       	movw	r8, r22
    11a2:	5c 01       	movw	r10, r24
	Uchar8_t arr_l_NumString[12];
	Uchar8_t u8_l_NumIterator = 3, u8_l_StrLen, u8_l_tempVar, u8_l_decimal;
	Uint32_t u32_l_integer;

	/* Get the integer part */
	u32_l_integer = (Uint16_t)f32_a_number;
    11a4:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <__fixunssfsi>
    11a8:	6b 01       	movw	r12, r22
    11aa:	e1 2c       	mov	r14, r1
    11ac:	f1 2c       	mov	r15, r1
	
	/* Get the first two decimal places */
	u8_l_decimal = (Uint16_t)((f32_a_number - u32_l_integer) * 100);
    11ae:	c7 01       	movw	r24, r14
    11b0:	b6 01       	movw	r22, r12
    11b2:	0e 94 76 0e 	call	0x1cec	; 0x1cec <__floatunsisf>
    11b6:	9b 01       	movw	r18, r22
    11b8:	ac 01       	movw	r20, r24
    11ba:	c5 01       	movw	r24, r10
    11bc:	b4 01       	movw	r22, r8
    11be:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__subsf3>
    11c2:	20 e0       	ldi	r18, 0x00	; 0
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	48 ec       	ldi	r20, 0xC8	; 200
    11c8:	52 e4       	ldi	r21, 0x42	; 66
    11ca:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__mulsf3>
    11ce:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <__fixunssfsi>

	/* Get decimal digits as characters */
	arr_l_NumString[0] = u8_l_decimal % 10 + '0';
    11d2:	8d ec       	ldi	r24, 0xCD	; 205
    11d4:	68 9f       	mul	r22, r24
    11d6:	81 2d       	mov	r24, r1
    11d8:	11 24       	eor	r1, r1
    11da:	86 95       	lsr	r24
    11dc:	86 95       	lsr	r24
    11de:	86 95       	lsr	r24
    11e0:	28 2f       	mov	r18, r24
    11e2:	22 0f       	add	r18, r18
    11e4:	92 2f       	mov	r25, r18
    11e6:	99 0f       	add	r25, r25
    11e8:	99 0f       	add	r25, r25
    11ea:	92 0f       	add	r25, r18
    11ec:	69 1b       	sub	r22, r25
    11ee:	60 5d       	subi	r22, 0xD0	; 208
    11f0:	69 83       	std	Y+1, r22	; 0x01
	arr_l_NumString[1] = u8_l_decimal / 10 + '0';
    11f2:	80 5d       	subi	r24, 0xD0	; 208
    11f4:	8a 83       	std	Y+2, r24	; 0x02
	
	arr_l_NumString[2] = '.';
    11f6:	8e e2       	ldi	r24, 0x2E	; 46
    11f8:	8b 83       	std	Y+3, r24	; 0x03
 * return		: void
 * */
void HLCD_DisplayFloat(float32_t f32_a_number)
{
	Uchar8_t arr_l_NumString[12];
	Uchar8_t u8_l_NumIterator = 3, u8_l_StrLen, u8_l_tempVar, u8_l_decimal;
    11fa:	13 e0       	ldi	r17, 0x03	; 3
	arr_l_NumString[1] = u8_l_decimal / 10 + '0';
	
	arr_l_NumString[2] = '.';
	
	/* Get integer digits as characters */
	while (u32_l_integer > 0) 
    11fc:	15 c0       	rjmp	.+42     	; 0x1228 <HLCD_DisplayFloat+0xae>
	{
		arr_l_NumString[u8_l_NumIterator] = (u32_l_integer % 10) + '0';
    11fe:	c7 01       	movw	r24, r14
    1200:	b6 01       	movw	r22, r12
    1202:	2a e0       	ldi	r18, 0x0A	; 10
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	40 e0       	ldi	r20, 0x00	; 0
    1208:	50 e0       	ldi	r21, 0x00	; 0
    120a:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__udivmodsi4>
    120e:	e1 e0       	ldi	r30, 0x01	; 1
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	ec 0f       	add	r30, r28
    1214:	fd 1f       	adc	r31, r29
    1216:	e1 0f       	add	r30, r17
    1218:	f1 1d       	adc	r31, r1
    121a:	60 5d       	subi	r22, 0xD0	; 208
    121c:	60 83       	st	Z, r22
		u32_l_integer /= 10;
    121e:	c2 2e       	mov	r12, r18
    1220:	d3 2e       	mov	r13, r19
    1222:	e4 2e       	mov	r14, r20
    1224:	f5 2e       	mov	r15, r21
		u8_l_NumIterator++;
    1226:	1f 5f       	subi	r17, 0xFF	; 255
	arr_l_NumString[1] = u8_l_decimal / 10 + '0';
	
	arr_l_NumString[2] = '.';
	
	/* Get integer digits as characters */
	while (u32_l_integer > 0) 
    1228:	c1 14       	cp	r12, r1
    122a:	d1 04       	cpc	r13, r1
    122c:	e1 04       	cpc	r14, r1
    122e:	f1 04       	cpc	r15, r1
    1230:	31 f7       	brne	.-52     	; 0x11fe <HLCD_DisplayFloat+0x84>
		u32_l_integer /= 10;
		u8_l_NumIterator++;
	}
	
	/* Terminate String */
	arr_l_NumString[u8_l_NumIterator] = '\0';
    1232:	41 2f       	mov	r20, r17
    1234:	50 e0       	ldi	r21, 0x00	; 0
    1236:	e1 e0       	ldi	r30, 0x01	; 1
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	ec 0f       	add	r30, r28
    123c:	fd 1f       	adc	r31, r29
    123e:	e4 0f       	add	r30, r20
    1240:	f5 1f       	adc	r31, r21
    1242:	10 82       	st	Z, r1
	
	u8_l_StrLen = u8_l_NumIterator;

	/* Reverse String */
	for (u8_l_NumIterator = 0; u8_l_NumIterator< u8_l_StrLen/2; u8_l_NumIterator++) 
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	17 c0       	rjmp	.+46     	; 0x1276 <HLCD_DisplayFloat+0xfc>
	{
		u8_l_tempVar = arr_l_NumString[u8_l_NumIterator];
    1248:	28 2f       	mov	r18, r24
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	a1 e0       	ldi	r26, 0x01	; 1
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	ac 0f       	add	r26, r28
    1252:	bd 1f       	adc	r27, r29
    1254:	a2 0f       	add	r26, r18
    1256:	b3 1f       	adc	r27, r19
    1258:	9c 91       	ld	r25, X
		arr_l_NumString[u8_l_NumIterator] = arr_l_NumString[u8_l_StrLen - u8_l_NumIterator - 1];
    125a:	fa 01       	movw	r30, r20
    125c:	e2 1b       	sub	r30, r18
    125e:	f3 0b       	sbc	r31, r19
    1260:	31 97       	sbiw	r30, 0x01	; 1
    1262:	21 e0       	ldi	r18, 0x01	; 1
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	2c 0f       	add	r18, r28
    1268:	3d 1f       	adc	r19, r29
    126a:	e2 0f       	add	r30, r18
    126c:	f3 1f       	adc	r31, r19
    126e:	20 81       	ld	r18, Z
    1270:	2c 93       	st	X, r18
		arr_l_NumString[u8_l_StrLen - u8_l_NumIterator - 1] = u8_l_tempVar;
    1272:	90 83       	st	Z, r25
	arr_l_NumString[u8_l_NumIterator] = '\0';
	
	u8_l_StrLen = u8_l_NumIterator;

	/* Reverse String */
	for (u8_l_NumIterator = 0; u8_l_NumIterator< u8_l_StrLen/2; u8_l_NumIterator++) 
    1274:	8f 5f       	subi	r24, 0xFF	; 255
    1276:	91 2f       	mov	r25, r17
    1278:	96 95       	lsr	r25
    127a:	89 17       	cp	r24, r25
    127c:	28 f3       	brcs	.-54     	; 0x1248 <HLCD_DisplayFloat+0xce>
		arr_l_NumString[u8_l_NumIterator] = arr_l_NumString[u8_l_StrLen - u8_l_NumIterator - 1];
		arr_l_NumString[u8_l_StrLen - u8_l_NumIterator - 1] = u8_l_tempVar;
	}

	/* Display Number */
	HLCD_WriteString(arr_l_NumString);
    127e:	ce 01       	movw	r24, r28
    1280:	01 96       	adiw	r24, 0x01	; 1
    1282:	0e 94 a5 08 	call	0x114a	; 0x114a <HLCD_WriteString>
}
    1286:	2c 96       	adiw	r28, 0x0c	; 12
    1288:	0f b6       	in	r0, 0x3f	; 63
    128a:	f8 94       	cli
    128c:	de bf       	out	0x3e, r29	; 62
    128e:	0f be       	out	0x3f, r0	; 63
    1290:	cd bf       	out	0x3d, r28	; 61
    1292:	df 91       	pop	r29
    1294:	cf 91       	pop	r28
    1296:	1f 91       	pop	r17
    1298:	ff 90       	pop	r15
    129a:	ef 90       	pop	r14
    129c:	df 90       	pop	r13
    129e:	cf 90       	pop	r12
    12a0:	bf 90       	pop	r11
    12a2:	af 90       	pop	r10
    12a4:	9f 90       	pop	r9
    12a6:	8f 90       	pop	r8
    12a8:	08 95       	ret

000012aa <main>:
 */ 
#include "APP/app.h"

void main(void)
{
	APP_Init();
    12aa:	0e 94 70 00 	call	0xe0	; 0xe0 <APP_Init>

    while (1) 
    {
		APP_Start();
    12ae:	0e 94 92 00 	call	0x124	; 0x124 <APP_Start>
    12b2:	fd cf       	rjmp	.-6      	; 0x12ae <main+0x4>

000012b4 <DIO_s8SETPinDir>:
	{
		errStatus = E_NOK;
	}
	return errStatus;

}
    12b4:	80 32       	cpi	r24, 0x20	; 32
    12b6:	c0 f5       	brcc	.+112    	; 0x1328 <DIO_s8SETPinDir+0x74>
    12b8:	62 30       	cpi	r22, 0x02	; 2
    12ba:	c0 f5       	brcc	.+112    	; 0x132c <DIO_s8SETPinDir+0x78>
    12bc:	e8 2f       	mov	r30, r24
    12be:	e6 95       	lsr	r30
    12c0:	e6 95       	lsr	r30
    12c2:	e6 95       	lsr	r30
    12c4:	87 70       	andi	r24, 0x07	; 7
    12c6:	61 11       	cpse	r22, r1
    12c8:	17 c0       	rjmp	.+46     	; 0x12f8 <DIO_s8SETPinDir+0x44>
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	ee 0f       	add	r30, r30
    12ce:	ff 1f       	adc	r31, r31
    12d0:	e6 58       	subi	r30, 0x86	; 134
    12d2:	fe 4f       	sbci	r31, 0xFE	; 254
    12d4:	01 90       	ld	r0, Z+
    12d6:	f0 81       	ld	r31, Z
    12d8:	e0 2d       	mov	r30, r0
    12da:	40 81       	ld	r20, Z
    12dc:	21 e0       	ldi	r18, 0x01	; 1
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	b9 01       	movw	r22, r18
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <DIO_s8SETPinDir+0x34>
    12e4:	66 0f       	add	r22, r22
    12e6:	77 1f       	adc	r23, r23
    12e8:	8a 95       	dec	r24
    12ea:	e2 f7       	brpl	.-8      	; 0x12e4 <DIO_s8SETPinDir+0x30>
    12ec:	cb 01       	movw	r24, r22
    12ee:	80 95       	com	r24
    12f0:	84 23       	and	r24, r20
    12f2:	80 83       	st	Z, r24
    12f4:	80 e0       	ldi	r24, 0x00	; 0
    12f6:	08 95       	ret
    12f8:	61 30       	cpi	r22, 0x01	; 1
    12fa:	d1 f4       	brne	.+52     	; 0x1330 <DIO_s8SETPinDir+0x7c>
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	ee 0f       	add	r30, r30
    1300:	ff 1f       	adc	r31, r31
    1302:	e6 58       	subi	r30, 0x86	; 134
    1304:	fe 4f       	sbci	r31, 0xFE	; 254
    1306:	01 90       	ld	r0, Z+
    1308:	f0 81       	ld	r31, Z
    130a:	e0 2d       	mov	r30, r0
    130c:	40 81       	ld	r20, Z
    130e:	21 e0       	ldi	r18, 0x01	; 1
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	b9 01       	movw	r22, r18
    1314:	02 c0       	rjmp	.+4      	; 0x131a <DIO_s8SETPinDir+0x66>
    1316:	66 0f       	add	r22, r22
    1318:	77 1f       	adc	r23, r23
    131a:	8a 95       	dec	r24
    131c:	e2 f7       	brpl	.-8      	; 0x1316 <DIO_s8SETPinDir+0x62>
    131e:	cb 01       	movw	r24, r22
    1320:	84 2b       	or	r24, r20
    1322:	80 83       	st	Z, r24
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	08 95       	ret
    1328:	8f ef       	ldi	r24, 0xFF	; 255
    132a:	08 95       	ret
    132c:	8f ef       	ldi	r24, 0xFF	; 255
    132e:	08 95       	ret
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	08 95       	ret

00001334 <DIO_s8SETPinVal>:
    1334:	80 32       	cpi	r24, 0x20	; 32
    1336:	c0 f5       	brcc	.+112    	; 0x13a8 <DIO_s8SETPinVal+0x74>
    1338:	62 30       	cpi	r22, 0x02	; 2
    133a:	c0 f5       	brcc	.+112    	; 0x13ac <DIO_s8SETPinVal+0x78>
    133c:	e8 2f       	mov	r30, r24
    133e:	e6 95       	lsr	r30
    1340:	e6 95       	lsr	r30
    1342:	e6 95       	lsr	r30
    1344:	87 70       	andi	r24, 0x07	; 7
    1346:	61 11       	cpse	r22, r1
    1348:	17 c0       	rjmp	.+46     	; 0x1378 <DIO_s8SETPinVal+0x44>
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	ee 0f       	add	r30, r30
    134e:	ff 1f       	adc	r31, r31
    1350:	ee 57       	subi	r30, 0x7E	; 126
    1352:	fe 4f       	sbci	r31, 0xFE	; 254
    1354:	01 90       	ld	r0, Z+
    1356:	f0 81       	ld	r31, Z
    1358:	e0 2d       	mov	r30, r0
    135a:	40 81       	ld	r20, Z
    135c:	21 e0       	ldi	r18, 0x01	; 1
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	b9 01       	movw	r22, r18
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <DIO_s8SETPinVal+0x34>
    1364:	66 0f       	add	r22, r22
    1366:	77 1f       	adc	r23, r23
    1368:	8a 95       	dec	r24
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <DIO_s8SETPinVal+0x30>
    136c:	cb 01       	movw	r24, r22
    136e:	80 95       	com	r24
    1370:	84 23       	and	r24, r20
    1372:	80 83       	st	Z, r24
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	08 95       	ret
    1378:	61 30       	cpi	r22, 0x01	; 1
    137a:	d1 f4       	brne	.+52     	; 0x13b0 <DIO_s8SETPinVal+0x7c>
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	ee 0f       	add	r30, r30
    1380:	ff 1f       	adc	r31, r31
    1382:	ee 57       	subi	r30, 0x7E	; 126
    1384:	fe 4f       	sbci	r31, 0xFE	; 254
    1386:	01 90       	ld	r0, Z+
    1388:	f0 81       	ld	r31, Z
    138a:	e0 2d       	mov	r30, r0
    138c:	40 81       	ld	r20, Z
    138e:	21 e0       	ldi	r18, 0x01	; 1
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	b9 01       	movw	r22, r18
    1394:	02 c0       	rjmp	.+4      	; 0x139a <DIO_s8SETPinVal+0x66>
    1396:	66 0f       	add	r22, r22
    1398:	77 1f       	adc	r23, r23
    139a:	8a 95       	dec	r24
    139c:	e2 f7       	brpl	.-8      	; 0x1396 <DIO_s8SETPinVal+0x62>
    139e:	cb 01       	movw	r24, r22
    13a0:	84 2b       	or	r24, r20
    13a2:	80 83       	st	Z, r24
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	08 95       	ret
    13a8:	8f ef       	ldi	r24, 0xFF	; 255
    13aa:	08 95       	ret
    13ac:	8f ef       	ldi	r24, 0xFF	; 255
    13ae:	08 95       	ret
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	08 95       	ret

000013b4 <DIO_s8GETPinVal>:
Uchar8_t DIO_s8GETPinVal (enu_pin enPinCopy, Uchar8_t* pu8Val)
{
	Uchar8_t errStatus = E_OK;
	Uchar8_t portID;
	Uchar8_t pinID;
	if (enPinCopy < PIN_INVALID)
    13b4:	80 32       	cpi	r24, 0x20	; 32
    13b6:	d8 f4       	brcc	.+54     	; 0x13ee <DIO_s8GETPinVal+0x3a>
	{
		portID = enPinCopy/8;
    13b8:	e8 2f       	mov	r30, r24
    13ba:	e6 95       	lsr	r30
    13bc:	e6 95       	lsr	r30
    13be:	e6 95       	lsr	r30
		pinID  = enPinCopy%8;
    13c0:	87 70       	andi	r24, 0x07	; 7

		*pu8Val = GET_BIT(*pinReg[portID], pinID);
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	ee 0f       	add	r30, r30
    13c6:	ff 1f       	adc	r31, r31
    13c8:	ee 58       	subi	r30, 0x8E	; 142
    13ca:	fe 4f       	sbci	r31, 0xFE	; 254
    13cc:	01 90       	ld	r0, Z+
    13ce:	f0 81       	ld	r31, Z
    13d0:	e0 2d       	mov	r30, r0
    13d2:	20 81       	ld	r18, Z
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	a9 01       	movw	r20, r18
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <DIO_s8GETPinVal+0x2a>
    13da:	55 95       	asr	r21
    13dc:	47 95       	ror	r20
    13de:	8a 95       	dec	r24
    13e0:	e2 f7       	brpl	.-8      	; 0x13da <DIO_s8GETPinVal+0x26>
    13e2:	ca 01       	movw	r24, r20
    13e4:	81 70       	andi	r24, 0x01	; 1
    13e6:	fb 01       	movw	r30, r22
    13e8:	80 83       	st	Z, r24

}

Uchar8_t DIO_s8GETPinVal (enu_pin enPinCopy, Uchar8_t* pu8Val)
{
	Uchar8_t errStatus = E_OK;
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	08 95       	ret
		*pu8Val = GET_BIT(*pinReg[portID], pinID);

	}
	else
	{
		errStatus = E_NOK;
    13ee:	8f ef       	ldi	r24, 0xFF	; 255
	}
	return errStatus;
    13f0:	08 95       	ret

000013f2 <SET_GLOBAL_INTERRUPT>:
void (*ptrINT2)(void) = 0;

EN_EXTINT_ERROR SET_GLOBAL_INTERRUPT(EN_GLOBAL_INT state)
{
	
	if(state == ENABLE)
    13f2:	81 30       	cpi	r24, 0x01	; 1
    13f4:	19 f4       	brne	.+6      	; 0x13fc <SET_GLOBAL_INTERRUPT+0xa>
	sei();
    13f6:	78 94       	sei
    else if (state == DISABLE)
	cli();
	else return EXTINT_NOT_OK;
	return EXTINT_OK;
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	08 95       	ret
EN_EXTINT_ERROR SET_GLOBAL_INTERRUPT(EN_GLOBAL_INT state)
{
	
	if(state == ENABLE)
	sei();
    else if (state == DISABLE)
    13fc:	81 11       	cpse	r24, r1
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <SET_GLOBAL_INTERRUPT+0x12>
	cli();
    1400:	f8 94       	cli
    1402:	08 95       	ret
	else return EXTINT_NOT_OK;
    1404:	81 e0       	ldi	r24, 0x01	; 1
	return EXTINT_OK;
}
    1406:	08 95       	ret

00001408 <EXTINT_init>:

EN_EXTINT_ERROR EXTINT_init(EN_EXINT_NUMBER INTx ,EN_Sence_Control INTxSense)
{
    1408:	cf 93       	push	r28
    140a:	df 93       	push	r29
    140c:	c8 2f       	mov	r28, r24
    140e:	d6 2f       	mov	r29, r22
	
	SET_GLOBAL_INTERRUPT(ENABLE); // SET GLOBAL INTERRUPT
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <SET_GLOBAL_INTERRUPT>
	switch(INTx)
    1416:	c1 30       	cpi	r28, 0x01	; 1
    1418:	99 f1       	breq	.+102    	; 0x1480 <EXTINT_init+0x78>
    141a:	20 f0       	brcs	.+8      	; 0x1424 <EXTINT_init+0x1c>
    141c:	c2 30       	cpi	r28, 0x02	; 2
    141e:	09 f4       	brne	.+2      	; 0x1422 <EXTINT_init+0x1a>
    1420:	5d c0       	rjmp	.+186    	; 0x14dc <EXTINT_init+0xd4>
    1422:	72 c0       	rjmp	.+228    	; 0x1508 <EXTINT_init+0x100>
	{
		case EXTINT0:
		  if(INTxSense == LOW_LEVEL)
    1424:	d1 11       	cpse	r29, r1
    1426:	07 c0       	rjmp	.+14     	; 0x1436 <EXTINT_init+0x2e>
		  {
			  CLEAR_BIT(MCUCR,ISC00);
    1428:	85 b7       	in	r24, 0x35	; 53
    142a:	8e 7f       	andi	r24, 0xFE	; 254
    142c:	85 bf       	out	0x35, r24	; 53
			  CLEAR_BIT(MCUCR,ISC01);
    142e:	85 b7       	in	r24, 0x35	; 53
    1430:	8d 7f       	andi	r24, 0xFD	; 253
    1432:	85 bf       	out	0x35, r24	; 53
    1434:	20 c0       	rjmp	.+64     	; 0x1476 <EXTINT_init+0x6e>
		  }
		  else if(INTxSense == FALLING_EDGE)
    1436:	d1 30       	cpi	r29, 0x01	; 1
    1438:	39 f4       	brne	.+14     	; 0x1448 <EXTINT_init+0x40>
		  {
			  CLEAR_BIT(MCUCR,ISC00);
    143a:	85 b7       	in	r24, 0x35	; 53
    143c:	8e 7f       	andi	r24, 0xFE	; 254
    143e:	85 bf       	out	0x35, r24	; 53
			  SET_BIT(MCUCR,ISC01);
    1440:	85 b7       	in	r24, 0x35	; 53
    1442:	82 60       	ori	r24, 0x02	; 2
    1444:	85 bf       	out	0x35, r24	; 53
    1446:	17 c0       	rjmp	.+46     	; 0x1476 <EXTINT_init+0x6e>
		  }
		  else if(INTxSense == RISING_EDGE)
    1448:	d2 30       	cpi	r29, 0x02	; 2
    144a:	39 f4       	brne	.+14     	; 0x145a <EXTINT_init+0x52>
		  {
			  SET_BIT(MCUCR,ISC00);
    144c:	85 b7       	in	r24, 0x35	; 53
    144e:	81 60       	ori	r24, 0x01	; 1
    1450:	85 bf       	out	0x35, r24	; 53
			  SET_BIT(MCUCR,ISC01);
    1452:	85 b7       	in	r24, 0x35	; 53
    1454:	82 60       	ori	r24, 0x02	; 2
    1456:	85 bf       	out	0x35, r24	; 53
    1458:	0e c0       	rjmp	.+28     	; 0x1476 <EXTINT_init+0x6e>
		  }
		  else if(INTxSense == ANY_LOGICAL_CHANGE)
    145a:	d3 30       	cpi	r29, 0x03	; 3
    145c:	39 f4       	brne	.+14     	; 0x146c <EXTINT_init+0x64>
		  {
			  SET_BIT(MCUCR,ISC00);
    145e:	85 b7       	in	r24, 0x35	; 53
    1460:	81 60       	ori	r24, 0x01	; 1
    1462:	85 bf       	out	0x35, r24	; 53
			  CLEAR_BIT(MCUCR,ISC01);
    1464:	85 b7       	in	r24, 0x35	; 53
    1466:	8d 7f       	andi	r24, 0xFD	; 253
    1468:	85 bf       	out	0x35, r24	; 53
    146a:	05 c0       	rjmp	.+10     	; 0x1476 <EXTINT_init+0x6e>
		  }
		  else   // handle sense option error
		  {
			  SET_GLOBAL_INTERRUPT(DISABLE);
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <SET_GLOBAL_INTERRUPT>
			   return EXTINT_NOT_OK;
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	4d c0       	rjmp	.+154    	; 0x1510 <EXTINT_init+0x108>
		  }	   
		  SET_BIT(GICR,INT0); //Enable External INT0  (PIE)
    1476:	8b b7       	in	r24, 0x3b	; 59
    1478:	80 64       	ori	r24, 0x40	; 64
    147a:	8b bf       	out	0x3b, r24	; 59
		default: // handle wrong Choose for EXT Interrupt Number
		  SET_GLOBAL_INTERRUPT(DISABLE);
		  return EXTINT_NOT_OK;
		  break;
	}
	return EXTINT_OK;
    147c:	80 e0       	ldi	r24, 0x00	; 0
		  {
			  SET_GLOBAL_INTERRUPT(DISABLE);
			   return EXTINT_NOT_OK;
		  }	   
		  SET_BIT(GICR,INT0); //Enable External INT0  (PIE)
		  break;
    147e:	48 c0       	rjmp	.+144    	; 0x1510 <EXTINT_init+0x108>
		case EXTINT1:
		  if(INTxSense == LOW_LEVEL)
    1480:	d1 11       	cpse	r29, r1
    1482:	07 c0       	rjmp	.+14     	; 0x1492 <EXTINT_init+0x8a>
		  {
			  CLEAR_BIT(MCUCR,ISC10);
    1484:	85 b7       	in	r24, 0x35	; 53
    1486:	8b 7f       	andi	r24, 0xFB	; 251
    1488:	85 bf       	out	0x35, r24	; 53
			  CLEAR_BIT(MCUCR,ISC11);
    148a:	85 b7       	in	r24, 0x35	; 53
    148c:	87 7f       	andi	r24, 0xF7	; 247
    148e:	85 bf       	out	0x35, r24	; 53
    1490:	20 c0       	rjmp	.+64     	; 0x14d2 <EXTINT_init+0xca>
		  }
		  else if(INTxSense == FALLING_EDGE)
    1492:	d1 30       	cpi	r29, 0x01	; 1
    1494:	39 f4       	brne	.+14     	; 0x14a4 <EXTINT_init+0x9c>
		  {
			  CLEAR_BIT(MCUCR,ISC10);
    1496:	85 b7       	in	r24, 0x35	; 53
    1498:	8b 7f       	andi	r24, 0xFB	; 251
    149a:	85 bf       	out	0x35, r24	; 53
			  SET_BIT(MCUCR,ISC11);
    149c:	85 b7       	in	r24, 0x35	; 53
    149e:	88 60       	ori	r24, 0x08	; 8
    14a0:	85 bf       	out	0x35, r24	; 53
    14a2:	17 c0       	rjmp	.+46     	; 0x14d2 <EXTINT_init+0xca>
		  }
		  else if(INTxSense == RISING_EDGE)
    14a4:	d2 30       	cpi	r29, 0x02	; 2
    14a6:	39 f4       	brne	.+14     	; 0x14b6 <EXTINT_init+0xae>
		  {
			  SET_BIT(MCUCR,ISC10);
    14a8:	85 b7       	in	r24, 0x35	; 53
    14aa:	84 60       	ori	r24, 0x04	; 4
    14ac:	85 bf       	out	0x35, r24	; 53
			  SET_BIT(MCUCR,ISC11);
    14ae:	85 b7       	in	r24, 0x35	; 53
    14b0:	88 60       	ori	r24, 0x08	; 8
    14b2:	85 bf       	out	0x35, r24	; 53
    14b4:	0e c0       	rjmp	.+28     	; 0x14d2 <EXTINT_init+0xca>
		  }
		  else if(INTxSense == ANY_LOGICAL_CHANGE)
    14b6:	d3 30       	cpi	r29, 0x03	; 3
    14b8:	39 f4       	brne	.+14     	; 0x14c8 <EXTINT_init+0xc0>
		  {
			  SET_BIT(MCUCR,ISC10);
    14ba:	85 b7       	in	r24, 0x35	; 53
    14bc:	84 60       	ori	r24, 0x04	; 4
    14be:	85 bf       	out	0x35, r24	; 53
			  CLEAR_BIT(MCUCR,ISC11);
    14c0:	85 b7       	in	r24, 0x35	; 53
    14c2:	87 7f       	andi	r24, 0xF7	; 247
    14c4:	85 bf       	out	0x35, r24	; 53
    14c6:	05 c0       	rjmp	.+10     	; 0x14d2 <EXTINT_init+0xca>
		  }
		  else   // handle sense option error
		  {
		 	 SET_GLOBAL_INTERRUPT(DISABLE);
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <SET_GLOBAL_INTERRUPT>
		 	 return EXTINT_NOT_OK;
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	1f c0       	rjmp	.+62     	; 0x1510 <EXTINT_init+0x108>
		  }
		  SET_BIT(GICR,INT1); //Enable External INT1  (PIE)
    14d2:	8b b7       	in	r24, 0x3b	; 59
    14d4:	80 68       	ori	r24, 0x80	; 128
    14d6:	8b bf       	out	0x3b, r24	; 59
		default: // handle wrong Choose for EXT Interrupt Number
		  SET_GLOBAL_INTERRUPT(DISABLE);
		  return EXTINT_NOT_OK;
		  break;
	}
	return EXTINT_OK;
    14d8:	80 e0       	ldi	r24, 0x00	; 0
		  {
		 	 SET_GLOBAL_INTERRUPT(DISABLE);
		 	 return EXTINT_NOT_OK;
		  }
		  SET_BIT(GICR,INT1); //Enable External INT1  (PIE)
		  break;
    14da:	1a c0       	rjmp	.+52     	; 0x1510 <EXTINT_init+0x108>
		case EXTINT2:
		 
		  if(INTxSense == FALLING_EDGE)
    14dc:	d1 30       	cpi	r29, 0x01	; 1
    14de:	21 f4       	brne	.+8      	; 0x14e8 <EXTINT_init+0xe0>
		  {
			  CLEAR_BIT(MCUCSR,ISC2);
    14e0:	84 b7       	in	r24, 0x34	; 52
    14e2:	8f 7b       	andi	r24, 0xBF	; 191
    14e4:	84 bf       	out	0x34, r24	; 52
    14e6:	0b c0       	rjmp	.+22     	; 0x14fe <EXTINT_init+0xf6>
		  }
		  else if(INTxSense == RISING_EDGE)
    14e8:	d2 30       	cpi	r29, 0x02	; 2
    14ea:	21 f4       	brne	.+8      	; 0x14f4 <EXTINT_init+0xec>
		  {
			  SET_BIT(MCUCSR,ISC2);
    14ec:	84 b7       	in	r24, 0x34	; 52
    14ee:	80 64       	ori	r24, 0x40	; 64
    14f0:	84 bf       	out	0x34, r24	; 52
    14f2:	05 c0       	rjmp	.+10     	; 0x14fe <EXTINT_init+0xf6>
		  }
		  else   // handle sense option error
		  {
		 	 SET_GLOBAL_INTERRUPT(DISABLE);
    14f4:	80 e0       	ldi	r24, 0x00	; 0
    14f6:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <SET_GLOBAL_INTERRUPT>
		 	 return EXTINT_NOT_OK;
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	09 c0       	rjmp	.+18     	; 0x1510 <EXTINT_init+0x108>
		  }
		  SET_BIT(GICR,INT2); //Enable External INT1  (PIE)
    14fe:	8b b7       	in	r24, 0x3b	; 59
    1500:	80 62       	ori	r24, 0x20	; 32
    1502:	8b bf       	out	0x3b, r24	; 59
		default: // handle wrong Choose for EXT Interrupt Number
		  SET_GLOBAL_INTERRUPT(DISABLE);
		  return EXTINT_NOT_OK;
		  break;
	}
	return EXTINT_OK;
    1504:	80 e0       	ldi	r24, 0x00	; 0
		  {
		 	 SET_GLOBAL_INTERRUPT(DISABLE);
		 	 return EXTINT_NOT_OK;
		  }
		  SET_BIT(GICR,INT2); //Enable External INT1  (PIE)
		  break;
    1506:	04 c0       	rjmp	.+8      	; 0x1510 <EXTINT_init+0x108>
		default: // handle wrong Choose for EXT Interrupt Number
		  SET_GLOBAL_INTERRUPT(DISABLE);
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <SET_GLOBAL_INTERRUPT>
		  return EXTINT_NOT_OK;
    150e:	81 e0       	ldi	r24, 0x01	; 1
		  break;
	}
	return EXTINT_OK;
}
    1510:	df 91       	pop	r29
    1512:	cf 91       	pop	r28
    1514:	08 95       	ret

00001516 <EXTINT_CallBack>:

EN_EXTINT_ERROR EXTINT_CallBack(EN_EXINT_NUMBER INTx,void(*ptrfunc)(void))
{
	if(INTx == EXTINT0 ) ptrINT0 = ptrfunc;
    1516:	81 11       	cpse	r24, r1
    1518:	05 c0       	rjmp	.+10     	; 0x1524 <EXTINT_CallBack+0xe>
    151a:	70 93 a6 02 	sts	0x02A6, r23	; 0x8002a6 <ptrINT0+0x1>
    151e:	60 93 a5 02 	sts	0x02A5, r22	; 0x8002a5 <ptrINT0>
    1522:	08 95       	ret
	else if(INTx == EXTINT1 ) ptrINT1 = ptrfunc;
    1524:	81 30       	cpi	r24, 0x01	; 1
    1526:	31 f4       	brne	.+12     	; 0x1534 <EXTINT_CallBack+0x1e>
    1528:	70 93 a4 02 	sts	0x02A4, r23	; 0x8002a4 <ptrINT1+0x1>
    152c:	60 93 a3 02 	sts	0x02A3, r22	; 0x8002a3 <ptrINT1>
	else if(INTx == EXTINT2 ) ptrINT2 = ptrfunc;
	else return EXTINT_NOT_OK;
	return EXTINT_OK;
    1530:	80 e0       	ldi	r24, 0x00	; 0
    1532:	08 95       	ret

EN_EXTINT_ERROR EXTINT_CallBack(EN_EXINT_NUMBER INTx,void(*ptrfunc)(void))
{
	if(INTx == EXTINT0 ) ptrINT0 = ptrfunc;
	else if(INTx == EXTINT1 ) ptrINT1 = ptrfunc;
	else if(INTx == EXTINT2 ) ptrINT2 = ptrfunc;
    1534:	82 30       	cpi	r24, 0x02	; 2
    1536:	31 f4       	brne	.+12     	; 0x1544 <EXTINT_CallBack+0x2e>
    1538:	70 93 a2 02 	sts	0x02A2, r23	; 0x8002a2 <ptrINT2+0x1>
    153c:	60 93 a1 02 	sts	0x02A1, r22	; 0x8002a1 <ptrINT2>
	else return EXTINT_NOT_OK;
	return EXTINT_OK;
    1540:	80 e0       	ldi	r24, 0x00	; 0
    1542:	08 95       	ret
EN_EXTINT_ERROR EXTINT_CallBack(EN_EXINT_NUMBER INTx,void(*ptrfunc)(void))
{
	if(INTx == EXTINT0 ) ptrINT0 = ptrfunc;
	else if(INTx == EXTINT1 ) ptrINT1 = ptrfunc;
	else if(INTx == EXTINT2 ) ptrINT2 = ptrfunc;
	else return EXTINT_NOT_OK;
    1544:	81 e0       	ldi	r24, 0x01	; 1
	return EXTINT_OK;
}
    1546:	08 95       	ret

00001548 <__vector_1>:


ISR (EXT_INT_0)
{
    1548:	1f 92       	push	r1
    154a:	0f 92       	push	r0
    154c:	0f b6       	in	r0, 0x3f	; 63
    154e:	0f 92       	push	r0
    1550:	11 24       	eor	r1, r1
    1552:	2f 93       	push	r18
    1554:	3f 93       	push	r19
    1556:	4f 93       	push	r20
    1558:	5f 93       	push	r21
    155a:	6f 93       	push	r22
    155c:	7f 93       	push	r23
    155e:	8f 93       	push	r24
    1560:	9f 93       	push	r25
    1562:	af 93       	push	r26
    1564:	bf 93       	push	r27
    1566:	ef 93       	push	r30
    1568:	ff 93       	push	r31
	if(ptrINT0) ptrINT0();
    156a:	e0 91 a5 02 	lds	r30, 0x02A5	; 0x8002a5 <ptrINT0>
    156e:	f0 91 a6 02 	lds	r31, 0x02A6	; 0x8002a6 <ptrINT0+0x1>
    1572:	30 97       	sbiw	r30, 0x00	; 0
    1574:	09 f0       	breq	.+2      	; 0x1578 <__vector_1+0x30>
    1576:	09 95       	icall
}
    1578:	ff 91       	pop	r31
    157a:	ef 91       	pop	r30
    157c:	bf 91       	pop	r27
    157e:	af 91       	pop	r26
    1580:	9f 91       	pop	r25
    1582:	8f 91       	pop	r24
    1584:	7f 91       	pop	r23
    1586:	6f 91       	pop	r22
    1588:	5f 91       	pop	r21
    158a:	4f 91       	pop	r20
    158c:	3f 91       	pop	r19
    158e:	2f 91       	pop	r18
    1590:	0f 90       	pop	r0
    1592:	0f be       	out	0x3f, r0	; 63
    1594:	0f 90       	pop	r0
    1596:	1f 90       	pop	r1
    1598:	18 95       	reti

0000159a <__vector_2>:

ISR (EXT_INT_1)
{
    159a:	1f 92       	push	r1
    159c:	0f 92       	push	r0
    159e:	0f b6       	in	r0, 0x3f	; 63
    15a0:	0f 92       	push	r0
    15a2:	11 24       	eor	r1, r1
    15a4:	2f 93       	push	r18
    15a6:	3f 93       	push	r19
    15a8:	4f 93       	push	r20
    15aa:	5f 93       	push	r21
    15ac:	6f 93       	push	r22
    15ae:	7f 93       	push	r23
    15b0:	8f 93       	push	r24
    15b2:	9f 93       	push	r25
    15b4:	af 93       	push	r26
    15b6:	bf 93       	push	r27
    15b8:	ef 93       	push	r30
    15ba:	ff 93       	push	r31
	if(ptrINT1) ptrINT1();
    15bc:	e0 91 a3 02 	lds	r30, 0x02A3	; 0x8002a3 <ptrINT1>
    15c0:	f0 91 a4 02 	lds	r31, 0x02A4	; 0x8002a4 <ptrINT1+0x1>
    15c4:	30 97       	sbiw	r30, 0x00	; 0
    15c6:	09 f0       	breq	.+2      	; 0x15ca <__vector_2+0x30>
    15c8:	09 95       	icall
}
    15ca:	ff 91       	pop	r31
    15cc:	ef 91       	pop	r30
    15ce:	bf 91       	pop	r27
    15d0:	af 91       	pop	r26
    15d2:	9f 91       	pop	r25
    15d4:	8f 91       	pop	r24
    15d6:	7f 91       	pop	r23
    15d8:	6f 91       	pop	r22
    15da:	5f 91       	pop	r21
    15dc:	4f 91       	pop	r20
    15de:	3f 91       	pop	r19
    15e0:	2f 91       	pop	r18
    15e2:	0f 90       	pop	r0
    15e4:	0f be       	out	0x3f, r0	; 63
    15e6:	0f 90       	pop	r0
    15e8:	1f 90       	pop	r1
    15ea:	18 95       	reti

000015ec <__vector_3>:

ISR (EXT_INT_2)
{
    15ec:	1f 92       	push	r1
    15ee:	0f 92       	push	r0
    15f0:	0f b6       	in	r0, 0x3f	; 63
    15f2:	0f 92       	push	r0
    15f4:	11 24       	eor	r1, r1
    15f6:	2f 93       	push	r18
    15f8:	3f 93       	push	r19
    15fa:	4f 93       	push	r20
    15fc:	5f 93       	push	r21
    15fe:	6f 93       	push	r22
    1600:	7f 93       	push	r23
    1602:	8f 93       	push	r24
    1604:	9f 93       	push	r25
    1606:	af 93       	push	r26
    1608:	bf 93       	push	r27
    160a:	ef 93       	push	r30
    160c:	ff 93       	push	r31
	if(ptrINT2) ptrINT2();
    160e:	e0 91 a1 02 	lds	r30, 0x02A1	; 0x8002a1 <ptrINT2>
    1612:	f0 91 a2 02 	lds	r31, 0x02A2	; 0x8002a2 <ptrINT2+0x1>
    1616:	30 97       	sbiw	r30, 0x00	; 0
    1618:	09 f0       	breq	.+2      	; 0x161c <__vector_3+0x30>
    161a:	09 95       	icall
    161c:	ff 91       	pop	r31
    161e:	ef 91       	pop	r30
    1620:	bf 91       	pop	r27
    1622:	af 91       	pop	r26
    1624:	9f 91       	pop	r25
    1626:	8f 91       	pop	r24
    1628:	7f 91       	pop	r23
    162a:	6f 91       	pop	r22
    162c:	5f 91       	pop	r21
    162e:	4f 91       	pop	r20
    1630:	3f 91       	pop	r19
    1632:	2f 91       	pop	r18
    1634:	0f 90       	pop	r0
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	0f 90       	pop	r0
    163a:	1f 90       	pop	r1
    163c:	18 95       	reti

0000163e <SPI_MasterInit>:
	{
		return SPI_NOK;
	}
	
	return SPI_OK;
}
    163e:	8d b1       	in	r24, 0x0d	; 13
    1640:	80 61       	ori	r24, 0x10	; 16
    1642:	8d b9       	out	0x0d, r24	; 13
    1644:	8d b1       	in	r24, 0x0d	; 13
    1646:	9e b1       	in	r25, 0x0e	; 14
    1648:	8e 7f       	andi	r24, 0xFE	; 254
    164a:	9c 7f       	andi	r25, 0xFC	; 252
    164c:	9e b9       	out	0x0e, r25	; 14
    164e:	8d b9       	out	0x0d, r24	; 13
    1650:	8d b1       	in	r24, 0x0d	; 13
    1652:	9e b1       	in	r25, 0x0e	; 14
    1654:	93 60       	ori	r25, 0x03	; 3
    1656:	9e b9       	out	0x0e, r25	; 14
    1658:	8d b9       	out	0x0d, r24	; 13
    165a:	8d b1       	in	r24, 0x0d	; 13
    165c:	87 7f       	andi	r24, 0xF7	; 247
    165e:	8d b9       	out	0x0d, r24	; 13
    1660:	8d b1       	in	r24, 0x0d	; 13
    1662:	8b 7f       	andi	r24, 0xFB	; 251
    1664:	8d b9       	out	0x0d, r24	; 13
    1666:	8d b1       	in	r24, 0x0d	; 13
    1668:	80 64       	ori	r24, 0x40	; 64
    166a:	8d b9       	out	0x0d, r24	; 13
    166c:	08 95       	ret

0000166e <SPI_TranscieveChar>:
    166e:	61 15       	cp	r22, r1
    1670:	71 05       	cpc	r23, r1
    1672:	f9 f0       	breq	.+62     	; 0x16b2 <SPI_TranscieveChar+0x44>
    1674:	8f b9       	out	0x0f, r24	; 15
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	dc 01       	movw	r26, r24
    167c:	03 c0       	rjmp	.+6      	; 0x1684 <SPI_TranscieveChar+0x16>
    167e:	01 96       	adiw	r24, 0x01	; 1
    1680:	a1 1d       	adc	r26, r1
    1682:	b1 1d       	adc	r27, r1
    1684:	77 99       	sbic	0x0e, 7	; 14
    1686:	07 c0       	rjmp	.+14     	; 0x1696 <SPI_TranscieveChar+0x28>
    1688:	80 3a       	cpi	r24, 0xA0	; 160
    168a:	26 e8       	ldi	r18, 0x86	; 134
    168c:	92 07       	cpc	r25, r18
    168e:	21 e0       	ldi	r18, 0x01	; 1
    1690:	a2 07       	cpc	r26, r18
    1692:	b1 05       	cpc	r27, r1
    1694:	a0 f3       	brcs	.-24     	; 0x167e <SPI_TranscieveChar+0x10>
    1696:	80 3a       	cpi	r24, 0xA0	; 160
    1698:	96 48       	sbci	r25, 0x86	; 134
    169a:	a1 40       	sbci	r26, 0x01	; 1
    169c:	b1 05       	cpc	r27, r1
    169e:	59 f0       	breq	.+22     	; 0x16b6 <SPI_TranscieveChar+0x48>
    16a0:	8f b1       	in	r24, 0x0f	; 15
    16a2:	fb 01       	movw	r30, r22
    16a4:	80 83       	st	Z, r24
    16a6:	f1 e2       	ldi	r31, 0x21	; 33
    16a8:	fa 95       	dec	r31
    16aa:	f1 f7       	brne	.-4      	; 0x16a8 <SPI_TranscieveChar+0x3a>
    16ac:	00 00       	nop
    16ae:	80 e0       	ldi	r24, 0x00	; 0
    16b0:	08 95       	ret
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	08 95       	ret
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	08 95       	ret

000016ba <__vector_12>:

/*************************************************************************************************************
 * 													  ISRs
 ************************************************************************************************************/
ISR(SPI_STC_INT)
{
    16ba:	1f 92       	push	r1
    16bc:	0f 92       	push	r0
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	0f 92       	push	r0
    16c2:	11 24       	eor	r1, r1
    16c4:	2f 93       	push	r18
    16c6:	3f 93       	push	r19
    16c8:	8f 93       	push	r24
    16ca:	9f 93       	push	r25
    16cc:	ef 93       	push	r30
    16ce:	ff 93       	push	r31
	/*------------------------ Reception ------------------------*/
	u8_g_SlaveReceive = SPDR;
    16d0:	8f b1       	in	r24, 0x0f	; 15
    16d2:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <u8_g_SlaveReceive>
	//DIO_s8SETPortVal(DIO_PORTA, u8_g_SlaveReceive);
	
	/* If Max size is exceeded, start overriding data */
	if(u8_g_SlaveRxIndex == SPI_BUFFER_SIZE) u8_g_SlaveRxIndex = 0;
    16d6:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <u8_g_SlaveRxIndex>
    16da:	9f 30       	cpi	r25, 0x0F	; 15
    16dc:	11 f4       	brne	.+4      	; 0x16e2 <__vector_12+0x28>
    16de:	10 92 b8 02 	sts	0x02B8, r1	; 0x8002b8 <u8_g_SlaveRxIndex>
	if(u8_g_SlaveReceive != DATA_END)
    16e2:	83 32       	cpi	r24, 0x23	; 35
    16e4:	59 f0       	breq	.+22     	; 0x16fc <__vector_12+0x42>
	{
		/* Store received byte in buffer */
		arr_g_SlaveRxBuffer[u8_g_SlaveRxIndex] = u8_g_SlaveReceive;
    16e6:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <u8_g_SlaveRxIndex>
    16ea:	e9 2f       	mov	r30, r25
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	e9 55       	subi	r30, 0x59	; 89
    16f0:	fd 4f       	sbci	r31, 0xFD	; 253
    16f2:	80 83       	st	Z, r24
		u8_g_SlaveRxIndex++;
    16f4:	9f 5f       	subi	r25, 0xFF	; 255
    16f6:	90 93 b8 02 	sts	0x02B8, r25	; 0x8002b8 <u8_g_SlaveRxIndex>
    16fa:	04 c0       	rjmp	.+8      	; 0x1704 <__vector_12+0x4a>
	}
	else
	{	// Get the number of received bytes
		u8_g_SlaveRxLen = u8_g_SlaveRxIndex;
    16fc:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <u8_g_SlaveRxIndex>
    1700:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <u8_g_SlaveRxLen>
	}
	
	/*------------------------- Sending -------------------------*/
	//u8_g_SlaveTxIndex++;
	if((u8_g_SlaveTxIndex < u8_g_SlaveTxLen) && (pu8_g_SlaveTxPtr != NULL))
    1704:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <u8_g_SlaveTxIndex>
    1708:	90 91 f0 02 	lds	r25, 0x02F0	; 0x8002f0 <u8_g_SlaveTxLen>
    170c:	89 17       	cp	r24, r25
    170e:	88 f4       	brcc	.+34     	; 0x1732 <__vector_12+0x78>
    1710:	20 91 b6 02 	lds	r18, 0x02B6	; 0x8002b6 <pu8_g_SlaveTxPtr>
    1714:	30 91 b7 02 	lds	r19, 0x02B7	; 0x8002b7 <pu8_g_SlaveTxPtr+0x1>
    1718:	21 15       	cp	r18, r1
    171a:	31 05       	cpc	r19, r1
    171c:	51 f0       	breq	.+20     	; 0x1732 <__vector_12+0x78>
	{
		SPDR = pu8_g_SlaveTxPtr[u8_g_SlaveTxIndex++];
    171e:	91 e0       	ldi	r25, 0x01	; 1
    1720:	98 0f       	add	r25, r24
    1722:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <u8_g_SlaveTxIndex>
    1726:	f9 01       	movw	r30, r18
    1728:	e8 0f       	add	r30, r24
    172a:	f1 1d       	adc	r31, r1
    172c:	80 81       	ld	r24, Z
    172e:	8f b9       	out	0x0f, r24	; 15
    1730:	04 c0       	rjmp	.+8      	; 0x173a <__vector_12+0x80>
	}
	else if(u8_g_SlaveTxIndex >= u8_g_SlaveTxLen)
    1732:	89 17       	cp	r24, r25
    1734:	10 f0       	brcs	.+4      	; 0x173a <__vector_12+0x80>
	{
		SPDR = DATA_END;
    1736:	83 e2       	ldi	r24, 0x23	; 35
    1738:	8f b9       	out	0x0f, r24	; 15
	}
    173a:	ff 91       	pop	r31
    173c:	ef 91       	pop	r30
    173e:	9f 91       	pop	r25
    1740:	8f 91       	pop	r24
    1742:	3f 91       	pop	r19
    1744:	2f 91       	pop	r18
    1746:	0f 90       	pop	r0
    1748:	0f be       	out	0x3f, r0	; 63
    174a:	0f 90       	pop	r0
    174c:	1f 90       	pop	r1
    174e:	18 95       	reti

00001750 <TIM0_voidInit>:
	else
	{
		return TIM_NOK;
	}
	return TIM_OK;
}
    1750:	81 30       	cpi	r24, 0x01	; 1
    1752:	61 f0       	breq	.+24     	; 0x176c <TIM0_voidInit+0x1c>
    1754:	28 f0       	brcs	.+10     	; 0x1760 <TIM0_voidInit+0x10>
    1756:	82 30       	cpi	r24, 0x02	; 2
    1758:	29 f0       	breq	.+10     	; 0x1764 <TIM0_voidInit+0x14>
    175a:	83 30       	cpi	r24, 0x03	; 3
    175c:	29 f0       	breq	.+10     	; 0x1768 <TIM0_voidInit+0x18>
    175e:	0f c0       	rjmp	.+30     	; 0x177e <TIM0_voidInit+0x2e>
    1760:	20 e0       	ldi	r18, 0x00	; 0
    1762:	05 c0       	rjmp	.+10     	; 0x176e <TIM0_voidInit+0x1e>
    1764:	28 e0       	ldi	r18, 0x08	; 8
    1766:	03 c0       	rjmp	.+6      	; 0x176e <TIM0_voidInit+0x1e>
    1768:	28 e4       	ldi	r18, 0x48	; 72
    176a:	01 c0       	rjmp	.+2      	; 0x176e <TIM0_voidInit+0x1e>
    176c:	20 e4       	ldi	r18, 0x40	; 64
    176e:	93 b7       	in	r25, 0x33	; 51
    1770:	97 7b       	andi	r25, 0xB7	; 183
    1772:	93 bf       	out	0x33, r25	; 51
    1774:	83 b7       	in	r24, 0x33	; 51
    1776:	82 2b       	or	r24, r18
    1778:	83 bf       	out	0x33, r24	; 51
    177a:	80 e0       	ldi	r24, 0x00	; 0
    177c:	08 95       	ret
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	08 95       	ret

00001782 <TIM0_Start>:
    1782:	9f ef       	ldi	r25, 0xFF	; 255
    1784:	98 0f       	add	r25, r24
    1786:	97 30       	cpi	r25, 0x07	; 7
    1788:	40 f4       	brcc	.+16     	; 0x179a <TIM0_Start+0x18>
    178a:	93 b7       	in	r25, 0x33	; 51
    178c:	98 7f       	andi	r25, 0xF8	; 248
    178e:	93 bf       	out	0x33, r25	; 51
    1790:	93 b7       	in	r25, 0x33	; 51
    1792:	89 2b       	or	r24, r25
    1794:	83 bf       	out	0x33, r24	; 51
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	08 95       	ret
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	08 95       	ret

0000179e <TIM0_Stop>:
    179e:	83 b7       	in	r24, 0x33	; 51
    17a0:	88 7f       	andi	r24, 0xF8	; 248
    17a2:	83 bf       	out	0x33, r24	; 51
    17a4:	12 be       	out	0x32, r1	; 50
    17a6:	88 b7       	in	r24, 0x38	; 56
    17a8:	8e 7f       	andi	r24, 0xFE	; 254
    17aa:	88 bf       	out	0x38, r24	; 56
    17ac:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <u8_gs_OVFCount>
    17b0:	08 95       	ret

000017b2 <TIM0_SetValue>:
    17b2:	82 bf       	out	0x32, r24	; 50
    17b4:	08 95       	ret

000017b6 <TIM0_GetOVF>:
    17b6:	fc 01       	movw	r30, r24
    17b8:	89 2b       	or	r24, r25
    17ba:	29 f0       	breq	.+10     	; 0x17c6 <TIM0_GetOVF+0x10>
    17bc:	98 b7       	in	r25, 0x38	; 56
    17be:	91 70       	andi	r25, 0x01	; 1
    17c0:	90 83       	st	Z, r25
    17c2:	80 e0       	ldi	r24, 0x00	; 0
    17c4:	08 95       	ret
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	08 95       	ret

000017ca <TIM0_ClearOVF>:
    17ca:	88 b7       	in	r24, 0x38	; 56
    17cc:	81 60       	ori	r24, 0x01	; 1
    17ce:	88 bf       	out	0x38, r24	; 56
    17d0:	08 95       	ret

000017d2 <TIM0_GetState>:
    17d2:	00 97       	sbiw	r24, 0x00	; 0
    17d4:	61 f0       	breq	.+24     	; 0x17ee <TIM0_GetState+0x1c>
    17d6:	03 b6       	in	r0, 0x33	; 51
    17d8:	00 fe       	sbrs	r0, 0
    17da:	05 c0       	rjmp	.+10     	; 0x17e6 <TIM0_GetState+0x14>
    17dc:	21 e0       	ldi	r18, 0x01	; 1
    17de:	fc 01       	movw	r30, r24
    17e0:	20 83       	st	Z, r18
    17e2:	80 e0       	ldi	r24, 0x00	; 0
    17e4:	08 95       	ret
    17e6:	fc 01       	movw	r30, r24
    17e8:	10 82       	st	Z, r1
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	08 95       	ret
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	08 95       	ret

000017f2 <__vector_11>:


/*========================== ISRs =============================*/

ISR(TIM0_OVF_INT)
{
    17f2:	1f 92       	push	r1
    17f4:	0f 92       	push	r0
    17f6:	0f b6       	in	r0, 0x3f	; 63
    17f8:	0f 92       	push	r0
    17fa:	11 24       	eor	r1, r1
    17fc:	2f 93       	push	r18
    17fe:	3f 93       	push	r19
    1800:	4f 93       	push	r20
    1802:	5f 93       	push	r21
    1804:	6f 93       	push	r22
    1806:	7f 93       	push	r23
    1808:	8f 93       	push	r24
    180a:	9f 93       	push	r25
    180c:	af 93       	push	r26
    180e:	bf 93       	push	r27
    1810:	ef 93       	push	r30
    1812:	ff 93       	push	r31
	if(TIM0_OVFCallbackFn != NULL)
    1814:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <TIM0_OVFCallbackFn>
    1818:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <TIM0_OVFCallbackFn+0x1>
    181c:	89 2b       	or	r24, r25
    181e:	b1 f0       	breq	.+44     	; 0x184c <__vector_11+0x5a>
	{
		/* Delay is complete */
		if(u8_gs_OVFCount == u8_g_TotalOVF)
    1820:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <u8_gs_OVFCount>
    1824:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <u8_g_TotalOVF>
    1828:	89 13       	cpse	r24, r25
    182a:	0d c0       	rjmp	.+26     	; 0x1846 <__vector_11+0x54>
		{
			/* Stop the timer */
			TIM0_Stop();
    182c:	0e 94 cf 0b 	call	0x179e	; 0x179e <TIM0_Stop>
			
			/* Reset the OVF counter */
			u8_gs_OVFCount = 0;
    1830:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <u8_gs_OVFCount>
			
			/* Disable OVF interrupt */
			CLEAR_BIT(TIMSK, TIMSK_TOIE0);
    1834:	89 b7       	in	r24, 0x39	; 57
    1836:	8e 7f       	andi	r24, 0xFE	; 254
    1838:	89 bf       	out	0x39, r24	; 57
			
			/* Call the Callback function */
			TIM0_OVFCallbackFn();
    183a:	e0 91 ba 02 	lds	r30, 0x02BA	; 0x8002ba <TIM0_OVFCallbackFn>
    183e:	f0 91 bb 02 	lds	r31, 0x02BB	; 0x8002bb <TIM0_OVFCallbackFn+0x1>
    1842:	09 95       	icall
    1844:	03 c0       	rjmp	.+6      	; 0x184c <__vector_11+0x5a>
		}
		else
		{
			/* Increment the overflow count */
			u8_gs_OVFCount++;
    1846:	8f 5f       	subi	r24, 0xFF	; 255
    1848:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <u8_gs_OVFCount>
		}
	}
}
    184c:	ff 91       	pop	r31
    184e:	ef 91       	pop	r30
    1850:	bf 91       	pop	r27
    1852:	af 91       	pop	r26
    1854:	9f 91       	pop	r25
    1856:	8f 91       	pop	r24
    1858:	7f 91       	pop	r23
    185a:	6f 91       	pop	r22
    185c:	5f 91       	pop	r21
    185e:	4f 91       	pop	r20
    1860:	3f 91       	pop	r19
    1862:	2f 91       	pop	r18
    1864:	0f 90       	pop	r0
    1866:	0f be       	out	0x3f, r0	; 63
    1868:	0f 90       	pop	r0
    186a:	1f 90       	pop	r1
    186c:	18 95       	reti

0000186e <TIM1_Start>:
	TCNT1 = 0;
}

void TIM1_SetValue(Uint16_t u16_a_startValue)
{
	TCNT1 = u16_a_startValue;
    186e:	8e b5       	in	r24, 0x2e	; 46
    1870:	88 7f       	andi	r24, 0xF8	; 248
    1872:	8e bd       	out	0x2e, r24	; 46
    1874:	8e b5       	in	r24, 0x2e	; 46
    1876:	85 60       	ori	r24, 0x05	; 5
    1878:	8e bd       	out	0x2e, r24	; 46
    187a:	80 e0       	ldi	r24, 0x00	; 0
    187c:	08 95       	ret

0000187e <TIM1_Stop>:
    187e:	8e b5       	in	r24, 0x2e	; 46
    1880:	88 7f       	andi	r24, 0xF8	; 248
    1882:	8e bd       	out	0x2e, r24	; 46
    1884:	1d bc       	out	0x2d, r1	; 45
    1886:	1c bc       	out	0x2c, r1	; 44
    1888:	08 95       	ret

0000188a <TIM1_GetValue>:
}

Uint16_t TIM1_GetValue(void)
{
	return TCNT1;
    188a:	8c b5       	in	r24, 0x2c	; 44
    188c:	9d b5       	in	r25, 0x2d	; 45
}
    188e:	08 95       	ret

00001890 <TIM1_GetTickTime>:


float32_t TIM1_GetTickTime(void)
{
	return ((float32_t)arr_gs_prescalers[TIM1_PRESCALER-1]/(TIM1_CLK_MUL*1000));
}
    1890:	6f e6       	ldi	r22, 0x6F	; 111
    1892:	72 e1       	ldi	r23, 0x12	; 18
    1894:	83 e0       	ldi	r24, 0x03	; 3
    1896:	9e e3       	ldi	r25, 0x3E	; 62
    1898:	08 95       	ret

0000189a <enuTimer2_init>:
	enu_timerStatus_t errorStatus = TIMER_OK;

	CLEAR_BIT(TIMSK_REG, TOIE2);

	return errorStatus;
}
    189a:	84 30       	cpi	r24, 0x04	; 4
    189c:	40 f5       	brcc	.+80     	; 0x18ee <enuTimer2_init+0x54>
    189e:	81 30       	cpi	r24, 0x01	; 1
    18a0:	71 f0       	breq	.+28     	; 0x18be <enuTimer2_init+0x24>
    18a2:	28 f0       	brcs	.+10     	; 0x18ae <enuTimer2_init+0x14>
    18a4:	82 30       	cpi	r24, 0x02	; 2
    18a6:	99 f0       	breq	.+38     	; 0x18ce <enuTimer2_init+0x34>
    18a8:	83 30       	cpi	r24, 0x03	; 3
    18aa:	c9 f0       	breq	.+50     	; 0x18de <enuTimer2_init+0x44>
    18ac:	22 c0       	rjmp	.+68     	; 0x18f2 <enuTimer2_init+0x58>
    18ae:	85 b5       	in	r24, 0x25	; 37
    18b0:	87 7f       	andi	r24, 0xF7	; 247
    18b2:	85 bd       	out	0x25, r24	; 37
    18b4:	85 b5       	in	r24, 0x25	; 37
    18b6:	8f 7b       	andi	r24, 0xBF	; 191
    18b8:	85 bd       	out	0x25, r24	; 37
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	08 95       	ret
    18be:	85 b5       	in	r24, 0x25	; 37
    18c0:	87 7f       	andi	r24, 0xF7	; 247
    18c2:	85 bd       	out	0x25, r24	; 37
    18c4:	85 b5       	in	r24, 0x25	; 37
    18c6:	80 64       	ori	r24, 0x40	; 64
    18c8:	85 bd       	out	0x25, r24	; 37
    18ca:	80 e0       	ldi	r24, 0x00	; 0
    18cc:	08 95       	ret
    18ce:	85 b5       	in	r24, 0x25	; 37
    18d0:	88 60       	ori	r24, 0x08	; 8
    18d2:	85 bd       	out	0x25, r24	; 37
    18d4:	85 b5       	in	r24, 0x25	; 37
    18d6:	8f 7b       	andi	r24, 0xBF	; 191
    18d8:	85 bd       	out	0x25, r24	; 37
    18da:	80 e0       	ldi	r24, 0x00	; 0
    18dc:	08 95       	ret
    18de:	85 b5       	in	r24, 0x25	; 37
    18e0:	88 60       	ori	r24, 0x08	; 8
    18e2:	85 bd       	out	0x25, r24	; 37
    18e4:	85 b5       	in	r24, 0x25	; 37
    18e6:	80 64       	ori	r24, 0x40	; 64
    18e8:	85 bd       	out	0x25, r24	; 37
    18ea:	80 e0       	ldi	r24, 0x00	; 0
    18ec:	08 95       	ret
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	08 95       	ret
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	08 95       	ret

000018f6 <u8Timer2_setPrescallar>:
    18f6:	88 30       	cpi	r24, 0x08	; 8
    18f8:	70 f4       	brcc	.+28     	; 0x1916 <u8Timer2_setPrescallar+0x20>
    18fa:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <global_prescaller>
    18fe:	90 91 c4 02 	lds	r25, 0x02C4	; 0x8002c4 <global_timerStatus>
    1902:	91 30       	cpi	r25, 0x01	; 1
    1904:	51 f4       	brne	.+20     	; 0x191a <u8Timer2_setPrescallar+0x24>
    1906:	95 b5       	in	r25, 0x25	; 37
    1908:	98 7f       	andi	r25, 0xF8	; 248
    190a:	89 2b       	or	r24, r25
    190c:	95 b5       	in	r25, 0x25	; 37
    190e:	89 2b       	or	r24, r25
    1910:	85 bd       	out	0x25, r24	; 37
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	08 95       	ret
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	08 95       	ret
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	08 95       	ret

0000191e <vidTimer2_OvfIrqEnable>:
    191e:	89 b7       	in	r24, 0x39	; 57
    1920:	80 64       	ori	r24, 0x40	; 64
    1922:	89 bf       	out	0x39, r24	; 57
    1924:	8f b7       	in	r24, 0x3f	; 63
    1926:	80 68       	ori	r24, 0x80	; 128
    1928:	8f bf       	out	0x3f, r24	; 63
    192a:	80 e0       	ldi	r24, 0x00	; 0
    192c:	08 95       	ret

0000192e <vidTimer2_start>:
/*************************************************************************************************************/
enu_timerStatus_t vidTimer2_start(void)
{
	enu_timerStatus_t errorStatus = TIMER_OK;

	TCCR2_REG |=  global_prescaller << PRESCALLER_OFFSET;
    192e:	95 b5       	in	r25, 0x25	; 37
    1930:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <global_prescaller>
    1934:	89 2b       	or	r24, r25
    1936:	85 bd       	out	0x25, r24	; 37
	global_timerStatus  = RUNNING;
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <global_timerStatus>

	return errorStatus;
}
    193e:	80 e0       	ldi	r24, 0x00	; 0
    1940:	08 95       	ret

00001942 <vidTimer2_stop>:
/*************************************************************************************************************/
enu_timerStatus_t vidTimer2_stop(void)
{
	enu_timerStatus_t errorStatus = TIMER_OK;

	TCCR2_REG &=  PRESCALLER_CLR_MSK;
    1942:	85 b5       	in	r24, 0x25	; 37
    1944:	88 7f       	andi	r24, 0xF8	; 248
    1946:	85 bd       	out	0x25, r24	; 37
	global_timerStatus = STOPPED;
    1948:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <global_timerStatus>

	return errorStatus;
}
    194c:	80 e0       	ldi	r24, 0x00	; 0
    194e:	08 95       	ret

00001950 <u8Timer2_setTime_ms>:
/*************************************************************************************************************/
enu_timerStatus_t u8Timer2_setTime_ms(Uint32_t u32_time_ms)
{
    1950:	8f 92       	push	r8
    1952:	9f 92       	push	r9
    1954:	af 92       	push	r10
    1956:	bf 92       	push	r11
    1958:	cf 92       	push	r12
    195a:	df 92       	push	r13
    195c:	ef 92       	push	r14
    195e:	ff 92       	push	r15
	enu_timerStatus_t errorStatus = TIMER_OK;
	Uint32_t desired_ticks;
	float32_t tick_time_ms;
	if( u32_time_ms < MAX_TIM_MS )
    1960:	68 38       	cpi	r22, 0x88	; 136
    1962:	23 e1       	ldi	r18, 0x13	; 19
    1964:	72 07       	cpc	r23, r18
    1966:	81 05       	cpc	r24, r1
    1968:	91 05       	cpc	r25, r1
    196a:	08 f0       	brcs	.+2      	; 0x196e <u8Timer2_setTime_ms+0x1e>
    196c:	60 c0       	rjmp	.+192    	; 0x1a2e <u8Timer2_setTime_ms+0xde>
    196e:	6b 01       	movw	r12, r22
    1970:	7c 01       	movw	r14, r24
	{
		tick_time_ms = (float32_t)prescaller_map[global_prescaller] / ((Uint32_t)F_CPU / 1000U)  ;
    1972:	e0 91 c5 02 	lds	r30, 0x02C5	; 0x8002c5 <global_prescaller>
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	ee 0f       	add	r30, r30
    197a:	ff 1f       	adc	r31, r31
    197c:	e4 57       	subi	r30, 0x74	; 116
    197e:	fd 4f       	sbci	r31, 0xFD	; 253
    1980:	60 81       	ld	r22, Z
    1982:	71 81       	ldd	r23, Z+1	; 0x01
    1984:	80 e0       	ldi	r24, 0x00	; 0
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	0e 94 76 0e 	call	0x1cec	; 0x1cec <__floatunsisf>
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	4a ef       	ldi	r20, 0xFA	; 250
    1992:	55 e4       	ldi	r21, 0x45	; 69
    1994:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__divsf3>
    1998:	4b 01       	movw	r8, r22
    199a:	5c 01       	movw	r10, r24
		desired_ticks = u32_time_ms / tick_time_ms;
    199c:	c7 01       	movw	r24, r14
    199e:	b6 01       	movw	r22, r12
    19a0:	0e 94 76 0e 	call	0x1cec	; 0x1cec <__floatunsisf>
    19a4:	a5 01       	movw	r20, r10
    19a6:	94 01       	movw	r18, r8
    19a8:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__divsf3>
    19ac:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <__fixunssfsi>

		/* Compare ticks with OVF_ticks */
		if(desired_ticks == OVF_TICKS)
    19b0:	61 15       	cp	r22, r1
    19b2:	21 e0       	ldi	r18, 0x01	; 1
    19b4:	72 07       	cpc	r23, r18
    19b6:	81 05       	cpc	r24, r1
    19b8:	91 05       	cpc	r25, r1
    19ba:	29 f4       	brne	.+10     	; 0x19c6 <u8Timer2_setTime_ms+0x76>
		{
			global_ovf = 1;
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <global_ovf>
	return errorStatus;
}
/*************************************************************************************************************/
enu_timerStatus_t u8Timer2_setTime_ms(Uint32_t u32_time_ms)
{
	enu_timerStatus_t errorStatus = TIMER_OK;
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	39 c0       	rjmp	.+114    	; 0x1a38 <u8Timer2_setTime_ms+0xe8>
		/* Compare ticks with OVF_ticks */
		if(desired_ticks == OVF_TICKS)
		{
			global_ovf = 1;
		}
		else if(desired_ticks < OVF_TICKS)
    19c6:	6f 3f       	cpi	r22, 0xFF	; 255
    19c8:	71 05       	cpc	r23, r1
    19ca:	81 05       	cpc	r24, r1
    19cc:	91 05       	cpc	r25, r1
    19ce:	09 f0       	breq	.+2      	; 0x19d2 <u8Timer2_setTime_ms+0x82>
    19d0:	78 f4       	brcc	.+30     	; 0x19f0 <u8Timer2_setTime_ms+0xa0>
		{
			preload = OVF_TICKS - desired_ticks;
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	31 e0       	ldi	r19, 0x01	; 1
    19d6:	c9 01       	movw	r24, r18
    19d8:	86 1b       	sub	r24, r22
    19da:	97 0b       	sbc	r25, r23
    19dc:	90 93 c2 02 	sts	0x02C2, r25	; 0x8002c2 <preload+0x1>
    19e0:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <preload>
			TCNT2_REG = preload;
    19e4:	84 bd       	out	0x24, r24	; 36
			global_ovf = 1;
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <global_ovf>
	return errorStatus;
}
/*************************************************************************************************************/
enu_timerStatus_t u8Timer2_setTime_ms(Uint32_t u32_time_ms)
{
	enu_timerStatus_t errorStatus = TIMER_OK;
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	24 c0       	rjmp	.+72     	; 0x1a38 <u8Timer2_setTime_ms+0xe8>
		{
			preload = OVF_TICKS - desired_ticks;
			TCNT2_REG = preload;
			global_ovf = 1;
		}
		else if(desired_ticks > OVF_TICKS)
    19f0:	61 30       	cpi	r22, 0x01	; 1
    19f2:	21 e0       	ldi	r18, 0x01	; 1
    19f4:	72 07       	cpc	r23, r18
    19f6:	81 05       	cpc	r24, r1
    19f8:	91 05       	cpc	r25, r1
    19fa:	d8 f0       	brcs	.+54     	; 0x1a32 <u8Timer2_setTime_ms+0xe2>
		{
			global_ovf = (Uchar8_t)(desired_ticks / OVF_TICKS);
    19fc:	70 93 c3 02 	sts	0x02C3, r23	; 0x8002c3 <global_ovf>
			preload = (uint16_t)(OVF_TICKS - (desired_ticks % OVF_TICKS ));
    1a00:	77 27       	eor	r23, r23
    1a02:	80 e0       	ldi	r24, 0x00	; 0
    1a04:	91 e0       	ldi	r25, 0x01	; 1
    1a06:	86 1b       	sub	r24, r22
    1a08:	97 0b       	sbc	r25, r23
    1a0a:	90 93 c2 02 	sts	0x02C2, r25	; 0x8002c2 <preload+0x1>
    1a0e:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <preload>
			TCNT2_REG = preload;
    1a12:	84 bd       	out	0x24, r24	; 36
			if (preload > 0U)
    1a14:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <preload>
    1a18:	90 91 c2 02 	lds	r25, 0x02C2	; 0x8002c2 <preload+0x1>
    1a1c:	89 2b       	or	r24, r25
    1a1e:	59 f0       	breq	.+22     	; 0x1a36 <u8Timer2_setTime_ms+0xe6>
			{
				global_ovf++;
    1a20:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <global_ovf>
    1a24:	8f 5f       	subi	r24, 0xFF	; 255
    1a26:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <global_ovf>
	return errorStatus;
}
/*************************************************************************************************************/
enu_timerStatus_t u8Timer2_setTime_ms(Uint32_t u32_time_ms)
{
	enu_timerStatus_t errorStatus = TIMER_OK;
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	05 c0       	rjmp	.+10     	; 0x1a38 <u8Timer2_setTime_ms+0xe8>
			}
		}
	}
		else
		{
			errorStatus = TIMER_NOK;
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	03 c0       	rjmp	.+6      	; 0x1a38 <u8Timer2_setTime_ms+0xe8>
	return errorStatus;
}
/*************************************************************************************************************/
enu_timerStatus_t u8Timer2_setTime_ms(Uint32_t u32_time_ms)
{
	enu_timerStatus_t errorStatus = TIMER_OK;
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	01 c0       	rjmp	.+2      	; 0x1a38 <u8Timer2_setTime_ms+0xe8>
    1a36:	80 e0       	ldi	r24, 0x00	; 0
			errorStatus = TIMER_NOK;
		}


		return errorStatus;
	}
    1a38:	ff 90       	pop	r15
    1a3a:	ef 90       	pop	r14
    1a3c:	df 90       	pop	r13
    1a3e:	cf 90       	pop	r12
    1a40:	bf 90       	pop	r11
    1a42:	af 90       	pop	r10
    1a44:	9f 90       	pop	r9
    1a46:	8f 90       	pop	r8
    1a48:	08 95       	ret

00001a4a <vidTimer2_setcbf_OVF>:

/*************************************************************************************************************/
void vidTimer2_setcbf_OVF(cbf_t cbf)
{
	if (cbf != NULL)
    1a4a:	00 97       	sbiw	r24, 0x00	; 0
    1a4c:	21 f0       	breq	.+8      	; 0x1a56 <vidTimer2_setcbf_OVF+0xc>
	{
		globalCallFunc = cbf;
    1a4e:	90 93 c0 02 	sts	0x02C0, r25	; 0x8002c0 <globalCallFunc+0x1>
    1a52:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <globalCallFunc>
    1a56:	08 95       	ret

00001a58 <__vector_5>:

/*************************************************************************************************************
 * 							ISR Interrupt Handling
 ************************************************************************************************************/
ISR(TIMER2_OVF_vect)
{
    1a58:	1f 92       	push	r1
    1a5a:	0f 92       	push	r0
    1a5c:	0f b6       	in	r0, 0x3f	; 63
    1a5e:	0f 92       	push	r0
    1a60:	11 24       	eor	r1, r1
    1a62:	2f 93       	push	r18
    1a64:	3f 93       	push	r19
    1a66:	4f 93       	push	r20
    1a68:	5f 93       	push	r21
    1a6a:	6f 93       	push	r22
    1a6c:	7f 93       	push	r23
    1a6e:	8f 93       	push	r24
    1a70:	9f 93       	push	r25
    1a72:	af 93       	push	r26
    1a74:	bf 93       	push	r27
    1a76:	ef 93       	push	r30
    1a78:	ff 93       	push	r31
	static Uchar8_t counter = 0;
	counter++;
    1a7a:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <counter.1731>
    1a7e:	8f 5f       	subi	r24, 0xFF	; 255
    1a80:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <counter.1731>
	if(counter == global_ovf)
    1a84:	90 91 c3 02 	lds	r25, 0x02C3	; 0x8002c3 <global_ovf>
    1a88:	89 13       	cpse	r24, r25
    1a8a:	0c c0       	rjmp	.+24     	; 0x1aa4 <__vector_5+0x4c>
	{
		if (globalCallFunc != NULL)
    1a8c:	e0 91 bf 02 	lds	r30, 0x02BF	; 0x8002bf <globalCallFunc>
    1a90:	f0 91 c0 02 	lds	r31, 0x02C0	; 0x8002c0 <globalCallFunc+0x1>
    1a94:	30 97       	sbiw	r30, 0x00	; 0
    1a96:	31 f0       	breq	.+12     	; 0x1aa4 <__vector_5+0x4c>
		{
			counter = 0;
    1a98:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <counter.1731>

			globalCallFunc();
    1a9c:	09 95       	icall
			TCNT2_REG = preload;
    1a9e:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <preload>
    1aa2:	84 bd       	out	0x24, r24	; 36
//			global_ovf = 0;
//			vidTimer1_stop();
		}
	}
}
    1aa4:	ff 91       	pop	r31
    1aa6:	ef 91       	pop	r30
    1aa8:	bf 91       	pop	r27
    1aaa:	af 91       	pop	r26
    1aac:	9f 91       	pop	r25
    1aae:	8f 91       	pop	r24
    1ab0:	7f 91       	pop	r23
    1ab2:	6f 91       	pop	r22
    1ab4:	5f 91       	pop	r21
    1ab6:	4f 91       	pop	r20
    1ab8:	3f 91       	pop	r19
    1aba:	2f 91       	pop	r18
    1abc:	0f 90       	pop	r0
    1abe:	0f be       	out	0x3f, r0	; 63
    1ac0:	0f 90       	pop	r0
    1ac2:	1f 90       	pop	r1
    1ac4:	18 95       	reti

00001ac6 <__subsf3>:
    1ac6:	50 58       	subi	r21, 0x80	; 128

00001ac8 <__addsf3>:
    1ac8:	bb 27       	eor	r27, r27
    1aca:	aa 27       	eor	r26, r26
    1acc:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <__addsf3x>
    1ad0:	0c 94 ee 0e 	jmp	0x1ddc	; 0x1ddc <__fp_round>
    1ad4:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <__fp_pscA>
    1ad8:	38 f0       	brcs	.+14     	; 0x1ae8 <__addsf3+0x20>
    1ada:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <__fp_pscB>
    1ade:	20 f0       	brcs	.+8      	; 0x1ae8 <__addsf3+0x20>
    1ae0:	39 f4       	brne	.+14     	; 0x1af0 <__addsf3+0x28>
    1ae2:	9f 3f       	cpi	r25, 0xFF	; 255
    1ae4:	19 f4       	brne	.+6      	; 0x1aec <__addsf3+0x24>
    1ae6:	26 f4       	brtc	.+8      	; 0x1af0 <__addsf3+0x28>
    1ae8:	0c 94 dd 0e 	jmp	0x1dba	; 0x1dba <__fp_nan>
    1aec:	0e f4       	brtc	.+2      	; 0x1af0 <__addsf3+0x28>
    1aee:	e0 95       	com	r30
    1af0:	e7 fb       	bst	r30, 7
    1af2:	0c 94 d7 0e 	jmp	0x1dae	; 0x1dae <__fp_inf>

00001af6 <__addsf3x>:
    1af6:	e9 2f       	mov	r30, r25
    1af8:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <__fp_split3>
    1afc:	58 f3       	brcs	.-42     	; 0x1ad4 <__addsf3+0xc>
    1afe:	ba 17       	cp	r27, r26
    1b00:	62 07       	cpc	r22, r18
    1b02:	73 07       	cpc	r23, r19
    1b04:	84 07       	cpc	r24, r20
    1b06:	95 07       	cpc	r25, r21
    1b08:	20 f0       	brcs	.+8      	; 0x1b12 <__addsf3x+0x1c>
    1b0a:	79 f4       	brne	.+30     	; 0x1b2a <__addsf3x+0x34>
    1b0c:	a6 f5       	brtc	.+104    	; 0x1b76 <__addsf3x+0x80>
    1b0e:	0c 94 21 0f 	jmp	0x1e42	; 0x1e42 <__fp_zero>
    1b12:	0e f4       	brtc	.+2      	; 0x1b16 <__addsf3x+0x20>
    1b14:	e0 95       	com	r30
    1b16:	0b 2e       	mov	r0, r27
    1b18:	ba 2f       	mov	r27, r26
    1b1a:	a0 2d       	mov	r26, r0
    1b1c:	0b 01       	movw	r0, r22
    1b1e:	b9 01       	movw	r22, r18
    1b20:	90 01       	movw	r18, r0
    1b22:	0c 01       	movw	r0, r24
    1b24:	ca 01       	movw	r24, r20
    1b26:	a0 01       	movw	r20, r0
    1b28:	11 24       	eor	r1, r1
    1b2a:	ff 27       	eor	r31, r31
    1b2c:	59 1b       	sub	r21, r25
    1b2e:	99 f0       	breq	.+38     	; 0x1b56 <__addsf3x+0x60>
    1b30:	59 3f       	cpi	r21, 0xF9	; 249
    1b32:	50 f4       	brcc	.+20     	; 0x1b48 <__addsf3x+0x52>
    1b34:	50 3e       	cpi	r21, 0xE0	; 224
    1b36:	68 f1       	brcs	.+90     	; 0x1b92 <__addsf3x+0x9c>
    1b38:	1a 16       	cp	r1, r26
    1b3a:	f0 40       	sbci	r31, 0x00	; 0
    1b3c:	a2 2f       	mov	r26, r18
    1b3e:	23 2f       	mov	r18, r19
    1b40:	34 2f       	mov	r19, r20
    1b42:	44 27       	eor	r20, r20
    1b44:	58 5f       	subi	r21, 0xF8	; 248
    1b46:	f3 cf       	rjmp	.-26     	; 0x1b2e <__addsf3x+0x38>
    1b48:	46 95       	lsr	r20
    1b4a:	37 95       	ror	r19
    1b4c:	27 95       	ror	r18
    1b4e:	a7 95       	ror	r26
    1b50:	f0 40       	sbci	r31, 0x00	; 0
    1b52:	53 95       	inc	r21
    1b54:	c9 f7       	brne	.-14     	; 0x1b48 <__addsf3x+0x52>
    1b56:	7e f4       	brtc	.+30     	; 0x1b76 <__addsf3x+0x80>
    1b58:	1f 16       	cp	r1, r31
    1b5a:	ba 0b       	sbc	r27, r26
    1b5c:	62 0b       	sbc	r22, r18
    1b5e:	73 0b       	sbc	r23, r19
    1b60:	84 0b       	sbc	r24, r20
    1b62:	ba f0       	brmi	.+46     	; 0x1b92 <__addsf3x+0x9c>
    1b64:	91 50       	subi	r25, 0x01	; 1
    1b66:	a1 f0       	breq	.+40     	; 0x1b90 <__addsf3x+0x9a>
    1b68:	ff 0f       	add	r31, r31
    1b6a:	bb 1f       	adc	r27, r27
    1b6c:	66 1f       	adc	r22, r22
    1b6e:	77 1f       	adc	r23, r23
    1b70:	88 1f       	adc	r24, r24
    1b72:	c2 f7       	brpl	.-16     	; 0x1b64 <__addsf3x+0x6e>
    1b74:	0e c0       	rjmp	.+28     	; 0x1b92 <__addsf3x+0x9c>
    1b76:	ba 0f       	add	r27, r26
    1b78:	62 1f       	adc	r22, r18
    1b7a:	73 1f       	adc	r23, r19
    1b7c:	84 1f       	adc	r24, r20
    1b7e:	48 f4       	brcc	.+18     	; 0x1b92 <__addsf3x+0x9c>
    1b80:	87 95       	ror	r24
    1b82:	77 95       	ror	r23
    1b84:	67 95       	ror	r22
    1b86:	b7 95       	ror	r27
    1b88:	f7 95       	ror	r31
    1b8a:	9e 3f       	cpi	r25, 0xFE	; 254
    1b8c:	08 f0       	brcs	.+2      	; 0x1b90 <__addsf3x+0x9a>
    1b8e:	b0 cf       	rjmp	.-160    	; 0x1af0 <__addsf3+0x28>
    1b90:	93 95       	inc	r25
    1b92:	88 0f       	add	r24, r24
    1b94:	08 f0       	brcs	.+2      	; 0x1b98 <__addsf3x+0xa2>
    1b96:	99 27       	eor	r25, r25
    1b98:	ee 0f       	add	r30, r30
    1b9a:	97 95       	ror	r25
    1b9c:	87 95       	ror	r24
    1b9e:	08 95       	ret

00001ba0 <__cmpsf2>:
    1ba0:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <__fp_cmp>
    1ba4:	08 f4       	brcc	.+2      	; 0x1ba8 <__cmpsf2+0x8>
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	08 95       	ret

00001baa <__divsf3>:
    1baa:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__divsf3x>
    1bae:	0c 94 ee 0e 	jmp	0x1ddc	; 0x1ddc <__fp_round>
    1bb2:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <__fp_pscB>
    1bb6:	58 f0       	brcs	.+22     	; 0x1bce <__divsf3+0x24>
    1bb8:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <__fp_pscA>
    1bbc:	40 f0       	brcs	.+16     	; 0x1bce <__divsf3+0x24>
    1bbe:	29 f4       	brne	.+10     	; 0x1bca <__divsf3+0x20>
    1bc0:	5f 3f       	cpi	r21, 0xFF	; 255
    1bc2:	29 f0       	breq	.+10     	; 0x1bce <__divsf3+0x24>
    1bc4:	0c 94 d7 0e 	jmp	0x1dae	; 0x1dae <__fp_inf>
    1bc8:	51 11       	cpse	r21, r1
    1bca:	0c 94 22 0f 	jmp	0x1e44	; 0x1e44 <__fp_szero>
    1bce:	0c 94 dd 0e 	jmp	0x1dba	; 0x1dba <__fp_nan>

00001bd2 <__divsf3x>:
    1bd2:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <__fp_split3>
    1bd6:	68 f3       	brcs	.-38     	; 0x1bb2 <__divsf3+0x8>

00001bd8 <__divsf3_pse>:
    1bd8:	99 23       	and	r25, r25
    1bda:	b1 f3       	breq	.-20     	; 0x1bc8 <__divsf3+0x1e>
    1bdc:	55 23       	and	r21, r21
    1bde:	91 f3       	breq	.-28     	; 0x1bc4 <__divsf3+0x1a>
    1be0:	95 1b       	sub	r25, r21
    1be2:	55 0b       	sbc	r21, r21
    1be4:	bb 27       	eor	r27, r27
    1be6:	aa 27       	eor	r26, r26
    1be8:	62 17       	cp	r22, r18
    1bea:	73 07       	cpc	r23, r19
    1bec:	84 07       	cpc	r24, r20
    1bee:	38 f0       	brcs	.+14     	; 0x1bfe <__divsf3_pse+0x26>
    1bf0:	9f 5f       	subi	r25, 0xFF	; 255
    1bf2:	5f 4f       	sbci	r21, 0xFF	; 255
    1bf4:	22 0f       	add	r18, r18
    1bf6:	33 1f       	adc	r19, r19
    1bf8:	44 1f       	adc	r20, r20
    1bfa:	aa 1f       	adc	r26, r26
    1bfc:	a9 f3       	breq	.-22     	; 0x1be8 <__divsf3_pse+0x10>
    1bfe:	35 d0       	rcall	.+106    	; 0x1c6a <__divsf3_pse+0x92>
    1c00:	0e 2e       	mov	r0, r30
    1c02:	3a f0       	brmi	.+14     	; 0x1c12 <__divsf3_pse+0x3a>
    1c04:	e0 e8       	ldi	r30, 0x80	; 128
    1c06:	32 d0       	rcall	.+100    	; 0x1c6c <__divsf3_pse+0x94>
    1c08:	91 50       	subi	r25, 0x01	; 1
    1c0a:	50 40       	sbci	r21, 0x00	; 0
    1c0c:	e6 95       	lsr	r30
    1c0e:	00 1c       	adc	r0, r0
    1c10:	ca f7       	brpl	.-14     	; 0x1c04 <__divsf3_pse+0x2c>
    1c12:	2b d0       	rcall	.+86     	; 0x1c6a <__divsf3_pse+0x92>
    1c14:	fe 2f       	mov	r31, r30
    1c16:	29 d0       	rcall	.+82     	; 0x1c6a <__divsf3_pse+0x92>
    1c18:	66 0f       	add	r22, r22
    1c1a:	77 1f       	adc	r23, r23
    1c1c:	88 1f       	adc	r24, r24
    1c1e:	bb 1f       	adc	r27, r27
    1c20:	26 17       	cp	r18, r22
    1c22:	37 07       	cpc	r19, r23
    1c24:	48 07       	cpc	r20, r24
    1c26:	ab 07       	cpc	r26, r27
    1c28:	b0 e8       	ldi	r27, 0x80	; 128
    1c2a:	09 f0       	breq	.+2      	; 0x1c2e <__divsf3_pse+0x56>
    1c2c:	bb 0b       	sbc	r27, r27
    1c2e:	80 2d       	mov	r24, r0
    1c30:	bf 01       	movw	r22, r30
    1c32:	ff 27       	eor	r31, r31
    1c34:	93 58       	subi	r25, 0x83	; 131
    1c36:	5f 4f       	sbci	r21, 0xFF	; 255
    1c38:	3a f0       	brmi	.+14     	; 0x1c48 <__divsf3_pse+0x70>
    1c3a:	9e 3f       	cpi	r25, 0xFE	; 254
    1c3c:	51 05       	cpc	r21, r1
    1c3e:	78 f0       	brcs	.+30     	; 0x1c5e <__divsf3_pse+0x86>
    1c40:	0c 94 d7 0e 	jmp	0x1dae	; 0x1dae <__fp_inf>
    1c44:	0c 94 22 0f 	jmp	0x1e44	; 0x1e44 <__fp_szero>
    1c48:	5f 3f       	cpi	r21, 0xFF	; 255
    1c4a:	e4 f3       	brlt	.-8      	; 0x1c44 <__divsf3_pse+0x6c>
    1c4c:	98 3e       	cpi	r25, 0xE8	; 232
    1c4e:	d4 f3       	brlt	.-12     	; 0x1c44 <__divsf3_pse+0x6c>
    1c50:	86 95       	lsr	r24
    1c52:	77 95       	ror	r23
    1c54:	67 95       	ror	r22
    1c56:	b7 95       	ror	r27
    1c58:	f7 95       	ror	r31
    1c5a:	9f 5f       	subi	r25, 0xFF	; 255
    1c5c:	c9 f7       	brne	.-14     	; 0x1c50 <__divsf3_pse+0x78>
    1c5e:	88 0f       	add	r24, r24
    1c60:	91 1d       	adc	r25, r1
    1c62:	96 95       	lsr	r25
    1c64:	87 95       	ror	r24
    1c66:	97 f9       	bld	r25, 7
    1c68:	08 95       	ret
    1c6a:	e1 e0       	ldi	r30, 0x01	; 1
    1c6c:	66 0f       	add	r22, r22
    1c6e:	77 1f       	adc	r23, r23
    1c70:	88 1f       	adc	r24, r24
    1c72:	bb 1f       	adc	r27, r27
    1c74:	62 17       	cp	r22, r18
    1c76:	73 07       	cpc	r23, r19
    1c78:	84 07       	cpc	r24, r20
    1c7a:	ba 07       	cpc	r27, r26
    1c7c:	20 f0       	brcs	.+8      	; 0x1c86 <__divsf3_pse+0xae>
    1c7e:	62 1b       	sub	r22, r18
    1c80:	73 0b       	sbc	r23, r19
    1c82:	84 0b       	sbc	r24, r20
    1c84:	ba 0b       	sbc	r27, r26
    1c86:	ee 1f       	adc	r30, r30
    1c88:	88 f7       	brcc	.-30     	; 0x1c6c <__divsf3_pse+0x94>
    1c8a:	e0 95       	com	r30
    1c8c:	08 95       	ret

00001c8e <__fixunssfsi>:
    1c8e:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__fp_splitA>
    1c92:	88 f0       	brcs	.+34     	; 0x1cb6 <__fixunssfsi+0x28>
    1c94:	9f 57       	subi	r25, 0x7F	; 127
    1c96:	98 f0       	brcs	.+38     	; 0x1cbe <__fixunssfsi+0x30>
    1c98:	b9 2f       	mov	r27, r25
    1c9a:	99 27       	eor	r25, r25
    1c9c:	b7 51       	subi	r27, 0x17	; 23
    1c9e:	b0 f0       	brcs	.+44     	; 0x1ccc <__fixunssfsi+0x3e>
    1ca0:	e1 f0       	breq	.+56     	; 0x1cda <__fixunssfsi+0x4c>
    1ca2:	66 0f       	add	r22, r22
    1ca4:	77 1f       	adc	r23, r23
    1ca6:	88 1f       	adc	r24, r24
    1ca8:	99 1f       	adc	r25, r25
    1caa:	1a f0       	brmi	.+6      	; 0x1cb2 <__fixunssfsi+0x24>
    1cac:	ba 95       	dec	r27
    1cae:	c9 f7       	brne	.-14     	; 0x1ca2 <__fixunssfsi+0x14>
    1cb0:	14 c0       	rjmp	.+40     	; 0x1cda <__fixunssfsi+0x4c>
    1cb2:	b1 30       	cpi	r27, 0x01	; 1
    1cb4:	91 f0       	breq	.+36     	; 0x1cda <__fixunssfsi+0x4c>
    1cb6:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <__fp_zero>
    1cba:	b1 e0       	ldi	r27, 0x01	; 1
    1cbc:	08 95       	ret
    1cbe:	0c 94 21 0f 	jmp	0x1e42	; 0x1e42 <__fp_zero>
    1cc2:	67 2f       	mov	r22, r23
    1cc4:	78 2f       	mov	r23, r24
    1cc6:	88 27       	eor	r24, r24
    1cc8:	b8 5f       	subi	r27, 0xF8	; 248
    1cca:	39 f0       	breq	.+14     	; 0x1cda <__fixunssfsi+0x4c>
    1ccc:	b9 3f       	cpi	r27, 0xF9	; 249
    1cce:	cc f3       	brlt	.-14     	; 0x1cc2 <__fixunssfsi+0x34>
    1cd0:	86 95       	lsr	r24
    1cd2:	77 95       	ror	r23
    1cd4:	67 95       	ror	r22
    1cd6:	b3 95       	inc	r27
    1cd8:	d9 f7       	brne	.-10     	; 0x1cd0 <__fixunssfsi+0x42>
    1cda:	3e f4       	brtc	.+14     	; 0x1cea <__fixunssfsi+0x5c>
    1cdc:	90 95       	com	r25
    1cde:	80 95       	com	r24
    1ce0:	70 95       	com	r23
    1ce2:	61 95       	neg	r22
    1ce4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ce6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ce8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cea:	08 95       	ret

00001cec <__floatunsisf>:
    1cec:	e8 94       	clt
    1cee:	09 c0       	rjmp	.+18     	; 0x1d02 <__floatsisf+0x12>

00001cf0 <__floatsisf>:
    1cf0:	97 fb       	bst	r25, 7
    1cf2:	3e f4       	brtc	.+14     	; 0x1d02 <__floatsisf+0x12>
    1cf4:	90 95       	com	r25
    1cf6:	80 95       	com	r24
    1cf8:	70 95       	com	r23
    1cfa:	61 95       	neg	r22
    1cfc:	7f 4f       	sbci	r23, 0xFF	; 255
    1cfe:	8f 4f       	sbci	r24, 0xFF	; 255
    1d00:	9f 4f       	sbci	r25, 0xFF	; 255
    1d02:	99 23       	and	r25, r25
    1d04:	a9 f0       	breq	.+42     	; 0x1d30 <__floatsisf+0x40>
    1d06:	f9 2f       	mov	r31, r25
    1d08:	96 e9       	ldi	r25, 0x96	; 150
    1d0a:	bb 27       	eor	r27, r27
    1d0c:	93 95       	inc	r25
    1d0e:	f6 95       	lsr	r31
    1d10:	87 95       	ror	r24
    1d12:	77 95       	ror	r23
    1d14:	67 95       	ror	r22
    1d16:	b7 95       	ror	r27
    1d18:	f1 11       	cpse	r31, r1
    1d1a:	f8 cf       	rjmp	.-16     	; 0x1d0c <__floatsisf+0x1c>
    1d1c:	fa f4       	brpl	.+62     	; 0x1d5c <__floatsisf+0x6c>
    1d1e:	bb 0f       	add	r27, r27
    1d20:	11 f4       	brne	.+4      	; 0x1d26 <__floatsisf+0x36>
    1d22:	60 ff       	sbrs	r22, 0
    1d24:	1b c0       	rjmp	.+54     	; 0x1d5c <__floatsisf+0x6c>
    1d26:	6f 5f       	subi	r22, 0xFF	; 255
    1d28:	7f 4f       	sbci	r23, 0xFF	; 255
    1d2a:	8f 4f       	sbci	r24, 0xFF	; 255
    1d2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d2e:	16 c0       	rjmp	.+44     	; 0x1d5c <__floatsisf+0x6c>
    1d30:	88 23       	and	r24, r24
    1d32:	11 f0       	breq	.+4      	; 0x1d38 <__floatsisf+0x48>
    1d34:	96 e9       	ldi	r25, 0x96	; 150
    1d36:	11 c0       	rjmp	.+34     	; 0x1d5a <__floatsisf+0x6a>
    1d38:	77 23       	and	r23, r23
    1d3a:	21 f0       	breq	.+8      	; 0x1d44 <__floatsisf+0x54>
    1d3c:	9e e8       	ldi	r25, 0x8E	; 142
    1d3e:	87 2f       	mov	r24, r23
    1d40:	76 2f       	mov	r23, r22
    1d42:	05 c0       	rjmp	.+10     	; 0x1d4e <__floatsisf+0x5e>
    1d44:	66 23       	and	r22, r22
    1d46:	71 f0       	breq	.+28     	; 0x1d64 <__floatsisf+0x74>
    1d48:	96 e8       	ldi	r25, 0x86	; 134
    1d4a:	86 2f       	mov	r24, r22
    1d4c:	70 e0       	ldi	r23, 0x00	; 0
    1d4e:	60 e0       	ldi	r22, 0x00	; 0
    1d50:	2a f0       	brmi	.+10     	; 0x1d5c <__floatsisf+0x6c>
    1d52:	9a 95       	dec	r25
    1d54:	66 0f       	add	r22, r22
    1d56:	77 1f       	adc	r23, r23
    1d58:	88 1f       	adc	r24, r24
    1d5a:	da f7       	brpl	.-10     	; 0x1d52 <__floatsisf+0x62>
    1d5c:	88 0f       	add	r24, r24
    1d5e:	96 95       	lsr	r25
    1d60:	87 95       	ror	r24
    1d62:	97 f9       	bld	r25, 7
    1d64:	08 95       	ret

00001d66 <__fp_cmp>:
    1d66:	99 0f       	add	r25, r25
    1d68:	00 08       	sbc	r0, r0
    1d6a:	55 0f       	add	r21, r21
    1d6c:	aa 0b       	sbc	r26, r26
    1d6e:	e0 e8       	ldi	r30, 0x80	; 128
    1d70:	fe ef       	ldi	r31, 0xFE	; 254
    1d72:	16 16       	cp	r1, r22
    1d74:	17 06       	cpc	r1, r23
    1d76:	e8 07       	cpc	r30, r24
    1d78:	f9 07       	cpc	r31, r25
    1d7a:	c0 f0       	brcs	.+48     	; 0x1dac <__fp_cmp+0x46>
    1d7c:	12 16       	cp	r1, r18
    1d7e:	13 06       	cpc	r1, r19
    1d80:	e4 07       	cpc	r30, r20
    1d82:	f5 07       	cpc	r31, r21
    1d84:	98 f0       	brcs	.+38     	; 0x1dac <__fp_cmp+0x46>
    1d86:	62 1b       	sub	r22, r18
    1d88:	73 0b       	sbc	r23, r19
    1d8a:	84 0b       	sbc	r24, r20
    1d8c:	95 0b       	sbc	r25, r21
    1d8e:	39 f4       	brne	.+14     	; 0x1d9e <__fp_cmp+0x38>
    1d90:	0a 26       	eor	r0, r26
    1d92:	61 f0       	breq	.+24     	; 0x1dac <__fp_cmp+0x46>
    1d94:	23 2b       	or	r18, r19
    1d96:	24 2b       	or	r18, r20
    1d98:	25 2b       	or	r18, r21
    1d9a:	21 f4       	brne	.+8      	; 0x1da4 <__fp_cmp+0x3e>
    1d9c:	08 95       	ret
    1d9e:	0a 26       	eor	r0, r26
    1da0:	09 f4       	brne	.+2      	; 0x1da4 <__fp_cmp+0x3e>
    1da2:	a1 40       	sbci	r26, 0x01	; 1
    1da4:	a6 95       	lsr	r26
    1da6:	8f ef       	ldi	r24, 0xFF	; 255
    1da8:	81 1d       	adc	r24, r1
    1daa:	81 1d       	adc	r24, r1
    1dac:	08 95       	ret

00001dae <__fp_inf>:
    1dae:	97 f9       	bld	r25, 7
    1db0:	9f 67       	ori	r25, 0x7F	; 127
    1db2:	80 e8       	ldi	r24, 0x80	; 128
    1db4:	70 e0       	ldi	r23, 0x00	; 0
    1db6:	60 e0       	ldi	r22, 0x00	; 0
    1db8:	08 95       	ret

00001dba <__fp_nan>:
    1dba:	9f ef       	ldi	r25, 0xFF	; 255
    1dbc:	80 ec       	ldi	r24, 0xC0	; 192
    1dbe:	08 95       	ret

00001dc0 <__fp_pscA>:
    1dc0:	00 24       	eor	r0, r0
    1dc2:	0a 94       	dec	r0
    1dc4:	16 16       	cp	r1, r22
    1dc6:	17 06       	cpc	r1, r23
    1dc8:	18 06       	cpc	r1, r24
    1dca:	09 06       	cpc	r0, r25
    1dcc:	08 95       	ret

00001dce <__fp_pscB>:
    1dce:	00 24       	eor	r0, r0
    1dd0:	0a 94       	dec	r0
    1dd2:	12 16       	cp	r1, r18
    1dd4:	13 06       	cpc	r1, r19
    1dd6:	14 06       	cpc	r1, r20
    1dd8:	05 06       	cpc	r0, r21
    1dda:	08 95       	ret

00001ddc <__fp_round>:
    1ddc:	09 2e       	mov	r0, r25
    1dde:	03 94       	inc	r0
    1de0:	00 0c       	add	r0, r0
    1de2:	11 f4       	brne	.+4      	; 0x1de8 <__fp_round+0xc>
    1de4:	88 23       	and	r24, r24
    1de6:	52 f0       	brmi	.+20     	; 0x1dfc <__fp_round+0x20>
    1de8:	bb 0f       	add	r27, r27
    1dea:	40 f4       	brcc	.+16     	; 0x1dfc <__fp_round+0x20>
    1dec:	bf 2b       	or	r27, r31
    1dee:	11 f4       	brne	.+4      	; 0x1df4 <__fp_round+0x18>
    1df0:	60 ff       	sbrs	r22, 0
    1df2:	04 c0       	rjmp	.+8      	; 0x1dfc <__fp_round+0x20>
    1df4:	6f 5f       	subi	r22, 0xFF	; 255
    1df6:	7f 4f       	sbci	r23, 0xFF	; 255
    1df8:	8f 4f       	sbci	r24, 0xFF	; 255
    1dfa:	9f 4f       	sbci	r25, 0xFF	; 255
    1dfc:	08 95       	ret

00001dfe <__fp_split3>:
    1dfe:	57 fd       	sbrc	r21, 7
    1e00:	90 58       	subi	r25, 0x80	; 128
    1e02:	44 0f       	add	r20, r20
    1e04:	55 1f       	adc	r21, r21
    1e06:	59 f0       	breq	.+22     	; 0x1e1e <__fp_splitA+0x10>
    1e08:	5f 3f       	cpi	r21, 0xFF	; 255
    1e0a:	71 f0       	breq	.+28     	; 0x1e28 <__fp_splitA+0x1a>
    1e0c:	47 95       	ror	r20

00001e0e <__fp_splitA>:
    1e0e:	88 0f       	add	r24, r24
    1e10:	97 fb       	bst	r25, 7
    1e12:	99 1f       	adc	r25, r25
    1e14:	61 f0       	breq	.+24     	; 0x1e2e <__fp_splitA+0x20>
    1e16:	9f 3f       	cpi	r25, 0xFF	; 255
    1e18:	79 f0       	breq	.+30     	; 0x1e38 <__fp_splitA+0x2a>
    1e1a:	87 95       	ror	r24
    1e1c:	08 95       	ret
    1e1e:	12 16       	cp	r1, r18
    1e20:	13 06       	cpc	r1, r19
    1e22:	14 06       	cpc	r1, r20
    1e24:	55 1f       	adc	r21, r21
    1e26:	f2 cf       	rjmp	.-28     	; 0x1e0c <__fp_split3+0xe>
    1e28:	46 95       	lsr	r20
    1e2a:	f1 df       	rcall	.-30     	; 0x1e0e <__fp_splitA>
    1e2c:	08 c0       	rjmp	.+16     	; 0x1e3e <__fp_splitA+0x30>
    1e2e:	16 16       	cp	r1, r22
    1e30:	17 06       	cpc	r1, r23
    1e32:	18 06       	cpc	r1, r24
    1e34:	99 1f       	adc	r25, r25
    1e36:	f1 cf       	rjmp	.-30     	; 0x1e1a <__fp_splitA+0xc>
    1e38:	86 95       	lsr	r24
    1e3a:	71 05       	cpc	r23, r1
    1e3c:	61 05       	cpc	r22, r1
    1e3e:	08 94       	sec
    1e40:	08 95       	ret

00001e42 <__fp_zero>:
    1e42:	e8 94       	clt

00001e44 <__fp_szero>:
    1e44:	bb 27       	eor	r27, r27
    1e46:	66 27       	eor	r22, r22
    1e48:	77 27       	eor	r23, r23
    1e4a:	cb 01       	movw	r24, r22
    1e4c:	97 f9       	bld	r25, 7
    1e4e:	08 95       	ret

00001e50 <__mulsf3>:
    1e50:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__mulsf3x>
    1e54:	0c 94 ee 0e 	jmp	0x1ddc	; 0x1ddc <__fp_round>
    1e58:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <__fp_pscA>
    1e5c:	38 f0       	brcs	.+14     	; 0x1e6c <__mulsf3+0x1c>
    1e5e:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <__fp_pscB>
    1e62:	20 f0       	brcs	.+8      	; 0x1e6c <__mulsf3+0x1c>
    1e64:	95 23       	and	r25, r21
    1e66:	11 f0       	breq	.+4      	; 0x1e6c <__mulsf3+0x1c>
    1e68:	0c 94 d7 0e 	jmp	0x1dae	; 0x1dae <__fp_inf>
    1e6c:	0c 94 dd 0e 	jmp	0x1dba	; 0x1dba <__fp_nan>
    1e70:	11 24       	eor	r1, r1
    1e72:	0c 94 22 0f 	jmp	0x1e44	; 0x1e44 <__fp_szero>

00001e76 <__mulsf3x>:
    1e76:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <__fp_split3>
    1e7a:	70 f3       	brcs	.-36     	; 0x1e58 <__mulsf3+0x8>

00001e7c <__mulsf3_pse>:
    1e7c:	95 9f       	mul	r25, r21
    1e7e:	c1 f3       	breq	.-16     	; 0x1e70 <__mulsf3+0x20>
    1e80:	95 0f       	add	r25, r21
    1e82:	50 e0       	ldi	r21, 0x00	; 0
    1e84:	55 1f       	adc	r21, r21
    1e86:	62 9f       	mul	r22, r18
    1e88:	f0 01       	movw	r30, r0
    1e8a:	72 9f       	mul	r23, r18
    1e8c:	bb 27       	eor	r27, r27
    1e8e:	f0 0d       	add	r31, r0
    1e90:	b1 1d       	adc	r27, r1
    1e92:	63 9f       	mul	r22, r19
    1e94:	aa 27       	eor	r26, r26
    1e96:	f0 0d       	add	r31, r0
    1e98:	b1 1d       	adc	r27, r1
    1e9a:	aa 1f       	adc	r26, r26
    1e9c:	64 9f       	mul	r22, r20
    1e9e:	66 27       	eor	r22, r22
    1ea0:	b0 0d       	add	r27, r0
    1ea2:	a1 1d       	adc	r26, r1
    1ea4:	66 1f       	adc	r22, r22
    1ea6:	82 9f       	mul	r24, r18
    1ea8:	22 27       	eor	r18, r18
    1eaa:	b0 0d       	add	r27, r0
    1eac:	a1 1d       	adc	r26, r1
    1eae:	62 1f       	adc	r22, r18
    1eb0:	73 9f       	mul	r23, r19
    1eb2:	b0 0d       	add	r27, r0
    1eb4:	a1 1d       	adc	r26, r1
    1eb6:	62 1f       	adc	r22, r18
    1eb8:	83 9f       	mul	r24, r19
    1eba:	a0 0d       	add	r26, r0
    1ebc:	61 1d       	adc	r22, r1
    1ebe:	22 1f       	adc	r18, r18
    1ec0:	74 9f       	mul	r23, r20
    1ec2:	33 27       	eor	r19, r19
    1ec4:	a0 0d       	add	r26, r0
    1ec6:	61 1d       	adc	r22, r1
    1ec8:	23 1f       	adc	r18, r19
    1eca:	84 9f       	mul	r24, r20
    1ecc:	60 0d       	add	r22, r0
    1ece:	21 1d       	adc	r18, r1
    1ed0:	82 2f       	mov	r24, r18
    1ed2:	76 2f       	mov	r23, r22
    1ed4:	6a 2f       	mov	r22, r26
    1ed6:	11 24       	eor	r1, r1
    1ed8:	9f 57       	subi	r25, 0x7F	; 127
    1eda:	50 40       	sbci	r21, 0x00	; 0
    1edc:	9a f0       	brmi	.+38     	; 0x1f04 <__mulsf3_pse+0x88>
    1ede:	f1 f0       	breq	.+60     	; 0x1f1c <__mulsf3_pse+0xa0>
    1ee0:	88 23       	and	r24, r24
    1ee2:	4a f0       	brmi	.+18     	; 0x1ef6 <__mulsf3_pse+0x7a>
    1ee4:	ee 0f       	add	r30, r30
    1ee6:	ff 1f       	adc	r31, r31
    1ee8:	bb 1f       	adc	r27, r27
    1eea:	66 1f       	adc	r22, r22
    1eec:	77 1f       	adc	r23, r23
    1eee:	88 1f       	adc	r24, r24
    1ef0:	91 50       	subi	r25, 0x01	; 1
    1ef2:	50 40       	sbci	r21, 0x00	; 0
    1ef4:	a9 f7       	brne	.-22     	; 0x1ee0 <__mulsf3_pse+0x64>
    1ef6:	9e 3f       	cpi	r25, 0xFE	; 254
    1ef8:	51 05       	cpc	r21, r1
    1efa:	80 f0       	brcs	.+32     	; 0x1f1c <__mulsf3_pse+0xa0>
    1efc:	0c 94 d7 0e 	jmp	0x1dae	; 0x1dae <__fp_inf>
    1f00:	0c 94 22 0f 	jmp	0x1e44	; 0x1e44 <__fp_szero>
    1f04:	5f 3f       	cpi	r21, 0xFF	; 255
    1f06:	e4 f3       	brlt	.-8      	; 0x1f00 <__mulsf3_pse+0x84>
    1f08:	98 3e       	cpi	r25, 0xE8	; 232
    1f0a:	d4 f3       	brlt	.-12     	; 0x1f00 <__mulsf3_pse+0x84>
    1f0c:	86 95       	lsr	r24
    1f0e:	77 95       	ror	r23
    1f10:	67 95       	ror	r22
    1f12:	b7 95       	ror	r27
    1f14:	f7 95       	ror	r31
    1f16:	e7 95       	ror	r30
    1f18:	9f 5f       	subi	r25, 0xFF	; 255
    1f1a:	c1 f7       	brne	.-16     	; 0x1f0c <__mulsf3_pse+0x90>
    1f1c:	fe 2b       	or	r31, r30
    1f1e:	88 0f       	add	r24, r24
    1f20:	91 1d       	adc	r25, r1
    1f22:	96 95       	lsr	r25
    1f24:	87 95       	ror	r24
    1f26:	97 f9       	bld	r25, 7
    1f28:	08 95       	ret

00001f2a <__mulsi3>:
    1f2a:	db 01       	movw	r26, r22
    1f2c:	8f 93       	push	r24
    1f2e:	9f 93       	push	r25
    1f30:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__muluhisi3>
    1f34:	bf 91       	pop	r27
    1f36:	af 91       	pop	r26
    1f38:	a2 9f       	mul	r26, r18
    1f3a:	80 0d       	add	r24, r0
    1f3c:	91 1d       	adc	r25, r1
    1f3e:	a3 9f       	mul	r26, r19
    1f40:	90 0d       	add	r25, r0
    1f42:	b2 9f       	mul	r27, r18
    1f44:	90 0d       	add	r25, r0
    1f46:	11 24       	eor	r1, r1
    1f48:	08 95       	ret

00001f4a <__udivmodsi4>:
    1f4a:	a1 e2       	ldi	r26, 0x21	; 33
    1f4c:	1a 2e       	mov	r1, r26
    1f4e:	aa 1b       	sub	r26, r26
    1f50:	bb 1b       	sub	r27, r27
    1f52:	fd 01       	movw	r30, r26
    1f54:	0d c0       	rjmp	.+26     	; 0x1f70 <__udivmodsi4_ep>

00001f56 <__udivmodsi4_loop>:
    1f56:	aa 1f       	adc	r26, r26
    1f58:	bb 1f       	adc	r27, r27
    1f5a:	ee 1f       	adc	r30, r30
    1f5c:	ff 1f       	adc	r31, r31
    1f5e:	a2 17       	cp	r26, r18
    1f60:	b3 07       	cpc	r27, r19
    1f62:	e4 07       	cpc	r30, r20
    1f64:	f5 07       	cpc	r31, r21
    1f66:	20 f0       	brcs	.+8      	; 0x1f70 <__udivmodsi4_ep>
    1f68:	a2 1b       	sub	r26, r18
    1f6a:	b3 0b       	sbc	r27, r19
    1f6c:	e4 0b       	sbc	r30, r20
    1f6e:	f5 0b       	sbc	r31, r21

00001f70 <__udivmodsi4_ep>:
    1f70:	66 1f       	adc	r22, r22
    1f72:	77 1f       	adc	r23, r23
    1f74:	88 1f       	adc	r24, r24
    1f76:	99 1f       	adc	r25, r25
    1f78:	1a 94       	dec	r1
    1f7a:	69 f7       	brne	.-38     	; 0x1f56 <__udivmodsi4_loop>
    1f7c:	60 95       	com	r22
    1f7e:	70 95       	com	r23
    1f80:	80 95       	com	r24
    1f82:	90 95       	com	r25
    1f84:	9b 01       	movw	r18, r22
    1f86:	ac 01       	movw	r20, r24
    1f88:	bd 01       	movw	r22, r26
    1f8a:	cf 01       	movw	r24, r30
    1f8c:	08 95       	ret

00001f8e <__muluhisi3>:
    1f8e:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <__umulhisi3>
    1f92:	a5 9f       	mul	r26, r21
    1f94:	90 0d       	add	r25, r0
    1f96:	b4 9f       	mul	r27, r20
    1f98:	90 0d       	add	r25, r0
    1f9a:	a4 9f       	mul	r26, r20
    1f9c:	80 0d       	add	r24, r0
    1f9e:	91 1d       	adc	r25, r1
    1fa0:	11 24       	eor	r1, r1
    1fa2:	08 95       	ret

00001fa4 <__umulhisi3>:
    1fa4:	a2 9f       	mul	r26, r18
    1fa6:	b0 01       	movw	r22, r0
    1fa8:	b3 9f       	mul	r27, r19
    1faa:	c0 01       	movw	r24, r0
    1fac:	a3 9f       	mul	r26, r19
    1fae:	70 0d       	add	r23, r0
    1fb0:	81 1d       	adc	r24, r1
    1fb2:	11 24       	eor	r1, r1
    1fb4:	91 1d       	adc	r25, r1
    1fb6:	b2 9f       	mul	r27, r18
    1fb8:	70 0d       	add	r23, r0
    1fba:	81 1d       	adc	r24, r1
    1fbc:	11 24       	eor	r1, r1
    1fbe:	91 1d       	adc	r25, r1
    1fc0:	08 95       	ret

00001fc2 <atof>:
    1fc2:	66 27       	eor	r22, r22
    1fc4:	77 27       	eor	r23, r23
    1fc6:	0c 94 ee 0f 	jmp	0x1fdc	; 0x1fdc <strtod>

00001fca <strcmp>:
    1fca:	fb 01       	movw	r30, r22
    1fcc:	dc 01       	movw	r26, r24
    1fce:	8d 91       	ld	r24, X+
    1fd0:	01 90       	ld	r0, Z+
    1fd2:	80 19       	sub	r24, r0
    1fd4:	01 10       	cpse	r0, r1
    1fd6:	d9 f3       	breq	.-10     	; 0x1fce <strcmp+0x4>
    1fd8:	99 0b       	sbc	r25, r25
    1fda:	08 95       	ret

00001fdc <strtod>:
    1fdc:	a0 e0       	ldi	r26, 0x00	; 0
    1fde:	b0 e0       	ldi	r27, 0x00	; 0
    1fe0:	e4 ef       	ldi	r30, 0xF4	; 244
    1fe2:	ff e0       	ldi	r31, 0x0F	; 15
    1fe4:	0c 94 66 11 	jmp	0x22cc	; 0x22cc <__prologue_saves__+0xc>
    1fe8:	ec 01       	movw	r28, r24
    1fea:	6b 01       	movw	r12, r22
    1fec:	61 15       	cp	r22, r1
    1fee:	71 05       	cpc	r23, r1
    1ff0:	19 f0       	breq	.+6      	; 0x1ff8 <strtod+0x1c>
    1ff2:	fb 01       	movw	r30, r22
    1ff4:	91 83       	std	Z+1, r25	; 0x01
    1ff6:	80 83       	st	Z, r24
    1ff8:	7e 01       	movw	r14, r28
    1ffa:	ff ef       	ldi	r31, 0xFF	; 255
    1ffc:	ef 1a       	sub	r14, r31
    1ffe:	ff 0a       	sbc	r15, r31
    2000:	08 81       	ld	r16, Y
    2002:	80 2f       	mov	r24, r16
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	0e 94 3c 11 	call	0x2278	; 0x2278 <isspace>
    200a:	89 2b       	or	r24, r25
    200c:	11 f0       	breq	.+4      	; 0x2012 <strtod+0x36>
    200e:	e7 01       	movw	r28, r14
    2010:	f3 cf       	rjmp	.-26     	; 0x1ff8 <strtod+0x1c>
    2012:	0d 32       	cpi	r16, 0x2D	; 45
    2014:	39 f4       	brne	.+14     	; 0x2024 <strtod+0x48>
    2016:	7e 01       	movw	r14, r28
    2018:	82 e0       	ldi	r24, 0x02	; 2
    201a:	e8 0e       	add	r14, r24
    201c:	f1 1c       	adc	r15, r1
    201e:	09 81       	ldd	r16, Y+1	; 0x01
    2020:	11 e0       	ldi	r17, 0x01	; 1
    2022:	08 c0       	rjmp	.+16     	; 0x2034 <strtod+0x58>
    2024:	0b 32       	cpi	r16, 0x2B	; 43
    2026:	29 f4       	brne	.+10     	; 0x2032 <strtod+0x56>
    2028:	7e 01       	movw	r14, r28
    202a:	92 e0       	ldi	r25, 0x02	; 2
    202c:	e9 0e       	add	r14, r25
    202e:	f1 1c       	adc	r15, r1
    2030:	09 81       	ldd	r16, Y+1	; 0x01
    2032:	10 e0       	ldi	r17, 0x00	; 0
    2034:	e7 01       	movw	r28, r14
    2036:	21 97       	sbiw	r28, 0x01	; 1
    2038:	43 e0       	ldi	r20, 0x03	; 3
    203a:	50 e0       	ldi	r21, 0x00	; 0
    203c:	6c e5       	ldi	r22, 0x5C	; 92
    203e:	70 e0       	ldi	r23, 0x00	; 0
    2040:	ce 01       	movw	r24, r28
    2042:	0e 94 45 11 	call	0x228a	; 0x228a <strncasecmp_P>
    2046:	89 2b       	or	r24, r25
    2048:	c1 f4       	brne	.+48     	; 0x207a <strtod+0x9e>
    204a:	23 96       	adiw	r28, 0x03	; 3
    204c:	45 e0       	ldi	r20, 0x05	; 5
    204e:	50 e0       	ldi	r21, 0x00	; 0
    2050:	67 e5       	ldi	r22, 0x57	; 87
    2052:	70 e0       	ldi	r23, 0x00	; 0
    2054:	ce 01       	movw	r24, r28
    2056:	0e 94 45 11 	call	0x228a	; 0x228a <strncasecmp_P>
    205a:	89 2b       	or	r24, r25
    205c:	09 f4       	brne	.+2      	; 0x2060 <strtod+0x84>
    205e:	25 96       	adiw	r28, 0x05	; 5
    2060:	c1 14       	cp	r12, r1
    2062:	d1 04       	cpc	r13, r1
    2064:	19 f0       	breq	.+6      	; 0x206c <strtod+0x90>
    2066:	f6 01       	movw	r30, r12
    2068:	d1 83       	std	Z+1, r29	; 0x01
    206a:	c0 83       	st	Z, r28
    206c:	11 11       	cpse	r17, r1
    206e:	f6 c0       	rjmp	.+492    	; 0x225c <strtod+0x280>
    2070:	60 e0       	ldi	r22, 0x00	; 0
    2072:	70 e0       	ldi	r23, 0x00	; 0
    2074:	80 e8       	ldi	r24, 0x80	; 128
    2076:	9f e7       	ldi	r25, 0x7F	; 127
    2078:	fa c0       	rjmp	.+500    	; 0x226e <strtod+0x292>
    207a:	43 e0       	ldi	r20, 0x03	; 3
    207c:	50 e0       	ldi	r21, 0x00	; 0
    207e:	64 e5       	ldi	r22, 0x54	; 84
    2080:	70 e0       	ldi	r23, 0x00	; 0
    2082:	ce 01       	movw	r24, r28
    2084:	0e 94 45 11 	call	0x228a	; 0x228a <strncasecmp_P>
    2088:	89 2b       	or	r24, r25
    208a:	59 f4       	brne	.+22     	; 0x20a2 <strtod+0xc6>
    208c:	c1 14       	cp	r12, r1
    208e:	d1 04       	cpc	r13, r1
    2090:	09 f4       	brne	.+2      	; 0x2094 <strtod+0xb8>
    2092:	e9 c0       	rjmp	.+466    	; 0x2266 <strtod+0x28a>
    2094:	f2 e0       	ldi	r31, 0x02	; 2
    2096:	ef 0e       	add	r14, r31
    2098:	f1 1c       	adc	r15, r1
    209a:	f6 01       	movw	r30, r12
    209c:	f1 82       	std	Z+1, r15	; 0x01
    209e:	e0 82       	st	Z, r14
    20a0:	e2 c0       	rjmp	.+452    	; 0x2266 <strtod+0x28a>
    20a2:	20 e0       	ldi	r18, 0x00	; 0
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	a9 01       	movw	r20, r18
    20a8:	c0 e0       	ldi	r28, 0x00	; 0
    20aa:	d0 e0       	ldi	r29, 0x00	; 0
    20ac:	f7 01       	movw	r30, r14
    20ae:	80 ed       	ldi	r24, 0xD0	; 208
    20b0:	a8 2e       	mov	r10, r24
    20b2:	a0 0e       	add	r10, r16
    20b4:	89 e0       	ldi	r24, 0x09	; 9
    20b6:	8a 15       	cp	r24, r10
    20b8:	30 f1       	brcs	.+76     	; 0x2106 <strtod+0x12a>
    20ba:	91 2f       	mov	r25, r17
    20bc:	92 60       	ori	r25, 0x02	; 2
    20be:	b9 2e       	mov	r11, r25
    20c0:	81 2f       	mov	r24, r17
    20c2:	88 70       	andi	r24, 0x08	; 8
    20c4:	12 ff       	sbrs	r17, 2
    20c6:	04 c0       	rjmp	.+8      	; 0x20d0 <strtod+0xf4>
    20c8:	81 11       	cpse	r24, r1
    20ca:	24 c0       	rjmp	.+72     	; 0x2114 <strtod+0x138>
    20cc:	21 96       	adiw	r28, 0x01	; 1
    20ce:	22 c0       	rjmp	.+68     	; 0x2114 <strtod+0x138>
    20d0:	81 11       	cpse	r24, r1
    20d2:	21 97       	sbiw	r28, 0x01	; 1
    20d4:	a5 e0       	ldi	r26, 0x05	; 5
    20d6:	b0 e0       	ldi	r27, 0x00	; 0
    20d8:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__muluhisi3>
    20dc:	dc 01       	movw	r26, r24
    20de:	cb 01       	movw	r24, r22
    20e0:	88 0f       	add	r24, r24
    20e2:	99 1f       	adc	r25, r25
    20e4:	aa 1f       	adc	r26, r26
    20e6:	bb 1f       	adc	r27, r27
    20e8:	9c 01       	movw	r18, r24
    20ea:	ad 01       	movw	r20, r26
    20ec:	2a 0d       	add	r18, r10
    20ee:	31 1d       	adc	r19, r1
    20f0:	41 1d       	adc	r20, r1
    20f2:	51 1d       	adc	r21, r1
    20f4:	28 39       	cpi	r18, 0x98	; 152
    20f6:	89 e9       	ldi	r24, 0x99	; 153
    20f8:	38 07       	cpc	r19, r24
    20fa:	48 07       	cpc	r20, r24
    20fc:	89 e1       	ldi	r24, 0x19	; 25
    20fe:	58 07       	cpc	r21, r24
    2100:	48 f0       	brcs	.+18     	; 0x2114 <strtod+0x138>
    2102:	16 60       	ori	r17, 0x06	; 6
    2104:	06 c0       	rjmp	.+12     	; 0x2112 <strtod+0x136>
    2106:	9e ef       	ldi	r25, 0xFE	; 254
    2108:	a9 12       	cpse	r10, r25
    210a:	0a c0       	rjmp	.+20     	; 0x2120 <strtod+0x144>
    210c:	13 fd       	sbrc	r17, 3
    210e:	40 c0       	rjmp	.+128    	; 0x2190 <strtod+0x1b4>
    2110:	18 60       	ori	r17, 0x08	; 8
    2112:	b1 2e       	mov	r11, r17
    2114:	8f ef       	ldi	r24, 0xFF	; 255
    2116:	e8 1a       	sub	r14, r24
    2118:	f8 0a       	sbc	r15, r24
    211a:	00 81       	ld	r16, Z
    211c:	1b 2d       	mov	r17, r11
    211e:	c6 cf       	rjmp	.-116    	; 0x20ac <strtod+0xd0>
    2120:	80 2f       	mov	r24, r16
    2122:	8f 7d       	andi	r24, 0xDF	; 223
    2124:	85 34       	cpi	r24, 0x45	; 69
    2126:	a1 f5       	brne	.+104    	; 0x2190 <strtod+0x1b4>
    2128:	80 81       	ld	r24, Z
    212a:	8d 32       	cpi	r24, 0x2D	; 45
    212c:	11 f4       	brne	.+4      	; 0x2132 <strtod+0x156>
    212e:	10 61       	ori	r17, 0x10	; 16
    2130:	06 c0       	rjmp	.+12     	; 0x213e <strtod+0x162>
    2132:	8b 32       	cpi	r24, 0x2B	; 43
    2134:	21 f0       	breq	.+8      	; 0x213e <strtod+0x162>
    2136:	31 96       	adiw	r30, 0x01	; 1
    2138:	61 e0       	ldi	r22, 0x01	; 1
    213a:	70 e0       	ldi	r23, 0x00	; 0
    213c:	04 c0       	rjmp	.+8      	; 0x2146 <strtod+0x16a>
    213e:	81 81       	ldd	r24, Z+1	; 0x01
    2140:	32 96       	adiw	r30, 0x02	; 2
    2142:	62 e0       	ldi	r22, 0x02	; 2
    2144:	70 e0       	ldi	r23, 0x00	; 0
    2146:	80 53       	subi	r24, 0x30	; 48
    2148:	8a 30       	cpi	r24, 0x0A	; 10
    214a:	18 f0       	brcs	.+6      	; 0x2152 <strtod+0x176>
    214c:	e6 1b       	sub	r30, r22
    214e:	f7 0b       	sbc	r31, r23
    2150:	1f c0       	rjmp	.+62     	; 0x2190 <strtod+0x1b4>
    2152:	60 e0       	ldi	r22, 0x00	; 0
    2154:	70 e0       	ldi	r23, 0x00	; 0
    2156:	60 38       	cpi	r22, 0x80	; 128
    2158:	9c e0       	ldi	r25, 0x0C	; 12
    215a:	79 07       	cpc	r23, r25
    215c:	5c f4       	brge	.+22     	; 0x2174 <strtod+0x198>
    215e:	db 01       	movw	r26, r22
    2160:	aa 0f       	add	r26, r26
    2162:	bb 1f       	adc	r27, r27
    2164:	aa 0f       	add	r26, r26
    2166:	bb 1f       	adc	r27, r27
    2168:	6a 0f       	add	r22, r26
    216a:	7b 1f       	adc	r23, r27
    216c:	66 0f       	add	r22, r22
    216e:	77 1f       	adc	r23, r23
    2170:	68 0f       	add	r22, r24
    2172:	71 1d       	adc	r23, r1
    2174:	31 96       	adiw	r30, 0x01	; 1
    2176:	df 01       	movw	r26, r30
    2178:	11 97       	sbiw	r26, 0x01	; 1
    217a:	8c 91       	ld	r24, X
    217c:	80 53       	subi	r24, 0x30	; 48
    217e:	8a 30       	cpi	r24, 0x0A	; 10
    2180:	50 f3       	brcs	.-44     	; 0x2156 <strtod+0x17a>
    2182:	14 ff       	sbrs	r17, 4
    2184:	03 c0       	rjmp	.+6      	; 0x218c <strtod+0x1b0>
    2186:	71 95       	neg	r23
    2188:	61 95       	neg	r22
    218a:	71 09       	sbc	r23, r1
    218c:	c6 0f       	add	r28, r22
    218e:	d7 1f       	adc	r29, r23
    2190:	11 ff       	sbrs	r17, 1
    2192:	08 c0       	rjmp	.+16     	; 0x21a4 <strtod+0x1c8>
    2194:	c1 14       	cp	r12, r1
    2196:	d1 04       	cpc	r13, r1
    2198:	29 f0       	breq	.+10     	; 0x21a4 <strtod+0x1c8>
    219a:	cf 01       	movw	r24, r30
    219c:	01 97       	sbiw	r24, 0x01	; 1
    219e:	f6 01       	movw	r30, r12
    21a0:	91 83       	std	Z+1, r25	; 0x01
    21a2:	80 83       	st	Z, r24
    21a4:	ca 01       	movw	r24, r20
    21a6:	b9 01       	movw	r22, r18
    21a8:	0e 94 76 0e 	call	0x1cec	; 0x1cec <__floatunsisf>
    21ac:	21 2f       	mov	r18, r17
    21ae:	23 70       	andi	r18, 0x03	; 3
    21b0:	23 30       	cpi	r18, 0x03	; 3
    21b2:	19 f0       	breq	.+6      	; 0x21ba <strtod+0x1de>
    21b4:	4b 01       	movw	r8, r22
    21b6:	5c 01       	movw	r10, r24
    21b8:	06 c0       	rjmp	.+12     	; 0x21c6 <strtod+0x1ea>
    21ba:	4b 01       	movw	r8, r22
    21bc:	5c 01       	movw	r10, r24
    21be:	b7 fa       	bst	r11, 7
    21c0:	b0 94       	com	r11
    21c2:	b7 f8       	bld	r11, 7
    21c4:	b0 94       	com	r11
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	a9 01       	movw	r20, r18
    21cc:	c5 01       	movw	r24, r10
    21ce:	b4 01       	movw	r22, r8
    21d0:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <__cmpsf2>
    21d4:	88 23       	and	r24, r24
    21d6:	09 f4       	brne	.+2      	; 0x21da <strtod+0x1fe>
    21d8:	3e c0       	rjmp	.+124    	; 0x2256 <strtod+0x27a>
    21da:	d7 ff       	sbrs	r29, 7
    21dc:	06 c0       	rjmp	.+12     	; 0x21ea <strtod+0x20e>
    21de:	d1 95       	neg	r29
    21e0:	c1 95       	neg	r28
    21e2:	d1 09       	sbc	r29, r1
    21e4:	03 e7       	ldi	r16, 0x73	; 115
    21e6:	10 e0       	ldi	r17, 0x00	; 0
    21e8:	02 c0       	rjmp	.+4      	; 0x21ee <strtod+0x212>
    21ea:	0b e8       	ldi	r16, 0x8B	; 139
    21ec:	10 e0       	ldi	r17, 0x00	; 0
    21ee:	68 01       	movw	r12, r16
    21f0:	f8 e1       	ldi	r31, 0x18	; 24
    21f2:	cf 1a       	sub	r12, r31
    21f4:	d1 08       	sbc	r13, r1
    21f6:	90 e2       	ldi	r25, 0x20	; 32
    21f8:	e9 2e       	mov	r14, r25
    21fa:	f1 2c       	mov	r15, r1
    21fc:	ce 15       	cp	r28, r14
    21fe:	df 05       	cpc	r29, r15
    2200:	74 f0       	brlt	.+28     	; 0x221e <strtod+0x242>
    2202:	f8 01       	movw	r30, r16
    2204:	25 91       	lpm	r18, Z+
    2206:	35 91       	lpm	r19, Z+
    2208:	45 91       	lpm	r20, Z+
    220a:	54 91       	lpm	r21, Z
    220c:	c5 01       	movw	r24, r10
    220e:	b4 01       	movw	r22, r8
    2210:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__mulsf3>
    2214:	4b 01       	movw	r8, r22
    2216:	5c 01       	movw	r10, r24
    2218:	ce 19       	sub	r28, r14
    221a:	df 09       	sbc	r29, r15
    221c:	ef cf       	rjmp	.-34     	; 0x21fc <strtod+0x220>
    221e:	04 50       	subi	r16, 0x04	; 4
    2220:	11 09       	sbc	r17, r1
    2222:	f5 94       	asr	r15
    2224:	e7 94       	ror	r14
    2226:	0c 15       	cp	r16, r12
    2228:	1d 05       	cpc	r17, r13
    222a:	41 f7       	brne	.-48     	; 0x21fc <strtod+0x220>
    222c:	8a 2d       	mov	r24, r10
    222e:	88 0f       	add	r24, r24
    2230:	8b 2d       	mov	r24, r11
    2232:	88 1f       	adc	r24, r24
    2234:	8f 3f       	cpi	r24, 0xFF	; 255
    2236:	49 f0       	breq	.+18     	; 0x224a <strtod+0x26e>
    2238:	20 e0       	ldi	r18, 0x00	; 0
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	a9 01       	movw	r20, r18
    223e:	c5 01       	movw	r24, r10
    2240:	b4 01       	movw	r22, r8
    2242:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <__cmpsf2>
    2246:	81 11       	cpse	r24, r1
    2248:	06 c0       	rjmp	.+12     	; 0x2256 <strtod+0x27a>
    224a:	82 e2       	ldi	r24, 0x22	; 34
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	90 93 f2 02 	sts	0x02F2, r25	; 0x8002f2 <errno+0x1>
    2252:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <errno>
    2256:	c5 01       	movw	r24, r10
    2258:	b4 01       	movw	r22, r8
    225a:	09 c0       	rjmp	.+18     	; 0x226e <strtod+0x292>
    225c:	60 e0       	ldi	r22, 0x00	; 0
    225e:	70 e0       	ldi	r23, 0x00	; 0
    2260:	80 e8       	ldi	r24, 0x80	; 128
    2262:	9f ef       	ldi	r25, 0xFF	; 255
    2264:	04 c0       	rjmp	.+8      	; 0x226e <strtod+0x292>
    2266:	60 e0       	ldi	r22, 0x00	; 0
    2268:	70 e0       	ldi	r23, 0x00	; 0
    226a:	80 ec       	ldi	r24, 0xC0	; 192
    226c:	9f e7       	ldi	r25, 0x7F	; 127
    226e:	cd b7       	in	r28, 0x3d	; 61
    2270:	de b7       	in	r29, 0x3e	; 62
    2272:	ec e0       	ldi	r30, 0x0C	; 12
    2274:	0c 94 82 11 	jmp	0x2304	; 0x2304 <__epilogue_restores__+0xc>

00002278 <isspace>:
    2278:	91 11       	cpse	r25, r1
    227a:	0c 94 5d 11 	jmp	0x22ba	; 0x22ba <__ctype_isfalse>
    227e:	80 32       	cpi	r24, 0x20	; 32
    2280:	19 f0       	breq	.+6      	; 0x2288 <isspace+0x10>
    2282:	89 50       	subi	r24, 0x09	; 9
    2284:	85 50       	subi	r24, 0x05	; 5
    2286:	c8 f7       	brcc	.-14     	; 0x227a <isspace+0x2>
    2288:	08 95       	ret

0000228a <strncasecmp_P>:
    228a:	fb 01       	movw	r30, r22
    228c:	dc 01       	movw	r26, r24
    228e:	41 50       	subi	r20, 0x01	; 1
    2290:	50 40       	sbci	r21, 0x00	; 0
    2292:	88 f0       	brcs	.+34     	; 0x22b6 <strncasecmp_P+0x2c>
    2294:	8d 91       	ld	r24, X+
    2296:	81 34       	cpi	r24, 0x41	; 65
    2298:	1c f0       	brlt	.+6      	; 0x22a0 <strncasecmp_P+0x16>
    229a:	8b 35       	cpi	r24, 0x5B	; 91
    229c:	0c f4       	brge	.+2      	; 0x22a0 <strncasecmp_P+0x16>
    229e:	80 5e       	subi	r24, 0xE0	; 224
    22a0:	65 91       	lpm	r22, Z+
    22a2:	61 34       	cpi	r22, 0x41	; 65
    22a4:	1c f0       	brlt	.+6      	; 0x22ac <strncasecmp_P+0x22>
    22a6:	6b 35       	cpi	r22, 0x5B	; 91
    22a8:	0c f4       	brge	.+2      	; 0x22ac <strncasecmp_P+0x22>
    22aa:	60 5e       	subi	r22, 0xE0	; 224
    22ac:	86 1b       	sub	r24, r22
    22ae:	61 11       	cpse	r22, r1
    22b0:	71 f3       	breq	.-36     	; 0x228e <strncasecmp_P+0x4>
    22b2:	99 0b       	sbc	r25, r25
    22b4:	08 95       	ret
    22b6:	88 1b       	sub	r24, r24
    22b8:	fc cf       	rjmp	.-8      	; 0x22b2 <strncasecmp_P+0x28>

000022ba <__ctype_isfalse>:
    22ba:	99 27       	eor	r25, r25
    22bc:	88 27       	eor	r24, r24

000022be <__ctype_istrue>:
    22be:	08 95       	ret

000022c0 <__prologue_saves__>:
    22c0:	2f 92       	push	r2
    22c2:	3f 92       	push	r3
    22c4:	4f 92       	push	r4
    22c6:	5f 92       	push	r5
    22c8:	6f 92       	push	r6
    22ca:	7f 92       	push	r7
    22cc:	8f 92       	push	r8
    22ce:	9f 92       	push	r9
    22d0:	af 92       	push	r10
    22d2:	bf 92       	push	r11
    22d4:	cf 92       	push	r12
    22d6:	df 92       	push	r13
    22d8:	ef 92       	push	r14
    22da:	ff 92       	push	r15
    22dc:	0f 93       	push	r16
    22de:	1f 93       	push	r17
    22e0:	cf 93       	push	r28
    22e2:	df 93       	push	r29
    22e4:	cd b7       	in	r28, 0x3d	; 61
    22e6:	de b7       	in	r29, 0x3e	; 62
    22e8:	ca 1b       	sub	r28, r26
    22ea:	db 0b       	sbc	r29, r27
    22ec:	0f b6       	in	r0, 0x3f	; 63
    22ee:	f8 94       	cli
    22f0:	de bf       	out	0x3e, r29	; 62
    22f2:	0f be       	out	0x3f, r0	; 63
    22f4:	cd bf       	out	0x3d, r28	; 61
    22f6:	09 94       	ijmp

000022f8 <__epilogue_restores__>:
    22f8:	2a 88       	ldd	r2, Y+18	; 0x12
    22fa:	39 88       	ldd	r3, Y+17	; 0x11
    22fc:	48 88       	ldd	r4, Y+16	; 0x10
    22fe:	5f 84       	ldd	r5, Y+15	; 0x0f
    2300:	6e 84       	ldd	r6, Y+14	; 0x0e
    2302:	7d 84       	ldd	r7, Y+13	; 0x0d
    2304:	8c 84       	ldd	r8, Y+12	; 0x0c
    2306:	9b 84       	ldd	r9, Y+11	; 0x0b
    2308:	aa 84       	ldd	r10, Y+10	; 0x0a
    230a:	b9 84       	ldd	r11, Y+9	; 0x09
    230c:	c8 84       	ldd	r12, Y+8	; 0x08
    230e:	df 80       	ldd	r13, Y+7	; 0x07
    2310:	ee 80       	ldd	r14, Y+6	; 0x06
    2312:	fd 80       	ldd	r15, Y+5	; 0x05
    2314:	0c 81       	ldd	r16, Y+4	; 0x04
    2316:	1b 81       	ldd	r17, Y+3	; 0x03
    2318:	aa 81       	ldd	r26, Y+2	; 0x02
    231a:	b9 81       	ldd	r27, Y+1	; 0x01
    231c:	ce 0f       	add	r28, r30
    231e:	d1 1d       	adc	r29, r1
    2320:	0f b6       	in	r0, 0x3f	; 63
    2322:	f8 94       	cli
    2324:	de bf       	out	0x3e, r29	; 62
    2326:	0f be       	out	0x3f, r0	; 63
    2328:	cd bf       	out	0x3d, r28	; 61
    232a:	ed 01       	movw	r28, r26
    232c:	08 95       	ret

0000232e <_exit>:
    232e:	f8 94       	cli

00002330 <__stop_program>:
    2330:	ff cf       	rjmp	.-2      	; 0x2330 <__stop_program>
