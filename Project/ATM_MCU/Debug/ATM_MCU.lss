
ATM_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000162a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000098  00800060  0000162a  000016be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006d  008000f8  008000f8  00001756  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001756  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001788  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000498  00000000  00000000  000017c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005572  00000000  00000000  00001c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a05  00000000  00000000  000071ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002b48  00000000  00000000  00008bd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ba0  00000000  00000000  0000b71c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000186f  00000000  00000000  0000c2bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002eaf  00000000  00000000  0000db2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000380  00000000  00000000  000109da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 13 07 	jmp	0xe26	; 0xe26 <__vector_1>
       8:	0c 94 3c 07 	jmp	0xe78	; 0xe78 <__vector_2>
       c:	0c 94 65 07 	jmp	0xeca	; 0xeca <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 68 08 	jmp	0x10d0	; 0x10d0 <__vector_11>
      30:	0c 94 cc 07 	jmp	0xf98	; 0xf98 <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e2       	ldi	r30, 0x2A	; 42
      68:	f6 e1       	ldi	r31, 0x16	; 22
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 3f       	cpi	r26, 0xF8	; 248
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a8 ef       	ldi	r26, 0xF8	; 248
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 36       	cpi	r26, 0x65	; 101
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c4 05 	call	0xb88	; 0xb88 <main>
      8a:	0c 94 13 0b 	jmp	0x1626	; 0x1626 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TriggerCallBack>:
************************************************************************************************************/


void TriggerCallBack(void)
{
	TriggerState = TRIGGER;
      92:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
      96:	08 95       	ret

00000098 <timer_ovfCount>:
 * RETURN			: void
 */

void timer_ovfCount(void)
{
	global_u8OVFCounter++;
      98:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <global_u8OVFCounter>
      9c:	8f 5f       	subi	r24, 0xFF	; 255
      9e:	80 93 f9 00 	sts	0x00F9, r24	; 0x8000f9 <global_u8OVFCounter>
      a2:	08 95       	ret

000000a4 <APP_Init>:
}
void APP_Init(void)
{
	
	//(void)HButton_Init(DIO_PINB_2);
	(void)KEYPAD_init();
      a4:	0e 94 18 03 	call	0x630	; 0x630 <KEYPAD_init>
	(void)HTimer_enInit();
      a8:	0e 94 8c 02 	call	0x518	; 0x518 <HTimer_enInit>
	(void)HTimer_enCBF(timer_ovfCount);
      ac:	8c e4       	ldi	r24, 0x4C	; 76
      ae:	90 e0       	ldi	r25, 0x00	; 0
      b0:	0e 94 96 02 	call	0x52c	; 0x52c <HTimer_enCBF>
	(void)HLCD_vidInit();
      b4:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <HLCD_vidInit>
	(void)HSPI_MasterInit();
      b8:	0e 94 7d 01 	call	0x2fa	; 0x2fa <HSPI_MasterInit>
	(void)H_EXTINT_create(EXTINT0, ANY_LOGICAL_CHANGE,TriggerCallBack);
      bc:	49 e4       	ldi	r20, 0x49	; 73
      be:	50 e0       	ldi	r21, 0x00	; 0
      c0:	63 e0       	ldi	r22, 0x03	; 3
      c2:	80 e0       	ldi	r24, 0x00	; 0
      c4:	0e 94 9e 02 	call	0x53c	; 0x53c <H_EXTINT_create>
	(void)SwICU_Init();
      c8:	0e 94 c2 02 	call	0x584	; 0x584 <SwICU_Init>
      cc:	08 95       	ret

000000ce <APP_Start>:


void APP_Start(void)
{
			
	switch(TriggerState)
      ce:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
      d2:	88 23       	and	r24, r24
      d4:	19 f0       	breq	.+6      	; 0xdc <APP_Start+0xe>
      d6:	81 30       	cpi	r24, 0x01	; 1
      d8:	51 f0       	breq	.+20     	; 0xee <APP_Start+0x20>
      da:	08 95       	ret
	{
		case TRIGGER:
		{
			Get_pin(ATMpin);
      dc:	8a ef       	ldi	r24, 0xFA	; 250
      de:	90 e0       	ldi	r25, 0x00	; 0
      e0:	0e 94 9d 00 	call	0x13a	; 0x13a <Get_pin>
			welcomeFlag = 0;
      e4:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <__data_end>
			//PIN_checkPinMatching(ATMpin, CARDpin);
			if(ATM_ValidatePIN() == PIN_MATCHED)
      e8:	0e 94 30 01 	call	0x260	; 0x260 <ATM_ValidatePIN>
      ec:	08 95       	ret
			//TriggerState = N_TRIGGER;
			break;
		}
		case N_TRIGGER:
		{
			if(welcomeFlag == 0)
      ee:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <__data_end>
      f2:	81 11       	cpse	r24, r1
      f4:	05 c0       	rjmp	.+10     	; 0x100 <APP_Start+0x32>
			{
				Welcome();
      f6:	0e 94 81 00 	call	0x102	; 0x102 <Welcome>
				welcomeFlag = 1;
      fa:	81 e0       	ldi	r24, 0x01	; 1
      fc:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <__data_end>
     100:	08 95       	ret

00000102 <Welcome>:
Uchar8_t arr_g_CardPIN[5];
Uchar8_t arr_g_CardPAN[20];

void Card_Trigger(void)
{
	u8_g_ReceivePIN = 1;
     102:	0e 94 85 05 	call	0xb0a	; 0xb0a <HLCD_ClrDisplay>
     106:	60 e0       	ldi	r22, 0x00	; 0
     108:	80 e0       	ldi	r24, 0x00	; 0
     10a:	0e 94 98 05 	call	0xb30	; 0xb30 <HLCD_gotoXY>
     10e:	86 e8       	ldi	r24, 0x86	; 134
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	0e 94 ac 05 	call	0xb58	; 0xb58 <HLCD_WriteString>
     116:	42 e0       	ldi	r20, 0x02	; 2
     118:	61 e0       	ldi	r22, 0x01	; 1
     11a:	70 e0       	ldi	r23, 0x00	; 0
     11c:	80 e0       	ldi	r24, 0x00	; 0
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	0e 94 e6 01 	call	0x3cc	; 0x3cc <HTIM0_SyncDelay>
     124:	0e 94 85 05 	call	0xb0a	; 0xb0a <HLCD_ClrDisplay>
     128:	60 e0       	ldi	r22, 0x00	; 0
     12a:	80 e0       	ldi	r24, 0x00	; 0
     12c:	0e 94 98 05 	call	0xb30	; 0xb30 <HLCD_gotoXY>
     130:	85 e9       	ldi	r24, 0x95	; 149
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	0e 94 ac 05 	call	0xb58	; 0xb58 <HLCD_WriteString>
     138:	08 95       	ret

0000013a <Get_pin>:
     13a:	0f 93       	push	r16
     13c:	1f 93       	push	r17
     13e:	cf 93       	push	r28
     140:	8c 01       	movw	r16, r24
     142:	0e 94 85 05 	call	0xb0a	; 0xb0a <HLCD_ClrDisplay>
     146:	60 e0       	ldi	r22, 0x00	; 0
     148:	80 e0       	ldi	r24, 0x00	; 0
     14a:	0e 94 98 05 	call	0xb30	; 0xb30 <HLCD_gotoXY>
     14e:	86 ea       	ldi	r24, 0xA6	; 166
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	0e 94 ac 05 	call	0xb58	; 0xb58 <HLCD_WriteString>
     156:	60 e0       	ldi	r22, 0x00	; 0
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	0e 94 98 05 	call	0xb30	; 0xb30 <HLCD_gotoXY>
     15e:	c0 e0       	ldi	r28, 0x00	; 0
     160:	2c c0       	rjmp	.+88     	; 0x1ba <Get_pin+0x80>
     162:	0e 94 63 04 	call	0x8c6	; 0x8c6 <KEYPAD_GetButton>
     166:	81 11       	cpse	r24, r1
     168:	0f c0       	rjmp	.+30     	; 0x188 <Get_pin+0x4e>
     16a:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <ZeroCheck>
     16e:	81 30       	cpi	r24, 0x01	; 1
     170:	21 f5       	brne	.+72     	; 0x1ba <Get_pin+0x80>
     172:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <ZeroCheck>
     176:	f8 01       	movw	r30, r16
     178:	ec 0f       	add	r30, r28
     17a:	f1 1d       	adc	r31, r1
     17c:	80 e3       	ldi	r24, 0x30	; 48
     17e:	80 83       	st	Z, r24
     180:	0e 94 21 05 	call	0xa42	; 0xa42 <HLCD_vidWriteChar>
     184:	cf 5f       	subi	r28, 0xFF	; 255
     186:	19 c0       	rjmp	.+50     	; 0x1ba <Get_pin+0x80>
     188:	88 23       	and	r24, r24
     18a:	b9 f0       	breq	.+46     	; 0x1ba <Get_pin+0x80>
     18c:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <EnterCheck>
     190:	91 11       	cpse	r25, r1
     192:	11 c0       	rjmp	.+34     	; 0x1b6 <Get_pin+0x7c>
     194:	20 91 61 01 	lds	r18, 0x0161	; 0x800161 <ZeroCheck>
     198:	21 11       	cpse	r18, r1
     19a:	0d c0       	rjmp	.+26     	; 0x1b6 <Get_pin+0x7c>
     19c:	d8 01       	movw	r26, r16
     19e:	ac 0f       	add	r26, r28
     1a0:	b1 1d       	adc	r27, r1
     1a2:	e8 2f       	mov	r30, r24
     1a4:	f0 e0       	ldi	r31, 0x00	; 0
     1a6:	e0 5a       	subi	r30, 0xA0	; 160
     1a8:	ff 4f       	sbci	r31, 0xFF	; 255
     1aa:	80 81       	ld	r24, Z
     1ac:	8c 93       	st	X, r24
     1ae:	0e 94 21 05 	call	0xa42	; 0xa42 <HLCD_vidWriteChar>
     1b2:	cf 5f       	subi	r28, 0xFF	; 255
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <Get_pin+0x80>
     1b6:	91 30       	cpi	r25, 0x01	; 1
     1b8:	31 f0       	breq	.+12     	; 0x1c6 <Get_pin+0x8c>
     1ba:	c4 30       	cpi	r28, 0x04	; 4
     1bc:	20 f4       	brcc	.+8      	; 0x1c6 <Get_pin+0x8c>
     1be:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <EnterCheck>
     1c2:	88 23       	and	r24, r24
     1c4:	71 f2       	breq	.-100    	; 0x162 <Get_pin+0x28>
     1c6:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <EnterCheck>
     1ca:	c4 30       	cpi	r28, 0x04	; 4
     1cc:	a8 f4       	brcc	.+42     	; 0x1f8 <Get_pin+0xbe>
     1ce:	0e 94 85 05 	call	0xb0a	; 0xb0a <HLCD_ClrDisplay>
     1d2:	60 e0       	ldi	r22, 0x00	; 0
     1d4:	81 e0       	ldi	r24, 0x01	; 1
     1d6:	0e 94 98 05 	call	0xb30	; 0xb30 <HLCD_gotoXY>
     1da:	85 eb       	ldi	r24, 0xB5	; 181
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	0e 94 ac 05 	call	0xb58	; 0xb58 <HLCD_WriteString>
     1e2:	2f e3       	ldi	r18, 0x3F	; 63
     1e4:	8d e0       	ldi	r24, 0x0D	; 13
     1e6:	93 e0       	ldi	r25, 0x03	; 3
     1e8:	21 50       	subi	r18, 0x01	; 1
     1ea:	80 40       	sbci	r24, 0x00	; 0
     1ec:	90 40       	sbci	r25, 0x00	; 0
     1ee:	e1 f7       	brne	.-8      	; 0x1e8 <Get_pin+0xae>
     1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <Get_pin+0xb8>
     1f2:	00 00       	nop
     1f4:	84 e0       	ldi	r24, 0x04	; 4
     1f6:	01 c0       	rjmp	.+2      	; 0x1fa <Get_pin+0xc0>
     1f8:	83 e0       	ldi	r24, 0x03	; 3
     1fa:	cf 91       	pop	r28
     1fc:	1f 91       	pop	r17
     1fe:	0f 91       	pop	r16
     200:	08 95       	ret

00000202 <PIN_checkPinMatching>:
     202:	00 97       	sbiw	r24, 0x00	; 0
     204:	49 f1       	breq	.+82     	; 0x258 <PIN_checkPinMatching+0x56>
     206:	61 15       	cp	r22, r1
     208:	71 05       	cpc	r23, r1
     20a:	41 f1       	breq	.+80     	; 0x25c <PIN_checkPinMatching+0x5a>
     20c:	0e 94 0a 0b 	call	0x1614	; 0x1614 <strcmp>
     210:	89 2b       	or	r24, r25
     212:	89 f4       	brne	.+34     	; 0x236 <PIN_checkPinMatching+0x34>
     214:	0e 94 85 05 	call	0xb0a	; 0xb0a <HLCD_ClrDisplay>
     218:	8b eb       	ldi	r24, 0xBB	; 187
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	0e 94 ac 05 	call	0xb58	; 0xb58 <HLCD_WriteString>
     220:	2f e3       	ldi	r18, 0x3F	; 63
     222:	82 e4       	ldi	r24, 0x42	; 66
     224:	9f e0       	ldi	r25, 0x0F	; 15
     226:	21 50       	subi	r18, 0x01	; 1
     228:	80 40       	sbci	r24, 0x00	; 0
     22a:	90 40       	sbci	r25, 0x00	; 0
     22c:	e1 f7       	brne	.-8      	; 0x226 <PIN_checkPinMatching+0x24>
     22e:	00 c0       	rjmp	.+0      	; 0x230 <PIN_checkPinMatching+0x2e>
     230:	00 00       	nop
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	08 95       	ret
     236:	0e 94 85 05 	call	0xb0a	; 0xb0a <HLCD_ClrDisplay>
     23a:	87 ec       	ldi	r24, 0xC7	; 199
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	0e 94 ac 05 	call	0xb58	; 0xb58 <HLCD_WriteString>
     242:	2f e3       	ldi	r18, 0x3F	; 63
     244:	82 e4       	ldi	r24, 0x42	; 66
     246:	9f e0       	ldi	r25, 0x0F	; 15
     248:	21 50       	subi	r18, 0x01	; 1
     24a:	80 40       	sbci	r24, 0x00	; 0
     24c:	90 40       	sbci	r25, 0x00	; 0
     24e:	e1 f7       	brne	.-8      	; 0x248 <PIN_checkPinMatching+0x46>
     250:	00 c0       	rjmp	.+0      	; 0x252 <PIN_checkPinMatching+0x50>
     252:	00 00       	nop
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	08 95       	ret
     258:	82 e0       	ldi	r24, 0x02	; 2
     25a:	08 95       	ret
     25c:	82 e0       	ldi	r24, 0x02	; 2
     25e:	08 95       	ret

00000260 <ATM_ValidatePIN>:
EN_PinState ATM_ValidatePIN(void)
{
	EN_PinState u8_l_MatchPIN;
	
	/* Request PIN From Card */
	HSPI_SendChar(ATM_REQUEST_PIN);
     260:	80 e5       	ldi	r24, 0x50	; 80
     262:	0e 94 98 01 	call	0x330	; 0x330 <HSPI_SendChar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     266:	81 ee       	ldi	r24, 0xE1	; 225
     268:	94 e0       	ldi	r25, 0x04	; 4
     26a:	01 97       	sbiw	r24, 0x01	; 1
     26c:	f1 f7       	brne	.-4      	; 0x26a <ATM_ValidatePIN+0xa>
     26e:	00 c0       	rjmp	.+0      	; 0x270 <ATM_ValidatePIN+0x10>
     270:	00 00       	nop
	_delay_ms(5);
	HSPI_ReceiveData(CARDpin, 5);
     272:	65 e0       	ldi	r22, 0x05	; 5
     274:	8a e2       	ldi	r24, 0x2A	; 42
     276:	91 e0       	ldi	r25, 0x01	; 1
     278:	0e 94 b2 01 	call	0x364	; 0x364 <HSPI_ReceiveData>
	HLCD_ClrDisplay();
     27c:	0e 94 85 05 	call	0xb0a	; 0xb0a <HLCD_ClrDisplay>
	HLCD_WriteString("Received ");
     280:	84 ee       	ldi	r24, 0xE4	; 228
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	0e 94 ac 05 	call	0xb58	; 0xb58 <HLCD_WriteString>
	HLCD_WriteString(CARDpin);
     288:	8a e2       	ldi	r24, 0x2A	; 42
     28a:	91 e0       	ldi	r25, 0x01	; 1
     28c:	0e 94 ac 05 	call	0xb58	; 0xb58 <HLCD_WriteString>
     290:	9f eb       	ldi	r25, 0xBF	; 191
     292:	27 e2       	ldi	r18, 0x27	; 39
     294:	89 e0       	ldi	r24, 0x09	; 9
     296:	91 50       	subi	r25, 0x01	; 1
     298:	20 40       	sbci	r18, 0x00	; 0
     29a:	80 40       	sbci	r24, 0x00	; 0
     29c:	e1 f7       	brne	.-8      	; 0x296 <ATM_ValidatePIN+0x36>
     29e:	00 c0       	rjmp	.+0      	; 0x2a0 <ATM_ValidatePIN+0x40>
     2a0:	00 00       	nop
	_delay_ms(3000);
	
	/* Request PIN From Card */
	HSPI_SendChar(ATM_REQUEST_PAN);
     2a2:	87 e4       	ldi	r24, 0x47	; 71
     2a4:	0e 94 98 01 	call	0x330	; 0x330 <HSPI_SendChar>
     2a8:	81 ee       	ldi	r24, 0xE1	; 225
     2aa:	94 e0       	ldi	r25, 0x04	; 4
     2ac:	01 97       	sbiw	r24, 0x01	; 1
     2ae:	f1 f7       	brne	.-4      	; 0x2ac <ATM_ValidatePIN+0x4c>
     2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <ATM_ValidatePIN+0x52>
     2b2:	00 00       	nop
	_delay_ms(5);
	HSPI_ReceiveData(CARDpan, 20);
     2b4:	64 e1       	ldi	r22, 0x14	; 20
     2b6:	88 e4       	ldi	r24, 0x48	; 72
     2b8:	91 e0       	ldi	r25, 0x01	; 1
     2ba:	0e 94 b2 01 	call	0x364	; 0x364 <HSPI_ReceiveData>
	HLCD_ClrDisplay();
     2be:	0e 94 85 05 	call	0xb0a	; 0xb0a <HLCD_ClrDisplay>
	HLCD_WriteString("Received ");
     2c2:	84 ee       	ldi	r24, 0xE4	; 228
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	0e 94 ac 05 	call	0xb58	; 0xb58 <HLCD_WriteString>
	HLCD_gotoXY(1,0);
     2ca:	60 e0       	ldi	r22, 0x00	; 0
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	0e 94 98 05 	call	0xb30	; 0xb30 <HLCD_gotoXY>
	HLCD_WriteString(CARDpan);
     2d2:	88 e4       	ldi	r24, 0x48	; 72
     2d4:	91 e0       	ldi	r25, 0x01	; 1
     2d6:	0e 94 ac 05 	call	0xb58	; 0xb58 <HLCD_WriteString>
     2da:	9f e7       	ldi	r25, 0x7F	; 127
     2dc:	24 e8       	ldi	r18, 0x84	; 132
     2de:	8e e1       	ldi	r24, 0x1E	; 30
     2e0:	91 50       	subi	r25, 0x01	; 1
     2e2:	20 40       	sbci	r18, 0x00	; 0
     2e4:	80 40       	sbci	r24, 0x00	; 0
     2e6:	e1 f7       	brne	.-8      	; 0x2e0 <ATM_ValidatePIN+0x80>
     2e8:	00 c0       	rjmp	.+0      	; 0x2ea <ATM_ValidatePIN+0x8a>
     2ea:	00 00       	nop
	_delay_ms(10000);
	
	u8_l_MatchPIN = PIN_checkPinMatching(CARDpin, ATMpin);
     2ec:	6a ef       	ldi	r22, 0xFA	; 250
     2ee:	70 e0       	ldi	r23, 0x00	; 0
     2f0:	8a e2       	ldi	r24, 0x2A	; 42
     2f2:	91 e0       	ldi	r25, 0x01	; 1
     2f4:	0e 94 01 01 	call	0x202	; 0x202 <PIN_checkPinMatching>
	
	return u8_l_MatchPIN;
}
     2f8:	08 95       	ret

000002fa <HSPI_MasterInit>:
	{
		return HSPI_NOK;
	}
	
	return HSPI_OK;	
}
     2fa:	61 e0       	ldi	r22, 0x01	; 1
     2fc:	8d e0       	ldi	r24, 0x0D	; 13
     2fe:	0e 94 c9 05 	call	0xb92	; 0xb92 <DIO_s8SETPinDir>
     302:	61 e0       	ldi	r22, 0x01	; 1
     304:	8f e0       	ldi	r24, 0x0F	; 15
     306:	0e 94 c9 05 	call	0xb92	; 0xb92 <DIO_s8SETPinDir>
     30a:	61 e0       	ldi	r22, 0x01	; 1
     30c:	8c e0       	ldi	r24, 0x0C	; 12
     30e:	0e 94 c9 05 	call	0xb92	; 0xb92 <DIO_s8SETPinDir>
     312:	61 e0       	ldi	r22, 0x01	; 1
     314:	8c e0       	ldi	r24, 0x0C	; 12
     316:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_s8SETPinVal>
     31a:	60 e0       	ldi	r22, 0x00	; 0
     31c:	8e e0       	ldi	r24, 0x0E	; 14
     31e:	0e 94 c9 05 	call	0xb92	; 0xb92 <DIO_s8SETPinDir>
     322:	63 e0       	ldi	r22, 0x03	; 3
     324:	8a e0       	ldi	r24, 0x0A	; 10
     326:	0e 94 73 06 	call	0xce6	; 0xce6 <EXTINT_init>
     32a:	0e 94 8e 07 	call	0xf1c	; 0xf1c <SPI_MasterInit>
     32e:	08 95       	ret

00000330 <HSPI_SendChar>:
     330:	1f 93       	push	r17
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
     336:	1f 92       	push	r1
     338:	cd b7       	in	r28, 0x3d	; 61
     33a:	de b7       	in	r29, 0x3e	; 62
     33c:	18 2f       	mov	r17, r24
     33e:	60 e0       	ldi	r22, 0x00	; 0
     340:	8c e0       	ldi	r24, 0x0C	; 12
     342:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_s8SETPinVal>
     346:	be 01       	movw	r22, r28
     348:	6f 5f       	subi	r22, 0xFF	; 255
     34a:	7f 4f       	sbci	r23, 0xFF	; 255
     34c:	81 2f       	mov	r24, r17
     34e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <SPI_TranscieveChar>
     352:	61 e0       	ldi	r22, 0x01	; 1
     354:	8c e0       	ldi	r24, 0x0C	; 12
     356:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_s8SETPinVal>
     35a:	0f 90       	pop	r0
     35c:	df 91       	pop	r29
     35e:	cf 91       	pop	r28
     360:	1f 91       	pop	r17
     362:	08 95       	ret

00000364 <HSPI_ReceiveData>:
 * \param u8_a_DataSize: size of storage buffer
 * 
 * \return en_HSPI_ErrorState_t
 */
void HSPI_ReceiveData(Uchar8_t *pu8_a_data, Uchar8_t u8_a_DataSize)
{
     364:	cf 92       	push	r12
     366:	df 92       	push	r13
     368:	ef 92       	push	r14
     36a:	ff 92       	push	r15
     36c:	0f 93       	push	r16
     36e:	1f 93       	push	r17
     370:	cf 93       	push	r28
     372:	df 93       	push	r29
     374:	1f 92       	push	r1
     376:	cd b7       	in	r28, 0x3d	; 61
     378:	de b7       	in	r29, 0x3e	; 62
     37a:	6c 01       	movw	r12, r24
     37c:	06 2f       	mov	r16, r22
	Uchar8_t u8_l_DataIterator = 0, u8_l_dummyVar;

	/* Select Slave */
	DIO_s8SETPinVal(HSPI_SS, LOW);	
     37e:	60 e0       	ldi	r22, 0x00	; 0
     380:	8c e0       	ldi	r24, 0x0C	; 12
     382:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_s8SETPinVal>

	/* Initiate communication with dummy bit for synchronization */
	SPI_TranscieveChar(DATA_END, &u8_l_dummyVar);
     386:	be 01       	movw	r22, r28
     388:	6f 5f       	subi	r22, 0xFF	; 255
     38a:	7f 4f       	sbci	r23, 0xFF	; 255
     38c:	83 e2       	ldi	r24, 0x23	; 35
     38e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <SPI_TranscieveChar>
 * 
 * \return en_HSPI_ErrorState_t
 */
void HSPI_ReceiveData(Uchar8_t *pu8_a_data, Uchar8_t u8_a_DataSize)
{
	Uchar8_t u8_l_DataIterator = 0, u8_l_dummyVar;
     392:	10 e0       	ldi	r17, 0x00	; 0
	/* Initiate communication with dummy bit for synchronization */
	SPI_TranscieveChar(DATA_END, &u8_l_dummyVar);
	
	do
	{
		SPI_TranscieveChar(DATA_END, &pu8_a_data[u8_l_DataIterator]);
     394:	76 01       	movw	r14, r12
     396:	e1 0e       	add	r14, r17
     398:	f1 1c       	adc	r15, r1
     39a:	b7 01       	movw	r22, r14
     39c:	83 e2       	ldi	r24, 0x23	; 35
     39e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <SPI_TranscieveChar>
						
	}while((pu8_a_data[u8_l_DataIterator++]!=DATA_END) && (u8_l_DataIterator < u8_a_DataSize));
     3a2:	1f 5f       	subi	r17, 0xFF	; 255
     3a4:	f7 01       	movw	r30, r14
     3a6:	80 81       	ld	r24, Z
     3a8:	83 32       	cpi	r24, 0x23	; 35
     3aa:	11 f0       	breq	.+4      	; 0x3b0 <HSPI_ReceiveData+0x4c>
     3ac:	10 17       	cp	r17, r16
     3ae:	90 f3       	brcs	.-28     	; 0x394 <HSPI_ReceiveData+0x30>
	
	/* Deselect Slave */
	DIO_s8SETPinVal(HSPI_SS, HIGH);
     3b0:	61 e0       	ldi	r22, 0x01	; 1
     3b2:	8c e0       	ldi	r24, 0x0C	; 12
     3b4:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_s8SETPinVal>
}
     3b8:	0f 90       	pop	r0
     3ba:	df 91       	pop	r29
     3bc:	cf 91       	pop	r28
     3be:	1f 91       	pop	r17
     3c0:	0f 91       	pop	r16
     3c2:	ff 90       	pop	r15
     3c4:	ef 90       	pop	r14
     3c6:	df 90       	pop	r13
     3c8:	cf 90       	pop	r12
     3ca:	08 95       	ret

000003cc <HTIM0_SyncDelay>:
extern Uchar8_t u8_g_TotalOVF;

/*================================= Function Implementation =================================*/

en_HTIMErrorState_t HTIM0_SyncDelay(Uint32_t u32_a_delay, en_timeUnits_t Copy_timeUnit)
{
     3cc:	8f 92       	push	r8
     3ce:	9f 92       	push	r9
     3d0:	af 92       	push	r10
     3d2:	bf 92       	push	r11
     3d4:	cf 92       	push	r12
     3d6:	df 92       	push	r13
     3d8:	ef 92       	push	r14
     3da:	ff 92       	push	r15
     3dc:	0f 93       	push	r16
     3de:	1f 93       	push	r17
     3e0:	cf 93       	push	r28
     3e2:	df 93       	push	r29
     3e4:	00 d0       	rcall	.+0      	; 0x3e6 <HTIM0_SyncDelay+0x1a>
     3e6:	cd b7       	in	r28, 0x3d	; 61
     3e8:	de b7       	in	r29, 0x3e	; 62
     3ea:	6b 01       	movw	r12, r22
     3ec:	7c 01       	movw	r14, r24
	Uchar8_t u8_l_prescaler, Local_TotalOverFlows, Local_OverFlowCounter=0, u8_l_OverflowFlag, u8_l_TimState;
	Uint16_t Local_TotalTicks;
	float Local_TickTime;
	
	/* Get Value in micro seconds */
	if(Copy_timeUnit == Seconds)	{u32_a_delay *= SEC_TO_uSEC;}
     3ee:	42 30       	cpi	r20, 0x02	; 2
     3f0:	59 f4       	brne	.+22     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
     3f2:	9b 01       	movw	r18, r22
     3f4:	ac 01       	movw	r20, r24
     3f6:	60 e4       	ldi	r22, 0x40	; 64
     3f8:	72 e4       	ldi	r23, 0x42	; 66
     3fa:	8f e0       	ldi	r24, 0x0F	; 15
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <__mulsi3>
     402:	6b 01       	movw	r12, r22
     404:	7c 01       	movw	r14, r24
     406:	0d c0       	rjmp	.+26     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
	else if(Copy_timeUnit == mSeconds)	{u32_a_delay *= mSEC_TO_uSEC;}
     408:	41 30       	cpi	r20, 0x01	; 1
     40a:	49 f4       	brne	.+18     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
     40c:	a8 ee       	ldi	r26, 0xE8	; 232
     40e:	b3 e0       	ldi	r27, 0x03	; 3
     410:	9b 01       	movw	r18, r22
     412:	ac 01       	movw	r20, r24
     414:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <__muluhisi3>
     418:	6b 01       	movw	r12, r22
     41a:	7c 01       	movw	r14, r24
     41c:	02 c0       	rjmp	.+4      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
	else if(Copy_timeUnit == uSeconds)	{/* Do Nothing */}
     41e:	41 11       	cpse	r20, r1
     420:	6b c0       	rjmp	.+214    	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
	else return TIM_NOK;
	
	/* Set prescaler according to delay time */
	if(u32_a_delay < MAX_CLK_DEV1_DELAY  )	{u8_l_prescaler = TIM_DIV_BY_1;}
     422:	88 e8       	ldi	r24, 0x88	; 136
     424:	c8 16       	cp	r12, r24
     426:	83 e1       	ldi	r24, 0x13	; 19
     428:	d8 06       	cpc	r13, r24
     42a:	e1 04       	cpc	r14, r1
     42c:	f1 04       	cpc	r15, r1
     42e:	c8 f0       	brcs	.+50     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
	else if(u32_a_delay < MAX_CLK_DEV8_DELAY  ) {u8_l_prescaler = TIM_DIV_BY_8;}
     430:	88 ea       	ldi	r24, 0xA8	; 168
     432:	c8 16       	cp	r12, r24
     434:	81 e6       	ldi	r24, 0x61	; 97
     436:	d8 06       	cpc	r13, r24
     438:	e1 04       	cpc	r14, r1
     43a:	f1 04       	cpc	r15, r1
     43c:	a0 f0       	brcs	.+40     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
	else if(u32_a_delay < MAX_CLK_DEV64_DELAY ) {u8_l_prescaler = TIM_DIV_BY_64;}
     43e:	88 e4       	ldi	r24, 0x48	; 72
     440:	c8 16       	cp	r12, r24
     442:	88 ee       	ldi	r24, 0xE8	; 232
     444:	d8 06       	cpc	r13, r24
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	e8 06       	cpc	r14, r24
     44a:	f1 04       	cpc	r15, r1
     44c:	70 f0       	brcs	.+28     	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
	else if(u32_a_delay < MAX_CLK_DEV256_DELAY) {u8_l_prescaler = TIM_DIV_BY_256;}
     44e:	80 e2       	ldi	r24, 0x20	; 32
     450:	c8 16       	cp	r12, r24
     452:	81 ea       	ldi	r24, 0xA1	; 161
     454:	d8 06       	cpc	r13, r24
     456:	87 e0       	ldi	r24, 0x07	; 7
     458:	e8 06       	cpc	r14, r24
     45a:	f1 04       	cpc	r15, r1
     45c:	40 f4       	brcc	.+16     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
     45e:	14 e0       	ldi	r17, 0x04	; 4
     460:	07 c0       	rjmp	.+14     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
	else if(Copy_timeUnit == mSeconds)	{u32_a_delay *= mSEC_TO_uSEC;}
	else if(Copy_timeUnit == uSeconds)	{/* Do Nothing */}
	else return TIM_NOK;
	
	/* Set prescaler according to delay time */
	if(u32_a_delay < MAX_CLK_DEV1_DELAY  )	{u8_l_prescaler = TIM_DIV_BY_1;}
     462:	11 e0       	ldi	r17, 0x01	; 1
     464:	05 c0       	rjmp	.+10     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
	else if(u32_a_delay < MAX_CLK_DEV8_DELAY  ) {u8_l_prescaler = TIM_DIV_BY_8;}
     466:	12 e0       	ldi	r17, 0x02	; 2
     468:	03 c0       	rjmp	.+6      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
	else if(u32_a_delay < MAX_CLK_DEV64_DELAY ) {u8_l_prescaler = TIM_DIV_BY_64;}
     46a:	13 e0       	ldi	r17, 0x03	; 3
     46c:	01 c0       	rjmp	.+2      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
	else if(u32_a_delay < MAX_CLK_DEV256_DELAY) {u8_l_prescaler = TIM_DIV_BY_256;}
	else {u8_l_prescaler = TIM_DIV_BY_1024;}
     46e:	15 e0       	ldi	r17, 0x05	; 5
	
	Local_TickTime = arr_gs_prescalers[u8_l_prescaler-1]/TIM0_PRESCALER;
     470:	e1 2f       	mov	r30, r17
     472:	f0 e0       	ldi	r31, 0x00	; 0
     474:	31 97       	sbiw	r30, 0x01	; 1
     476:	ee 0f       	add	r30, r30
     478:	ff 1f       	adc	r31, r31
     47a:	e2 51       	subi	r30, 0x12	; 18
     47c:	ff 4f       	sbci	r31, 0xFF	; 255
     47e:	60 81       	ld	r22, Z
     480:	71 81       	ldd	r23, Z+1	; 0x01
     482:	76 95       	lsr	r23
     484:	67 95       	ror	r22
     486:	76 95       	lsr	r23
     488:	67 95       	ror	r22
     48a:	76 95       	lsr	r23
     48c:	67 95       	ror	r22
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__floatunsisf>
     496:	4b 01       	movw	r8, r22
     498:	5c 01       	movw	r10, r24
	Local_TotalTicks = (Uint16_t)(u32_a_delay/Local_TickTime);
     49a:	c7 01       	movw	r24, r14
     49c:	b6 01       	movw	r22, r12
     49e:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__floatunsisf>
     4a2:	a5 01       	movw	r20, r10
     4a4:	94 01       	movw	r18, r8
     4a6:	0e 94 44 09 	call	0x1288	; 0x1288 <__divsf3>
     4aa:	0e 94 b6 09 	call	0x136c	; 0x136c <__fixunssfsi>
     4ae:	f6 2e       	mov	r15, r22
	Local_TotalOverFlows = Local_TotalTicks/TIM0_MAX_TICKS;
     4b0:	07 2f       	mov	r16, r23
	
	/* Initialize timer in normal mode */
	TIM0_voidInit(NormalMode);
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	0e 94 17 08 	call	0x102e	; 0x102e <TIM0_voidInit>
	
	/* Set timer start value */
	TIM0_SetValue(TIM0_MAX_TICKS-(Local_TotalTicks%TIM0_MAX_TICKS));
     4b8:	8f 2d       	mov	r24, r15
     4ba:	81 95       	neg	r24
     4bc:	0e 94 48 08 	call	0x1090	; 0x1090 <TIM0_SetValue>
	
	/* Start Timer */
	TIM0_Start(u8_l_prescaler);
     4c0:	81 2f       	mov	r24, r17
     4c2:	0e 94 30 08 	call	0x1060	; 0x1060 <TIM0_Start>

/*================================= Function Implementation =================================*/

en_HTIMErrorState_t HTIM0_SyncDelay(Uint32_t u32_a_delay, en_timeUnits_t Copy_timeUnit)
{
	Uchar8_t u8_l_prescaler, Local_TotalOverFlows, Local_OverFlowCounter=0, u8_l_OverflowFlag, u8_l_TimState;
     4c6:	10 e0       	ldi	r17, 0x00	; 0
	TIM0_SetValue(TIM0_MAX_TICKS-(Local_TotalTicks%TIM0_MAX_TICKS));
	
	/* Start Timer */
	TIM0_Start(u8_l_prescaler);
	
	while(Local_OverFlowCounter <= Local_TotalOverFlows)
     4c8:	11 c0       	rjmp	.+34     	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
	{
		/* Wait until the overflow flag is raised */
		do
		{
			TIM0_GetOVF(&u8_l_OverflowFlag);
     4ca:	ce 01       	movw	r24, r28
     4cc:	01 96       	adiw	r24, 0x01	; 1
     4ce:	0e 94 4a 08 	call	0x1094	; 0x1094 <TIM0_GetOVF>
			TIM0_GetState(&u8_l_TimState);
     4d2:	ce 01       	movw	r24, r28
     4d4:	02 96       	adiw	r24, 0x02	; 2
     4d6:	0e 94 58 08 	call	0x10b0	; 0x10b0 <TIM0_GetState>
		}
		while(!u8_l_OverflowFlag && u8_l_TimState);
     4da:	89 81       	ldd	r24, Y+1	; 0x01
     4dc:	81 11       	cpse	r24, r1
     4de:	03 c0       	rjmp	.+6      	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
     4e0:	8a 81       	ldd	r24, Y+2	; 0x02
     4e2:	81 11       	cpse	r24, r1
     4e4:	f2 cf       	rjmp	.-28     	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
		
		/* Clear the overflow flag */
		TIM0_ClearOVF();
     4e6:	0e 94 54 08 	call	0x10a8	; 0x10a8 <TIM0_ClearOVF>
		
		Local_OverFlowCounter++;
     4ea:	1f 5f       	subi	r17, 0xFF	; 255
	TIM0_SetValue(TIM0_MAX_TICKS-(Local_TotalTicks%TIM0_MAX_TICKS));
	
	/* Start Timer */
	TIM0_Start(u8_l_prescaler);
	
	while(Local_OverFlowCounter <= Local_TotalOverFlows)
     4ec:	01 17       	cp	r16, r17
     4ee:	68 f7       	brcc	.-38     	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
		TIM0_ClearOVF();
		
		Local_OverFlowCounter++;
	}
	
	TIM0_Stop();
     4f0:	0e 94 3e 08 	call	0x107c	; 0x107c <TIM0_Stop>
	
	return TIM_OK;
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	01 c0       	rjmp	.+2      	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
	
	/* Get Value in micro seconds */
	if(Copy_timeUnit == Seconds)	{u32_a_delay *= SEC_TO_uSEC;}
	else if(Copy_timeUnit == mSeconds)	{u32_a_delay *= mSEC_TO_uSEC;}
	else if(Copy_timeUnit == uSeconds)	{/* Do Nothing */}
	else return TIM_NOK;
     4f8:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	TIM0_Stop();
	
	return TIM_OK;
}
     4fa:	0f 90       	pop	r0
     4fc:	0f 90       	pop	r0
     4fe:	df 91       	pop	r29
     500:	cf 91       	pop	r28
     502:	1f 91       	pop	r17
     504:	0f 91       	pop	r16
     506:	ff 90       	pop	r15
     508:	ef 90       	pop	r14
     50a:	df 90       	pop	r13
     50c:	cf 90       	pop	r12
     50e:	bf 90       	pop	r11
     510:	af 90       	pop	r10
     512:	9f 90       	pop	r9
     514:	8f 90       	pop	r8
     516:	08 95       	ret

00000518 <HTimer_enInit>:

	errorStatus = vidTimer2_stop();

	return errorStatus;

}
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	0e 94 bc 08 	call	0x1178	; 0x1178 <enuTimer2_init>
     51e:	84 e0       	ldi	r24, 0x04	; 4
     520:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <u8Timer2_setPrescallar>
     524:	0e 94 fe 08 	call	0x11fc	; 0x11fc <vidTimer2_OvfIrqEnable>
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	08 95       	ret

0000052c <HTimer_enCBF>:
/*************************************************************************************************************/
enu_HTimerError_t HTimer_enCBF(ptr_funcc pFunc)
{
	enu_HTimerError_t errorStatus = TIMER_OK;

	if(pFunc != NULL)
     52c:	00 97       	sbiw	r24, 0x00	; 0
     52e:	21 f0       	breq	.+8      	; 0x538 <HTimer_enCBF+0xc>
	{
		vidTimer2_setcbf_OVF(pFunc);
     530:	0e 94 06 09 	call	0x120c	; 0x120c <vidTimer2_setcbf_OVF>

}
/*************************************************************************************************************/
enu_HTimerError_t HTimer_enCBF(ptr_funcc pFunc)
{
	enu_HTimerError_t errorStatus = TIMER_OK;
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	08 95       	ret
	if(pFunc != NULL)
	{
		vidTimer2_setcbf_OVF(pFunc);

	}else{
		errorStatus = TIMER_NOK;
     538:	81 e0       	ldi	r24, 0x01	; 1
	}

	return errorStatus;

}
     53a:	08 95       	ret

0000053c <H_EXTINT_create>:
ARGS        : takes the EXINT_NUMBER( INT0,INT1 OR INT2) and sense control and and pointer to the function we want to execute when interrupt occurs.
return      : return EXTINT_OK if the EXINT_NUMBER initializes correctly, EXTINT_NOT_OK otherwise
*/

EN_EXTINT_ERROR H_EXTINT_create(EN_EXINT_NUMBER INTx ,EN_Sence_Control INTxSense,void(*ptrfunc)(void))
{
     53c:	0f 93       	push	r16
     53e:	1f 93       	push	r17
     540:	cf 93       	push	r28
     542:	c8 2f       	mov	r28, r24
     544:	8a 01       	movw	r16, r20
	if(!EXTINT_init(INTx,INTxSense) && !EXTINT_CallBack(INTx,ptrfunc)) return EXTINT_OK;
     546:	0e 94 73 06 	call	0xce6	; 0xce6 <EXTINT_init>
     54a:	81 11       	cpse	r24, r1
     54c:	07 c0       	rjmp	.+14     	; 0x55c <H_EXTINT_create+0x20>
     54e:	b8 01       	movw	r22, r16
     550:	8c 2f       	mov	r24, r28
     552:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <EXTINT_CallBack>
     556:	81 11       	cpse	r24, r1
     558:	03 c0       	rjmp	.+6      	; 0x560 <H_EXTINT_create+0x24>
     55a:	03 c0       	rjmp	.+6      	; 0x562 <H_EXTINT_create+0x26>
	return EXTINT_NOT_OK;
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	01 c0       	rjmp	.+2      	; 0x562 <H_EXTINT_create+0x26>
     560:	81 e0       	ldi	r24, 0x01	; 1
	
     562:	cf 91       	pop	r28
     564:	1f 91       	pop	r17
     566:	0f 91       	pop	r16
     568:	08 95       	ret

0000056a <EXTI2_RisingEdgeNotification>:


void EXTI2_RisingEdgeNotification(void)
{
	/* Start Timer */
	TIM1_Start(TIM1_CLK_DIV_BY_1024);
     56a:	85 e0       	ldi	r24, 0x05	; 5
     56c:	0e 94 a6 08 	call	0x114c	; 0x114c <TIM1_Start>
	
	/* Set the interrupt to be triggered on a falling edge */
	EXTINT_init(EXTINT2, FALLING_EDGE);
     570:	61 e0       	ldi	r22, 0x01	; 1
     572:	82 e0       	ldi	r24, 0x02	; 2
     574:	0e 94 73 06 	call	0xce6	; 0xce6 <EXTINT_init>
	EXTINT_CallBack(EXTINT2, EXTI2_FallingEdgeNotification);
     578:	6e ee       	ldi	r22, 0xEE	; 238
     57a:	72 e0       	ldi	r23, 0x02	; 2
     57c:	82 e0       	ldi	r24, 0x02	; 2
     57e:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <EXTINT_CallBack>
     582:	08 95       	ret

00000584 <SwICU_Init>:
void (*FallingEdge_CBF)(void) = NULL; 


void SwICU_Init(void)
{
	DIO_s8SETPinDir(DIO_PINB_2, INPUT);
     584:	60 e0       	ldi	r22, 0x00	; 0
     586:	8a e0       	ldi	r24, 0x0A	; 10
     588:	0e 94 c9 05 	call	0xb92	; 0xb92 <DIO_s8SETPinDir>
	/* Set extint to be triggered on rising edge at first (button is pulled down) */
	EXTINT_init(EXTINT2, RISING_EDGE);
     58c:	62 e0       	ldi	r22, 0x02	; 2
     58e:	82 e0       	ldi	r24, 0x02	; 2
     590:	0e 94 73 06 	call	0xce6	; 0xce6 <EXTINT_init>
	
// 	RisingEdge_CBF = EXTI2_RisingEdgeNotification;
// 	FallingEdge_CBF = EXTI2_FallingEdgeNotification;
		
	EXTINT_CallBack(EXTINT2, EXTI2_RisingEdgeNotification);
     594:	65 eb       	ldi	r22, 0xB5	; 181
     596:	72 e0       	ldi	r23, 0x02	; 2
     598:	82 e0       	ldi	r24, 0x02	; 2
     59a:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <EXTINT_CallBack>
     59e:	08 95       	ret

000005a0 <SwICU_GetTime>:
}

Uint16_t SwICU_GetTime(Uint16_t u16_a_TimCount)
{
     5a0:	cf 92       	push	r12
     5a2:	df 92       	push	r13
     5a4:	ef 92       	push	r14
     5a6:	ff 92       	push	r15
     5a8:	cf 93       	push	r28
     5aa:	df 93       	push	r29
     5ac:	ec 01       	movw	r28, r24
	Uint16_t u16_l_msTime;
	float32_t f32_l_TickTime;
	
	f32_l_TickTime = TIM1_GetTickTime();
     5ae:	0e 94 b7 08 	call	0x116e	; 0x116e <TIM1_GetTickTime>
     5b2:	6b 01       	movw	r12, r22
     5b4:	7c 01       	movw	r14, r24
	u16_l_msTime = (Uint16_t)(f32_l_TickTime * u16_a_TimCount);
     5b6:	be 01       	movw	r22, r28
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__floatunsisf>
     5c0:	a7 01       	movw	r20, r14
     5c2:	96 01       	movw	r18, r12
     5c4:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <__mulsf3>
     5c8:	0e 94 b6 09 	call	0x136c	; 0x136c <__fixunssfsi>

	return u16_l_msTime;
}
     5cc:	cb 01       	movw	r24, r22
     5ce:	df 91       	pop	r29
     5d0:	cf 91       	pop	r28
     5d2:	ff 90       	pop	r15
     5d4:	ef 90       	pop	r14
     5d6:	df 90       	pop	r13
     5d8:	cf 90       	pop	r12
     5da:	08 95       	ret

000005dc <EXTI2_FallingEdgeNotification>:


void EXTI2_FallingEdgeNotification(void)
{		
	/* Get timer value */
	u16_g_TimerCount = TIM1_GetValue();
     5dc:	0e 94 b4 08 	call	0x1168	; 0x1168 <TIM1_GetValue>
     5e0:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <u16_g_TimerCount+0x1>
     5e4:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <u16_g_TimerCount>
	
	/* Stop the timer */
	TIM1_Stop();
     5e8:	0e 94 ae 08 	call	0x115c	; 0x115c <TIM1_Stop>
	
	u16_g_msTime = SwICU_GetTime(u16_g_TimerCount);
     5ec:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <u16_g_TimerCount>
     5f0:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <u16_g_TimerCount+0x1>
     5f4:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <SwICU_GetTime>
     5f8:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <u16_g_msTime+0x1>
     5fc:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <u16_g_msTime>

	/* Set the interrupt to be triggered on a falling edge */
	EXTINT_init(EXTINT2, RISING_EDGE);
     600:	62 e0       	ldi	r22, 0x02	; 2
     602:	82 e0       	ldi	r24, 0x02	; 2
     604:	0e 94 73 06 	call	0xce6	; 0xce6 <EXTINT_init>
	EXTINT_CallBack(EXTINT2, EXTI2_RisingEdgeNotification);
     608:	65 eb       	ldi	r22, 0xB5	; 181
     60a:	72 e0       	ldi	r23, 0x02	; 2
     60c:	82 e0       	ldi	r24, 0x02	; 2
     60e:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <EXTINT_CallBack>
	
	/* Check Enter or Zero */
	if(u16_g_msTime >= (Uint16_t)2000) EnterCheck = 1;
     612:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <u16_g_msTime>
     616:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <u16_g_msTime+0x1>
     61a:	80 3d       	cpi	r24, 0xD0	; 208
     61c:	97 40       	sbci	r25, 0x07	; 7
     61e:	20 f0       	brcs	.+8      	; 0x628 <EXTI2_FallingEdgeNotification+0x4c>
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <EnterCheck>
     626:	08 95       	ret
	else ZeroCheck = 1;
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <ZeroCheck>
     62e:	08 95       	ret

00000630 <KEYPAD_init>:
 * 											Function Implementation
 ************************************************************************************************************/
void KEYPAD_init()
{
	// INITIALIZE ROWS AS OUTPUTS
	DIO_s8SETPinDir(R1,OUTPUT);
     630:	61 e0       	ldi	r22, 0x01	; 1
     632:	82 e1       	ldi	r24, 0x12	; 18
     634:	0e 94 c9 05 	call	0xb92	; 0xb92 <DIO_s8SETPinDir>
	DIO_s8SETPinDir(R2,OUTPUT);
     638:	61 e0       	ldi	r22, 0x01	; 1
     63a:	83 e1       	ldi	r24, 0x13	; 19
     63c:	0e 94 c9 05 	call	0xb92	; 0xb92 <DIO_s8SETPinDir>
	DIO_s8SETPinDir(R3,OUTPUT);
     640:	61 e0       	ldi	r22, 0x01	; 1
     642:	84 e1       	ldi	r24, 0x14	; 20
     644:	0e 94 c9 05 	call	0xb92	; 0xb92 <DIO_s8SETPinDir>
	// INITIALIZE COLUMNS AS INPUTS
	DIO_s8SETPinDir(C1,INPUT);
     648:	60 e0       	ldi	r22, 0x00	; 0
     64a:	85 e1       	ldi	r24, 0x15	; 21
     64c:	0e 94 c9 05 	call	0xb92	; 0xb92 <DIO_s8SETPinDir>
	DIO_s8SETPinDir(C2,INPUT);
     650:	60 e0       	ldi	r22, 0x00	; 0
     652:	86 e1       	ldi	r24, 0x16	; 22
     654:	0e 94 c9 05 	call	0xb92	; 0xb92 <DIO_s8SETPinDir>
	DIO_s8SETPinDir(C3,INPUT);
     658:	60 e0       	ldi	r22, 0x00	; 0
     65a:	87 e1       	ldi	r24, 0x17	; 23
     65c:	0e 94 c9 05 	call	0xb92	; 0xb92 <DIO_s8SETPinDir>
     660:	08 95       	ret

00000662 <checkR1>:
	
	
}
EN_KEYPAD_BTNS checkR1()
{
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
     666:	1f 92       	push	r1
     668:	cd b7       	in	r28, 0x3d	; 61
     66a:	de b7       	in	r29, 0x3e	; 62
	DIO_s8SETPinVal(C1,HIGH);
     66c:	61 e0       	ldi	r22, 0x01	; 1
     66e:	85 e1       	ldi	r24, 0x15	; 21
     670:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C2,HIGH);
     674:	61 e0       	ldi	r22, 0x01	; 1
     676:	86 e1       	ldi	r24, 0x16	; 22
     678:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C3,HIGH);
     67c:	61 e0       	ldi	r22, 0x01	; 1
     67e:	87 e1       	ldi	r24, 0x17	; 23
     680:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R2,HIGH);
     684:	61 e0       	ldi	r22, 0x01	; 1
     686:	83 e1       	ldi	r24, 0x13	; 19
     688:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R3,HIGH);
     68c:	61 e0       	ldi	r22, 0x01	; 1
     68e:	84 e1       	ldi	r24, 0x14	; 20
     690:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R1,LOW);
     694:	60 e0       	ldi	r22, 0x00	; 0
     696:	82 e1       	ldi	r24, 0x12	; 18
     698:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_s8SETPinVal>
	
	Uchar8_t val = 1;
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C1,&val);
     6a0:	be 01       	movw	r22, r28
     6a2:	6f 5f       	subi	r22, 0xFF	; 255
     6a4:	7f 4f       	sbci	r23, 0xFF	; 255
     6a6:	85 e1       	ldi	r24, 0x15	; 21
     6a8:	0e 94 49 06 	call	0xc92	; 0xc92 <DIO_s8GETPinVal>
	if(val == 0)
     6ac:	89 81       	ldd	r24, Y+1	; 0x01
     6ae:	88 23       	and	r24, r24
     6b0:	39 f0       	breq	.+14     	; 0x6c0 <checkR1+0x5e>
     6b2:	0b c0       	rjmp	.+22     	; 0x6ca <checkR1+0x68>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C1,&val);
     6b4:	be 01       	movw	r22, r28
     6b6:	6f 5f       	subi	r22, 0xFF	; 255
     6b8:	7f 4f       	sbci	r23, 0xFF	; 255
     6ba:	85 e1       	ldi	r24, 0x15	; 21
     6bc:	0e 94 49 06 	call	0xc92	; 0xc92 <DIO_s8GETPinVal>
	
	Uchar8_t val = 1;
	DIO_s8GETPinVal(C1,&val);
	if(val == 0)
	{
		while (val == 0)
     6c0:	89 81       	ldd	r24, Y+1	; 0x01
     6c2:	88 23       	and	r24, r24
     6c4:	b9 f3       	breq	.-18     	; 0x6b4 <checkR1+0x52>
		{
			DIO_s8GETPinVal(C1,&val);
		}
		return KEY_1;
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	2e c0       	rjmp	.+92     	; 0x726 <checkR1+0xc4>
	}
	val = 1;
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C2,&val);
     6ce:	be 01       	movw	r22, r28
     6d0:	6f 5f       	subi	r22, 0xFF	; 255
     6d2:	7f 4f       	sbci	r23, 0xFF	; 255
     6d4:	86 e1       	ldi	r24, 0x16	; 22
     6d6:	0e 94 49 06 	call	0xc92	; 0xc92 <DIO_s8GETPinVal>
	if(val == 0)
     6da:	89 81       	ldd	r24, Y+1	; 0x01
     6dc:	88 23       	and	r24, r24
     6de:	39 f0       	breq	.+14     	; 0x6ee <checkR1+0x8c>
     6e0:	0b c0       	rjmp	.+22     	; 0x6f8 <checkR1+0x96>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C2,&val);
     6e2:	be 01       	movw	r22, r28
     6e4:	6f 5f       	subi	r22, 0xFF	; 255
     6e6:	7f 4f       	sbci	r23, 0xFF	; 255
     6e8:	86 e1       	ldi	r24, 0x16	; 22
     6ea:	0e 94 49 06 	call	0xc92	; 0xc92 <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C2,&val);
	if(val == 0)
	{
		while (val == 0)
     6ee:	89 81       	ldd	r24, Y+1	; 0x01
     6f0:	88 23       	and	r24, r24
     6f2:	b9 f3       	breq	.-18     	; 0x6e2 <checkR1+0x80>
		{
			DIO_s8GETPinVal(C2,&val);
		}
		return KEY_2;
     6f4:	82 e0       	ldi	r24, 0x02	; 2
     6f6:	17 c0       	rjmp	.+46     	; 0x726 <checkR1+0xc4>
	}
	val = 1;
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C3,&val);
     6fc:	be 01       	movw	r22, r28
     6fe:	6f 5f       	subi	r22, 0xFF	; 255
     700:	7f 4f       	sbci	r23, 0xFF	; 255
     702:	87 e1       	ldi	r24, 0x17	; 23
     704:	0e 94 49 06 	call	0xc92	; 0xc92 <DIO_s8GETPinVal>
	if(val == 0)
     708:	89 81       	ldd	r24, Y+1	; 0x01
     70a:	88 23       	and	r24, r24
     70c:	41 f0       	breq	.+16     	; 0x71e <checkR1+0xbc>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_3;
	}
	return KEY_NOTHING;
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	0a c0       	rjmp	.+20     	; 0x726 <checkR1+0xc4>
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C3,&val);
     712:	be 01       	movw	r22, r28
     714:	6f 5f       	subi	r22, 0xFF	; 255
     716:	7f 4f       	sbci	r23, 0xFF	; 255
     718:	87 e1       	ldi	r24, 0x17	; 23
     71a:	0e 94 49 06 	call	0xc92	; 0xc92 <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
     71e:	89 81       	ldd	r24, Y+1	; 0x01
     720:	88 23       	and	r24, r24
     722:	b9 f3       	breq	.-18     	; 0x712 <checkR1+0xb0>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_3;
     724:	83 e0       	ldi	r24, 0x03	; 3
	}
	return KEY_NOTHING;
	
}
     726:	0f 90       	pop	r0
     728:	df 91       	pop	r29
     72a:	cf 91       	pop	r28
     72c:	08 95       	ret

0000072e <checkR2>:
EN_KEYPAD_BTNS checkR2()
{
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	1f 92       	push	r1
     734:	cd b7       	in	r28, 0x3d	; 61
     736:	de b7       	in	r29, 0x3e	; 62
	
	DIO_s8SETPinVal(C1,HIGH);
     738:	61 e0       	ldi	r22, 0x01	; 1
     73a:	85 e1       	ldi	r24, 0x15	; 21
     73c:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C2,HIGH);
     740:	61 e0       	ldi	r22, 0x01	; 1
     742:	86 e1       	ldi	r24, 0x16	; 22
     744:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C3,HIGH);
     748:	61 e0       	ldi	r22, 0x01	; 1
     74a:	87 e1       	ldi	r24, 0x17	; 23
     74c:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R1,HIGH);
     750:	61 e0       	ldi	r22, 0x01	; 1
     752:	82 e1       	ldi	r24, 0x12	; 18
     754:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R3,HIGH);
     758:	61 e0       	ldi	r22, 0x01	; 1
     75a:	84 e1       	ldi	r24, 0x14	; 20
     75c:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R2,LOW);
     760:	60 e0       	ldi	r22, 0x00	; 0
     762:	83 e1       	ldi	r24, 0x13	; 19
     764:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_s8SETPinVal>
	
	Uchar8_t val = 1;
     768:	81 e0       	ldi	r24, 0x01	; 1
     76a:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C1,&val);
     76c:	be 01       	movw	r22, r28
     76e:	6f 5f       	subi	r22, 0xFF	; 255
     770:	7f 4f       	sbci	r23, 0xFF	; 255
     772:	85 e1       	ldi	r24, 0x15	; 21
     774:	0e 94 49 06 	call	0xc92	; 0xc92 <DIO_s8GETPinVal>
	if(val == 0)
     778:	89 81       	ldd	r24, Y+1	; 0x01
     77a:	88 23       	and	r24, r24
     77c:	39 f0       	breq	.+14     	; 0x78c <checkR2+0x5e>
     77e:	0b c0       	rjmp	.+22     	; 0x796 <checkR2+0x68>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C1,&val);
     780:	be 01       	movw	r22, r28
     782:	6f 5f       	subi	r22, 0xFF	; 255
     784:	7f 4f       	sbci	r23, 0xFF	; 255
     786:	85 e1       	ldi	r24, 0x15	; 21
     788:	0e 94 49 06 	call	0xc92	; 0xc92 <DIO_s8GETPinVal>
	
	Uchar8_t val = 1;
	DIO_s8GETPinVal(C1,&val);
	if(val == 0)
	{
		while (val == 0)
     78c:	89 81       	ldd	r24, Y+1	; 0x01
     78e:	88 23       	and	r24, r24
     790:	b9 f3       	breq	.-18     	; 0x780 <checkR2+0x52>
		{
			DIO_s8GETPinVal(C1,&val);
		}
		return KEY_4;
     792:	84 e0       	ldi	r24, 0x04	; 4
     794:	2e c0       	rjmp	.+92     	; 0x7f2 <checkR2+0xc4>
	}
	val = 1;
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C2,&val);
     79a:	be 01       	movw	r22, r28
     79c:	6f 5f       	subi	r22, 0xFF	; 255
     79e:	7f 4f       	sbci	r23, 0xFF	; 255
     7a0:	86 e1       	ldi	r24, 0x16	; 22
     7a2:	0e 94 49 06 	call	0xc92	; 0xc92 <DIO_s8GETPinVal>
	if(val == 0)
     7a6:	89 81       	ldd	r24, Y+1	; 0x01
     7a8:	88 23       	and	r24, r24
     7aa:	39 f0       	breq	.+14     	; 0x7ba <checkR2+0x8c>
     7ac:	0b c0       	rjmp	.+22     	; 0x7c4 <checkR2+0x96>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C2,&val);
     7ae:	be 01       	movw	r22, r28
     7b0:	6f 5f       	subi	r22, 0xFF	; 255
     7b2:	7f 4f       	sbci	r23, 0xFF	; 255
     7b4:	86 e1       	ldi	r24, 0x16	; 22
     7b6:	0e 94 49 06 	call	0xc92	; 0xc92 <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C2,&val);
	if(val == 0)
	{
		while (val == 0)
     7ba:	89 81       	ldd	r24, Y+1	; 0x01
     7bc:	88 23       	and	r24, r24
     7be:	b9 f3       	breq	.-18     	; 0x7ae <checkR2+0x80>
		{
			DIO_s8GETPinVal(C2,&val);
		}
		return KEY_5;
     7c0:	85 e0       	ldi	r24, 0x05	; 5
     7c2:	17 c0       	rjmp	.+46     	; 0x7f2 <checkR2+0xc4>
	}
	val = 1;
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C3,&val);
     7c8:	be 01       	movw	r22, r28
     7ca:	6f 5f       	subi	r22, 0xFF	; 255
     7cc:	7f 4f       	sbci	r23, 0xFF	; 255
     7ce:	87 e1       	ldi	r24, 0x17	; 23
     7d0:	0e 94 49 06 	call	0xc92	; 0xc92 <DIO_s8GETPinVal>
	if(val == 0)
     7d4:	89 81       	ldd	r24, Y+1	; 0x01
     7d6:	88 23       	and	r24, r24
     7d8:	41 f0       	breq	.+16     	; 0x7ea <checkR2+0xbc>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_6;
	}
	return KEY_NOTHING;
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	0a c0       	rjmp	.+20     	; 0x7f2 <checkR2+0xc4>
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C3,&val);
     7de:	be 01       	movw	r22, r28
     7e0:	6f 5f       	subi	r22, 0xFF	; 255
     7e2:	7f 4f       	sbci	r23, 0xFF	; 255
     7e4:	87 e1       	ldi	r24, 0x17	; 23
     7e6:	0e 94 49 06 	call	0xc92	; 0xc92 <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
     7ea:	89 81       	ldd	r24, Y+1	; 0x01
     7ec:	88 23       	and	r24, r24
     7ee:	b9 f3       	breq	.-18     	; 0x7de <checkR2+0xb0>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_6;
     7f0:	86 e0       	ldi	r24, 0x06	; 6
	}
	return KEY_NOTHING;
	
}
     7f2:	0f 90       	pop	r0
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	08 95       	ret

000007fa <checkR3>:
EN_KEYPAD_BTNS checkR3()
{
     7fa:	cf 93       	push	r28
     7fc:	df 93       	push	r29
     7fe:	1f 92       	push	r1
     800:	cd b7       	in	r28, 0x3d	; 61
     802:	de b7       	in	r29, 0x3e	; 62
	
	DIO_s8SETPinVal(C1,HIGH);
     804:	61 e0       	ldi	r22, 0x01	; 1
     806:	85 e1       	ldi	r24, 0x15	; 21
     808:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C2,HIGH);
     80c:	61 e0       	ldi	r22, 0x01	; 1
     80e:	86 e1       	ldi	r24, 0x16	; 22
     810:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C3,HIGH);
     814:	61 e0       	ldi	r22, 0x01	; 1
     816:	87 e1       	ldi	r24, 0x17	; 23
     818:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R1,HIGH);
     81c:	61 e0       	ldi	r22, 0x01	; 1
     81e:	82 e1       	ldi	r24, 0x12	; 18
     820:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R2,HIGH);
     824:	61 e0       	ldi	r22, 0x01	; 1
     826:	83 e1       	ldi	r24, 0x13	; 19
     828:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R3,LOW);
     82c:	60 e0       	ldi	r22, 0x00	; 0
     82e:	84 e1       	ldi	r24, 0x14	; 20
     830:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_s8SETPinVal>
	
	Uchar8_t val = 1;
     834:	81 e0       	ldi	r24, 0x01	; 1
     836:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C1,&val);
     838:	be 01       	movw	r22, r28
     83a:	6f 5f       	subi	r22, 0xFF	; 255
     83c:	7f 4f       	sbci	r23, 0xFF	; 255
     83e:	85 e1       	ldi	r24, 0x15	; 21
     840:	0e 94 49 06 	call	0xc92	; 0xc92 <DIO_s8GETPinVal>
	if(val == 0)
     844:	89 81       	ldd	r24, Y+1	; 0x01
     846:	88 23       	and	r24, r24
     848:	39 f0       	breq	.+14     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
     84a:	0b c0       	rjmp	.+22     	; 0x862 <__stack+0x3>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C1,&val);
     84c:	be 01       	movw	r22, r28
     84e:	6f 5f       	subi	r22, 0xFF	; 255
     850:	7f 4f       	sbci	r23, 0xFF	; 255
     852:	85 e1       	ldi	r24, 0x15	; 21
     854:	0e 94 49 06 	call	0xc92	; 0xc92 <DIO_s8GETPinVal>
	
	Uchar8_t val = 1;
	DIO_s8GETPinVal(C1,&val);
	if(val == 0)
	{
		while (val == 0)
     858:	89 81       	ldd	r24, Y+1	; 0x01
     85a:	88 23       	and	r24, r24
     85c:	b9 f3       	breq	.-18     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
		{
			DIO_s8GETPinVal(C1,&val);
		}
		return KEY_7;
     85e:	87 e0       	ldi	r24, 0x07	; 7
     860:	2e c0       	rjmp	.+92     	; 0x8be <__stack+0x5f>
	}
	val = 1;
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C2,&val);
     866:	be 01       	movw	r22, r28
     868:	6f 5f       	subi	r22, 0xFF	; 255
     86a:	7f 4f       	sbci	r23, 0xFF	; 255
     86c:	86 e1       	ldi	r24, 0x16	; 22
     86e:	0e 94 49 06 	call	0xc92	; 0xc92 <DIO_s8GETPinVal>
	if(val == 0)
     872:	89 81       	ldd	r24, Y+1	; 0x01
     874:	88 23       	and	r24, r24
     876:	39 f0       	breq	.+14     	; 0x886 <__stack+0x27>
     878:	0b c0       	rjmp	.+22     	; 0x890 <__stack+0x31>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C2,&val);
     87a:	be 01       	movw	r22, r28
     87c:	6f 5f       	subi	r22, 0xFF	; 255
     87e:	7f 4f       	sbci	r23, 0xFF	; 255
     880:	86 e1       	ldi	r24, 0x16	; 22
     882:	0e 94 49 06 	call	0xc92	; 0xc92 <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C2,&val);
	if(val == 0)
	{
		while (val == 0)
     886:	89 81       	ldd	r24, Y+1	; 0x01
     888:	88 23       	and	r24, r24
     88a:	b9 f3       	breq	.-18     	; 0x87a <__stack+0x1b>
		{
			DIO_s8GETPinVal(C2,&val);
		}
		return KEY_8;
     88c:	88 e0       	ldi	r24, 0x08	; 8
     88e:	17 c0       	rjmp	.+46     	; 0x8be <__stack+0x5f>
	}
	val = 1;
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C3,&val);
     894:	be 01       	movw	r22, r28
     896:	6f 5f       	subi	r22, 0xFF	; 255
     898:	7f 4f       	sbci	r23, 0xFF	; 255
     89a:	87 e1       	ldi	r24, 0x17	; 23
     89c:	0e 94 49 06 	call	0xc92	; 0xc92 <DIO_s8GETPinVal>
	if(val == 0)
     8a0:	89 81       	ldd	r24, Y+1	; 0x01
     8a2:	88 23       	and	r24, r24
     8a4:	41 f0       	breq	.+16     	; 0x8b6 <__stack+0x57>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_9;
	}
	return KEY_NOTHING;
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	0a c0       	rjmp	.+20     	; 0x8be <__stack+0x5f>
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C3,&val);
     8aa:	be 01       	movw	r22, r28
     8ac:	6f 5f       	subi	r22, 0xFF	; 255
     8ae:	7f 4f       	sbci	r23, 0xFF	; 255
     8b0:	87 e1       	ldi	r24, 0x17	; 23
     8b2:	0e 94 49 06 	call	0xc92	; 0xc92 <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
     8b6:	89 81       	ldd	r24, Y+1	; 0x01
     8b8:	88 23       	and	r24, r24
     8ba:	b9 f3       	breq	.-18     	; 0x8aa <__stack+0x4b>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_9;
     8bc:	89 e0       	ldi	r24, 0x09	; 9
	}
	return KEY_NOTHING;
}
     8be:	0f 90       	pop	r0
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	08 95       	ret

000008c6 <KEYPAD_GetButton>:
EN_KEYPAD_BTNS KEYPAD_GetButton()
{
	EN_KEYPAD_BTNS PRESSED = KEY_NOTHING;
	while(PRESSED == KEY_NOTHING)
	{
		PRESSED = checkR1();
     8c6:	0e 94 31 03 	call	0x662	; 0x662 <checkR1>
		if(PRESSED != KEY_NOTHING) return PRESSED;
     8ca:	81 11       	cpse	r24, r1
     8cc:	06 c0       	rjmp	.+12     	; 0x8da <KEYPAD_GetButton+0x14>
		PRESSED = checkR2();
     8ce:	0e 94 97 03 	call	0x72e	; 0x72e <checkR2>
		if(PRESSED != KEY_NOTHING) return PRESSED;
     8d2:	81 11       	cpse	r24, r1
     8d4:	02 c0       	rjmp	.+4      	; 0x8da <KEYPAD_GetButton+0x14>
		PRESSED = checkR3();
     8d6:	0e 94 fd 03 	call	0x7fa	; 0x7fa <checkR3>
		if(PRESSED != KEY_NOTHING) return PRESSED;
		return KEY_NOTHING;
	}
	
	return KEY_NOTHING;
}
     8da:	08 95       	ret

000008dc <HLCD_vidWritecmd>:
     8dc:	1f 93       	push	r17
     8de:	cf 93       	push	r28
     8e0:	df 93       	push	r29
     8e2:	d8 2f       	mov	r29, r24
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	82 e0       	ldi	r24, 0x02	; 2
     8e8:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_s8SETPinVal>
     8ec:	60 e0       	ldi	r22, 0x00	; 0
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_s8SETPinVal>
     8f4:	1d 2f       	mov	r17, r29
     8f6:	12 95       	swap	r17
     8f8:	1f 70       	andi	r17, 0x0F	; 15
     8fa:	c0 e0       	ldi	r28, 0x00	; 0
     8fc:	11 c0       	rjmp	.+34     	; 0x920 <HLCD_vidWritecmd+0x44>
     8fe:	ec 2f       	mov	r30, r28
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	61 2f       	mov	r22, r17
     904:	70 e0       	ldi	r23, 0x00	; 0
     906:	0c 2e       	mov	r0, r28
     908:	02 c0       	rjmp	.+4      	; 0x90e <HLCD_vidWritecmd+0x32>
     90a:	75 95       	asr	r23
     90c:	67 95       	ror	r22
     90e:	0a 94       	dec	r0
     910:	e2 f7       	brpl	.-8      	; 0x90a <HLCD_vidWritecmd+0x2e>
     912:	61 70       	andi	r22, 0x01	; 1
     914:	e6 59       	subi	r30, 0x96	; 150
     916:	ff 4f       	sbci	r31, 0xFF	; 255
     918:	80 81       	ld	r24, Z
     91a:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_s8SETPinVal>
     91e:	cf 5f       	subi	r28, 0xFF	; 255
     920:	c4 30       	cpi	r28, 0x04	; 4
     922:	68 f3       	brcs	.-38     	; 0x8fe <HLCD_vidWritecmd+0x22>
     924:	61 e0       	ldi	r22, 0x01	; 1
     926:	83 e0       	ldi	r24, 0x03	; 3
     928:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_s8SETPinVal>
     92c:	89 ef       	ldi	r24, 0xF9	; 249
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	01 97       	sbiw	r24, 0x01	; 1
     932:	f1 f7       	brne	.-4      	; 0x930 <HLCD_vidWritecmd+0x54>
     934:	00 c0       	rjmp	.+0      	; 0x936 <HLCD_vidWritecmd+0x5a>
     936:	00 00       	nop
     938:	60 e0       	ldi	r22, 0x00	; 0
     93a:	83 e0       	ldi	r24, 0x03	; 3
     93c:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_s8SETPinVal>
     940:	92 e4       	ldi	r25, 0x42	; 66
     942:	9a 95       	dec	r25
     944:	f1 f7       	brne	.-4      	; 0x942 <HLCD_vidWritecmd+0x66>
     946:	00 c0       	rjmp	.+0      	; 0x948 <HLCD_vidWritecmd+0x6c>
     948:	df 70       	andi	r29, 0x0F	; 15
     94a:	c0 e0       	ldi	r28, 0x00	; 0
     94c:	11 c0       	rjmp	.+34     	; 0x970 <HLCD_vidWritecmd+0x94>
     94e:	ec 2f       	mov	r30, r28
     950:	f0 e0       	ldi	r31, 0x00	; 0
     952:	6d 2f       	mov	r22, r29
     954:	70 e0       	ldi	r23, 0x00	; 0
     956:	0c 2e       	mov	r0, r28
     958:	02 c0       	rjmp	.+4      	; 0x95e <HLCD_vidWritecmd+0x82>
     95a:	75 95       	asr	r23
     95c:	67 95       	ror	r22
     95e:	0a 94       	dec	r0
     960:	e2 f7       	brpl	.-8      	; 0x95a <HLCD_vidWritecmd+0x7e>
     962:	61 70       	andi	r22, 0x01	; 1
     964:	e6 59       	subi	r30, 0x96	; 150
     966:	ff 4f       	sbci	r31, 0xFF	; 255
     968:	80 81       	ld	r24, Z
     96a:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_s8SETPinVal>
     96e:	cf 5f       	subi	r28, 0xFF	; 255
     970:	c4 30       	cpi	r28, 0x04	; 4
     972:	68 f3       	brcs	.-38     	; 0x94e <HLCD_vidWritecmd+0x72>
     974:	61 e0       	ldi	r22, 0x01	; 1
     976:	83 e0       	ldi	r24, 0x03	; 3
     978:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_s8SETPinVal>
     97c:	89 ef       	ldi	r24, 0xF9	; 249
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	01 97       	sbiw	r24, 0x01	; 1
     982:	f1 f7       	brne	.-4      	; 0x980 <HLCD_vidWritecmd+0xa4>
     984:	00 c0       	rjmp	.+0      	; 0x986 <HLCD_vidWritecmd+0xaa>
     986:	00 00       	nop
     988:	60 e0       	ldi	r22, 0x00	; 0
     98a:	83 e0       	ldi	r24, 0x03	; 3
     98c:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_s8SETPinVal>
     990:	83 ef       	ldi	r24, 0xF3	; 243
     992:	91 e0       	ldi	r25, 0x01	; 1
     994:	01 97       	sbiw	r24, 0x01	; 1
     996:	f1 f7       	brne	.-4      	; 0x994 <HLCD_vidWritecmd+0xb8>
     998:	00 c0       	rjmp	.+0      	; 0x99a <HLCD_vidWritecmd+0xbe>
     99a:	00 00       	nop
     99c:	df 91       	pop	r29
     99e:	cf 91       	pop	r28
     9a0:	1f 91       	pop	r17
     9a2:	08 95       	ret

000009a4 <HLCD_vidInit>:
     9a4:	cf 93       	push	r28
     9a6:	c0 e0       	ldi	r28, 0x00	; 0
     9a8:	09 c0       	rjmp	.+18     	; 0x9bc <HLCD_vidInit+0x18>
     9aa:	ec 2f       	mov	r30, r28
     9ac:	f0 e0       	ldi	r31, 0x00	; 0
     9ae:	e6 59       	subi	r30, 0x96	; 150
     9b0:	ff 4f       	sbci	r31, 0xFF	; 255
     9b2:	61 e0       	ldi	r22, 0x01	; 1
     9b4:	80 81       	ld	r24, Z
     9b6:	0e 94 c9 05 	call	0xb92	; 0xb92 <DIO_s8SETPinDir>
     9ba:	cf 5f       	subi	r28, 0xFF	; 255
     9bc:	c4 30       	cpi	r28, 0x04	; 4
     9be:	a8 f3       	brcs	.-22     	; 0x9aa <HLCD_vidInit+0x6>
     9c0:	61 e0       	ldi	r22, 0x01	; 1
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	0e 94 c9 05 	call	0xb92	; 0xb92 <DIO_s8SETPinDir>
     9c8:	61 e0       	ldi	r22, 0x01	; 1
     9ca:	82 e0       	ldi	r24, 0x02	; 2
     9cc:	0e 94 c9 05 	call	0xb92	; 0xb92 <DIO_s8SETPinDir>
     9d0:	61 e0       	ldi	r22, 0x01	; 1
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	0e 94 c9 05 	call	0xb92	; 0xb92 <DIO_s8SETPinDir>
     9d8:	8f e0       	ldi	r24, 0x0F	; 15
     9da:	97 e2       	ldi	r25, 0x27	; 39
     9dc:	01 97       	sbiw	r24, 0x01	; 1
     9de:	f1 f7       	brne	.-4      	; 0x9dc <HLCD_vidInit+0x38>
     9e0:	00 c0       	rjmp	.+0      	; 0x9e2 <HLCD_vidInit+0x3e>
     9e2:	00 00       	nop
     9e4:	82 e0       	ldi	r24, 0x02	; 2
     9e6:	0e 94 6e 04 	call	0x8dc	; 0x8dc <HLCD_vidWritecmd>
     9ea:	89 ef       	ldi	r24, 0xF9	; 249
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	01 97       	sbiw	r24, 0x01	; 1
     9f0:	f1 f7       	brne	.-4      	; 0x9ee <HLCD_vidInit+0x4a>
     9f2:	00 c0       	rjmp	.+0      	; 0x9f4 <HLCD_vidInit+0x50>
     9f4:	00 00       	nop
     9f6:	88 e2       	ldi	r24, 0x28	; 40
     9f8:	0e 94 6e 04 	call	0x8dc	; 0x8dc <HLCD_vidWritecmd>
     9fc:	89 ef       	ldi	r24, 0xF9	; 249
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	01 97       	sbiw	r24, 0x01	; 1
     a02:	f1 f7       	brne	.-4      	; 0xa00 <HLCD_vidInit+0x5c>
     a04:	00 c0       	rjmp	.+0      	; 0xa06 <HLCD_vidInit+0x62>
     a06:	00 00       	nop
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	0e 94 6e 04 	call	0x8dc	; 0x8dc <HLCD_vidWritecmd>
     a0e:	87 ee       	ldi	r24, 0xE7	; 231
     a10:	93 e0       	ldi	r25, 0x03	; 3
     a12:	01 97       	sbiw	r24, 0x01	; 1
     a14:	f1 f7       	brne	.-4      	; 0xa12 <HLCD_vidInit+0x6e>
     a16:	00 c0       	rjmp	.+0      	; 0xa18 <HLCD_vidInit+0x74>
     a18:	00 00       	nop
     a1a:	86 e0       	ldi	r24, 0x06	; 6
     a1c:	0e 94 6e 04 	call	0x8dc	; 0x8dc <HLCD_vidWritecmd>
     a20:	89 ef       	ldi	r24, 0xF9	; 249
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	01 97       	sbiw	r24, 0x01	; 1
     a26:	f1 f7       	brne	.-4      	; 0xa24 <HLCD_vidInit+0x80>
     a28:	00 c0       	rjmp	.+0      	; 0xa2a <HLCD_vidInit+0x86>
     a2a:	00 00       	nop
     a2c:	8e e0       	ldi	r24, 0x0E	; 14
     a2e:	0e 94 6e 04 	call	0x8dc	; 0x8dc <HLCD_vidWritecmd>
     a32:	89 ef       	ldi	r24, 0xF9	; 249
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	01 97       	sbiw	r24, 0x01	; 1
     a38:	f1 f7       	brne	.-4      	; 0xa36 <HLCD_vidInit+0x92>
     a3a:	00 c0       	rjmp	.+0      	; 0xa3c <HLCD_vidInit+0x98>
     a3c:	00 00       	nop
     a3e:	cf 91       	pop	r28
     a40:	08 95       	ret

00000a42 <HLCD_vidWriteChar>:
     a42:	1f 93       	push	r17
     a44:	cf 93       	push	r28
     a46:	df 93       	push	r29
     a48:	d8 2f       	mov	r29, r24
     a4a:	60 e0       	ldi	r22, 0x00	; 0
     a4c:	82 e0       	ldi	r24, 0x02	; 2
     a4e:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_s8SETPinVal>
     a52:	61 e0       	ldi	r22, 0x01	; 1
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_s8SETPinVal>
     a5a:	1d 2f       	mov	r17, r29
     a5c:	12 95       	swap	r17
     a5e:	1f 70       	andi	r17, 0x0F	; 15
     a60:	c0 e0       	ldi	r28, 0x00	; 0
     a62:	11 c0       	rjmp	.+34     	; 0xa86 <HLCD_vidWriteChar+0x44>
     a64:	ec 2f       	mov	r30, r28
     a66:	f0 e0       	ldi	r31, 0x00	; 0
     a68:	61 2f       	mov	r22, r17
     a6a:	70 e0       	ldi	r23, 0x00	; 0
     a6c:	0c 2e       	mov	r0, r28
     a6e:	02 c0       	rjmp	.+4      	; 0xa74 <HLCD_vidWriteChar+0x32>
     a70:	75 95       	asr	r23
     a72:	67 95       	ror	r22
     a74:	0a 94       	dec	r0
     a76:	e2 f7       	brpl	.-8      	; 0xa70 <HLCD_vidWriteChar+0x2e>
     a78:	61 70       	andi	r22, 0x01	; 1
     a7a:	e6 59       	subi	r30, 0x96	; 150
     a7c:	ff 4f       	sbci	r31, 0xFF	; 255
     a7e:	80 81       	ld	r24, Z
     a80:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_s8SETPinVal>
     a84:	cf 5f       	subi	r28, 0xFF	; 255
     a86:	c4 30       	cpi	r28, 0x04	; 4
     a88:	68 f3       	brcs	.-38     	; 0xa64 <HLCD_vidWriteChar+0x22>
     a8a:	61 e0       	ldi	r22, 0x01	; 1
     a8c:	83 e0       	ldi	r24, 0x03	; 3
     a8e:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_s8SETPinVal>
     a92:	89 ef       	ldi	r24, 0xF9	; 249
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	01 97       	sbiw	r24, 0x01	; 1
     a98:	f1 f7       	brne	.-4      	; 0xa96 <HLCD_vidWriteChar+0x54>
     a9a:	00 c0       	rjmp	.+0      	; 0xa9c <HLCD_vidWriteChar+0x5a>
     a9c:	00 00       	nop
     a9e:	60 e0       	ldi	r22, 0x00	; 0
     aa0:	83 e0       	ldi	r24, 0x03	; 3
     aa2:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_s8SETPinVal>
     aa6:	92 e4       	ldi	r25, 0x42	; 66
     aa8:	9a 95       	dec	r25
     aaa:	f1 f7       	brne	.-4      	; 0xaa8 <HLCD_vidWriteChar+0x66>
     aac:	00 c0       	rjmp	.+0      	; 0xaae <HLCD_vidWriteChar+0x6c>
     aae:	df 70       	andi	r29, 0x0F	; 15
     ab0:	c0 e0       	ldi	r28, 0x00	; 0
     ab2:	11 c0       	rjmp	.+34     	; 0xad6 <HLCD_vidWriteChar+0x94>
     ab4:	ec 2f       	mov	r30, r28
     ab6:	f0 e0       	ldi	r31, 0x00	; 0
     ab8:	6d 2f       	mov	r22, r29
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	0c 2e       	mov	r0, r28
     abe:	02 c0       	rjmp	.+4      	; 0xac4 <HLCD_vidWriteChar+0x82>
     ac0:	75 95       	asr	r23
     ac2:	67 95       	ror	r22
     ac4:	0a 94       	dec	r0
     ac6:	e2 f7       	brpl	.-8      	; 0xac0 <HLCD_vidWriteChar+0x7e>
     ac8:	61 70       	andi	r22, 0x01	; 1
     aca:	e6 59       	subi	r30, 0x96	; 150
     acc:	ff 4f       	sbci	r31, 0xFF	; 255
     ace:	80 81       	ld	r24, Z
     ad0:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_s8SETPinVal>
     ad4:	cf 5f       	subi	r28, 0xFF	; 255
     ad6:	c4 30       	cpi	r28, 0x04	; 4
     ad8:	68 f3       	brcs	.-38     	; 0xab4 <HLCD_vidWriteChar+0x72>
     ada:	61 e0       	ldi	r22, 0x01	; 1
     adc:	83 e0       	ldi	r24, 0x03	; 3
     ade:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_s8SETPinVal>
     ae2:	89 ef       	ldi	r24, 0xF9	; 249
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	01 97       	sbiw	r24, 0x01	; 1
     ae8:	f1 f7       	brne	.-4      	; 0xae6 <HLCD_vidWriteChar+0xa4>
     aea:	00 c0       	rjmp	.+0      	; 0xaec <HLCD_vidWriteChar+0xaa>
     aec:	00 00       	nop
     aee:	60 e0       	ldi	r22, 0x00	; 0
     af0:	83 e0       	ldi	r24, 0x03	; 3
     af2:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_s8SETPinVal>
     af6:	83 ef       	ldi	r24, 0xF3	; 243
     af8:	91 e0       	ldi	r25, 0x01	; 1
     afa:	01 97       	sbiw	r24, 0x01	; 1
     afc:	f1 f7       	brne	.-4      	; 0xafa <HLCD_vidWriteChar+0xb8>
     afe:	00 c0       	rjmp	.+0      	; 0xb00 <HLCD_vidWriteChar+0xbe>
     b00:	00 00       	nop
     b02:	df 91       	pop	r29
     b04:	cf 91       	pop	r28
     b06:	1f 91       	pop	r17
     b08:	08 95       	ret

00000b0a <HLCD_ClrDisplay>:
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	0e 94 6e 04 	call	0x8dc	; 0x8dc <HLCD_vidWritecmd>
     b10:	87 ee       	ldi	r24, 0xE7	; 231
     b12:	93 e0       	ldi	r25, 0x03	; 3
     b14:	01 97       	sbiw	r24, 0x01	; 1
     b16:	f1 f7       	brne	.-4      	; 0xb14 <HLCD_ClrDisplay+0xa>
     b18:	00 c0       	rjmp	.+0      	; 0xb1a <HLCD_ClrDisplay+0x10>
     b1a:	00 00       	nop
     b1c:	82 e0       	ldi	r24, 0x02	; 2
     b1e:	0e 94 6e 04 	call	0x8dc	; 0x8dc <HLCD_vidWritecmd>
     b22:	87 ee       	ldi	r24, 0xE7	; 231
     b24:	93 e0       	ldi	r25, 0x03	; 3
     b26:	01 97       	sbiw	r24, 0x01	; 1
     b28:	f1 f7       	brne	.-4      	; 0xb26 <HLCD_ClrDisplay+0x1c>
     b2a:	00 c0       	rjmp	.+0      	; 0xb2c <HLCD_ClrDisplay+0x22>
     b2c:	00 00       	nop
     b2e:	08 95       	ret

00000b30 <HLCD_gotoXY>:
 * 				  pos -> take colom number from 0 ~ 16
 * return		: void
 * */
void HLCD_gotoXY(Uchar8_t row, Uchar8_t pos)
{
	if (row==0 && pos < 16)
     b30:	81 11       	cpse	r24, r1
     b32:	08 c0       	rjmp	.+16     	; 0xb44 <HLCD_gotoXY+0x14>
     b34:	60 31       	cpi	r22, 0x10	; 16
     b36:	30 f4       	brcc	.+12     	; 0xb44 <HLCD_gotoXY+0x14>
	{
		HLCD_vidWritecmd((pos & 0x0F)| 0x80);
     b38:	86 2f       	mov	r24, r22
     b3a:	8f 70       	andi	r24, 0x0F	; 15
     b3c:	80 68       	ori	r24, 0x80	; 128
     b3e:	0e 94 6e 04 	call	0x8dc	; 0x8dc <HLCD_vidWritecmd>
     b42:	08 95       	ret
	}
	else if (row==1 && pos < 16)
     b44:	81 30       	cpi	r24, 0x01	; 1
     b46:	39 f4       	brne	.+14     	; 0xb56 <HLCD_gotoXY+0x26>
     b48:	60 31       	cpi	r22, 0x10	; 16
     b4a:	28 f4       	brcc	.+10     	; 0xb56 <HLCD_gotoXY+0x26>
	{
		HLCD_vidWritecmd((pos & 0x0F)| 0xC0);
     b4c:	86 2f       	mov	r24, r22
     b4e:	8f 70       	andi	r24, 0x0F	; 15
     b50:	80 6c       	ori	r24, 0xC0	; 192
     b52:	0e 94 6e 04 	call	0x8dc	; 0x8dc <HLCD_vidWritecmd>
     b56:	08 95       	ret

00000b58 <HLCD_WriteString>:
 * description 	: func to write string on lcd
 * input param 	: str --> which take string as argument
 * return		: void
 * */
void HLCD_WriteString(const char* str)
{
     b58:	0f 93       	push	r16
     b5a:	1f 93       	push	r17
     b5c:	cf 93       	push	r28
     b5e:	df 93       	push	r29
     b60:	8c 01       	movw	r16, r24
	Uint16_t count = 0;
	Uchar8_t string = str[count];
     b62:	fc 01       	movw	r30, r24
     b64:	80 81       	ld	r24, Z
 * input param 	: str --> which take string as argument
 * return		: void
 * */
void HLCD_WriteString(const char* str)
{
	Uint16_t count = 0;
     b66:	c0 e0       	ldi	r28, 0x00	; 0
     b68:	d0 e0       	ldi	r29, 0x00	; 0
	Uchar8_t string = str[count];
	while(string)
     b6a:	07 c0       	rjmp	.+14     	; 0xb7a <HLCD_WriteString+0x22>
	{
		HLCD_vidWriteChar(string);
     b6c:	0e 94 21 05 	call	0xa42	; 0xa42 <HLCD_vidWriteChar>
		string = str[++count];
     b70:	21 96       	adiw	r28, 0x01	; 1
     b72:	f8 01       	movw	r30, r16
     b74:	ec 0f       	add	r30, r28
     b76:	fd 1f       	adc	r31, r29
     b78:	80 81       	ld	r24, Z
 * */
void HLCD_WriteString(const char* str)
{
	Uint16_t count = 0;
	Uchar8_t string = str[count];
	while(string)
     b7a:	81 11       	cpse	r24, r1
     b7c:	f7 cf       	rjmp	.-18     	; 0xb6c <HLCD_WriteString+0x14>
	{
		HLCD_vidWriteChar(string);
		string = str[++count];
	}
}
     b7e:	df 91       	pop	r29
     b80:	cf 91       	pop	r28
     b82:	1f 91       	pop	r17
     b84:	0f 91       	pop	r16
     b86:	08 95       	ret

00000b88 <main>:
 */ 
#include "APP/app.h"

void main(void)
{
	APP_Init();
     b88:	0e 94 52 00 	call	0xa4	; 0xa4 <APP_Init>

    while (1) 
    {
		APP_Start();
     b8c:	0e 94 67 00 	call	0xce	; 0xce <APP_Start>
     b90:	fd cf       	rjmp	.-6      	; 0xb8c <main+0x4>

00000b92 <DIO_s8SETPinDir>:
	{
		errStatus = E_NOK;
	}
	return errStatus;

}
     b92:	80 32       	cpi	r24, 0x20	; 32
     b94:	c0 f5       	brcc	.+112    	; 0xc06 <DIO_s8SETPinDir+0x74>
     b96:	62 30       	cpi	r22, 0x02	; 2
     b98:	c0 f5       	brcc	.+112    	; 0xc0a <DIO_s8SETPinDir+0x78>
     b9a:	e8 2f       	mov	r30, r24
     b9c:	e6 95       	lsr	r30
     b9e:	e6 95       	lsr	r30
     ba0:	e6 95       	lsr	r30
     ba2:	87 70       	andi	r24, 0x07	; 7
     ba4:	61 11       	cpse	r22, r1
     ba6:	17 c0       	rjmp	.+46     	; 0xbd6 <DIO_s8SETPinDir+0x44>
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	ee 0f       	add	r30, r30
     bac:	ff 1f       	adc	r31, r31
     bae:	ea 58       	subi	r30, 0x8A	; 138
     bb0:	ff 4f       	sbci	r31, 0xFF	; 255
     bb2:	01 90       	ld	r0, Z+
     bb4:	f0 81       	ld	r31, Z
     bb6:	e0 2d       	mov	r30, r0
     bb8:	40 81       	ld	r20, Z
     bba:	21 e0       	ldi	r18, 0x01	; 1
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	b9 01       	movw	r22, r18
     bc0:	02 c0       	rjmp	.+4      	; 0xbc6 <DIO_s8SETPinDir+0x34>
     bc2:	66 0f       	add	r22, r22
     bc4:	77 1f       	adc	r23, r23
     bc6:	8a 95       	dec	r24
     bc8:	e2 f7       	brpl	.-8      	; 0xbc2 <DIO_s8SETPinDir+0x30>
     bca:	cb 01       	movw	r24, r22
     bcc:	80 95       	com	r24
     bce:	84 23       	and	r24, r20
     bd0:	80 83       	st	Z, r24
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	08 95       	ret
     bd6:	61 30       	cpi	r22, 0x01	; 1
     bd8:	d1 f4       	brne	.+52     	; 0xc0e <DIO_s8SETPinDir+0x7c>
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	ee 0f       	add	r30, r30
     bde:	ff 1f       	adc	r31, r31
     be0:	ea 58       	subi	r30, 0x8A	; 138
     be2:	ff 4f       	sbci	r31, 0xFF	; 255
     be4:	01 90       	ld	r0, Z+
     be6:	f0 81       	ld	r31, Z
     be8:	e0 2d       	mov	r30, r0
     bea:	40 81       	ld	r20, Z
     bec:	21 e0       	ldi	r18, 0x01	; 1
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	b9 01       	movw	r22, r18
     bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <DIO_s8SETPinDir+0x66>
     bf4:	66 0f       	add	r22, r22
     bf6:	77 1f       	adc	r23, r23
     bf8:	8a 95       	dec	r24
     bfa:	e2 f7       	brpl	.-8      	; 0xbf4 <DIO_s8SETPinDir+0x62>
     bfc:	cb 01       	movw	r24, r22
     bfe:	84 2b       	or	r24, r20
     c00:	80 83       	st	Z, r24
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	08 95       	ret
     c06:	8f ef       	ldi	r24, 0xFF	; 255
     c08:	08 95       	ret
     c0a:	8f ef       	ldi	r24, 0xFF	; 255
     c0c:	08 95       	ret
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	08 95       	ret

00000c12 <DIO_s8SETPinVal>:
     c12:	80 32       	cpi	r24, 0x20	; 32
     c14:	c0 f5       	brcc	.+112    	; 0xc86 <DIO_s8SETPinVal+0x74>
     c16:	62 30       	cpi	r22, 0x02	; 2
     c18:	c0 f5       	brcc	.+112    	; 0xc8a <DIO_s8SETPinVal+0x78>
     c1a:	e8 2f       	mov	r30, r24
     c1c:	e6 95       	lsr	r30
     c1e:	e6 95       	lsr	r30
     c20:	e6 95       	lsr	r30
     c22:	87 70       	andi	r24, 0x07	; 7
     c24:	61 11       	cpse	r22, r1
     c26:	17 c0       	rjmp	.+46     	; 0xc56 <DIO_s8SETPinVal+0x44>
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	ee 0f       	add	r30, r30
     c2c:	ff 1f       	adc	r31, r31
     c2e:	e2 58       	subi	r30, 0x82	; 130
     c30:	ff 4f       	sbci	r31, 0xFF	; 255
     c32:	01 90       	ld	r0, Z+
     c34:	f0 81       	ld	r31, Z
     c36:	e0 2d       	mov	r30, r0
     c38:	40 81       	ld	r20, Z
     c3a:	21 e0       	ldi	r18, 0x01	; 1
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	b9 01       	movw	r22, r18
     c40:	02 c0       	rjmp	.+4      	; 0xc46 <DIO_s8SETPinVal+0x34>
     c42:	66 0f       	add	r22, r22
     c44:	77 1f       	adc	r23, r23
     c46:	8a 95       	dec	r24
     c48:	e2 f7       	brpl	.-8      	; 0xc42 <DIO_s8SETPinVal+0x30>
     c4a:	cb 01       	movw	r24, r22
     c4c:	80 95       	com	r24
     c4e:	84 23       	and	r24, r20
     c50:	80 83       	st	Z, r24
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	08 95       	ret
     c56:	61 30       	cpi	r22, 0x01	; 1
     c58:	d1 f4       	brne	.+52     	; 0xc8e <DIO_s8SETPinVal+0x7c>
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	ee 0f       	add	r30, r30
     c5e:	ff 1f       	adc	r31, r31
     c60:	e2 58       	subi	r30, 0x82	; 130
     c62:	ff 4f       	sbci	r31, 0xFF	; 255
     c64:	01 90       	ld	r0, Z+
     c66:	f0 81       	ld	r31, Z
     c68:	e0 2d       	mov	r30, r0
     c6a:	40 81       	ld	r20, Z
     c6c:	21 e0       	ldi	r18, 0x01	; 1
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	b9 01       	movw	r22, r18
     c72:	02 c0       	rjmp	.+4      	; 0xc78 <DIO_s8SETPinVal+0x66>
     c74:	66 0f       	add	r22, r22
     c76:	77 1f       	adc	r23, r23
     c78:	8a 95       	dec	r24
     c7a:	e2 f7       	brpl	.-8      	; 0xc74 <DIO_s8SETPinVal+0x62>
     c7c:	cb 01       	movw	r24, r22
     c7e:	84 2b       	or	r24, r20
     c80:	80 83       	st	Z, r24
     c82:	80 e0       	ldi	r24, 0x00	; 0
     c84:	08 95       	ret
     c86:	8f ef       	ldi	r24, 0xFF	; 255
     c88:	08 95       	ret
     c8a:	8f ef       	ldi	r24, 0xFF	; 255
     c8c:	08 95       	ret
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	08 95       	ret

00000c92 <DIO_s8GETPinVal>:
Uchar8_t DIO_s8GETPinVal (enu_pin enPinCopy, Uchar8_t* pu8Val)
{
	Uchar8_t errStatus = E_OK;
	Uchar8_t portID;
	Uchar8_t pinID;
	if (enPinCopy < PIN_INVALID)
     c92:	80 32       	cpi	r24, 0x20	; 32
     c94:	d8 f4       	brcc	.+54     	; 0xccc <DIO_s8GETPinVal+0x3a>
	{
		portID = enPinCopy/8;
     c96:	e8 2f       	mov	r30, r24
     c98:	e6 95       	lsr	r30
     c9a:	e6 95       	lsr	r30
     c9c:	e6 95       	lsr	r30
		pinID  = enPinCopy%8;
     c9e:	87 70       	andi	r24, 0x07	; 7

		*pu8Val = GET_BIT(*pinReg[portID], pinID);
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	ee 0f       	add	r30, r30
     ca4:	ff 1f       	adc	r31, r31
     ca6:	e2 59       	subi	r30, 0x92	; 146
     ca8:	ff 4f       	sbci	r31, 0xFF	; 255
     caa:	01 90       	ld	r0, Z+
     cac:	f0 81       	ld	r31, Z
     cae:	e0 2d       	mov	r30, r0
     cb0:	20 81       	ld	r18, Z
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	a9 01       	movw	r20, r18
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <DIO_s8GETPinVal+0x2a>
     cb8:	55 95       	asr	r21
     cba:	47 95       	ror	r20
     cbc:	8a 95       	dec	r24
     cbe:	e2 f7       	brpl	.-8      	; 0xcb8 <DIO_s8GETPinVal+0x26>
     cc0:	ca 01       	movw	r24, r20
     cc2:	81 70       	andi	r24, 0x01	; 1
     cc4:	fb 01       	movw	r30, r22
     cc6:	80 83       	st	Z, r24

}

Uchar8_t DIO_s8GETPinVal (enu_pin enPinCopy, Uchar8_t* pu8Val)
{
	Uchar8_t errStatus = E_OK;
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	08 95       	ret
		*pu8Val = GET_BIT(*pinReg[portID], pinID);

	}
	else
	{
		errStatus = E_NOK;
     ccc:	8f ef       	ldi	r24, 0xFF	; 255
	}
	return errStatus;
     cce:	08 95       	ret

00000cd0 <SET_GLOBAL_INTERRUPT>:
void (*ptrINT2)(void) = 0;

EN_EXTINT_ERROR SET_GLOBAL_INTERRUPT(EN_GLOBAL_INT state)
{
	
	if(state == ENABLE)
     cd0:	81 30       	cpi	r24, 0x01	; 1
     cd2:	19 f4       	brne	.+6      	; 0xcda <SET_GLOBAL_INTERRUPT+0xa>
	sei();
     cd4:	78 94       	sei
    else if (state == DISABLE)
	cli();
	else return EXTINT_NOT_OK;
	return EXTINT_OK;
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	08 95       	ret
EN_EXTINT_ERROR SET_GLOBAL_INTERRUPT(EN_GLOBAL_INT state)
{
	
	if(state == ENABLE)
	sei();
    else if (state == DISABLE)
     cda:	81 11       	cpse	r24, r1
     cdc:	02 c0       	rjmp	.+4      	; 0xce2 <SET_GLOBAL_INTERRUPT+0x12>
	cli();
     cde:	f8 94       	cli
     ce0:	08 95       	ret
	else return EXTINT_NOT_OK;
     ce2:	81 e0       	ldi	r24, 0x01	; 1
	return EXTINT_OK;
}
     ce4:	08 95       	ret

00000ce6 <EXTINT_init>:

EN_EXTINT_ERROR EXTINT_init(EN_EXINT_NUMBER INTx ,EN_Sence_Control INTxSense)
{
     ce6:	cf 93       	push	r28
     ce8:	df 93       	push	r29
     cea:	c8 2f       	mov	r28, r24
     cec:	d6 2f       	mov	r29, r22
	
	SET_GLOBAL_INTERRUPT(ENABLE); // SET GLOBAL INTERRUPT
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	0e 94 68 06 	call	0xcd0	; 0xcd0 <SET_GLOBAL_INTERRUPT>
	switch(INTx)
     cf4:	c1 30       	cpi	r28, 0x01	; 1
     cf6:	99 f1       	breq	.+102    	; 0xd5e <EXTINT_init+0x78>
     cf8:	20 f0       	brcs	.+8      	; 0xd02 <EXTINT_init+0x1c>
     cfa:	c2 30       	cpi	r28, 0x02	; 2
     cfc:	09 f4       	brne	.+2      	; 0xd00 <EXTINT_init+0x1a>
     cfe:	5d c0       	rjmp	.+186    	; 0xdba <EXTINT_init+0xd4>
     d00:	72 c0       	rjmp	.+228    	; 0xde6 <EXTINT_init+0x100>
	{
		case EXTINT0:
		  if(INTxSense == LOW_LEVEL)
     d02:	d1 11       	cpse	r29, r1
     d04:	07 c0       	rjmp	.+14     	; 0xd14 <EXTINT_init+0x2e>
		  {
			  CLEAR_BIT(MCUCR,ISC00);
     d06:	85 b7       	in	r24, 0x35	; 53
     d08:	8e 7f       	andi	r24, 0xFE	; 254
     d0a:	85 bf       	out	0x35, r24	; 53
			  CLEAR_BIT(MCUCR,ISC01);
     d0c:	85 b7       	in	r24, 0x35	; 53
     d0e:	8d 7f       	andi	r24, 0xFD	; 253
     d10:	85 bf       	out	0x35, r24	; 53
     d12:	20 c0       	rjmp	.+64     	; 0xd54 <EXTINT_init+0x6e>
		  }
		  else if(INTxSense == FALLING_EDGE)
     d14:	d1 30       	cpi	r29, 0x01	; 1
     d16:	39 f4       	brne	.+14     	; 0xd26 <EXTINT_init+0x40>
		  {
			  CLEAR_BIT(MCUCR,ISC00);
     d18:	85 b7       	in	r24, 0x35	; 53
     d1a:	8e 7f       	andi	r24, 0xFE	; 254
     d1c:	85 bf       	out	0x35, r24	; 53
			  SET_BIT(MCUCR,ISC01);
     d1e:	85 b7       	in	r24, 0x35	; 53
     d20:	82 60       	ori	r24, 0x02	; 2
     d22:	85 bf       	out	0x35, r24	; 53
     d24:	17 c0       	rjmp	.+46     	; 0xd54 <EXTINT_init+0x6e>
		  }
		  else if(INTxSense == RISING_EDGE)
     d26:	d2 30       	cpi	r29, 0x02	; 2
     d28:	39 f4       	brne	.+14     	; 0xd38 <EXTINT_init+0x52>
		  {
			  SET_BIT(MCUCR,ISC00);
     d2a:	85 b7       	in	r24, 0x35	; 53
     d2c:	81 60       	ori	r24, 0x01	; 1
     d2e:	85 bf       	out	0x35, r24	; 53
			  SET_BIT(MCUCR,ISC01);
     d30:	85 b7       	in	r24, 0x35	; 53
     d32:	82 60       	ori	r24, 0x02	; 2
     d34:	85 bf       	out	0x35, r24	; 53
     d36:	0e c0       	rjmp	.+28     	; 0xd54 <EXTINT_init+0x6e>
		  }
		  else if(INTxSense == ANY_LOGICAL_CHANGE)
     d38:	d3 30       	cpi	r29, 0x03	; 3
     d3a:	39 f4       	brne	.+14     	; 0xd4a <EXTINT_init+0x64>
		  {
			  SET_BIT(MCUCR,ISC00);
     d3c:	85 b7       	in	r24, 0x35	; 53
     d3e:	81 60       	ori	r24, 0x01	; 1
     d40:	85 bf       	out	0x35, r24	; 53
			  CLEAR_BIT(MCUCR,ISC01);
     d42:	85 b7       	in	r24, 0x35	; 53
     d44:	8d 7f       	andi	r24, 0xFD	; 253
     d46:	85 bf       	out	0x35, r24	; 53
     d48:	05 c0       	rjmp	.+10     	; 0xd54 <EXTINT_init+0x6e>
		  }
		  else   // handle sense option error
		  {
			  SET_GLOBAL_INTERRUPT(DISABLE);
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	0e 94 68 06 	call	0xcd0	; 0xcd0 <SET_GLOBAL_INTERRUPT>
			   return EXTINT_NOT_OK;
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	4d c0       	rjmp	.+154    	; 0xdee <EXTINT_init+0x108>
		  }	   
		  SET_BIT(GICR,INT0); //Enable External INT0  (PIE)
     d54:	8b b7       	in	r24, 0x3b	; 59
     d56:	80 64       	ori	r24, 0x40	; 64
     d58:	8b bf       	out	0x3b, r24	; 59
		default: // handle wrong Choose for EXT Interrupt Number
		  SET_GLOBAL_INTERRUPT(DISABLE);
		  return EXTINT_NOT_OK;
		  break;
	}
	return EXTINT_OK;
     d5a:	80 e0       	ldi	r24, 0x00	; 0
		  {
			  SET_GLOBAL_INTERRUPT(DISABLE);
			   return EXTINT_NOT_OK;
		  }	   
		  SET_BIT(GICR,INT0); //Enable External INT0  (PIE)
		  break;
     d5c:	48 c0       	rjmp	.+144    	; 0xdee <EXTINT_init+0x108>
		case EXTINT1:
		  if(INTxSense == LOW_LEVEL)
     d5e:	d1 11       	cpse	r29, r1
     d60:	07 c0       	rjmp	.+14     	; 0xd70 <EXTINT_init+0x8a>
		  {
			  CLEAR_BIT(MCUCR,ISC10);
     d62:	85 b7       	in	r24, 0x35	; 53
     d64:	8b 7f       	andi	r24, 0xFB	; 251
     d66:	85 bf       	out	0x35, r24	; 53
			  CLEAR_BIT(MCUCR,ISC11);
     d68:	85 b7       	in	r24, 0x35	; 53
     d6a:	87 7f       	andi	r24, 0xF7	; 247
     d6c:	85 bf       	out	0x35, r24	; 53
     d6e:	20 c0       	rjmp	.+64     	; 0xdb0 <EXTINT_init+0xca>
		  }
		  else if(INTxSense == FALLING_EDGE)
     d70:	d1 30       	cpi	r29, 0x01	; 1
     d72:	39 f4       	brne	.+14     	; 0xd82 <EXTINT_init+0x9c>
		  {
			  CLEAR_BIT(MCUCR,ISC10);
     d74:	85 b7       	in	r24, 0x35	; 53
     d76:	8b 7f       	andi	r24, 0xFB	; 251
     d78:	85 bf       	out	0x35, r24	; 53
			  SET_BIT(MCUCR,ISC11);
     d7a:	85 b7       	in	r24, 0x35	; 53
     d7c:	88 60       	ori	r24, 0x08	; 8
     d7e:	85 bf       	out	0x35, r24	; 53
     d80:	17 c0       	rjmp	.+46     	; 0xdb0 <EXTINT_init+0xca>
		  }
		  else if(INTxSense == RISING_EDGE)
     d82:	d2 30       	cpi	r29, 0x02	; 2
     d84:	39 f4       	brne	.+14     	; 0xd94 <EXTINT_init+0xae>
		  {
			  SET_BIT(MCUCR,ISC10);
     d86:	85 b7       	in	r24, 0x35	; 53
     d88:	84 60       	ori	r24, 0x04	; 4
     d8a:	85 bf       	out	0x35, r24	; 53
			  SET_BIT(MCUCR,ISC11);
     d8c:	85 b7       	in	r24, 0x35	; 53
     d8e:	88 60       	ori	r24, 0x08	; 8
     d90:	85 bf       	out	0x35, r24	; 53
     d92:	0e c0       	rjmp	.+28     	; 0xdb0 <EXTINT_init+0xca>
		  }
		  else if(INTxSense == ANY_LOGICAL_CHANGE)
     d94:	d3 30       	cpi	r29, 0x03	; 3
     d96:	39 f4       	brne	.+14     	; 0xda6 <EXTINT_init+0xc0>
		  {
			  SET_BIT(MCUCR,ISC10);
     d98:	85 b7       	in	r24, 0x35	; 53
     d9a:	84 60       	ori	r24, 0x04	; 4
     d9c:	85 bf       	out	0x35, r24	; 53
			  CLEAR_BIT(MCUCR,ISC11);
     d9e:	85 b7       	in	r24, 0x35	; 53
     da0:	87 7f       	andi	r24, 0xF7	; 247
     da2:	85 bf       	out	0x35, r24	; 53
     da4:	05 c0       	rjmp	.+10     	; 0xdb0 <EXTINT_init+0xca>
		  }
		  else   // handle sense option error
		  {
		 	 SET_GLOBAL_INTERRUPT(DISABLE);
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	0e 94 68 06 	call	0xcd0	; 0xcd0 <SET_GLOBAL_INTERRUPT>
		 	 return EXTINT_NOT_OK;
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	1f c0       	rjmp	.+62     	; 0xdee <EXTINT_init+0x108>
		  }
		  SET_BIT(GICR,INT1); //Enable External INT1  (PIE)
     db0:	8b b7       	in	r24, 0x3b	; 59
     db2:	80 68       	ori	r24, 0x80	; 128
     db4:	8b bf       	out	0x3b, r24	; 59
		default: // handle wrong Choose for EXT Interrupt Number
		  SET_GLOBAL_INTERRUPT(DISABLE);
		  return EXTINT_NOT_OK;
		  break;
	}
	return EXTINT_OK;
     db6:	80 e0       	ldi	r24, 0x00	; 0
		  {
		 	 SET_GLOBAL_INTERRUPT(DISABLE);
		 	 return EXTINT_NOT_OK;
		  }
		  SET_BIT(GICR,INT1); //Enable External INT1  (PIE)
		  break;
     db8:	1a c0       	rjmp	.+52     	; 0xdee <EXTINT_init+0x108>
		case EXTINT2:
		 
		  if(INTxSense == FALLING_EDGE)
     dba:	d1 30       	cpi	r29, 0x01	; 1
     dbc:	21 f4       	brne	.+8      	; 0xdc6 <EXTINT_init+0xe0>
		  {
			  CLEAR_BIT(MCUCSR,ISC2);
     dbe:	84 b7       	in	r24, 0x34	; 52
     dc0:	8f 7b       	andi	r24, 0xBF	; 191
     dc2:	84 bf       	out	0x34, r24	; 52
     dc4:	0b c0       	rjmp	.+22     	; 0xddc <EXTINT_init+0xf6>
		  }
		  else if(INTxSense == RISING_EDGE)
     dc6:	d2 30       	cpi	r29, 0x02	; 2
     dc8:	21 f4       	brne	.+8      	; 0xdd2 <EXTINT_init+0xec>
		  {
			  SET_BIT(MCUCSR,ISC2);
     dca:	84 b7       	in	r24, 0x34	; 52
     dcc:	80 64       	ori	r24, 0x40	; 64
     dce:	84 bf       	out	0x34, r24	; 52
     dd0:	05 c0       	rjmp	.+10     	; 0xddc <EXTINT_init+0xf6>
		  }
		  else   // handle sense option error
		  {
		 	 SET_GLOBAL_INTERRUPT(DISABLE);
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	0e 94 68 06 	call	0xcd0	; 0xcd0 <SET_GLOBAL_INTERRUPT>
		 	 return EXTINT_NOT_OK;
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	09 c0       	rjmp	.+18     	; 0xdee <EXTINT_init+0x108>
		  }
		  SET_BIT(GICR,INT2); //Enable External INT1  (PIE)
     ddc:	8b b7       	in	r24, 0x3b	; 59
     dde:	80 62       	ori	r24, 0x20	; 32
     de0:	8b bf       	out	0x3b, r24	; 59
		default: // handle wrong Choose for EXT Interrupt Number
		  SET_GLOBAL_INTERRUPT(DISABLE);
		  return EXTINT_NOT_OK;
		  break;
	}
	return EXTINT_OK;
     de2:	80 e0       	ldi	r24, 0x00	; 0
		  {
		 	 SET_GLOBAL_INTERRUPT(DISABLE);
		 	 return EXTINT_NOT_OK;
		  }
		  SET_BIT(GICR,INT2); //Enable External INT1  (PIE)
		  break;
     de4:	04 c0       	rjmp	.+8      	; 0xdee <EXTINT_init+0x108>
		default: // handle wrong Choose for EXT Interrupt Number
		  SET_GLOBAL_INTERRUPT(DISABLE);
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	0e 94 68 06 	call	0xcd0	; 0xcd0 <SET_GLOBAL_INTERRUPT>
		  return EXTINT_NOT_OK;
     dec:	81 e0       	ldi	r24, 0x01	; 1
		  break;
	}
	return EXTINT_OK;
}
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
     df2:	08 95       	ret

00000df4 <EXTINT_CallBack>:

EN_EXTINT_ERROR EXTINT_CallBack(EN_EXINT_NUMBER INTx,void(*ptrfunc)(void))
{
	if(INTx == EXTINT0 ) ptrINT0 = ptrfunc;
     df4:	81 11       	cpse	r24, r1
     df6:	05 c0       	rjmp	.+10     	; 0xe02 <EXTINT_CallBack+0xe>
     df8:	70 93 04 01 	sts	0x0104, r23	; 0x800104 <ptrINT0+0x1>
     dfc:	60 93 03 01 	sts	0x0103, r22	; 0x800103 <ptrINT0>
     e00:	08 95       	ret
	else if(INTx == EXTINT1 ) ptrINT1 = ptrfunc;
     e02:	81 30       	cpi	r24, 0x01	; 1
     e04:	31 f4       	brne	.+12     	; 0xe12 <EXTINT_CallBack+0x1e>
     e06:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <ptrINT1+0x1>
     e0a:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <ptrINT1>
	else if(INTx == EXTINT2 ) ptrINT2 = ptrfunc;
	else return EXTINT_NOT_OK;
	return EXTINT_OK;
     e0e:	80 e0       	ldi	r24, 0x00	; 0
     e10:	08 95       	ret

EN_EXTINT_ERROR EXTINT_CallBack(EN_EXINT_NUMBER INTx,void(*ptrfunc)(void))
{
	if(INTx == EXTINT0 ) ptrINT0 = ptrfunc;
	else if(INTx == EXTINT1 ) ptrINT1 = ptrfunc;
	else if(INTx == EXTINT2 ) ptrINT2 = ptrfunc;
     e12:	82 30       	cpi	r24, 0x02	; 2
     e14:	31 f4       	brne	.+12     	; 0xe22 <EXTINT_CallBack+0x2e>
     e16:	70 93 00 01 	sts	0x0100, r23	; 0x800100 <ptrINT2+0x1>
     e1a:	60 93 ff 00 	sts	0x00FF, r22	; 0x8000ff <ptrINT2>
	else return EXTINT_NOT_OK;
	return EXTINT_OK;
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	08 95       	ret
EN_EXTINT_ERROR EXTINT_CallBack(EN_EXINT_NUMBER INTx,void(*ptrfunc)(void))
{
	if(INTx == EXTINT0 ) ptrINT0 = ptrfunc;
	else if(INTx == EXTINT1 ) ptrINT1 = ptrfunc;
	else if(INTx == EXTINT2 ) ptrINT2 = ptrfunc;
	else return EXTINT_NOT_OK;
     e22:	81 e0       	ldi	r24, 0x01	; 1
	return EXTINT_OK;
}
     e24:	08 95       	ret

00000e26 <__vector_1>:


ISR (EXT_INT_0)
{
     e26:	1f 92       	push	r1
     e28:	0f 92       	push	r0
     e2a:	0f b6       	in	r0, 0x3f	; 63
     e2c:	0f 92       	push	r0
     e2e:	11 24       	eor	r1, r1
     e30:	2f 93       	push	r18
     e32:	3f 93       	push	r19
     e34:	4f 93       	push	r20
     e36:	5f 93       	push	r21
     e38:	6f 93       	push	r22
     e3a:	7f 93       	push	r23
     e3c:	8f 93       	push	r24
     e3e:	9f 93       	push	r25
     e40:	af 93       	push	r26
     e42:	bf 93       	push	r27
     e44:	ef 93       	push	r30
     e46:	ff 93       	push	r31
	if(ptrINT0) ptrINT0();
     e48:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <ptrINT0>
     e4c:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <ptrINT0+0x1>
     e50:	30 97       	sbiw	r30, 0x00	; 0
     e52:	09 f0       	breq	.+2      	; 0xe56 <__vector_1+0x30>
     e54:	09 95       	icall
}
     e56:	ff 91       	pop	r31
     e58:	ef 91       	pop	r30
     e5a:	bf 91       	pop	r27
     e5c:	af 91       	pop	r26
     e5e:	9f 91       	pop	r25
     e60:	8f 91       	pop	r24
     e62:	7f 91       	pop	r23
     e64:	6f 91       	pop	r22
     e66:	5f 91       	pop	r21
     e68:	4f 91       	pop	r20
     e6a:	3f 91       	pop	r19
     e6c:	2f 91       	pop	r18
     e6e:	0f 90       	pop	r0
     e70:	0f be       	out	0x3f, r0	; 63
     e72:	0f 90       	pop	r0
     e74:	1f 90       	pop	r1
     e76:	18 95       	reti

00000e78 <__vector_2>:

ISR (EXT_INT_1)
{
     e78:	1f 92       	push	r1
     e7a:	0f 92       	push	r0
     e7c:	0f b6       	in	r0, 0x3f	; 63
     e7e:	0f 92       	push	r0
     e80:	11 24       	eor	r1, r1
     e82:	2f 93       	push	r18
     e84:	3f 93       	push	r19
     e86:	4f 93       	push	r20
     e88:	5f 93       	push	r21
     e8a:	6f 93       	push	r22
     e8c:	7f 93       	push	r23
     e8e:	8f 93       	push	r24
     e90:	9f 93       	push	r25
     e92:	af 93       	push	r26
     e94:	bf 93       	push	r27
     e96:	ef 93       	push	r30
     e98:	ff 93       	push	r31
	if(ptrINT1) ptrINT1();
     e9a:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <ptrINT1>
     e9e:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <ptrINT1+0x1>
     ea2:	30 97       	sbiw	r30, 0x00	; 0
     ea4:	09 f0       	breq	.+2      	; 0xea8 <__vector_2+0x30>
     ea6:	09 95       	icall
}
     ea8:	ff 91       	pop	r31
     eaa:	ef 91       	pop	r30
     eac:	bf 91       	pop	r27
     eae:	af 91       	pop	r26
     eb0:	9f 91       	pop	r25
     eb2:	8f 91       	pop	r24
     eb4:	7f 91       	pop	r23
     eb6:	6f 91       	pop	r22
     eb8:	5f 91       	pop	r21
     eba:	4f 91       	pop	r20
     ebc:	3f 91       	pop	r19
     ebe:	2f 91       	pop	r18
     ec0:	0f 90       	pop	r0
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	0f 90       	pop	r0
     ec6:	1f 90       	pop	r1
     ec8:	18 95       	reti

00000eca <__vector_3>:

ISR (EXT_INT_2)
{
     eca:	1f 92       	push	r1
     ecc:	0f 92       	push	r0
     ece:	0f b6       	in	r0, 0x3f	; 63
     ed0:	0f 92       	push	r0
     ed2:	11 24       	eor	r1, r1
     ed4:	2f 93       	push	r18
     ed6:	3f 93       	push	r19
     ed8:	4f 93       	push	r20
     eda:	5f 93       	push	r21
     edc:	6f 93       	push	r22
     ede:	7f 93       	push	r23
     ee0:	8f 93       	push	r24
     ee2:	9f 93       	push	r25
     ee4:	af 93       	push	r26
     ee6:	bf 93       	push	r27
     ee8:	ef 93       	push	r30
     eea:	ff 93       	push	r31
	if(ptrINT2) ptrINT2();
     eec:	e0 91 ff 00 	lds	r30, 0x00FF	; 0x8000ff <ptrINT2>
     ef0:	f0 91 00 01 	lds	r31, 0x0100	; 0x800100 <ptrINT2+0x1>
     ef4:	30 97       	sbiw	r30, 0x00	; 0
     ef6:	09 f0       	breq	.+2      	; 0xefa <__vector_3+0x30>
     ef8:	09 95       	icall
     efa:	ff 91       	pop	r31
     efc:	ef 91       	pop	r30
     efe:	bf 91       	pop	r27
     f00:	af 91       	pop	r26
     f02:	9f 91       	pop	r25
     f04:	8f 91       	pop	r24
     f06:	7f 91       	pop	r23
     f08:	6f 91       	pop	r22
     f0a:	5f 91       	pop	r21
     f0c:	4f 91       	pop	r20
     f0e:	3f 91       	pop	r19
     f10:	2f 91       	pop	r18
     f12:	0f 90       	pop	r0
     f14:	0f be       	out	0x3f, r0	; 63
     f16:	0f 90       	pop	r0
     f18:	1f 90       	pop	r1
     f1a:	18 95       	reti

00000f1c <SPI_MasterInit>:
	{
		return SPI_NOK;
	}
	
	return SPI_OK;
}
     f1c:	8d b1       	in	r24, 0x0d	; 13
     f1e:	80 61       	ori	r24, 0x10	; 16
     f20:	8d b9       	out	0x0d, r24	; 13
     f22:	8d b1       	in	r24, 0x0d	; 13
     f24:	9e b1       	in	r25, 0x0e	; 14
     f26:	8e 7f       	andi	r24, 0xFE	; 254
     f28:	9c 7f       	andi	r25, 0xFC	; 252
     f2a:	9e b9       	out	0x0e, r25	; 14
     f2c:	8d b9       	out	0x0d, r24	; 13
     f2e:	8d b1       	in	r24, 0x0d	; 13
     f30:	9e b1       	in	r25, 0x0e	; 14
     f32:	93 60       	ori	r25, 0x03	; 3
     f34:	9e b9       	out	0x0e, r25	; 14
     f36:	8d b9       	out	0x0d, r24	; 13
     f38:	8d b1       	in	r24, 0x0d	; 13
     f3a:	87 7f       	andi	r24, 0xF7	; 247
     f3c:	8d b9       	out	0x0d, r24	; 13
     f3e:	8d b1       	in	r24, 0x0d	; 13
     f40:	8b 7f       	andi	r24, 0xFB	; 251
     f42:	8d b9       	out	0x0d, r24	; 13
     f44:	8d b1       	in	r24, 0x0d	; 13
     f46:	80 64       	ori	r24, 0x40	; 64
     f48:	8d b9       	out	0x0d, r24	; 13
     f4a:	08 95       	ret

00000f4c <SPI_TranscieveChar>:
     f4c:	61 15       	cp	r22, r1
     f4e:	71 05       	cpc	r23, r1
     f50:	f9 f0       	breq	.+62     	; 0xf90 <SPI_TranscieveChar+0x44>
     f52:	8f b9       	out	0x0f, r24	; 15
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	dc 01       	movw	r26, r24
     f5a:	03 c0       	rjmp	.+6      	; 0xf62 <SPI_TranscieveChar+0x16>
     f5c:	01 96       	adiw	r24, 0x01	; 1
     f5e:	a1 1d       	adc	r26, r1
     f60:	b1 1d       	adc	r27, r1
     f62:	77 99       	sbic	0x0e, 7	; 14
     f64:	07 c0       	rjmp	.+14     	; 0xf74 <SPI_TranscieveChar+0x28>
     f66:	80 3a       	cpi	r24, 0xA0	; 160
     f68:	26 e8       	ldi	r18, 0x86	; 134
     f6a:	92 07       	cpc	r25, r18
     f6c:	21 e0       	ldi	r18, 0x01	; 1
     f6e:	a2 07       	cpc	r26, r18
     f70:	b1 05       	cpc	r27, r1
     f72:	a0 f3       	brcs	.-24     	; 0xf5c <SPI_TranscieveChar+0x10>
     f74:	80 3a       	cpi	r24, 0xA0	; 160
     f76:	96 48       	sbci	r25, 0x86	; 134
     f78:	a1 40       	sbci	r26, 0x01	; 1
     f7a:	b1 05       	cpc	r27, r1
     f7c:	59 f0       	breq	.+22     	; 0xf94 <SPI_TranscieveChar+0x48>
     f7e:	8f b1       	in	r24, 0x0f	; 15
     f80:	fb 01       	movw	r30, r22
     f82:	80 83       	st	Z, r24
     f84:	f1 e2       	ldi	r31, 0x21	; 33
     f86:	fa 95       	dec	r31
     f88:	f1 f7       	brne	.-4      	; 0xf86 <SPI_TranscieveChar+0x3a>
     f8a:	00 00       	nop
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	08 95       	ret
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	08 95       	ret
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	08 95       	ret

00000f98 <__vector_12>:

/*************************************************************************************************************
 * 													  ISRs
 ************************************************************************************************************/
ISR(SPI_STC_INT)
{
     f98:	1f 92       	push	r1
     f9a:	0f 92       	push	r0
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	0f 92       	push	r0
     fa0:	11 24       	eor	r1, r1
     fa2:	2f 93       	push	r18
     fa4:	3f 93       	push	r19
     fa6:	8f 93       	push	r24
     fa8:	9f 93       	push	r25
     faa:	ef 93       	push	r30
     fac:	ff 93       	push	r31
	/*------------------------ Reception ------------------------*/
	u8_g_SlaveReceive = SPDR;
     fae:	8f b1       	in	r24, 0x0f	; 15
     fb0:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <u8_g_SlaveReceive>
	//DIO_s8SETPortVal(DIO_PORTA, u8_g_SlaveReceive);
	
	/* If Max size is exceeded, start overriding data */
	if(u8_g_SlaveRxIndex == SPI_BUFFER_SIZE) u8_g_SlaveRxIndex = 0;
     fb4:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <u8_g_SlaveRxIndex>
     fb8:	9f 30       	cpi	r25, 0x0F	; 15
     fba:	11 f4       	brne	.+4      	; 0xfc0 <__vector_12+0x28>
     fbc:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <u8_g_SlaveRxIndex>
	if(u8_g_SlaveReceive != DATA_END)
     fc0:	83 32       	cpi	r24, 0x23	; 35
     fc2:	59 f0       	breq	.+22     	; 0xfda <__vector_12+0x42>
	{
		/* Store received byte in buffer */
		arr_g_SlaveRxBuffer[u8_g_SlaveRxIndex] = u8_g_SlaveReceive;
     fc4:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <u8_g_SlaveRxIndex>
     fc8:	e9 2f       	mov	r30, r25
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	eb 5f       	subi	r30, 0xFB	; 251
     fce:	fe 4f       	sbci	r31, 0xFE	; 254
     fd0:	80 83       	st	Z, r24
		u8_g_SlaveRxIndex++;
     fd2:	9f 5f       	subi	r25, 0xFF	; 255
     fd4:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <u8_g_SlaveRxIndex>
     fd8:	04 c0       	rjmp	.+8      	; 0xfe2 <__vector_12+0x4a>
	}
	else
	{	// Get the number of received bytes
		u8_g_SlaveRxLen = u8_g_SlaveRxIndex;
     fda:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <u8_g_SlaveRxIndex>
     fde:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <u8_g_SlaveRxLen>
	}
	
	/*------------------------- Sending -------------------------*/
	//u8_g_SlaveTxIndex++;
	if((u8_g_SlaveTxIndex < u8_g_SlaveTxLen) && (pu8_g_SlaveTxPtr != NULL))
     fe2:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <u8_g_SlaveTxIndex>
     fe6:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <u8_g_SlaveTxLen>
     fea:	89 17       	cp	r24, r25
     fec:	88 f4       	brcc	.+34     	; 0x1010 <__vector_12+0x78>
     fee:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <pu8_g_SlaveTxPtr>
     ff2:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <pu8_g_SlaveTxPtr+0x1>
     ff6:	21 15       	cp	r18, r1
     ff8:	31 05       	cpc	r19, r1
     ffa:	51 f0       	breq	.+20     	; 0x1010 <__vector_12+0x78>
	{
		SPDR = pu8_g_SlaveTxPtr[u8_g_SlaveTxIndex++];
     ffc:	91 e0       	ldi	r25, 0x01	; 1
     ffe:	98 0f       	add	r25, r24
    1000:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <u8_g_SlaveTxIndex>
    1004:	f9 01       	movw	r30, r18
    1006:	e8 0f       	add	r30, r24
    1008:	f1 1d       	adc	r31, r1
    100a:	80 81       	ld	r24, Z
    100c:	8f b9       	out	0x0f, r24	; 15
    100e:	04 c0       	rjmp	.+8      	; 0x1018 <__vector_12+0x80>
	}
	else if(u8_g_SlaveTxIndex >= u8_g_SlaveTxLen)
    1010:	89 17       	cp	r24, r25
    1012:	10 f0       	brcs	.+4      	; 0x1018 <__vector_12+0x80>
	{
		SPDR = DATA_END;
    1014:	83 e2       	ldi	r24, 0x23	; 35
    1016:	8f b9       	out	0x0f, r24	; 15
	}
    1018:	ff 91       	pop	r31
    101a:	ef 91       	pop	r30
    101c:	9f 91       	pop	r25
    101e:	8f 91       	pop	r24
    1020:	3f 91       	pop	r19
    1022:	2f 91       	pop	r18
    1024:	0f 90       	pop	r0
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	0f 90       	pop	r0
    102a:	1f 90       	pop	r1
    102c:	18 95       	reti

0000102e <TIM0_voidInit>:
	else
	{
		return TIM_NOK;
	}
	return TIM_OK;
}
    102e:	81 30       	cpi	r24, 0x01	; 1
    1030:	61 f0       	breq	.+24     	; 0x104a <TIM0_voidInit+0x1c>
    1032:	28 f0       	brcs	.+10     	; 0x103e <TIM0_voidInit+0x10>
    1034:	82 30       	cpi	r24, 0x02	; 2
    1036:	29 f0       	breq	.+10     	; 0x1042 <TIM0_voidInit+0x14>
    1038:	83 30       	cpi	r24, 0x03	; 3
    103a:	29 f0       	breq	.+10     	; 0x1046 <TIM0_voidInit+0x18>
    103c:	0f c0       	rjmp	.+30     	; 0x105c <TIM0_voidInit+0x2e>
    103e:	20 e0       	ldi	r18, 0x00	; 0
    1040:	05 c0       	rjmp	.+10     	; 0x104c <TIM0_voidInit+0x1e>
    1042:	28 e0       	ldi	r18, 0x08	; 8
    1044:	03 c0       	rjmp	.+6      	; 0x104c <TIM0_voidInit+0x1e>
    1046:	28 e4       	ldi	r18, 0x48	; 72
    1048:	01 c0       	rjmp	.+2      	; 0x104c <TIM0_voidInit+0x1e>
    104a:	20 e4       	ldi	r18, 0x40	; 64
    104c:	93 b7       	in	r25, 0x33	; 51
    104e:	97 7b       	andi	r25, 0xB7	; 183
    1050:	93 bf       	out	0x33, r25	; 51
    1052:	83 b7       	in	r24, 0x33	; 51
    1054:	82 2b       	or	r24, r18
    1056:	83 bf       	out	0x33, r24	; 51
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	08 95       	ret
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	08 95       	ret

00001060 <TIM0_Start>:
    1060:	9f ef       	ldi	r25, 0xFF	; 255
    1062:	98 0f       	add	r25, r24
    1064:	97 30       	cpi	r25, 0x07	; 7
    1066:	40 f4       	brcc	.+16     	; 0x1078 <TIM0_Start+0x18>
    1068:	93 b7       	in	r25, 0x33	; 51
    106a:	98 7f       	andi	r25, 0xF8	; 248
    106c:	93 bf       	out	0x33, r25	; 51
    106e:	93 b7       	in	r25, 0x33	; 51
    1070:	89 2b       	or	r24, r25
    1072:	83 bf       	out	0x33, r24	; 51
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	08 95       	ret
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	08 95       	ret

0000107c <TIM0_Stop>:
    107c:	83 b7       	in	r24, 0x33	; 51
    107e:	88 7f       	andi	r24, 0xF8	; 248
    1080:	83 bf       	out	0x33, r24	; 51
    1082:	12 be       	out	0x32, r1	; 50
    1084:	88 b7       	in	r24, 0x38	; 56
    1086:	8e 7f       	andi	r24, 0xFE	; 254
    1088:	88 bf       	out	0x38, r24	; 56
    108a:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <u8_gs_OVFCount>
    108e:	08 95       	ret

00001090 <TIM0_SetValue>:
    1090:	82 bf       	out	0x32, r24	; 50
    1092:	08 95       	ret

00001094 <TIM0_GetOVF>:
    1094:	fc 01       	movw	r30, r24
    1096:	89 2b       	or	r24, r25
    1098:	29 f0       	breq	.+10     	; 0x10a4 <TIM0_GetOVF+0x10>
    109a:	98 b7       	in	r25, 0x38	; 56
    109c:	91 70       	andi	r25, 0x01	; 1
    109e:	90 83       	st	Z, r25
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	08 95       	ret
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	08 95       	ret

000010a8 <TIM0_ClearOVF>:
    10a8:	88 b7       	in	r24, 0x38	; 56
    10aa:	81 60       	ori	r24, 0x01	; 1
    10ac:	88 bf       	out	0x38, r24	; 56
    10ae:	08 95       	ret

000010b0 <TIM0_GetState>:
    10b0:	00 97       	sbiw	r24, 0x00	; 0
    10b2:	61 f0       	breq	.+24     	; 0x10cc <TIM0_GetState+0x1c>
    10b4:	03 b6       	in	r0, 0x33	; 51
    10b6:	00 fe       	sbrs	r0, 0
    10b8:	05 c0       	rjmp	.+10     	; 0x10c4 <TIM0_GetState+0x14>
    10ba:	21 e0       	ldi	r18, 0x01	; 1
    10bc:	fc 01       	movw	r30, r24
    10be:	20 83       	st	Z, r18
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	08 95       	ret
    10c4:	fc 01       	movw	r30, r24
    10c6:	10 82       	st	Z, r1
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	08 95       	ret
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	08 95       	ret

000010d0 <__vector_11>:


/*========================== ISRs =============================*/

ISR(TIM0_OVF_INT)
{
    10d0:	1f 92       	push	r1
    10d2:	0f 92       	push	r0
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	0f 92       	push	r0
    10d8:	11 24       	eor	r1, r1
    10da:	2f 93       	push	r18
    10dc:	3f 93       	push	r19
    10de:	4f 93       	push	r20
    10e0:	5f 93       	push	r21
    10e2:	6f 93       	push	r22
    10e4:	7f 93       	push	r23
    10e6:	8f 93       	push	r24
    10e8:	9f 93       	push	r25
    10ea:	af 93       	push	r26
    10ec:	bf 93       	push	r27
    10ee:	ef 93       	push	r30
    10f0:	ff 93       	push	r31
	if(TIM0_OVFCallbackFn != NULL)
    10f2:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <TIM0_OVFCallbackFn>
    10f6:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <TIM0_OVFCallbackFn+0x1>
    10fa:	89 2b       	or	r24, r25
    10fc:	b1 f0       	breq	.+44     	; 0x112a <__vector_11+0x5a>
	{
		/* Delay is complete */
		if(u8_gs_OVFCount == u8_g_TotalOVF)
    10fe:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <u8_gs_OVFCount>
    1102:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <u8_g_TotalOVF>
    1106:	89 13       	cpse	r24, r25
    1108:	0d c0       	rjmp	.+26     	; 0x1124 <__vector_11+0x54>
		{
			/* Stop the timer */
			TIM0_Stop();
    110a:	0e 94 3e 08 	call	0x107c	; 0x107c <TIM0_Stop>
			
			/* Reset the OVF counter */
			u8_gs_OVFCount = 0;
    110e:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <u8_gs_OVFCount>
			
			/* Disable OVF interrupt */
			CLEAR_BIT(TIMSK, TIMSK_TOIE0);
    1112:	89 b7       	in	r24, 0x39	; 57
    1114:	8e 7f       	andi	r24, 0xFE	; 254
    1116:	89 bf       	out	0x39, r24	; 57
			
			/* Call the Callback function */
			TIM0_OVFCallbackFn();
    1118:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <TIM0_OVFCallbackFn>
    111c:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <TIM0_OVFCallbackFn+0x1>
    1120:	09 95       	icall
    1122:	03 c0       	rjmp	.+6      	; 0x112a <__vector_11+0x5a>
		}
		else
		{
			/* Increment the overflow count */
			u8_gs_OVFCount++;
    1124:	8f 5f       	subi	r24, 0xFF	; 255
    1126:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <u8_gs_OVFCount>
		}
	}
}
    112a:	ff 91       	pop	r31
    112c:	ef 91       	pop	r30
    112e:	bf 91       	pop	r27
    1130:	af 91       	pop	r26
    1132:	9f 91       	pop	r25
    1134:	8f 91       	pop	r24
    1136:	7f 91       	pop	r23
    1138:	6f 91       	pop	r22
    113a:	5f 91       	pop	r21
    113c:	4f 91       	pop	r20
    113e:	3f 91       	pop	r19
    1140:	2f 91       	pop	r18
    1142:	0f 90       	pop	r0
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	0f 90       	pop	r0
    1148:	1f 90       	pop	r1
    114a:	18 95       	reti

0000114c <TIM1_Start>:
	TCNT1 = 0;
}

void TIM1_SetValue(Uint16_t u16_a_startValue)
{
	TCNT1 = u16_a_startValue;
    114c:	8e b5       	in	r24, 0x2e	; 46
    114e:	88 7f       	andi	r24, 0xF8	; 248
    1150:	8e bd       	out	0x2e, r24	; 46
    1152:	8e b5       	in	r24, 0x2e	; 46
    1154:	85 60       	ori	r24, 0x05	; 5
    1156:	8e bd       	out	0x2e, r24	; 46
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	08 95       	ret

0000115c <TIM1_Stop>:
    115c:	8e b5       	in	r24, 0x2e	; 46
    115e:	88 7f       	andi	r24, 0xF8	; 248
    1160:	8e bd       	out	0x2e, r24	; 46
    1162:	1d bc       	out	0x2d, r1	; 45
    1164:	1c bc       	out	0x2c, r1	; 44
    1166:	08 95       	ret

00001168 <TIM1_GetValue>:
}

Uint16_t TIM1_GetValue(void)
{
	return TCNT1;
    1168:	8c b5       	in	r24, 0x2c	; 44
    116a:	9d b5       	in	r25, 0x2d	; 45
}
    116c:	08 95       	ret

0000116e <TIM1_GetTickTime>:


float32_t TIM1_GetTickTime(void)
{
	return ((float32_t)arr_gs_prescalers[TIM1_PRESCALER-1]/(TIM1_CLK_MUL*1000));
}
    116e:	6f e6       	ldi	r22, 0x6F	; 111
    1170:	72 e1       	ldi	r23, 0x12	; 18
    1172:	83 e0       	ldi	r24, 0x03	; 3
    1174:	9e e3       	ldi	r25, 0x3E	; 62
    1176:	08 95       	ret

00001178 <enuTimer2_init>:
			errorStatus = TIMER_NOK;
		}


		return errorStatus;
	}
    1178:	84 30       	cpi	r24, 0x04	; 4
    117a:	40 f5       	brcc	.+80     	; 0x11cc <enuTimer2_init+0x54>
    117c:	81 30       	cpi	r24, 0x01	; 1
    117e:	71 f0       	breq	.+28     	; 0x119c <enuTimer2_init+0x24>
    1180:	28 f0       	brcs	.+10     	; 0x118c <enuTimer2_init+0x14>
    1182:	82 30       	cpi	r24, 0x02	; 2
    1184:	99 f0       	breq	.+38     	; 0x11ac <enuTimer2_init+0x34>
    1186:	83 30       	cpi	r24, 0x03	; 3
    1188:	c9 f0       	breq	.+50     	; 0x11bc <enuTimer2_init+0x44>
    118a:	22 c0       	rjmp	.+68     	; 0x11d0 <enuTimer2_init+0x58>
    118c:	85 b5       	in	r24, 0x25	; 37
    118e:	87 7f       	andi	r24, 0xF7	; 247
    1190:	85 bd       	out	0x25, r24	; 37
    1192:	85 b5       	in	r24, 0x25	; 37
    1194:	8f 7b       	andi	r24, 0xBF	; 191
    1196:	85 bd       	out	0x25, r24	; 37
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	08 95       	ret
    119c:	85 b5       	in	r24, 0x25	; 37
    119e:	87 7f       	andi	r24, 0xF7	; 247
    11a0:	85 bd       	out	0x25, r24	; 37
    11a2:	85 b5       	in	r24, 0x25	; 37
    11a4:	80 64       	ori	r24, 0x40	; 64
    11a6:	85 bd       	out	0x25, r24	; 37
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	08 95       	ret
    11ac:	85 b5       	in	r24, 0x25	; 37
    11ae:	88 60       	ori	r24, 0x08	; 8
    11b0:	85 bd       	out	0x25, r24	; 37
    11b2:	85 b5       	in	r24, 0x25	; 37
    11b4:	8f 7b       	andi	r24, 0xBF	; 191
    11b6:	85 bd       	out	0x25, r24	; 37
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	08 95       	ret
    11bc:	85 b5       	in	r24, 0x25	; 37
    11be:	88 60       	ori	r24, 0x08	; 8
    11c0:	85 bd       	out	0x25, r24	; 37
    11c2:	85 b5       	in	r24, 0x25	; 37
    11c4:	80 64       	ori	r24, 0x40	; 64
    11c6:	85 bd       	out	0x25, r24	; 37
    11c8:	80 e0       	ldi	r24, 0x00	; 0
    11ca:	08 95       	ret
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	08 95       	ret
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	08 95       	ret

000011d4 <u8Timer2_setPrescallar>:
    11d4:	88 30       	cpi	r24, 0x08	; 8
    11d6:	70 f4       	brcc	.+28     	; 0x11f4 <u8Timer2_setPrescallar+0x20>
    11d8:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <global_prescaller>
    11dc:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <global_timerStatus>
    11e0:	91 30       	cpi	r25, 0x01	; 1
    11e2:	51 f4       	brne	.+20     	; 0x11f8 <u8Timer2_setPrescallar+0x24>
    11e4:	95 b5       	in	r25, 0x25	; 37
    11e6:	98 7f       	andi	r25, 0xF8	; 248
    11e8:	89 2b       	or	r24, r25
    11ea:	95 b5       	in	r25, 0x25	; 37
    11ec:	89 2b       	or	r24, r25
    11ee:	85 bd       	out	0x25, r24	; 37
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	08 95       	ret
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	08 95       	ret
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	08 95       	ret

000011fc <vidTimer2_OvfIrqEnable>:
    11fc:	89 b7       	in	r24, 0x39	; 57
    11fe:	80 64       	ori	r24, 0x40	; 64
    1200:	89 bf       	out	0x39, r24	; 57
    1202:	8f b7       	in	r24, 0x3f	; 63
    1204:	80 68       	ori	r24, 0x80	; 128
    1206:	8f bf       	out	0x3f, r24	; 63
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	08 95       	ret

0000120c <vidTimer2_setcbf_OVF>:

/*************************************************************************************************************/
void vidTimer2_setcbf_OVF(cbf_t cbf)
{
	if (cbf != NULL)
    120c:	00 97       	sbiw	r24, 0x00	; 0
    120e:	21 f0       	breq	.+8      	; 0x1218 <vidTimer2_setcbf_OVF+0xc>
	{
		globalCallFunc = cbf;
    1210:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <globalCallFunc+0x1>
    1214:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <globalCallFunc>
    1218:	08 95       	ret

0000121a <__vector_5>:

/*************************************************************************************************************
 * 							ISR Interrupt Handling
 ************************************************************************************************************/
ISR(TIMER2_OVF_vect)
{
    121a:	1f 92       	push	r1
    121c:	0f 92       	push	r0
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	0f 92       	push	r0
    1222:	11 24       	eor	r1, r1
    1224:	2f 93       	push	r18
    1226:	3f 93       	push	r19
    1228:	4f 93       	push	r20
    122a:	5f 93       	push	r21
    122c:	6f 93       	push	r22
    122e:	7f 93       	push	r23
    1230:	8f 93       	push	r24
    1232:	9f 93       	push	r25
    1234:	af 93       	push	r26
    1236:	bf 93       	push	r27
    1238:	ef 93       	push	r30
    123a:	ff 93       	push	r31
	static Uchar8_t counter = 0;
	counter++;
    123c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <counter.1731>
    1240:	8f 5f       	subi	r24, 0xFF	; 255
    1242:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <counter.1731>
	if(counter == global_ovf)
    1246:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <global_ovf>
    124a:	89 13       	cpse	r24, r25
    124c:	0c c0       	rjmp	.+24     	; 0x1266 <__vector_5+0x4c>
	{
		if (globalCallFunc != NULL)
    124e:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <globalCallFunc>
    1252:	f0 91 1e 01 	lds	r31, 0x011E	; 0x80011e <globalCallFunc+0x1>
    1256:	30 97       	sbiw	r30, 0x00	; 0
    1258:	31 f0       	breq	.+12     	; 0x1266 <__vector_5+0x4c>
		{
			counter = 0;
    125a:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <counter.1731>

			globalCallFunc();
    125e:	09 95       	icall
			TCNT2_REG = preload;
    1260:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <preload>
    1264:	84 bd       	out	0x24, r24	; 36
//			global_ovf = 0;
//			vidTimer1_stop();
		}
	}
}
    1266:	ff 91       	pop	r31
    1268:	ef 91       	pop	r30
    126a:	bf 91       	pop	r27
    126c:	af 91       	pop	r26
    126e:	9f 91       	pop	r25
    1270:	8f 91       	pop	r24
    1272:	7f 91       	pop	r23
    1274:	6f 91       	pop	r22
    1276:	5f 91       	pop	r21
    1278:	4f 91       	pop	r20
    127a:	3f 91       	pop	r19
    127c:	2f 91       	pop	r18
    127e:	0f 90       	pop	r0
    1280:	0f be       	out	0x3f, r0	; 63
    1282:	0f 90       	pop	r0
    1284:	1f 90       	pop	r1
    1286:	18 95       	reti

00001288 <__divsf3>:
    1288:	0e 94 58 09 	call	0x12b0	; 0x12b0 <__divsf3x>
    128c:	0c 94 39 0a 	jmp	0x1472	; 0x1472 <__fp_round>
    1290:	0e 94 32 0a 	call	0x1464	; 0x1464 <__fp_pscB>
    1294:	58 f0       	brcs	.+22     	; 0x12ac <__divsf3+0x24>
    1296:	0e 94 2b 0a 	call	0x1456	; 0x1456 <__fp_pscA>
    129a:	40 f0       	brcs	.+16     	; 0x12ac <__divsf3+0x24>
    129c:	29 f4       	brne	.+10     	; 0x12a8 <__divsf3+0x20>
    129e:	5f 3f       	cpi	r21, 0xFF	; 255
    12a0:	29 f0       	breq	.+10     	; 0x12ac <__divsf3+0x24>
    12a2:	0c 94 22 0a 	jmp	0x1444	; 0x1444 <__fp_inf>
    12a6:	51 11       	cpse	r21, r1
    12a8:	0c 94 6d 0a 	jmp	0x14da	; 0x14da <__fp_szero>
    12ac:	0c 94 28 0a 	jmp	0x1450	; 0x1450 <__fp_nan>

000012b0 <__divsf3x>:
    12b0:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__fp_split3>
    12b4:	68 f3       	brcs	.-38     	; 0x1290 <__divsf3+0x8>

000012b6 <__divsf3_pse>:
    12b6:	99 23       	and	r25, r25
    12b8:	b1 f3       	breq	.-20     	; 0x12a6 <__divsf3+0x1e>
    12ba:	55 23       	and	r21, r21
    12bc:	91 f3       	breq	.-28     	; 0x12a2 <__divsf3+0x1a>
    12be:	95 1b       	sub	r25, r21
    12c0:	55 0b       	sbc	r21, r21
    12c2:	bb 27       	eor	r27, r27
    12c4:	aa 27       	eor	r26, r26
    12c6:	62 17       	cp	r22, r18
    12c8:	73 07       	cpc	r23, r19
    12ca:	84 07       	cpc	r24, r20
    12cc:	38 f0       	brcs	.+14     	; 0x12dc <__divsf3_pse+0x26>
    12ce:	9f 5f       	subi	r25, 0xFF	; 255
    12d0:	5f 4f       	sbci	r21, 0xFF	; 255
    12d2:	22 0f       	add	r18, r18
    12d4:	33 1f       	adc	r19, r19
    12d6:	44 1f       	adc	r20, r20
    12d8:	aa 1f       	adc	r26, r26
    12da:	a9 f3       	breq	.-22     	; 0x12c6 <__divsf3_pse+0x10>
    12dc:	35 d0       	rcall	.+106    	; 0x1348 <__divsf3_pse+0x92>
    12de:	0e 2e       	mov	r0, r30
    12e0:	3a f0       	brmi	.+14     	; 0x12f0 <__divsf3_pse+0x3a>
    12e2:	e0 e8       	ldi	r30, 0x80	; 128
    12e4:	32 d0       	rcall	.+100    	; 0x134a <__divsf3_pse+0x94>
    12e6:	91 50       	subi	r25, 0x01	; 1
    12e8:	50 40       	sbci	r21, 0x00	; 0
    12ea:	e6 95       	lsr	r30
    12ec:	00 1c       	adc	r0, r0
    12ee:	ca f7       	brpl	.-14     	; 0x12e2 <__divsf3_pse+0x2c>
    12f0:	2b d0       	rcall	.+86     	; 0x1348 <__divsf3_pse+0x92>
    12f2:	fe 2f       	mov	r31, r30
    12f4:	29 d0       	rcall	.+82     	; 0x1348 <__divsf3_pse+0x92>
    12f6:	66 0f       	add	r22, r22
    12f8:	77 1f       	adc	r23, r23
    12fa:	88 1f       	adc	r24, r24
    12fc:	bb 1f       	adc	r27, r27
    12fe:	26 17       	cp	r18, r22
    1300:	37 07       	cpc	r19, r23
    1302:	48 07       	cpc	r20, r24
    1304:	ab 07       	cpc	r26, r27
    1306:	b0 e8       	ldi	r27, 0x80	; 128
    1308:	09 f0       	breq	.+2      	; 0x130c <__divsf3_pse+0x56>
    130a:	bb 0b       	sbc	r27, r27
    130c:	80 2d       	mov	r24, r0
    130e:	bf 01       	movw	r22, r30
    1310:	ff 27       	eor	r31, r31
    1312:	93 58       	subi	r25, 0x83	; 131
    1314:	5f 4f       	sbci	r21, 0xFF	; 255
    1316:	3a f0       	brmi	.+14     	; 0x1326 <__divsf3_pse+0x70>
    1318:	9e 3f       	cpi	r25, 0xFE	; 254
    131a:	51 05       	cpc	r21, r1
    131c:	78 f0       	brcs	.+30     	; 0x133c <__divsf3_pse+0x86>
    131e:	0c 94 22 0a 	jmp	0x1444	; 0x1444 <__fp_inf>
    1322:	0c 94 6d 0a 	jmp	0x14da	; 0x14da <__fp_szero>
    1326:	5f 3f       	cpi	r21, 0xFF	; 255
    1328:	e4 f3       	brlt	.-8      	; 0x1322 <__divsf3_pse+0x6c>
    132a:	98 3e       	cpi	r25, 0xE8	; 232
    132c:	d4 f3       	brlt	.-12     	; 0x1322 <__divsf3_pse+0x6c>
    132e:	86 95       	lsr	r24
    1330:	77 95       	ror	r23
    1332:	67 95       	ror	r22
    1334:	b7 95       	ror	r27
    1336:	f7 95       	ror	r31
    1338:	9f 5f       	subi	r25, 0xFF	; 255
    133a:	c9 f7       	brne	.-14     	; 0x132e <__divsf3_pse+0x78>
    133c:	88 0f       	add	r24, r24
    133e:	91 1d       	adc	r25, r1
    1340:	96 95       	lsr	r25
    1342:	87 95       	ror	r24
    1344:	97 f9       	bld	r25, 7
    1346:	08 95       	ret
    1348:	e1 e0       	ldi	r30, 0x01	; 1
    134a:	66 0f       	add	r22, r22
    134c:	77 1f       	adc	r23, r23
    134e:	88 1f       	adc	r24, r24
    1350:	bb 1f       	adc	r27, r27
    1352:	62 17       	cp	r22, r18
    1354:	73 07       	cpc	r23, r19
    1356:	84 07       	cpc	r24, r20
    1358:	ba 07       	cpc	r27, r26
    135a:	20 f0       	brcs	.+8      	; 0x1364 <__divsf3_pse+0xae>
    135c:	62 1b       	sub	r22, r18
    135e:	73 0b       	sbc	r23, r19
    1360:	84 0b       	sbc	r24, r20
    1362:	ba 0b       	sbc	r27, r26
    1364:	ee 1f       	adc	r30, r30
    1366:	88 f7       	brcc	.-30     	; 0x134a <__divsf3_pse+0x94>
    1368:	e0 95       	com	r30
    136a:	08 95       	ret

0000136c <__fixunssfsi>:
    136c:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__fp_splitA>
    1370:	88 f0       	brcs	.+34     	; 0x1394 <__fixunssfsi+0x28>
    1372:	9f 57       	subi	r25, 0x7F	; 127
    1374:	98 f0       	brcs	.+38     	; 0x139c <__fixunssfsi+0x30>
    1376:	b9 2f       	mov	r27, r25
    1378:	99 27       	eor	r25, r25
    137a:	b7 51       	subi	r27, 0x17	; 23
    137c:	b0 f0       	brcs	.+44     	; 0x13aa <__fixunssfsi+0x3e>
    137e:	e1 f0       	breq	.+56     	; 0x13b8 <__fixunssfsi+0x4c>
    1380:	66 0f       	add	r22, r22
    1382:	77 1f       	adc	r23, r23
    1384:	88 1f       	adc	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	1a f0       	brmi	.+6      	; 0x1390 <__fixunssfsi+0x24>
    138a:	ba 95       	dec	r27
    138c:	c9 f7       	brne	.-14     	; 0x1380 <__fixunssfsi+0x14>
    138e:	14 c0       	rjmp	.+40     	; 0x13b8 <__fixunssfsi+0x4c>
    1390:	b1 30       	cpi	r27, 0x01	; 1
    1392:	91 f0       	breq	.+36     	; 0x13b8 <__fixunssfsi+0x4c>
    1394:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__fp_zero>
    1398:	b1 e0       	ldi	r27, 0x01	; 1
    139a:	08 95       	ret
    139c:	0c 94 6c 0a 	jmp	0x14d8	; 0x14d8 <__fp_zero>
    13a0:	67 2f       	mov	r22, r23
    13a2:	78 2f       	mov	r23, r24
    13a4:	88 27       	eor	r24, r24
    13a6:	b8 5f       	subi	r27, 0xF8	; 248
    13a8:	39 f0       	breq	.+14     	; 0x13b8 <__fixunssfsi+0x4c>
    13aa:	b9 3f       	cpi	r27, 0xF9	; 249
    13ac:	cc f3       	brlt	.-14     	; 0x13a0 <__fixunssfsi+0x34>
    13ae:	86 95       	lsr	r24
    13b0:	77 95       	ror	r23
    13b2:	67 95       	ror	r22
    13b4:	b3 95       	inc	r27
    13b6:	d9 f7       	brne	.-10     	; 0x13ae <__fixunssfsi+0x42>
    13b8:	3e f4       	brtc	.+14     	; 0x13c8 <__fixunssfsi+0x5c>
    13ba:	90 95       	com	r25
    13bc:	80 95       	com	r24
    13be:	70 95       	com	r23
    13c0:	61 95       	neg	r22
    13c2:	7f 4f       	sbci	r23, 0xFF	; 255
    13c4:	8f 4f       	sbci	r24, 0xFF	; 255
    13c6:	9f 4f       	sbci	r25, 0xFF	; 255
    13c8:	08 95       	ret

000013ca <__floatunsisf>:
    13ca:	e8 94       	clt
    13cc:	09 c0       	rjmp	.+18     	; 0x13e0 <__floatsisf+0x12>

000013ce <__floatsisf>:
    13ce:	97 fb       	bst	r25, 7
    13d0:	3e f4       	brtc	.+14     	; 0x13e0 <__floatsisf+0x12>
    13d2:	90 95       	com	r25
    13d4:	80 95       	com	r24
    13d6:	70 95       	com	r23
    13d8:	61 95       	neg	r22
    13da:	7f 4f       	sbci	r23, 0xFF	; 255
    13dc:	8f 4f       	sbci	r24, 0xFF	; 255
    13de:	9f 4f       	sbci	r25, 0xFF	; 255
    13e0:	99 23       	and	r25, r25
    13e2:	a9 f0       	breq	.+42     	; 0x140e <__floatsisf+0x40>
    13e4:	f9 2f       	mov	r31, r25
    13e6:	96 e9       	ldi	r25, 0x96	; 150
    13e8:	bb 27       	eor	r27, r27
    13ea:	93 95       	inc	r25
    13ec:	f6 95       	lsr	r31
    13ee:	87 95       	ror	r24
    13f0:	77 95       	ror	r23
    13f2:	67 95       	ror	r22
    13f4:	b7 95       	ror	r27
    13f6:	f1 11       	cpse	r31, r1
    13f8:	f8 cf       	rjmp	.-16     	; 0x13ea <__floatsisf+0x1c>
    13fa:	fa f4       	brpl	.+62     	; 0x143a <__floatsisf+0x6c>
    13fc:	bb 0f       	add	r27, r27
    13fe:	11 f4       	brne	.+4      	; 0x1404 <__floatsisf+0x36>
    1400:	60 ff       	sbrs	r22, 0
    1402:	1b c0       	rjmp	.+54     	; 0x143a <__floatsisf+0x6c>
    1404:	6f 5f       	subi	r22, 0xFF	; 255
    1406:	7f 4f       	sbci	r23, 0xFF	; 255
    1408:	8f 4f       	sbci	r24, 0xFF	; 255
    140a:	9f 4f       	sbci	r25, 0xFF	; 255
    140c:	16 c0       	rjmp	.+44     	; 0x143a <__floatsisf+0x6c>
    140e:	88 23       	and	r24, r24
    1410:	11 f0       	breq	.+4      	; 0x1416 <__floatsisf+0x48>
    1412:	96 e9       	ldi	r25, 0x96	; 150
    1414:	11 c0       	rjmp	.+34     	; 0x1438 <__floatsisf+0x6a>
    1416:	77 23       	and	r23, r23
    1418:	21 f0       	breq	.+8      	; 0x1422 <__floatsisf+0x54>
    141a:	9e e8       	ldi	r25, 0x8E	; 142
    141c:	87 2f       	mov	r24, r23
    141e:	76 2f       	mov	r23, r22
    1420:	05 c0       	rjmp	.+10     	; 0x142c <__floatsisf+0x5e>
    1422:	66 23       	and	r22, r22
    1424:	71 f0       	breq	.+28     	; 0x1442 <__floatsisf+0x74>
    1426:	96 e8       	ldi	r25, 0x86	; 134
    1428:	86 2f       	mov	r24, r22
    142a:	70 e0       	ldi	r23, 0x00	; 0
    142c:	60 e0       	ldi	r22, 0x00	; 0
    142e:	2a f0       	brmi	.+10     	; 0x143a <__floatsisf+0x6c>
    1430:	9a 95       	dec	r25
    1432:	66 0f       	add	r22, r22
    1434:	77 1f       	adc	r23, r23
    1436:	88 1f       	adc	r24, r24
    1438:	da f7       	brpl	.-10     	; 0x1430 <__floatsisf+0x62>
    143a:	88 0f       	add	r24, r24
    143c:	96 95       	lsr	r25
    143e:	87 95       	ror	r24
    1440:	97 f9       	bld	r25, 7
    1442:	08 95       	ret

00001444 <__fp_inf>:
    1444:	97 f9       	bld	r25, 7
    1446:	9f 67       	ori	r25, 0x7F	; 127
    1448:	80 e8       	ldi	r24, 0x80	; 128
    144a:	70 e0       	ldi	r23, 0x00	; 0
    144c:	60 e0       	ldi	r22, 0x00	; 0
    144e:	08 95       	ret

00001450 <__fp_nan>:
    1450:	9f ef       	ldi	r25, 0xFF	; 255
    1452:	80 ec       	ldi	r24, 0xC0	; 192
    1454:	08 95       	ret

00001456 <__fp_pscA>:
    1456:	00 24       	eor	r0, r0
    1458:	0a 94       	dec	r0
    145a:	16 16       	cp	r1, r22
    145c:	17 06       	cpc	r1, r23
    145e:	18 06       	cpc	r1, r24
    1460:	09 06       	cpc	r0, r25
    1462:	08 95       	ret

00001464 <__fp_pscB>:
    1464:	00 24       	eor	r0, r0
    1466:	0a 94       	dec	r0
    1468:	12 16       	cp	r1, r18
    146a:	13 06       	cpc	r1, r19
    146c:	14 06       	cpc	r1, r20
    146e:	05 06       	cpc	r0, r21
    1470:	08 95       	ret

00001472 <__fp_round>:
    1472:	09 2e       	mov	r0, r25
    1474:	03 94       	inc	r0
    1476:	00 0c       	add	r0, r0
    1478:	11 f4       	brne	.+4      	; 0x147e <__fp_round+0xc>
    147a:	88 23       	and	r24, r24
    147c:	52 f0       	brmi	.+20     	; 0x1492 <__fp_round+0x20>
    147e:	bb 0f       	add	r27, r27
    1480:	40 f4       	brcc	.+16     	; 0x1492 <__fp_round+0x20>
    1482:	bf 2b       	or	r27, r31
    1484:	11 f4       	brne	.+4      	; 0x148a <__fp_round+0x18>
    1486:	60 ff       	sbrs	r22, 0
    1488:	04 c0       	rjmp	.+8      	; 0x1492 <__fp_round+0x20>
    148a:	6f 5f       	subi	r22, 0xFF	; 255
    148c:	7f 4f       	sbci	r23, 0xFF	; 255
    148e:	8f 4f       	sbci	r24, 0xFF	; 255
    1490:	9f 4f       	sbci	r25, 0xFF	; 255
    1492:	08 95       	ret

00001494 <__fp_split3>:
    1494:	57 fd       	sbrc	r21, 7
    1496:	90 58       	subi	r25, 0x80	; 128
    1498:	44 0f       	add	r20, r20
    149a:	55 1f       	adc	r21, r21
    149c:	59 f0       	breq	.+22     	; 0x14b4 <__fp_splitA+0x10>
    149e:	5f 3f       	cpi	r21, 0xFF	; 255
    14a0:	71 f0       	breq	.+28     	; 0x14be <__fp_splitA+0x1a>
    14a2:	47 95       	ror	r20

000014a4 <__fp_splitA>:
    14a4:	88 0f       	add	r24, r24
    14a6:	97 fb       	bst	r25, 7
    14a8:	99 1f       	adc	r25, r25
    14aa:	61 f0       	breq	.+24     	; 0x14c4 <__fp_splitA+0x20>
    14ac:	9f 3f       	cpi	r25, 0xFF	; 255
    14ae:	79 f0       	breq	.+30     	; 0x14ce <__fp_splitA+0x2a>
    14b0:	87 95       	ror	r24
    14b2:	08 95       	ret
    14b4:	12 16       	cp	r1, r18
    14b6:	13 06       	cpc	r1, r19
    14b8:	14 06       	cpc	r1, r20
    14ba:	55 1f       	adc	r21, r21
    14bc:	f2 cf       	rjmp	.-28     	; 0x14a2 <__fp_split3+0xe>
    14be:	46 95       	lsr	r20
    14c0:	f1 df       	rcall	.-30     	; 0x14a4 <__fp_splitA>
    14c2:	08 c0       	rjmp	.+16     	; 0x14d4 <__fp_splitA+0x30>
    14c4:	16 16       	cp	r1, r22
    14c6:	17 06       	cpc	r1, r23
    14c8:	18 06       	cpc	r1, r24
    14ca:	99 1f       	adc	r25, r25
    14cc:	f1 cf       	rjmp	.-30     	; 0x14b0 <__fp_splitA+0xc>
    14ce:	86 95       	lsr	r24
    14d0:	71 05       	cpc	r23, r1
    14d2:	61 05       	cpc	r22, r1
    14d4:	08 94       	sec
    14d6:	08 95       	ret

000014d8 <__fp_zero>:
    14d8:	e8 94       	clt

000014da <__fp_szero>:
    14da:	bb 27       	eor	r27, r27
    14dc:	66 27       	eor	r22, r22
    14de:	77 27       	eor	r23, r23
    14e0:	cb 01       	movw	r24, r22
    14e2:	97 f9       	bld	r25, 7
    14e4:	08 95       	ret

000014e6 <__mulsf3>:
    14e6:	0e 94 86 0a 	call	0x150c	; 0x150c <__mulsf3x>
    14ea:	0c 94 39 0a 	jmp	0x1472	; 0x1472 <__fp_round>
    14ee:	0e 94 2b 0a 	call	0x1456	; 0x1456 <__fp_pscA>
    14f2:	38 f0       	brcs	.+14     	; 0x1502 <__mulsf3+0x1c>
    14f4:	0e 94 32 0a 	call	0x1464	; 0x1464 <__fp_pscB>
    14f8:	20 f0       	brcs	.+8      	; 0x1502 <__mulsf3+0x1c>
    14fa:	95 23       	and	r25, r21
    14fc:	11 f0       	breq	.+4      	; 0x1502 <__mulsf3+0x1c>
    14fe:	0c 94 22 0a 	jmp	0x1444	; 0x1444 <__fp_inf>
    1502:	0c 94 28 0a 	jmp	0x1450	; 0x1450 <__fp_nan>
    1506:	11 24       	eor	r1, r1
    1508:	0c 94 6d 0a 	jmp	0x14da	; 0x14da <__fp_szero>

0000150c <__mulsf3x>:
    150c:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__fp_split3>
    1510:	70 f3       	brcs	.-36     	; 0x14ee <__mulsf3+0x8>

00001512 <__mulsf3_pse>:
    1512:	95 9f       	mul	r25, r21
    1514:	c1 f3       	breq	.-16     	; 0x1506 <__mulsf3+0x20>
    1516:	95 0f       	add	r25, r21
    1518:	50 e0       	ldi	r21, 0x00	; 0
    151a:	55 1f       	adc	r21, r21
    151c:	62 9f       	mul	r22, r18
    151e:	f0 01       	movw	r30, r0
    1520:	72 9f       	mul	r23, r18
    1522:	bb 27       	eor	r27, r27
    1524:	f0 0d       	add	r31, r0
    1526:	b1 1d       	adc	r27, r1
    1528:	63 9f       	mul	r22, r19
    152a:	aa 27       	eor	r26, r26
    152c:	f0 0d       	add	r31, r0
    152e:	b1 1d       	adc	r27, r1
    1530:	aa 1f       	adc	r26, r26
    1532:	64 9f       	mul	r22, r20
    1534:	66 27       	eor	r22, r22
    1536:	b0 0d       	add	r27, r0
    1538:	a1 1d       	adc	r26, r1
    153a:	66 1f       	adc	r22, r22
    153c:	82 9f       	mul	r24, r18
    153e:	22 27       	eor	r18, r18
    1540:	b0 0d       	add	r27, r0
    1542:	a1 1d       	adc	r26, r1
    1544:	62 1f       	adc	r22, r18
    1546:	73 9f       	mul	r23, r19
    1548:	b0 0d       	add	r27, r0
    154a:	a1 1d       	adc	r26, r1
    154c:	62 1f       	adc	r22, r18
    154e:	83 9f       	mul	r24, r19
    1550:	a0 0d       	add	r26, r0
    1552:	61 1d       	adc	r22, r1
    1554:	22 1f       	adc	r18, r18
    1556:	74 9f       	mul	r23, r20
    1558:	33 27       	eor	r19, r19
    155a:	a0 0d       	add	r26, r0
    155c:	61 1d       	adc	r22, r1
    155e:	23 1f       	adc	r18, r19
    1560:	84 9f       	mul	r24, r20
    1562:	60 0d       	add	r22, r0
    1564:	21 1d       	adc	r18, r1
    1566:	82 2f       	mov	r24, r18
    1568:	76 2f       	mov	r23, r22
    156a:	6a 2f       	mov	r22, r26
    156c:	11 24       	eor	r1, r1
    156e:	9f 57       	subi	r25, 0x7F	; 127
    1570:	50 40       	sbci	r21, 0x00	; 0
    1572:	9a f0       	brmi	.+38     	; 0x159a <__mulsf3_pse+0x88>
    1574:	f1 f0       	breq	.+60     	; 0x15b2 <__mulsf3_pse+0xa0>
    1576:	88 23       	and	r24, r24
    1578:	4a f0       	brmi	.+18     	; 0x158c <__mulsf3_pse+0x7a>
    157a:	ee 0f       	add	r30, r30
    157c:	ff 1f       	adc	r31, r31
    157e:	bb 1f       	adc	r27, r27
    1580:	66 1f       	adc	r22, r22
    1582:	77 1f       	adc	r23, r23
    1584:	88 1f       	adc	r24, r24
    1586:	91 50       	subi	r25, 0x01	; 1
    1588:	50 40       	sbci	r21, 0x00	; 0
    158a:	a9 f7       	brne	.-22     	; 0x1576 <__mulsf3_pse+0x64>
    158c:	9e 3f       	cpi	r25, 0xFE	; 254
    158e:	51 05       	cpc	r21, r1
    1590:	80 f0       	brcs	.+32     	; 0x15b2 <__mulsf3_pse+0xa0>
    1592:	0c 94 22 0a 	jmp	0x1444	; 0x1444 <__fp_inf>
    1596:	0c 94 6d 0a 	jmp	0x14da	; 0x14da <__fp_szero>
    159a:	5f 3f       	cpi	r21, 0xFF	; 255
    159c:	e4 f3       	brlt	.-8      	; 0x1596 <__mulsf3_pse+0x84>
    159e:	98 3e       	cpi	r25, 0xE8	; 232
    15a0:	d4 f3       	brlt	.-12     	; 0x1596 <__mulsf3_pse+0x84>
    15a2:	86 95       	lsr	r24
    15a4:	77 95       	ror	r23
    15a6:	67 95       	ror	r22
    15a8:	b7 95       	ror	r27
    15aa:	f7 95       	ror	r31
    15ac:	e7 95       	ror	r30
    15ae:	9f 5f       	subi	r25, 0xFF	; 255
    15b0:	c1 f7       	brne	.-16     	; 0x15a2 <__mulsf3_pse+0x90>
    15b2:	fe 2b       	or	r31, r30
    15b4:	88 0f       	add	r24, r24
    15b6:	91 1d       	adc	r25, r1
    15b8:	96 95       	lsr	r25
    15ba:	87 95       	ror	r24
    15bc:	97 f9       	bld	r25, 7
    15be:	08 95       	ret

000015c0 <__mulsi3>:
    15c0:	db 01       	movw	r26, r22
    15c2:	8f 93       	push	r24
    15c4:	9f 93       	push	r25
    15c6:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <__muluhisi3>
    15ca:	bf 91       	pop	r27
    15cc:	af 91       	pop	r26
    15ce:	a2 9f       	mul	r26, r18
    15d0:	80 0d       	add	r24, r0
    15d2:	91 1d       	adc	r25, r1
    15d4:	a3 9f       	mul	r26, r19
    15d6:	90 0d       	add	r25, r0
    15d8:	b2 9f       	mul	r27, r18
    15da:	90 0d       	add	r25, r0
    15dc:	11 24       	eor	r1, r1
    15de:	08 95       	ret

000015e0 <__muluhisi3>:
    15e0:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <__umulhisi3>
    15e4:	a5 9f       	mul	r26, r21
    15e6:	90 0d       	add	r25, r0
    15e8:	b4 9f       	mul	r27, r20
    15ea:	90 0d       	add	r25, r0
    15ec:	a4 9f       	mul	r26, r20
    15ee:	80 0d       	add	r24, r0
    15f0:	91 1d       	adc	r25, r1
    15f2:	11 24       	eor	r1, r1
    15f4:	08 95       	ret

000015f6 <__umulhisi3>:
    15f6:	a2 9f       	mul	r26, r18
    15f8:	b0 01       	movw	r22, r0
    15fa:	b3 9f       	mul	r27, r19
    15fc:	c0 01       	movw	r24, r0
    15fe:	a3 9f       	mul	r26, r19
    1600:	70 0d       	add	r23, r0
    1602:	81 1d       	adc	r24, r1
    1604:	11 24       	eor	r1, r1
    1606:	91 1d       	adc	r25, r1
    1608:	b2 9f       	mul	r27, r18
    160a:	70 0d       	add	r23, r0
    160c:	81 1d       	adc	r24, r1
    160e:	11 24       	eor	r1, r1
    1610:	91 1d       	adc	r25, r1
    1612:	08 95       	ret

00001614 <strcmp>:
    1614:	fb 01       	movw	r30, r22
    1616:	dc 01       	movw	r26, r24
    1618:	8d 91       	ld	r24, X+
    161a:	01 90       	ld	r0, Z+
    161c:	80 19       	sub	r24, r0
    161e:	01 10       	cpse	r0, r1
    1620:	d9 f3       	breq	.-10     	; 0x1618 <strcmp+0x4>
    1622:	99 0b       	sbc	r25, r25
    1624:	08 95       	ret

00001626 <_exit>:
    1626:	f8 94       	cli

00001628 <__stop_program>:
    1628:	ff cf       	rjmp	.-2      	; 0x1628 <__stop_program>
