
ATM_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002284  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000244  00800060  00002284  00002318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000055  008002a4  008002a4  0000255c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000255c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000025b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004b0  00000000  00000000  000025f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005fe6  00000000  00000000  00002aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b43  00000000  00000000  00008a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003031  00000000  00000000  0000a5cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c40  00000000  00000000  0000d600  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000190a  00000000  00000000  0000e240  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003402  00000000  00000000  0000fb4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000388  00000000  00000000  00012f4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
       4:	0c 94 5c 0a 	jmp	0x14b8	; 0x14b8 <__vector_1>
       8:	0c 94 85 0a 	jmp	0x150a	; 0x150a <__vector_2>
       c:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__vector_3>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 ce 0c 	jmp	0x199c	; 0x199c <__vector_5>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 b1 0b 	jmp	0x1762	; 0x1762 <__vector_11>
      30:	0c 94 15 0b 	jmp	0x162a	; 0x162a <__vector_12>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	4e 41       	sbci	r20, 0x1E	; 30
      56:	4e 49       	Address 0x00000056 is out of bounds.
.word	0xffff	; ????

00000057 <pstr_inity>:
      57:	49 4e 49 54 59                                      INITY

0000005c <pstr_inf>:
      5c:	49 4e 46                                            INF

0000005f <pwr_m10>:
      5f:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      6f:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000077 <pwr_p10>:
      77:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      87:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000090 <__ctors_end>:
      90:	11 24       	eor	r1, r1
      92:	1f be       	out	0x3f, r1	; 63
      94:	cf e5       	ldi	r28, 0x5F	; 95
      96:	d8 e0       	ldi	r29, 0x08	; 8
      98:	de bf       	out	0x3e, r29	; 62
      9a:	cd bf       	out	0x3d, r28	; 61

0000009c <__do_copy_data>:
      9c:	12 e0       	ldi	r17, 0x02	; 2
      9e:	a0 e6       	ldi	r26, 0x60	; 96
      a0:	b0 e0       	ldi	r27, 0x00	; 0
      a2:	e4 e8       	ldi	r30, 0x84	; 132
      a4:	f2 e2       	ldi	r31, 0x22	; 34
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
      a8:	05 90       	lpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a4 3a       	cpi	r26, 0xA4	; 164
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	a4 ea       	ldi	r26, 0xA4	; 164
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a9 3f       	cpi	r26, 0xF9	; 249
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 0d 09 	call	0x121a	; 0x121a <main>
      c6:	0c 94 40 11 	jmp	0x2280	; 0x2280 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <TriggerCallBack>:
************************************************************************************************************/


void TriggerCallBack(void)
{
	TriggerState = TRIGGER;
      ce:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
      d2:	08 95       	ret

000000d4 <timer_ovfCount>:
 * RETURN			: void
 */

void timer_ovfCount(void)
{
	global_u8OVFCounter++;
      d4:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <global_u8OVFCounter>
      d8:	8f 5f       	subi	r24, 0xFF	; 255
      da:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <global_u8OVFCounter>
      de:	08 95       	ret

000000e0 <APP_Init>:
}
void APP_Init(void)
{
	
	//(void)HButton_Init(DIO_PINB_2);
	(void)KEYPAD_init();
      e0:	0e 94 c9 05 	call	0xb92	; 0xb92 <KEYPAD_init>
	(void)HTimer_enInit();
      e4:	0e 94 98 05 	call	0xb30	; 0xb30 <HTimer_enInit>
	(void)HTimer_enCBF(timer_ovfCount);
      e8:	8a e6       	ldi	r24, 0x6A	; 106
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	0e 94 aa 05 	call	0xb54	; 0xb54 <HTimer_enCBF>
	(void)HLCD_vidInit();
      f0:	0e 94 83 07 	call	0xf06	; 0xf06 <HLCD_vidInit>
	(void)HSPI_MasterInit();
      f4:	0e 94 89 04 	call	0x912	; 0x912 <HSPI_MasterInit>
	(void)H_EXTINT_create(EXTINT0, ANY_LOGICAL_CHANGE,TriggerCallBack);
      f8:	47 e6       	ldi	r20, 0x67	; 103
      fa:	50 e0       	ldi	r21, 0x00	; 0
      fc:	63 e0       	ldi	r22, 0x03	; 3
      fe:	80 e0       	ldi	r24, 0x00	; 0
     100:	0e 94 b2 05 	call	0xb64	; 0xb64 <H_EXTINT_create>
	/*(void)SwICU_Init();*/
	(void)BUZ_Init(&st_g_Buzzer);
     104:	8c e6       	ldi	r24, 0x6C	; 108
     106:	91 e0       	ldi	r25, 0x01	; 1
     108:	0e 94 71 04 	call	0x8e2	; 0x8e2 <BUZ_Init>
	(void)HButton_ExtIntInit(DIO_PINB_2);
     10c:	8a e0       	ldi	r24, 0x0A	; 10
     10e:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <HButton_ExtIntInit>
	(void)H_EXTINT_create(EXTINT2, RISING_EDGE,EXTINT_FUNC);
     112:	46 e8       	ldi	r20, 0x86	; 134
     114:	51 e0       	ldi	r21, 0x01	; 1
     116:	62 e0       	ldi	r22, 0x02	; 2
     118:	82 e0       	ldi	r24, 0x02	; 2
     11a:	0e 94 b2 05 	call	0xb64	; 0xb64 <H_EXTINT_create>
     11e:	08 95       	ret

00000120 <APP_Start>:


void APP_Start(void)
{
			
	switch(TriggerState)
     120:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     124:	81 30       	cpi	r24, 0x01	; 1
     126:	79 f1       	breq	.+94     	; 0x186 <APP_Start+0x66>
     128:	18 f0       	brcs	.+6      	; 0x130 <APP_Start+0x10>
     12a:	82 30       	cpi	r24, 0x02	; 2
     12c:	b1 f1       	breq	.+108    	; 0x19a <APP_Start+0x7a>
     12e:	08 95       	ret
	{
		case TRIGGER:
		{
			welcomeFlag = 0;
     130:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <welcomeFlag>
			if(Get_pin(ATMpin)==PIN_NOT_OK)break;
     134:	88 ea       	ldi	r24, 0xA8	; 168
     136:	92 e0       	ldi	r25, 0x02	; 2
     138:	0e 94 28 02 	call	0x450	; 0x450 <Get_pin>
     13c:	84 30       	cpi	r24, 0x04	; 4
     13e:	09 f4       	brne	.+2      	; 0x142 <APP_Start+0x22>
     140:	e4 c0       	rjmp	.+456    	; 0x30a <APP_Start+0x1ea>
			if(ATM_ValidatePIN() == PIN_MATCHED)
     142:	0e 94 64 03 	call	0x6c8	; 0x6c8 <ATM_ValidatePIN>
     146:	81 11       	cpse	r24, r1
     148:	04 c0       	rjmp	.+8      	; 0x152 <APP_Start+0x32>
			{
				TriggerState = CHECKING;
     14a:	82 e0       	ldi	r24, 0x02	; 2
     14c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     150:	08 95       	ret
                  
			}
			else
			{
				trialsFlag++;
     152:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <__data_end>
     156:	8f 5f       	subi	r24, 0xFF	; 255
     158:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <__data_end>
				/* Lock system if max tries exceeded */
				if(trialsFlag == 3)
     15c:	83 30       	cpi	r24, 0x03	; 3
     15e:	09 f0       	breq	.+2      	; 0x162 <APP_Start+0x42>
     160:	d4 c0       	rjmp	.+424    	; 0x30a <APP_Start+0x1ea>
				{
					HLCD_ClrDisplay();
     162:	0e 94 36 08 	call	0x106c	; 0x106c <HLCD_ClrDisplay>
					HLCD_gotoXY(0,4);
     166:	64 e0       	ldi	r22, 0x04	; 4
     168:	80 e0       	ldi	r24, 0x00	; 0
     16a:	0e 94 49 08 	call	0x1092	; 0x1092 <HLCD_gotoXY>
					HLCD_WriteString("LOCKED");
     16e:	82 e9       	ldi	r24, 0x92	; 146
     170:	91 e0       	ldi	r25, 0x01	; 1
     172:	0e 94 5d 08 	call	0x10ba	; 0x10ba <HLCD_WriteString>
					deinitAtm(&st_g_Buzzer);
     176:	8c e6       	ldi	r24, 0x6C	; 108
     178:	91 e0       	ldi	r25, 0x01	; 1
     17a:	0e 94 60 03 	call	0x6c0	; 0x6c0 <deinitAtm>
					TriggerState = IDLE;
     17e:	83 e0       	ldi	r24, 0x03	; 3
     180:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     184:	08 95       	ret
			//TriggerState = N_TRIGGER;
			break;
		}
		case N_TRIGGER:
		{
			if(welcomeFlag == 0)
     186:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <welcomeFlag>
     18a:	81 11       	cpse	r24, r1
     18c:	be c0       	rjmp	.+380    	; 0x30a <APP_Start+0x1ea>
			{
				Welcome();
     18e:	0e 94 ba 01 	call	0x374	; 0x374 <Welcome>
				welcomeFlag = 1;
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <welcomeFlag>
     198:	08 95       	ret
			break;
		}
        case CHECKING:
       {

		get_amount_left(Entered_amount);
     19a:	89 e6       	ldi	r24, 0x69	; 105
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	0e 94 c4 02 	call	0x588	; 0x588 <get_amount_left>
		HLCD_ClrDisplay();
     1a2:	0e 94 36 08 	call	0x106c	; 0x106c <HLCD_ClrDisplay>
		DB_CHECK = DATABASE_checking(CARDpan,Entered_amount,&newAMOUNT);
     1a6:	42 ed       	ldi	r20, 0xD2	; 210
     1a8:	52 e0       	ldi	r21, 0x02	; 2
     1aa:	69 e6       	ldi	r22, 0x69	; 105
     1ac:	70 e0       	ldi	r23, 0x00	; 0
     1ae:	80 ee       	ldi	r24, 0xE0	; 224
     1b0:	92 e0       	ldi	r25, 0x02	; 2
     1b2:	0e 94 45 04 	call	0x88a	; 0x88a <DATABASE_checking>
     1b6:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <DB_CHECK>
		switch(DB_CHECK){
     1ba:	82 30       	cpi	r24, 0x02	; 2
     1bc:	09 f4       	brne	.+2      	; 0x1c0 <APP_Start+0xa0>
     1be:	43 c0       	rjmp	.+134    	; 0x246 <APP_Start+0x126>
     1c0:	28 f4       	brcc	.+10     	; 0x1cc <APP_Start+0xac>
     1c2:	88 23       	and	r24, r24
     1c4:	51 f0       	breq	.+20     	; 0x1da <APP_Start+0xba>
     1c6:	81 30       	cpi	r24, 0x01	; 1
     1c8:	f9 f0       	breq	.+62     	; 0x208 <APP_Start+0xe8>
     1ca:	08 95       	ret
     1cc:	83 30       	cpi	r24, 0x03	; 3
     1ce:	09 f4       	brne	.+2      	; 0x1d2 <APP_Start+0xb2>
     1d0:	59 c0       	rjmp	.+178    	; 0x284 <APP_Start+0x164>
     1d2:	84 30       	cpi	r24, 0x04	; 4
     1d4:	09 f4       	brne	.+2      	; 0x1d8 <APP_Start+0xb8>
     1d6:	79 c0       	rjmp	.+242    	; 0x2ca <APP_Start+0x1aa>
     1d8:	08 95       	ret
			case APPROVED:
			{
				ATM_ApprovedCard(newAMOUNT);
     1da:	60 91 d2 02 	lds	r22, 0x02D2	; 0x8002d2 <newAMOUNT>
     1de:	70 91 d3 02 	lds	r23, 0x02D3	; 0x8002d3 <newAMOUNT+0x1>
     1e2:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <newAMOUNT+0x2>
     1e6:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <newAMOUNT+0x3>
     1ea:	0e 94 d6 01 	call	0x3ac	; 0x3ac <ATM_ApprovedCard>
				HSPI_SendChar(ATM_REQUEST_EJECTED);
     1ee:	85 e4       	ldi	r24, 0x45	; 69
     1f0:	0e 94 a4 04 	call	0x948	; 0x948 <HSPI_SendChar>
				strcpy(Entered_amount,Default_Entered_amount);
     1f4:	61 e6       	ldi	r22, 0x61	; 97
     1f6:	70 e0       	ldi	r23, 0x00	; 0
     1f8:	89 e6       	ldi	r24, 0x69	; 105
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <strcpy>
				TriggerState = N_TRIGGER;
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				break;
     206:	08 95       	ret
			}
			case FRAUD_CARD:
			{
				deinitAtm(&st_g_Buzzer);
     208:	8c e6       	ldi	r24, 0x6C	; 108
     20a:	91 e0       	ldi	r25, 0x01	; 1
     20c:	0e 94 60 03 	call	0x6c0	; 0x6c0 <deinitAtm>
				HLCD_gotoXY(0, 4);
     210:	64 e0       	ldi	r22, 0x04	; 4
     212:	80 e0       	ldi	r24, 0x00	; 0
     214:	0e 94 49 08 	call	0x1092	; 0x1092 <HLCD_gotoXY>
				HLCD_WriteString("This is a");
     218:	89 e9       	ldi	r24, 0x99	; 153
     21a:	91 e0       	ldi	r25, 0x01	; 1
     21c:	0e 94 5d 08 	call	0x10ba	; 0x10ba <HLCD_WriteString>
				HLCD_gotoXY(1, 2);
     220:	62 e0       	ldi	r22, 0x02	; 2
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	0e 94 49 08 	call	0x1092	; 0x1092 <HLCD_gotoXY>
				HLCD_WriteString("Fraud Card");
     228:	83 ea       	ldi	r24, 0xA3	; 163
     22a:	91 e0       	ldi	r25, 0x01	; 1
     22c:	0e 94 5d 08 	call	0x10ba	; 0x10ba <HLCD_WriteString>
				HTIM0_SyncDelay(1, Seconds);
     230:	42 e0       	ldi	r20, 0x02	; 2
     232:	61 e0       	ldi	r22, 0x01	; 1
     234:	70 e0       	ldi	r23, 0x00	; 0
     236:	80 e0       	ldi	r24, 0x00	; 0
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <HTIM0_SyncDelay>
				TriggerState = IDLE;
     23e:	83 e0       	ldi	r24, 0x03	; 3
     240:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				break;
     244:	08 95       	ret
			}
			case CARD_STOLEN:
			{
				deinitAtm(&st_g_Buzzer);
     246:	8c e6       	ldi	r24, 0x6C	; 108
     248:	91 e0       	ldi	r25, 0x01	; 1
     24a:	0e 94 60 03 	call	0x6c0	; 0x6c0 <deinitAtm>
				HLCD_gotoXY(0, 4);
     24e:	64 e0       	ldi	r22, 0x04	; 4
     250:	80 e0       	ldi	r24, 0x00	; 0
     252:	0e 94 49 08 	call	0x1092	; 0x1092 <HLCD_gotoXY>
				HLCD_WriteString("This Card ");
     256:	8e ea       	ldi	r24, 0xAE	; 174
     258:	91 e0       	ldi	r25, 0x01	; 1
     25a:	0e 94 5d 08 	call	0x10ba	; 0x10ba <HLCD_WriteString>
				HLCD_gotoXY(1, 2);
     25e:	62 e0       	ldi	r22, 0x02	; 2
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	0e 94 49 08 	call	0x1092	; 0x1092 <HLCD_gotoXY>
				HLCD_WriteString("is Stolen");
     266:	89 eb       	ldi	r24, 0xB9	; 185
     268:	91 e0       	ldi	r25, 0x01	; 1
     26a:	0e 94 5d 08 	call	0x10ba	; 0x10ba <HLCD_WriteString>
				HTIM0_SyncDelay(1, Seconds);
     26e:	42 e0       	ldi	r20, 0x02	; 2
     270:	61 e0       	ldi	r22, 0x01	; 1
     272:	70 e0       	ldi	r23, 0x00	; 0
     274:	80 e0       	ldi	r24, 0x00	; 0
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <HTIM0_SyncDelay>
				TriggerState = IDLE;
     27c:	83 e0       	ldi	r24, 0x03	; 3
     27e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				break;
     282:	08 95       	ret
			}
			case EXCEED_MAX_DAILY_AMOUNT:
			{
				
				HLCD_gotoXY(0, 4);
     284:	64 e0       	ldi	r22, 0x04	; 4
     286:	80 e0       	ldi	r24, 0x00	; 0
     288:	0e 94 49 08 	call	0x1092	; 0x1092 <HLCD_gotoXY>
				HLCD_WriteString("Max Limit ");
     28c:	83 ec       	ldi	r24, 0xC3	; 195
     28e:	91 e0       	ldi	r25, 0x01	; 1
     290:	0e 94 5d 08 	call	0x10ba	; 0x10ba <HLCD_WriteString>
				HLCD_gotoXY(1, 2);
     294:	62 e0       	ldi	r22, 0x02	; 2
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	0e 94 49 08 	call	0x1092	; 0x1092 <HLCD_gotoXY>
				HLCD_WriteString("is Exceeded");
     29c:	8e ec       	ldi	r24, 0xCE	; 206
     29e:	91 e0       	ldi	r25, 0x01	; 1
     2a0:	0e 94 5d 08 	call	0x10ba	; 0x10ba <HLCD_WriteString>
				HTIM0_SyncDelay(1, Seconds);
     2a4:	42 e0       	ldi	r20, 0x02	; 2
     2a6:	61 e0       	ldi	r22, 0x01	; 1
     2a8:	70 e0       	ldi	r23, 0x00	; 0
     2aa:	80 e0       	ldi	r24, 0x00	; 0
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <HTIM0_SyncDelay>
				HLCD_ClrDisplay();
     2b2:	0e 94 36 08 	call	0x106c	; 0x106c <HLCD_ClrDisplay>
				strcpy(Entered_amount,Default_Entered_amount);
     2b6:	61 e6       	ldi	r22, 0x61	; 97
     2b8:	70 e0       	ldi	r23, 0x00	; 0
     2ba:	89 e6       	ldi	r24, 0x69	; 105
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <strcpy>
				TriggerState = CHECKING;
     2c2:	82 e0       	ldi	r24, 0x02	; 2
     2c4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				break;
     2c8:	08 95       	ret
			}
			case INSUFFICIENT_FUND:
			{
				
				HLCD_gotoXY(0, 4);
     2ca:	64 e0       	ldi	r22, 0x04	; 4
     2cc:	80 e0       	ldi	r24, 0x00	; 0
     2ce:	0e 94 49 08 	call	0x1092	; 0x1092 <HLCD_gotoXY>
				HLCD_WriteString("INSUFFICIENT ");
     2d2:	8a ed       	ldi	r24, 0xDA	; 218
     2d4:	91 e0       	ldi	r25, 0x01	; 1
     2d6:	0e 94 5d 08 	call	0x10ba	; 0x10ba <HLCD_WriteString>
				HLCD_gotoXY(1, 2);
     2da:	62 e0       	ldi	r22, 0x02	; 2
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	0e 94 49 08 	call	0x1092	; 0x1092 <HLCD_gotoXY>
				HLCD_WriteString("FUND");
     2e2:	88 ee       	ldi	r24, 0xE8	; 232
     2e4:	91 e0       	ldi	r25, 0x01	; 1
     2e6:	0e 94 5d 08 	call	0x10ba	; 0x10ba <HLCD_WriteString>
				HTIM0_SyncDelay(1, Seconds);
     2ea:	42 e0       	ldi	r20, 0x02	; 2
     2ec:	61 e0       	ldi	r22, 0x01	; 1
     2ee:	70 e0       	ldi	r23, 0x00	; 0
     2f0:	80 e0       	ldi	r24, 0x00	; 0
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <HTIM0_SyncDelay>
				strcpy(Entered_amount,Default_Entered_amount);
     2f8:	61 e6       	ldi	r22, 0x61	; 97
     2fa:	70 e0       	ldi	r23, 0x00	; 0
     2fc:	89 e6       	ldi	r24, 0x69	; 105
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <strcpy>
				TriggerState = CHECKING;
     304:	82 e0       	ldi	r24, 0x02	; 2
     306:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     30a:	08 95       	ret

0000030c <EXTINT_FUNC>:
	//Uchar8_t arr_g_CardPIN[5];
	//Uchar8_t arr_g_CardPAN[20];

	void Card_Trigger(void)
	{
		u8_g_ReceivePIN = 1;
     30c:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <counter.2217>
     310:	81 11       	cpse	r24, r1
     312:	10 c0       	rjmp	.+32     	; 0x334 <EXTINT_FUNC+0x28>
     314:	64 e6       	ldi	r22, 0x64	; 100
     316:	70 e0       	ldi	r23, 0x00	; 0
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	0e 94 a2 05 	call	0xb44	; 0xb44 <HTimer_vidDelayMs>
     320:	46 e8       	ldi	r20, 0x86	; 134
     322:	51 e0       	ldi	r21, 0x01	; 1
     324:	61 e0       	ldi	r22, 0x01	; 1
     326:	82 e0       	ldi	r24, 0x02	; 2
     328:	0e 94 b2 05 	call	0xb64	; 0xb64 <H_EXTINT_create>
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <counter.2217>
     332:	08 95       	ret
     334:	81 30       	cpi	r24, 0x01	; 1
     336:	e9 f4       	brne	.+58     	; 0x372 <EXTINT_FUNC+0x66>
     338:	0e 94 a7 05 	call	0xb4e	; 0xb4e <HTimer_enStop>
     33c:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <global_u8OVFCounter>
     340:	9f ef       	ldi	r25, 0xFF	; 255
     342:	98 0f       	add	r25, r24
     344:	93 31       	cpi	r25, 0x13	; 19
     346:	18 f4       	brcc	.+6      	; 0x34e <EXTINT_FUNC+0x42>
     348:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <myState>
     34c:	05 c0       	rjmp	.+10     	; 0x358 <EXTINT_FUNC+0x4c>
     34e:	84 31       	cpi	r24, 0x14	; 20
     350:	18 f0       	brcs	.+6      	; 0x358 <EXTINT_FUNC+0x4c>
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <myState>
     358:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <global_u8OVFCounter>
     35c:	46 e8       	ldi	r20, 0x86	; 134
     35e:	51 e0       	ldi	r21, 0x01	; 1
     360:	62 e0       	ldi	r22, 0x02	; 2
     362:	82 e0       	ldi	r24, 0x02	; 2
     364:	0e 94 b2 05 	call	0xb64	; 0xb64 <H_EXTINT_create>
     368:	8a e0       	ldi	r24, 0x0A	; 10
     36a:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <HButton_ExtIntInit>
     36e:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <counter.2217>
     372:	08 95       	ret

00000374 <Welcome>:
     374:	0e 94 36 08 	call	0x106c	; 0x106c <HLCD_ClrDisplay>
     378:	60 e0       	ldi	r22, 0x00	; 0
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	0e 94 49 08 	call	0x1092	; 0x1092 <HLCD_gotoXY>
     380:	8d ee       	ldi	r24, 0xED	; 237
     382:	91 e0       	ldi	r25, 0x01	; 1
     384:	0e 94 5d 08 	call	0x10ba	; 0x10ba <HLCD_WriteString>
     388:	42 e0       	ldi	r20, 0x02	; 2
     38a:	61 e0       	ldi	r22, 0x01	; 1
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <HTIM0_SyncDelay>
     396:	0e 94 36 08 	call	0x106c	; 0x106c <HLCD_ClrDisplay>
     39a:	60 e0       	ldi	r22, 0x00	; 0
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	0e 94 49 08 	call	0x1092	; 0x1092 <HLCD_gotoXY>
     3a2:	8c ef       	ldi	r24, 0xFC	; 252
     3a4:	91 e0       	ldi	r25, 0x01	; 1
     3a6:	0e 94 5d 08 	call	0x10ba	; 0x10ba <HLCD_WriteString>
     3aa:	08 95       	ret

000003ac <ATM_ApprovedCard>:
     3ac:	cf 92       	push	r12
     3ae:	df 92       	push	r13
     3b0:	ef 92       	push	r14
     3b2:	ff 92       	push	r15
     3b4:	6b 01       	movw	r12, r22
     3b6:	7c 01       	movw	r14, r24
     3b8:	64 e0       	ldi	r22, 0x04	; 4
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	0e 94 49 08 	call	0x1092	; 0x1092 <HLCD_gotoXY>
     3c0:	8d e0       	ldi	r24, 0x0D	; 13
     3c2:	92 e0       	ldi	r25, 0x02	; 2
     3c4:	0e 94 5d 08 	call	0x10ba	; 0x10ba <HLCD_WriteString>
     3c8:	62 e0       	ldi	r22, 0x02	; 2
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	0e 94 49 08 	call	0x1092	; 0x1092 <HLCD_gotoXY>
     3d0:	86 e1       	ldi	r24, 0x16	; 22
     3d2:	92 e0       	ldi	r25, 0x02	; 2
     3d4:	0e 94 5d 08 	call	0x10ba	; 0x10ba <HLCD_WriteString>
     3d8:	42 e0       	ldi	r20, 0x02	; 2
     3da:	61 e0       	ldi	r22, 0x01	; 1
     3dc:	70 e0       	ldi	r23, 0x00	; 0
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <HTIM0_SyncDelay>
     3e6:	0e 94 36 08 	call	0x106c	; 0x106c <HLCD_ClrDisplay>
     3ea:	64 e0       	ldi	r22, 0x04	; 4
     3ec:	80 e0       	ldi	r24, 0x00	; 0
     3ee:	0e 94 49 08 	call	0x1092	; 0x1092 <HLCD_gotoXY>
     3f2:	82 e2       	ldi	r24, 0x22	; 34
     3f4:	92 e0       	ldi	r25, 0x02	; 2
     3f6:	0e 94 5d 08 	call	0x10ba	; 0x10ba <HLCD_WriteString>
     3fa:	60 e0       	ldi	r22, 0x00	; 0
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	0e 94 49 08 	call	0x1092	; 0x1092 <HLCD_gotoXY>
     402:	8c e2       	ldi	r24, 0x2C	; 44
     404:	92 e0       	ldi	r25, 0x02	; 2
     406:	0e 94 5d 08 	call	0x10ba	; 0x10ba <HLCD_WriteString>
     40a:	c7 01       	movw	r24, r14
     40c:	b6 01       	movw	r22, r12
     40e:	0e 94 75 08 	call	0x10ea	; 0x10ea <HLCD_DisplayFloat>
     412:	42 e0       	ldi	r20, 0x02	; 2
     414:	61 e0       	ldi	r22, 0x01	; 1
     416:	70 e0       	ldi	r23, 0x00	; 0
     418:	80 e0       	ldi	r24, 0x00	; 0
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <HTIM0_SyncDelay>
     420:	0e 94 36 08 	call	0x106c	; 0x106c <HLCD_ClrDisplay>
     424:	61 e0       	ldi	r22, 0x01	; 1
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	0e 94 49 08 	call	0x1092	; 0x1092 <HLCD_gotoXY>
     42c:	86 e3       	ldi	r24, 0x36	; 54
     42e:	92 e0       	ldi	r25, 0x02	; 2
     430:	0e 94 5d 08 	call	0x10ba	; 0x10ba <HLCD_WriteString>
     434:	42 e0       	ldi	r20, 0x02	; 2
     436:	61 e0       	ldi	r22, 0x01	; 1
     438:	70 e0       	ldi	r23, 0x00	; 0
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <HTIM0_SyncDelay>
     442:	0e 94 36 08 	call	0x106c	; 0x106c <HLCD_ClrDisplay>
     446:	ff 90       	pop	r15
     448:	ef 90       	pop	r14
     44a:	df 90       	pop	r13
     44c:	cf 90       	pop	r12
     44e:	08 95       	ret

00000450 <Get_pin>:
     450:	ef 92       	push	r14
     452:	ff 92       	push	r15
     454:	0f 93       	push	r16
     456:	1f 93       	push	r17
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
     45c:	8c 01       	movw	r16, r24
     45e:	0e 94 36 08 	call	0x106c	; 0x106c <HLCD_ClrDisplay>
     462:	60 e0       	ldi	r22, 0x00	; 0
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	0e 94 49 08 	call	0x1092	; 0x1092 <HLCD_gotoXY>
     46a:	84 e4       	ldi	r24, 0x44	; 68
     46c:	92 e0       	ldi	r25, 0x02	; 2
     46e:	0e 94 5d 08 	call	0x10ba	; 0x10ba <HLCD_WriteString>
     472:	d0 e0       	ldi	r29, 0x00	; 0
     474:	f1 2c       	mov	r15, r1
     476:	33 c0       	rjmp	.+102    	; 0x4de <Get_pin+0x8e>
     478:	0e 94 14 07 	call	0xe28	; 0xe28 <KEYPAD_GetButton>
     47c:	c8 2f       	mov	r28, r24
     47e:	81 11       	cpse	r24, r1
     480:	18 c0       	rjmp	.+48     	; 0x4b2 <Get_pin+0x62>
     482:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <myState>
     486:	81 11       	cpse	r24, r1
     488:	2a c0       	rjmp	.+84     	; 0x4de <Get_pin+0x8e>
     48a:	82 e0       	ldi	r24, 0x02	; 2
     48c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <myState>
     490:	f8 01       	movw	r30, r16
     492:	ed 0f       	add	r30, r29
     494:	f1 1d       	adc	r31, r1
     496:	80 e3       	ldi	r24, 0x30	; 48
     498:	80 83       	st	Z, r24
     49a:	c1 e0       	ldi	r28, 0x01	; 1
     49c:	cf 0d       	add	r28, r15
     49e:	6f 2d       	mov	r22, r15
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	0e 94 49 08 	call	0x1092	; 0x1092 <HLCD_gotoXY>
     4a6:	80 e3       	ldi	r24, 0x30	; 48
     4a8:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <HLCD_vidWriteChar>
     4ac:	df 5f       	subi	r29, 0xFF	; 255
     4ae:	fc 2e       	mov	r15, r28
     4b0:	16 c0       	rjmp	.+44     	; 0x4de <Get_pin+0x8e>
     4b2:	88 23       	and	r24, r24
     4b4:	a1 f0       	breq	.+40     	; 0x4de <Get_pin+0x8e>
     4b6:	ee 24       	eor	r14, r14
     4b8:	e3 94       	inc	r14
     4ba:	ef 0c       	add	r14, r15
     4bc:	6f 2d       	mov	r22, r15
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	0e 94 49 08 	call	0x1092	; 0x1092 <HLCD_gotoXY>
     4c4:	d8 01       	movw	r26, r16
     4c6:	ad 0f       	add	r26, r29
     4c8:	b1 1d       	adc	r27, r1
     4ca:	ec 2f       	mov	r30, r28
     4cc:	f0 e0       	ldi	r31, 0x00	; 0
     4ce:	e4 59       	subi	r30, 0x94	; 148
     4d0:	fe 4f       	sbci	r31, 0xFE	; 254
     4d2:	80 81       	ld	r24, Z
     4d4:	8c 93       	st	X, r24
     4d6:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <HLCD_vidWriteChar>
     4da:	df 5f       	subi	r29, 0xFF	; 255
     4dc:	fe 2c       	mov	r15, r14
     4de:	d4 30       	cpi	r29, 0x04	; 4
     4e0:	20 f4       	brcc	.+8      	; 0x4ea <Get_pin+0x9a>
     4e2:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <myState>
     4e6:	81 30       	cpi	r24, 0x01	; 1
     4e8:	39 f6       	brne	.-114    	; 0x478 <Get_pin+0x28>
     4ea:	d4 30       	cpi	r29, 0x04	; 4
     4ec:	b0 f4       	brcc	.+44     	; 0x51a <Get_pin+0xca>
     4ee:	82 e0       	ldi	r24, 0x02	; 2
     4f0:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <myState>
     4f4:	0e 94 36 08 	call	0x106c	; 0x106c <HLCD_ClrDisplay>
     4f8:	60 e0       	ldi	r22, 0x00	; 0
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	0e 94 49 08 	call	0x1092	; 0x1092 <HLCD_gotoXY>
     500:	83 e5       	ldi	r24, 0x53	; 83
     502:	92 e0       	ldi	r25, 0x02	; 2
     504:	0e 94 5d 08 	call	0x10ba	; 0x10ba <HLCD_WriteString>
     508:	42 e0       	ldi	r20, 0x02	; 2
     50a:	61 e0       	ldi	r22, 0x01	; 1
     50c:	70 e0       	ldi	r23, 0x00	; 0
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <HTIM0_SyncDelay>
     516:	84 e0       	ldi	r24, 0x04	; 4
     518:	01 c0       	rjmp	.+2      	; 0x51c <Get_pin+0xcc>
     51a:	83 e0       	ldi	r24, 0x03	; 3
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	1f 91       	pop	r17
     522:	0f 91       	pop	r16
     524:	ff 90       	pop	r15
     526:	ef 90       	pop	r14
     528:	08 95       	ret

0000052a <PIN_checkPinMatching>:
     52a:	00 97       	sbiw	r24, 0x00	; 0
     52c:	49 f1       	breq	.+82     	; 0x580 <PIN_checkPinMatching+0x56>
     52e:	61 15       	cp	r22, r1
     530:	71 05       	cpc	r23, r1
     532:	41 f1       	breq	.+80     	; 0x584 <PIN_checkPinMatching+0x5a>
     534:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <strcmp>
     538:	89 2b       	or	r24, r25
     53a:	89 f4       	brne	.+34     	; 0x55e <PIN_checkPinMatching+0x34>
     53c:	0e 94 36 08 	call	0x106c	; 0x106c <HLCD_ClrDisplay>
     540:	8d e5       	ldi	r24, 0x5D	; 93
     542:	92 e0       	ldi	r25, 0x02	; 2
     544:	0e 94 5d 08 	call	0x10ba	; 0x10ba <HLCD_WriteString>
     548:	2f e3       	ldi	r18, 0x3F	; 63
     54a:	82 e4       	ldi	r24, 0x42	; 66
     54c:	9f e0       	ldi	r25, 0x0F	; 15
     54e:	21 50       	subi	r18, 0x01	; 1
     550:	80 40       	sbci	r24, 0x00	; 0
     552:	90 40       	sbci	r25, 0x00	; 0
     554:	e1 f7       	brne	.-8      	; 0x54e <PIN_checkPinMatching+0x24>
     556:	00 c0       	rjmp	.+0      	; 0x558 <PIN_checkPinMatching+0x2e>
     558:	00 00       	nop
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	08 95       	ret
     55e:	0e 94 36 08 	call	0x106c	; 0x106c <HLCD_ClrDisplay>
     562:	89 e6       	ldi	r24, 0x69	; 105
     564:	92 e0       	ldi	r25, 0x02	; 2
     566:	0e 94 5d 08 	call	0x10ba	; 0x10ba <HLCD_WriteString>
     56a:	2f e3       	ldi	r18, 0x3F	; 63
     56c:	82 e4       	ldi	r24, 0x42	; 66
     56e:	9f e0       	ldi	r25, 0x0F	; 15
     570:	21 50       	subi	r18, 0x01	; 1
     572:	80 40       	sbci	r24, 0x00	; 0
     574:	90 40       	sbci	r25, 0x00	; 0
     576:	e1 f7       	brne	.-8      	; 0x570 <PIN_checkPinMatching+0x46>
     578:	00 c0       	rjmp	.+0      	; 0x57a <PIN_checkPinMatching+0x50>
     57a:	00 00       	nop
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	08 95       	ret
     580:	82 e0       	ldi	r24, 0x02	; 2
     582:	08 95       	ret
     584:	82 e0       	ldi	r24, 0x02	; 2
     586:	08 95       	ret

00000588 <get_amount_left>:
     588:	df 92       	push	r13
     58a:	ef 92       	push	r14
     58c:	ff 92       	push	r15
     58e:	0f 93       	push	r16
     590:	1f 93       	push	r17
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	7c 01       	movw	r14, r24
     598:	0e 94 36 08 	call	0x106c	; 0x106c <HLCD_ClrDisplay>
     59c:	60 e0       	ldi	r22, 0x00	; 0
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	0e 94 49 08 	call	0x1092	; 0x1092 <HLCD_gotoXY>
     5a4:	89 e7       	ldi	r24, 0x79	; 121
     5a6:	92 e0       	ldi	r25, 0x02	; 2
     5a8:	0e 94 5d 08 	call	0x10ba	; 0x10ba <HLCD_WriteString>
     5ac:	60 e0       	ldi	r22, 0x00	; 0
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	0e 94 49 08 	call	0x1092	; 0x1092 <HLCD_gotoXY>
     5b4:	c7 01       	movw	r24, r14
     5b6:	0e 94 5d 08 	call	0x10ba	; 0x10ba <HLCD_WriteString>
     5ba:	d1 2c       	mov	r13, r1
     5bc:	71 c0       	rjmp	.+226    	; 0x6a0 <get_amount_left+0x118>
     5be:	0e 94 14 07 	call	0xe28	; 0xe28 <KEYPAD_GetButton>
     5c2:	d8 2f       	mov	r29, r24
     5c4:	81 11       	cpse	r24, r1
     5c6:	59 c0       	rjmp	.+178    	; 0x67a <get_amount_left+0xf2>
     5c8:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <myState>
     5cc:	81 11       	cpse	r24, r1
     5ce:	68 c0       	rjmp	.+208    	; 0x6a0 <get_amount_left+0x118>
     5d0:	82 e0       	ldi	r24, 0x02	; 2
     5d2:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <myState>
     5d6:	c0 e0       	ldi	r28, 0x00	; 0
     5d8:	20 c0       	rjmp	.+64     	; 0x61a <get_amount_left+0x92>
     5da:	c3 30       	cpi	r28, 0x03	; 3
     5dc:	79 f4       	brne	.+30     	; 0x5fc <get_amount_left+0x74>
     5de:	87 01       	movw	r16, r14
     5e0:	0c 0f       	add	r16, r28
     5e2:	11 1d       	adc	r17, r1
     5e4:	f8 01       	movw	r30, r16
     5e6:	82 81       	ldd	r24, Z+2	; 0x02
     5e8:	80 83       	st	Z, r24
     5ea:	6c 2f       	mov	r22, r28
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	0e 94 49 08 	call	0x1092	; 0x1092 <HLCD_gotoXY>
     5f2:	f8 01       	movw	r30, r16
     5f4:	80 81       	ld	r24, Z
     5f6:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <HLCD_vidWriteChar>
     5fa:	c5 e0       	ldi	r28, 0x05	; 5
     5fc:	87 01       	movw	r16, r14
     5fe:	0c 0f       	add	r16, r28
     600:	11 1d       	adc	r17, r1
     602:	f8 01       	movw	r30, r16
     604:	81 81       	ldd	r24, Z+1	; 0x01
     606:	80 83       	st	Z, r24
     608:	6c 2f       	mov	r22, r28
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	0e 94 49 08 	call	0x1092	; 0x1092 <HLCD_gotoXY>
     610:	f8 01       	movw	r30, r16
     612:	80 81       	ld	r24, Z
     614:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <HLCD_vidWriteChar>
     618:	cf 5f       	subi	r28, 0xFF	; 255
     61a:	c6 30       	cpi	r28, 0x06	; 6
     61c:	f0 f2       	brcs	.-68     	; 0x5da <get_amount_left+0x52>
     61e:	80 e3       	ldi	r24, 0x30	; 48
     620:	f7 01       	movw	r30, r14
     622:	86 83       	std	Z+6, r24	; 0x06
     624:	66 e0       	ldi	r22, 0x06	; 6
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	0e 94 49 08 	call	0x1092	; 0x1092 <HLCD_gotoXY>
     62c:	f7 01       	movw	r30, r14
     62e:	86 81       	ldd	r24, Z+6	; 0x06
     630:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <HLCD_vidWriteChar>
     634:	d3 94       	inc	r13
     636:	34 c0       	rjmp	.+104    	; 0x6a0 <get_amount_left+0x118>
     638:	c3 30       	cpi	r28, 0x03	; 3
     63a:	79 f4       	brne	.+30     	; 0x65a <get_amount_left+0xd2>
     63c:	87 01       	movw	r16, r14
     63e:	0c 0f       	add	r16, r28
     640:	11 1d       	adc	r17, r1
     642:	f8 01       	movw	r30, r16
     644:	82 81       	ldd	r24, Z+2	; 0x02
     646:	80 83       	st	Z, r24
     648:	6c 2f       	mov	r22, r28
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	0e 94 49 08 	call	0x1092	; 0x1092 <HLCD_gotoXY>
     650:	f8 01       	movw	r30, r16
     652:	80 81       	ld	r24, Z
     654:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <HLCD_vidWriteChar>
     658:	c5 e0       	ldi	r28, 0x05	; 5
     65a:	87 01       	movw	r16, r14
     65c:	0c 0f       	add	r16, r28
     65e:	11 1d       	adc	r17, r1
     660:	f8 01       	movw	r30, r16
     662:	81 81       	ldd	r24, Z+1	; 0x01
     664:	80 83       	st	Z, r24
     666:	6c 2f       	mov	r22, r28
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	0e 94 49 08 	call	0x1092	; 0x1092 <HLCD_gotoXY>
     66e:	f8 01       	movw	r30, r16
     670:	80 81       	ld	r24, Z
     672:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <HLCD_vidWriteChar>
     676:	cf 5f       	subi	r28, 0xFF	; 255
     678:	01 c0       	rjmp	.+2      	; 0x67c <get_amount_left+0xf4>
     67a:	c0 e0       	ldi	r28, 0x00	; 0
     67c:	c6 30       	cpi	r28, 0x06	; 6
     67e:	e0 f2       	brcs	.-72     	; 0x638 <get_amount_left+0xb0>
     680:	ed 2f       	mov	r30, r29
     682:	f0 e0       	ldi	r31, 0x00	; 0
     684:	e4 59       	subi	r30, 0x94	; 148
     686:	fe 4f       	sbci	r31, 0xFE	; 254
     688:	80 81       	ld	r24, Z
     68a:	f7 01       	movw	r30, r14
     68c:	86 83       	std	Z+6, r24	; 0x06
     68e:	66 e0       	ldi	r22, 0x06	; 6
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	0e 94 49 08 	call	0x1092	; 0x1092 <HLCD_gotoXY>
     696:	f7 01       	movw	r30, r14
     698:	86 81       	ldd	r24, Z+6	; 0x06
     69a:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <HLCD_vidWriteChar>
     69e:	d3 94       	inc	r13
     6a0:	f5 e0       	ldi	r31, 0x05	; 5
     6a2:	fd 15       	cp	r31, r13
     6a4:	28 f0       	brcs	.+10     	; 0x6b0 <get_amount_left+0x128>
     6a6:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <myState>
     6aa:	81 30       	cpi	r24, 0x01	; 1
     6ac:	09 f0       	breq	.+2      	; 0x6b0 <get_amount_left+0x128>
     6ae:	87 cf       	rjmp	.-242    	; 0x5be <get_amount_left+0x36>
     6b0:	df 91       	pop	r29
     6b2:	cf 91       	pop	r28
     6b4:	1f 91       	pop	r17
     6b6:	0f 91       	pop	r16
     6b8:	ff 90       	pop	r15
     6ba:	ef 90       	pop	r14
     6bc:	df 90       	pop	r13
     6be:	08 95       	ret

000006c0 <deinitAtm>:
     6c0:	61 e0       	ldi	r22, 0x01	; 1
     6c2:	0e 94 7f 04 	call	0x8fe	; 0x8fe <BUZ_SetState>
     6c6:	08 95       	ret

000006c8 <ATM_ValidatePIN>:
	EN_PinState ATM_ValidatePIN(void)
	{
		EN_PinState u8_l_MatchPIN;
		
		/* Request PIN From Card */
		HSPI_SendChar(ATM_REQUEST_PIN);
     6c8:	80 e5       	ldi	r24, 0x50	; 80
     6ca:	0e 94 a4 04 	call	0x948	; 0x948 <HSPI_SendChar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6ce:	81 ee       	ldi	r24, 0xE1	; 225
     6d0:	94 e0       	ldi	r25, 0x04	; 4
     6d2:	01 97       	sbiw	r24, 0x01	; 1
     6d4:	f1 f7       	brne	.-4      	; 0x6d2 <ATM_ValidatePIN+0xa>
     6d6:	00 c0       	rjmp	.+0      	; 0x6d8 <ATM_ValidatePIN+0x10>
     6d8:	00 00       	nop
		_delay_ms(5);
		HSPI_ReceiveData(CARDpin, 5);
     6da:	65 e0       	ldi	r22, 0x05	; 5
     6dc:	87 ed       	ldi	r24, 0xD7	; 215
     6de:	92 e0       	ldi	r25, 0x02	; 2
     6e0:	0e 94 be 04 	call	0x97c	; 0x97c <HSPI_ReceiveData>
		//HLCD_WriteString("Received ");
		//HLCD_WriteString(CARDpin);
		//_delay_ms(3000);
		
		/* Request PIN From Card */
		HSPI_SendChar(ATM_REQUEST_PAN);
     6e4:	87 e4       	ldi	r24, 0x47	; 71
     6e6:	0e 94 a4 04 	call	0x948	; 0x948 <HSPI_SendChar>
     6ea:	81 ee       	ldi	r24, 0xE1	; 225
     6ec:	94 e0       	ldi	r25, 0x04	; 4
     6ee:	01 97       	sbiw	r24, 0x01	; 1
     6f0:	f1 f7       	brne	.-4      	; 0x6ee <ATM_ValidatePIN+0x26>
     6f2:	00 c0       	rjmp	.+0      	; 0x6f4 <ATM_ValidatePIN+0x2c>
     6f4:	00 00       	nop
		_delay_ms(5);
		HSPI_ReceiveData(CARDpan, 20);
     6f6:	64 e1       	ldi	r22, 0x14	; 20
     6f8:	80 ee       	ldi	r24, 0xE0	; 224
     6fa:	92 e0       	ldi	r25, 0x02	; 2
     6fc:	0e 94 be 04 	call	0x97c	; 0x97c <HSPI_ReceiveData>
		//HLCD_WriteString("Received ");
		//HLCD_gotoXY(1,0);
		//HLCD_WriteString(CARDpan);
		//_delay_ms(10000);
		
		u8_l_MatchPIN = PIN_checkPinMatching(CARDpin, ATMpin);
     700:	68 ea       	ldi	r22, 0xA8	; 168
     702:	72 e0       	ldi	r23, 0x02	; 2
     704:	87 ed       	ldi	r24, 0xD7	; 215
     706:	92 e0       	ldi	r25, 0x02	; 2
     708:	0e 94 95 02 	call	0x52a	; 0x52a <PIN_checkPinMatching>
		
		return u8_l_MatchPIN;
	}
     70c:	08 95       	ret

0000070e <isBelowMaxDailyAmount>:
};

EN_dataError_t isBelowMaxDailyAmount(Uchar8_t * amount)
{
    EN_dataError_t LOCAL_returnValue = APPROVED;
    Schar8_t state = strcmp(amount,MAX_TRANS_AMOUNT);
     70e:	66 e8       	ldi	r22, 0x86	; 134
     710:	72 e0       	ldi	r23, 0x02	; 2
     712:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <strcmp>
    if( state>0) LOCAL_returnValue = EXCEED_MAX_DAILY_AMOUNT;
     716:	18 16       	cp	r1, r24
     718:	14 f0       	brlt	.+4      	; 0x71e <isBelowMaxDailyAmount+0x10>

};

EN_dataError_t isBelowMaxDailyAmount(Uchar8_t * amount)
{
    EN_dataError_t LOCAL_returnValue = APPROVED;
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	08 95       	ret
    Schar8_t state = strcmp(amount,MAX_TRANS_AMOUNT);
    if( state>0) LOCAL_returnValue = EXCEED_MAX_DAILY_AMOUNT;
     71e:	83 e0       	ldi	r24, 0x03	; 3
    return LOCAL_returnValue;
}
     720:	08 95       	ret

00000722 <isValidPanAccount>:


EN_dataError_t isValidPanAccount(Uchar8_t * pan)
{
     722:	0f 93       	push	r16
     724:	1f 93       	push	r17
     726:	cf 93       	push	r28
     728:	8c 01       	movw	r16, r24
	EN_dataError_t LOCAL_returnValue = FRAUD_CARD;
    Uchar8_t loc_Counter;
    Schar8_t state;
    for(loc_Counter = 0 ; loc_Counter<DB_SIZE;loc_Counter++)
     72a:	c0 e0       	ldi	r28, 0x00	; 0
     72c:	0c c0       	rjmp	.+24     	; 0x746 <isValidPanAccount+0x24>
    {
     state = strcmp(pan,accountsDB[loc_Counter].primaryAccountNumber);
     72e:	89 e1       	ldi	r24, 0x19	; 25
     730:	c8 9f       	mul	r28, r24
     732:	b0 01       	movw	r22, r0
     734:	11 24       	eor	r1, r1
     736:	69 58       	subi	r22, 0x89	; 137
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	c8 01       	movw	r24, r16
     73c:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <strcmp>
     if(state == 0 )
     740:	88 23       	and	r24, r24
     742:	29 f0       	breq	.+10     	; 0x74e <isValidPanAccount+0x2c>
EN_dataError_t isValidPanAccount(Uchar8_t * pan)
{
	EN_dataError_t LOCAL_returnValue = FRAUD_CARD;
    Uchar8_t loc_Counter;
    Schar8_t state;
    for(loc_Counter = 0 ; loc_Counter<DB_SIZE;loc_Counter++)
     744:	cf 5f       	subi	r28, 0xFF	; 255
     746:	ca 30       	cpi	r28, 0x0A	; 10
     748:	90 f3       	brcs	.-28     	; 0x72e <isValidPanAccount+0xc>
}


EN_dataError_t isValidPanAccount(Uchar8_t * pan)
{
	EN_dataError_t LOCAL_returnValue = FRAUD_CARD;
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	01 c0       	rjmp	.+2      	; 0x750 <isValidPanAccount+0x2e>
    for(loc_Counter = 0 ; loc_Counter<DB_SIZE;loc_Counter++)
    {
     state = strcmp(pan,accountsDB[loc_Counter].primaryAccountNumber);
     if(state == 0 )
      {
         LOCAL_returnValue = APPROVED;
     74e:	80 e0       	ldi	r24, 0x00	; 0
         break;
      }
    }
	return LOCAL_returnValue;
}
     750:	cf 91       	pop	r28
     752:	1f 91       	pop	r17
     754:	0f 91       	pop	r16
     756:	08 95       	ret

00000758 <isRunningAccount>:


EN_dataError_t isRunningAccount(Uchar8_t * pan)
{
     758:	ef 92       	push	r14
     75a:	ff 92       	push	r15
     75c:	0f 93       	push	r16
     75e:	1f 93       	push	r17
     760:	cf 93       	push	r28
     762:	7c 01       	movw	r14, r24
	EN_dataError_t LOCAL_returnValue = CARD_STOLEN;
	Uchar8_t loc_Counter;
	Schar8_t state;
	for(loc_Counter = 0 ; loc_Counter<DB_SIZE;loc_Counter++)
     764:	c0 e0       	ldi	r28, 0x00	; 0
     766:	1d c0       	rjmp	.+58     	; 0x7a2 <isRunningAccount+0x4a>
	{
		state = strcmp(pan,accountsDB[loc_Counter].primaryAccountNumber);
     768:	0c 2f       	mov	r16, r28
     76a:	10 e0       	ldi	r17, 0x00	; 0
     76c:	89 e1       	ldi	r24, 0x19	; 25
     76e:	80 9f       	mul	r24, r16
     770:	b0 01       	movw	r22, r0
     772:	81 9f       	mul	r24, r17
     774:	70 0d       	add	r23, r0
     776:	11 24       	eor	r1, r1
     778:	69 58       	subi	r22, 0x89	; 137
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	c7 01       	movw	r24, r14
     77e:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <strcmp>
		if(state == 0 )
     782:	81 11       	cpse	r24, r1
     784:	0d c0       	rjmp	.+26     	; 0x7a0 <isRunningAccount+0x48>
		{
            if(accountsDB[loc_Counter].state == RUNNING)
     786:	89 e1       	ldi	r24, 0x19	; 25
     788:	80 9f       	mul	r24, r16
     78a:	f0 01       	movw	r30, r0
     78c:	81 9f       	mul	r24, r17
     78e:	f0 0d       	add	r31, r0
     790:	11 24       	eor	r1, r1
     792:	ee 58       	subi	r30, 0x8E	; 142
     794:	ff 4f       	sbci	r31, 0xFF	; 255
     796:	84 81       	ldd	r24, Z+4	; 0x04
     798:	88 23       	and	r24, r24
     79a:	39 f0       	breq	.+14     	; 0x7aa <isRunningAccount+0x52>
}


EN_dataError_t isRunningAccount(Uchar8_t * pan)
{
	EN_dataError_t LOCAL_returnValue = CARD_STOLEN;
     79c:	82 e0       	ldi	r24, 0x02	; 2
     79e:	06 c0       	rjmp	.+12     	; 0x7ac <isRunningAccount+0x54>
	Uchar8_t loc_Counter;
	Schar8_t state;
	for(loc_Counter = 0 ; loc_Counter<DB_SIZE;loc_Counter++)
     7a0:	cf 5f       	subi	r28, 0xFF	; 255
     7a2:	ca 30       	cpi	r28, 0x0A	; 10
     7a4:	08 f3       	brcs	.-62     	; 0x768 <isRunningAccount+0x10>
}


EN_dataError_t isRunningAccount(Uchar8_t * pan)
{
	EN_dataError_t LOCAL_returnValue = CARD_STOLEN;
     7a6:	82 e0       	ldi	r24, 0x02	; 2
     7a8:	01 c0       	rjmp	.+2      	; 0x7ac <isRunningAccount+0x54>
	{
		state = strcmp(pan,accountsDB[loc_Counter].primaryAccountNumber);
		if(state == 0 )
		{
            if(accountsDB[loc_Counter].state == RUNNING)
			LOCAL_returnValue = APPROVED;
     7aa:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	}
	return LOCAL_returnValue;
}
     7ac:	cf 91       	pop	r28
     7ae:	1f 91       	pop	r17
     7b0:	0f 91       	pop	r16
     7b2:	ff 90       	pop	r15
     7b4:	ef 90       	pop	r14
     7b6:	08 95       	ret

000007b8 <isValidAccountAmount>:

EN_dataError_t isValidAccountAmount(Uchar8_t * pan,Uchar8_t * amount,float32_t *newAmount)
{
     7b8:	4f 92       	push	r4
     7ba:	5f 92       	push	r5
     7bc:	6f 92       	push	r6
     7be:	7f 92       	push	r7
     7c0:	8f 92       	push	r8
     7c2:	9f 92       	push	r9
     7c4:	af 92       	push	r10
     7c6:	bf 92       	push	r11
     7c8:	cf 92       	push	r12
     7ca:	df 92       	push	r13
     7cc:	ef 92       	push	r14
     7ce:	ff 92       	push	r15
     7d0:	0f 93       	push	r16
     7d2:	1f 93       	push	r17
     7d4:	cf 93       	push	r28
     7d6:	7c 01       	movw	r14, r24
     7d8:	cb 01       	movw	r24, r22
     7da:	6a 01       	movw	r12, r20
    float32_t Conv_amount = atof(amount);
     7dc:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <atof>
     7e0:	4b 01       	movw	r8, r22
     7e2:	5c 01       	movw	r10, r24
	EN_dataError_t LOCAL_returnValue = INSUFFICIENT_FUND;
	Uchar8_t loc_Counter;
	Schar8_t state;
	for(loc_Counter = 0 ; loc_Counter<DB_SIZE;loc_Counter++)
     7e4:	c0 e0       	ldi	r28, 0x00	; 0
     7e6:	3d c0       	rjmp	.+122    	; 0x862 <__stack+0x3>
	{
		state = strcmp(pan,accountsDB[loc_Counter].primaryAccountNumber);
     7e8:	0c 2f       	mov	r16, r28
     7ea:	10 e0       	ldi	r17, 0x00	; 0
     7ec:	89 e1       	ldi	r24, 0x19	; 25
     7ee:	80 9f       	mul	r24, r16
     7f0:	b0 01       	movw	r22, r0
     7f2:	81 9f       	mul	r24, r17
     7f4:	70 0d       	add	r23, r0
     7f6:	11 24       	eor	r1, r1
     7f8:	69 58       	subi	r22, 0x89	; 137
     7fa:	7f 4f       	sbci	r23, 0xFF	; 255
     7fc:	c7 01       	movw	r24, r14
     7fe:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <strcmp>
		if(state == 0 )
     802:	81 11       	cpse	r24, r1
     804:	2d c0       	rjmp	.+90     	; 0x860 <__stack+0x1>
		{
			if(accountsDB[loc_Counter].balance >= Conv_amount)
     806:	89 e1       	ldi	r24, 0x19	; 25
     808:	80 9f       	mul	r24, r16
     80a:	f0 01       	movw	r30, r0
     80c:	81 9f       	mul	r24, r17
     80e:	f0 0d       	add	r31, r0
     810:	11 24       	eor	r1, r1
     812:	ee 58       	subi	r30, 0x8E	; 142
     814:	ff 4f       	sbci	r31, 0xFF	; 255
     816:	40 80       	ld	r4, Z
     818:	51 80       	ldd	r5, Z+1	; 0x01
     81a:	62 80       	ldd	r6, Z+2	; 0x02
     81c:	73 80       	ldd	r7, Z+3	; 0x03
     81e:	a3 01       	movw	r20, r6
     820:	92 01       	movw	r18, r4
     822:	c5 01       	movw	r24, r10
     824:	b4 01       	movw	r22, r8
     826:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <__cmpsf2>
     82a:	18 16       	cp	r1, r24
     82c:	cc f0       	brlt	.+50     	; 0x860 <__stack+0x1>
            {
              accountsDB[loc_Counter].balance-=Conv_amount;
     82e:	a5 01       	movw	r20, r10
     830:	94 01       	movw	r18, r8
     832:	c3 01       	movw	r24, r6
     834:	b2 01       	movw	r22, r4
     836:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <__subsf3>
     83a:	29 e1       	ldi	r18, 0x19	; 25
     83c:	20 9f       	mul	r18, r16
     83e:	f0 01       	movw	r30, r0
     840:	21 9f       	mul	r18, r17
     842:	f0 0d       	add	r31, r0
     844:	11 24       	eor	r1, r1
     846:	ee 58       	subi	r30, 0x8E	; 142
     848:	ff 4f       	sbci	r31, 0xFF	; 255
     84a:	60 83       	st	Z, r22
     84c:	71 83       	std	Z+1, r23	; 0x01
     84e:	82 83       	std	Z+2, r24	; 0x02
     850:	93 83       	std	Z+3, r25	; 0x03
              *newAmount = accountsDB[loc_Counter].balance;
     852:	f6 01       	movw	r30, r12
     854:	60 83       	st	Z, r22
     856:	71 83       	std	Z+1, r23	; 0x01
     858:	82 83       	std	Z+2, r24	; 0x02
     85a:	93 83       	std	Z+3, r25	; 0x03
              LOCAL_returnValue = APPROVED;
     85c:	80 e0       	ldi	r24, 0x00	; 0
              break;
     85e:	05 c0       	rjmp	.+10     	; 0x86a <__stack+0xb>
{
    float32_t Conv_amount = atof(amount);
	EN_dataError_t LOCAL_returnValue = INSUFFICIENT_FUND;
	Uchar8_t loc_Counter;
	Schar8_t state;
	for(loc_Counter = 0 ; loc_Counter<DB_SIZE;loc_Counter++)
     860:	cf 5f       	subi	r28, 0xFF	; 255
     862:	ca 30       	cpi	r28, 0x0A	; 10
     864:	08 f4       	brcc	.+2      	; 0x868 <__stack+0x9>
     866:	c0 cf       	rjmp	.-128    	; 0x7e8 <isValidAccountAmount+0x30>
}

EN_dataError_t isValidAccountAmount(Uchar8_t * pan,Uchar8_t * amount,float32_t *newAmount)
{
    float32_t Conv_amount = atof(amount);
	EN_dataError_t LOCAL_returnValue = INSUFFICIENT_FUND;
     868:	84 e0       	ldi	r24, 0x04	; 4
            }
			
		}
	}
	return LOCAL_returnValue;
}
     86a:	cf 91       	pop	r28
     86c:	1f 91       	pop	r17
     86e:	0f 91       	pop	r16
     870:	ff 90       	pop	r15
     872:	ef 90       	pop	r14
     874:	df 90       	pop	r13
     876:	cf 90       	pop	r12
     878:	bf 90       	pop	r11
     87a:	af 90       	pop	r10
     87c:	9f 90       	pop	r9
     87e:	8f 90       	pop	r8
     880:	7f 90       	pop	r7
     882:	6f 90       	pop	r6
     884:	5f 90       	pop	r5
     886:	4f 90       	pop	r4
     888:	08 95       	ret

0000088a <DATABASE_checking>:


EN_dataError_t DATABASE_checking (Uchar8_t * pan,Uchar8_t * amount,float32_t *newAmount)
{
     88a:	ef 92       	push	r14
     88c:	ff 92       	push	r15
     88e:	0f 93       	push	r16
     890:	1f 93       	push	r17
     892:	cf 93       	push	r28
     894:	df 93       	push	r29
     896:	ec 01       	movw	r28, r24
     898:	8b 01       	movw	r16, r22
     89a:	7a 01       	movw	r14, r20
    
    EN_dataError_t Returend_Val;
    Returend_Val = isValidPanAccount(pan);
     89c:	0e 94 91 03 	call	0x722	; 0x722 <isValidPanAccount>
    if(Returend_Val == FRAUD_CARD) return Returend_Val;
     8a0:	81 30       	cpi	r24, 0x01	; 1
     8a2:	89 f0       	breq	.+34     	; 0x8c6 <DATABASE_checking+0x3c>
    Returend_Val = isRunningAccount(pan);
     8a4:	ce 01       	movw	r24, r28
     8a6:	0e 94 ac 03 	call	0x758	; 0x758 <isRunningAccount>
    if(Returend_Val == CARD_STOLEN) return Returend_Val;
     8aa:	82 30       	cpi	r24, 0x02	; 2
     8ac:	61 f0       	breq	.+24     	; 0x8c6 <DATABASE_checking+0x3c>
    Returend_Val = isBelowMaxDailyAmount(amount);
     8ae:	c8 01       	movw	r24, r16
     8b0:	0e 94 87 03 	call	0x70e	; 0x70e <isBelowMaxDailyAmount>
    if(Returend_Val == EXCEED_MAX_DAILY_AMOUNT) return Returend_Val;
     8b4:	83 30       	cpi	r24, 0x03	; 3
     8b6:	39 f0       	breq	.+14     	; 0x8c6 <DATABASE_checking+0x3c>
    Returend_Val = isValidAccountAmount(pan , amount,newAmount);
     8b8:	a7 01       	movw	r20, r14
     8ba:	b8 01       	movw	r22, r16
     8bc:	ce 01       	movw	r24, r28
     8be:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <isValidAccountAmount>
    if(Returend_Val == INSUFFICIENT_FUND) return Returend_Val;
     8c2:	84 30       	cpi	r24, 0x04	; 4
     8c4:	01 f0       	breq	.+0      	; 0x8c6 <DATABASE_checking+0x3c>
    
    
    Returend_Val = APPROVED;
    
    
     8c6:	df 91       	pop	r29
     8c8:	cf 91       	pop	r28
     8ca:	1f 91       	pop	r17
     8cc:	0f 91       	pop	r16
     8ce:	ff 90       	pop	r15
     8d0:	ef 90       	pop	r14
     8d2:	08 95       	ret

000008d4 <HButton_ExtIntInit>:

enu_buttonError_t HButton_ExtIntInit(enu_pin en_pinx)
{
	enu_buttonError_t errorStatus = BUTTON_OK;

	if ( en_pinx < PIN_INVALID )
     8d4:	80 32       	cpi	r24, 0x20	; 32
     8d6:	18 f4       	brcc	.+6      	; 0x8de <HButton_ExtIntInit+0xa>
	{
		DIO_s8SETPinVal(en_pinx, HIGH);
     8d8:	61 e0       	ldi	r22, 0x01	; 1
     8da:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_s8SETPinVal>
	{
		errorStatus = BUTTON_OK;
	}

	return errorStatus;
}
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	08 95       	ret

000008e2 <BUZ_Init>:

/*************************************************************************************************************
 * 											Function Implementation
 ************************************************************************************************************/
void BUZ_Init(st_Buzzer_t* pst_a_buzzer)
{
     8e2:	cf 93       	push	r28
     8e4:	df 93       	push	r29
     8e6:	ec 01       	movw	r28, r24
	DIO_s8SETPinDir(pst_a_buzzer->BuzzerPin, OUTPUT);
     8e8:	61 e0       	ldi	r22, 0x01	; 1
     8ea:	88 81       	ld	r24, Y
     8ec:	0e 94 12 09 	call	0x1224	; 0x1224 <DIO_s8SETPinDir>
	DIO_s8SETPinVal(pst_a_buzzer->BuzzerPin, LOW);
     8f0:	60 e0       	ldi	r22, 0x00	; 0
     8f2:	88 81       	ld	r24, Y
     8f4:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_s8SETPinVal>
}
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	08 95       	ret

000008fe <BUZ_SetState>:

en_BuzzerErrorState_t BUZ_Enable(st_Buzzer_t* pst_a_buzzer);
en_BuzzerErrorState_t BUZ_SetState(st_Buzzer_t* pst_a_buzzer, en_BuzzerState_t u16_a_state)
{
	if(pst_a_buzzer != NULL)
     8fe:	00 97       	sbiw	r24, 0x00	; 0
     900:	31 f0       	breq	.+12     	; 0x90e <BUZ_SetState+0x10>
     902:	fc 01       	movw	r30, r24
	{
		DIO_s8SETPinVal(pst_a_buzzer->BuzzerPin, u16_a_state);
     904:	80 81       	ld	r24, Z
     906:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_s8SETPinVal>
	else
	{
		return BUZ_NOK;
	}
	
	return BUZ_OK;
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	08 95       	ret
	{
		DIO_s8SETPinVal(pst_a_buzzer->BuzzerPin, u16_a_state);
	}
	else
	{
		return BUZ_NOK;
     90e:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return BUZ_OK;
     910:	08 95       	ret

00000912 <HSPI_MasterInit>:
	{
		return HSPI_NOK;
	}
	
	return HSPI_OK;	
}
     912:	61 e0       	ldi	r22, 0x01	; 1
     914:	8d e0       	ldi	r24, 0x0D	; 13
     916:	0e 94 12 09 	call	0x1224	; 0x1224 <DIO_s8SETPinDir>
     91a:	61 e0       	ldi	r22, 0x01	; 1
     91c:	8f e0       	ldi	r24, 0x0F	; 15
     91e:	0e 94 12 09 	call	0x1224	; 0x1224 <DIO_s8SETPinDir>
     922:	61 e0       	ldi	r22, 0x01	; 1
     924:	8c e0       	ldi	r24, 0x0C	; 12
     926:	0e 94 12 09 	call	0x1224	; 0x1224 <DIO_s8SETPinDir>
     92a:	61 e0       	ldi	r22, 0x01	; 1
     92c:	8c e0       	ldi	r24, 0x0C	; 12
     92e:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_s8SETPinVal>
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	8e e0       	ldi	r24, 0x0E	; 14
     936:	0e 94 12 09 	call	0x1224	; 0x1224 <DIO_s8SETPinDir>
     93a:	62 e0       	ldi	r22, 0x02	; 2
     93c:	8a e0       	ldi	r24, 0x0A	; 10
     93e:	0e 94 bc 09 	call	0x1378	; 0x1378 <EXTINT_init>
     942:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <SPI_MasterInit>
     946:	08 95       	ret

00000948 <HSPI_SendChar>:
     948:	1f 93       	push	r17
     94a:	cf 93       	push	r28
     94c:	df 93       	push	r29
     94e:	1f 92       	push	r1
     950:	cd b7       	in	r28, 0x3d	; 61
     952:	de b7       	in	r29, 0x3e	; 62
     954:	18 2f       	mov	r17, r24
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	8c e0       	ldi	r24, 0x0C	; 12
     95a:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_s8SETPinVal>
     95e:	be 01       	movw	r22, r28
     960:	6f 5f       	subi	r22, 0xFF	; 255
     962:	7f 4f       	sbci	r23, 0xFF	; 255
     964:	81 2f       	mov	r24, r17
     966:	0e 94 ef 0a 	call	0x15de	; 0x15de <SPI_TranscieveChar>
     96a:	61 e0       	ldi	r22, 0x01	; 1
     96c:	8c e0       	ldi	r24, 0x0C	; 12
     96e:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_s8SETPinVal>
     972:	0f 90       	pop	r0
     974:	df 91       	pop	r29
     976:	cf 91       	pop	r28
     978:	1f 91       	pop	r17
     97a:	08 95       	ret

0000097c <HSPI_ReceiveData>:
 * \param u8_a_DataSize: size of storage buffer
 * 
 * \return en_HSPI_ErrorState_t
 */
void HSPI_ReceiveData(Uchar8_t *pu8_a_data, Uchar8_t u8_a_DataSize)
{
     97c:	cf 92       	push	r12
     97e:	df 92       	push	r13
     980:	ef 92       	push	r14
     982:	ff 92       	push	r15
     984:	0f 93       	push	r16
     986:	1f 93       	push	r17
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
     98c:	1f 92       	push	r1
     98e:	cd b7       	in	r28, 0x3d	; 61
     990:	de b7       	in	r29, 0x3e	; 62
     992:	6c 01       	movw	r12, r24
     994:	06 2f       	mov	r16, r22
	Uchar8_t u8_l_DataIterator = 0, u8_l_dummyVar;

	/* Select Slave */
	DIO_s8SETPinVal(HSPI_SS, LOW);	
     996:	60 e0       	ldi	r22, 0x00	; 0
     998:	8c e0       	ldi	r24, 0x0C	; 12
     99a:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_s8SETPinVal>

	/* Initiate communication with dummy bit for synchronization */
	SPI_TranscieveChar(DATA_END, &u8_l_dummyVar);
     99e:	be 01       	movw	r22, r28
     9a0:	6f 5f       	subi	r22, 0xFF	; 255
     9a2:	7f 4f       	sbci	r23, 0xFF	; 255
     9a4:	83 e2       	ldi	r24, 0x23	; 35
     9a6:	0e 94 ef 0a 	call	0x15de	; 0x15de <SPI_TranscieveChar>
 * 
 * \return en_HSPI_ErrorState_t
 */
void HSPI_ReceiveData(Uchar8_t *pu8_a_data, Uchar8_t u8_a_DataSize)
{
	Uchar8_t u8_l_DataIterator = 0, u8_l_dummyVar;
     9aa:	10 e0       	ldi	r17, 0x00	; 0
	/* Initiate communication with dummy bit for synchronization */
	SPI_TranscieveChar(DATA_END, &u8_l_dummyVar);
	
	do
	{
		SPI_TranscieveChar(DATA_END, &pu8_a_data[u8_l_DataIterator]);
     9ac:	76 01       	movw	r14, r12
     9ae:	e1 0e       	add	r14, r17
     9b0:	f1 1c       	adc	r15, r1
     9b2:	b7 01       	movw	r22, r14
     9b4:	83 e2       	ldi	r24, 0x23	; 35
     9b6:	0e 94 ef 0a 	call	0x15de	; 0x15de <SPI_TranscieveChar>
						
	}while((pu8_a_data[u8_l_DataIterator++]!=DATA_END) && (u8_l_DataIterator < u8_a_DataSize));
     9ba:	1f 5f       	subi	r17, 0xFF	; 255
     9bc:	f7 01       	movw	r30, r14
     9be:	80 81       	ld	r24, Z
     9c0:	83 32       	cpi	r24, 0x23	; 35
     9c2:	11 f0       	breq	.+4      	; 0x9c8 <HSPI_ReceiveData+0x4c>
     9c4:	10 17       	cp	r17, r16
     9c6:	90 f3       	brcs	.-28     	; 0x9ac <HSPI_ReceiveData+0x30>
	
	/* Deselect Slave */
	DIO_s8SETPinVal(HSPI_SS, HIGH);
     9c8:	61 e0       	ldi	r22, 0x01	; 1
     9ca:	8c e0       	ldi	r24, 0x0C	; 12
     9cc:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_s8SETPinVal>
}
     9d0:	0f 90       	pop	r0
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	1f 91       	pop	r17
     9d8:	0f 91       	pop	r16
     9da:	ff 90       	pop	r15
     9dc:	ef 90       	pop	r14
     9de:	df 90       	pop	r13
     9e0:	cf 90       	pop	r12
     9e2:	08 95       	ret

000009e4 <HTIM0_SyncDelay>:
extern Uchar8_t u8_g_TotalOVF;

/*================================= Function Implementation =================================*/

en_HTIMErrorState_t HTIM0_SyncDelay(Uint32_t u32_a_delay, en_timeUnits_t Copy_timeUnit)
{
     9e4:	8f 92       	push	r8
     9e6:	9f 92       	push	r9
     9e8:	af 92       	push	r10
     9ea:	bf 92       	push	r11
     9ec:	cf 92       	push	r12
     9ee:	df 92       	push	r13
     9f0:	ef 92       	push	r14
     9f2:	ff 92       	push	r15
     9f4:	0f 93       	push	r16
     9f6:	1f 93       	push	r17
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
     9fc:	00 d0       	rcall	.+0      	; 0x9fe <HTIM0_SyncDelay+0x1a>
     9fe:	cd b7       	in	r28, 0x3d	; 61
     a00:	de b7       	in	r29, 0x3e	; 62
     a02:	6b 01       	movw	r12, r22
     a04:	7c 01       	movw	r14, r24
	Uchar8_t u8_l_prescaler, Local_TotalOverFlows, Local_OverFlowCounter=0, u8_l_OverflowFlag, u8_l_TimState;
	Uint16_t Local_TotalTicks;
	float Local_TickTime;
	
	/* Get Value in micro seconds */
	if(Copy_timeUnit == Seconds)	{u32_a_delay *= SEC_TO_uSEC;}
     a06:	42 30       	cpi	r20, 0x02	; 2
     a08:	59 f4       	brne	.+22     	; 0xa20 <HTIM0_SyncDelay+0x3c>
     a0a:	9b 01       	movw	r18, r22
     a0c:	ac 01       	movw	r20, r24
     a0e:	60 e4       	ldi	r22, 0x40	; 64
     a10:	72 e4       	ldi	r23, 0x42	; 66
     a12:	8f e0       	ldi	r24, 0x0F	; 15
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <__mulsi3>
     a1a:	6b 01       	movw	r12, r22
     a1c:	7c 01       	movw	r14, r24
     a1e:	0d c0       	rjmp	.+26     	; 0xa3a <HTIM0_SyncDelay+0x56>
	else if(Copy_timeUnit == mSeconds)	{u32_a_delay *= mSEC_TO_uSEC;}
     a20:	41 30       	cpi	r20, 0x01	; 1
     a22:	49 f4       	brne	.+18     	; 0xa36 <HTIM0_SyncDelay+0x52>
     a24:	a8 ee       	ldi	r26, 0xE8	; 232
     a26:	b3 e0       	ldi	r27, 0x03	; 3
     a28:	9b 01       	movw	r18, r22
     a2a:	ac 01       	movw	r20, r24
     a2c:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__muluhisi3>
     a30:	6b 01       	movw	r12, r22
     a32:	7c 01       	movw	r14, r24
     a34:	02 c0       	rjmp	.+4      	; 0xa3a <HTIM0_SyncDelay+0x56>
	else if(Copy_timeUnit == uSeconds)	{/* Do Nothing */}
     a36:	41 11       	cpse	r20, r1
     a38:	6b c0       	rjmp	.+214    	; 0xb10 <HTIM0_SyncDelay+0x12c>
	else return TIM_NOK;
	
	/* Set prescaler according to delay time */
	if(u32_a_delay < MAX_CLK_DEV1_DELAY  )	{u8_l_prescaler = TIM_DIV_BY_1;}
     a3a:	88 e8       	ldi	r24, 0x88	; 136
     a3c:	c8 16       	cp	r12, r24
     a3e:	83 e1       	ldi	r24, 0x13	; 19
     a40:	d8 06       	cpc	r13, r24
     a42:	e1 04       	cpc	r14, r1
     a44:	f1 04       	cpc	r15, r1
     a46:	c8 f0       	brcs	.+50     	; 0xa7a <HTIM0_SyncDelay+0x96>
	else if(u32_a_delay < MAX_CLK_DEV8_DELAY  ) {u8_l_prescaler = TIM_DIV_BY_8;}
     a48:	88 ea       	ldi	r24, 0xA8	; 168
     a4a:	c8 16       	cp	r12, r24
     a4c:	81 e6       	ldi	r24, 0x61	; 97
     a4e:	d8 06       	cpc	r13, r24
     a50:	e1 04       	cpc	r14, r1
     a52:	f1 04       	cpc	r15, r1
     a54:	a0 f0       	brcs	.+40     	; 0xa7e <HTIM0_SyncDelay+0x9a>
	else if(u32_a_delay < MAX_CLK_DEV64_DELAY ) {u8_l_prescaler = TIM_DIV_BY_64;}
     a56:	88 e4       	ldi	r24, 0x48	; 72
     a58:	c8 16       	cp	r12, r24
     a5a:	88 ee       	ldi	r24, 0xE8	; 232
     a5c:	d8 06       	cpc	r13, r24
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	e8 06       	cpc	r14, r24
     a62:	f1 04       	cpc	r15, r1
     a64:	70 f0       	brcs	.+28     	; 0xa82 <HTIM0_SyncDelay+0x9e>
	else if(u32_a_delay < MAX_CLK_DEV256_DELAY) {u8_l_prescaler = TIM_DIV_BY_256;}
     a66:	80 e2       	ldi	r24, 0x20	; 32
     a68:	c8 16       	cp	r12, r24
     a6a:	81 ea       	ldi	r24, 0xA1	; 161
     a6c:	d8 06       	cpc	r13, r24
     a6e:	87 e0       	ldi	r24, 0x07	; 7
     a70:	e8 06       	cpc	r14, r24
     a72:	f1 04       	cpc	r15, r1
     a74:	40 f4       	brcc	.+16     	; 0xa86 <HTIM0_SyncDelay+0xa2>
     a76:	14 e0       	ldi	r17, 0x04	; 4
     a78:	07 c0       	rjmp	.+14     	; 0xa88 <HTIM0_SyncDelay+0xa4>
	else if(Copy_timeUnit == mSeconds)	{u32_a_delay *= mSEC_TO_uSEC;}
	else if(Copy_timeUnit == uSeconds)	{/* Do Nothing */}
	else return TIM_NOK;
	
	/* Set prescaler according to delay time */
	if(u32_a_delay < MAX_CLK_DEV1_DELAY  )	{u8_l_prescaler = TIM_DIV_BY_1;}
     a7a:	11 e0       	ldi	r17, 0x01	; 1
     a7c:	05 c0       	rjmp	.+10     	; 0xa88 <HTIM0_SyncDelay+0xa4>
	else if(u32_a_delay < MAX_CLK_DEV8_DELAY  ) {u8_l_prescaler = TIM_DIV_BY_8;}
     a7e:	12 e0       	ldi	r17, 0x02	; 2
     a80:	03 c0       	rjmp	.+6      	; 0xa88 <HTIM0_SyncDelay+0xa4>
	else if(u32_a_delay < MAX_CLK_DEV64_DELAY ) {u8_l_prescaler = TIM_DIV_BY_64;}
     a82:	13 e0       	ldi	r17, 0x03	; 3
     a84:	01 c0       	rjmp	.+2      	; 0xa88 <HTIM0_SyncDelay+0xa4>
	else if(u32_a_delay < MAX_CLK_DEV256_DELAY) {u8_l_prescaler = TIM_DIV_BY_256;}
	else {u8_l_prescaler = TIM_DIV_BY_1024;}
     a86:	15 e0       	ldi	r17, 0x05	; 5
	
	Local_TickTime = arr_gs_prescalers[u8_l_prescaler-1]/TIM0_PRESCALER;
     a88:	e1 2f       	mov	r30, r17
     a8a:	f0 e0       	ldi	r31, 0x00	; 0
     a8c:	31 97       	sbiw	r30, 0x01	; 1
     a8e:	ee 0f       	add	r30, r30
     a90:	ff 1f       	adc	r31, r31
     a92:	e2 57       	subi	r30, 0x72	; 114
     a94:	fd 4f       	sbci	r31, 0xFD	; 253
     a96:	60 81       	ld	r22, Z
     a98:	71 81       	ldd	r23, Z+1	; 0x01
     a9a:	76 95       	lsr	r23
     a9c:	67 95       	ror	r22
     a9e:	76 95       	lsr	r23
     aa0:	67 95       	ror	r22
     aa2:	76 95       	lsr	r23
     aa4:	67 95       	ror	r22
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__floatunsisf>
     aae:	4b 01       	movw	r8, r22
     ab0:	5c 01       	movw	r10, r24
	Local_TotalTicks = (Uint16_t)(u32_a_delay/Local_TickTime);
     ab2:	c7 01       	movw	r24, r14
     ab4:	b6 01       	movw	r22, r12
     ab6:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__floatunsisf>
     aba:	a5 01       	movw	r20, r10
     abc:	94 01       	movw	r18, r8
     abe:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__divsf3>
     ac2:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__fixunssfsi>
     ac6:	f6 2e       	mov	r15, r22
	Local_TotalOverFlows = Local_TotalTicks/TIM0_MAX_TICKS;
     ac8:	07 2f       	mov	r16, r23
	
	/* Initialize timer in normal mode */
	TIM0_voidInit(NormalMode);
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <TIM0_voidInit>
	
	/* Set timer start value */
	TIM0_SetValue(TIM0_MAX_TICKS-(Local_TotalTicks%TIM0_MAX_TICKS));
     ad0:	8f 2d       	mov	r24, r15
     ad2:	81 95       	neg	r24
     ad4:	0e 94 91 0b 	call	0x1722	; 0x1722 <TIM0_SetValue>
	
	/* Start Timer */
	TIM0_Start(u8_l_prescaler);
     ad8:	81 2f       	mov	r24, r17
     ada:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <TIM0_Start>

/*================================= Function Implementation =================================*/

en_HTIMErrorState_t HTIM0_SyncDelay(Uint32_t u32_a_delay, en_timeUnits_t Copy_timeUnit)
{
	Uchar8_t u8_l_prescaler, Local_TotalOverFlows, Local_OverFlowCounter=0, u8_l_OverflowFlag, u8_l_TimState;
     ade:	10 e0       	ldi	r17, 0x00	; 0
	TIM0_SetValue(TIM0_MAX_TICKS-(Local_TotalTicks%TIM0_MAX_TICKS));
	
	/* Start Timer */
	TIM0_Start(u8_l_prescaler);
	
	while(Local_OverFlowCounter <= Local_TotalOverFlows)
     ae0:	11 c0       	rjmp	.+34     	; 0xb04 <HTIM0_SyncDelay+0x120>
	{
		/* Wait until the overflow flag is raised */
		do
		{
			TIM0_GetOVF(&u8_l_OverflowFlag);
     ae2:	ce 01       	movw	r24, r28
     ae4:	01 96       	adiw	r24, 0x01	; 1
     ae6:	0e 94 93 0b 	call	0x1726	; 0x1726 <TIM0_GetOVF>
			TIM0_GetState(&u8_l_TimState);
     aea:	ce 01       	movw	r24, r28
     aec:	02 96       	adiw	r24, 0x02	; 2
     aee:	0e 94 a1 0b 	call	0x1742	; 0x1742 <TIM0_GetState>
		}
		while(!u8_l_OverflowFlag && u8_l_TimState);
     af2:	89 81       	ldd	r24, Y+1	; 0x01
     af4:	81 11       	cpse	r24, r1
     af6:	03 c0       	rjmp	.+6      	; 0xafe <HTIM0_SyncDelay+0x11a>
     af8:	8a 81       	ldd	r24, Y+2	; 0x02
     afa:	81 11       	cpse	r24, r1
     afc:	f2 cf       	rjmp	.-28     	; 0xae2 <HTIM0_SyncDelay+0xfe>
		
		/* Clear the overflow flag */
		TIM0_ClearOVF();
     afe:	0e 94 9d 0b 	call	0x173a	; 0x173a <TIM0_ClearOVF>
		
		Local_OverFlowCounter++;
     b02:	1f 5f       	subi	r17, 0xFF	; 255
	TIM0_SetValue(TIM0_MAX_TICKS-(Local_TotalTicks%TIM0_MAX_TICKS));
	
	/* Start Timer */
	TIM0_Start(u8_l_prescaler);
	
	while(Local_OverFlowCounter <= Local_TotalOverFlows)
     b04:	01 17       	cp	r16, r17
     b06:	68 f7       	brcc	.-38     	; 0xae2 <HTIM0_SyncDelay+0xfe>
		TIM0_ClearOVF();
		
		Local_OverFlowCounter++;
	}
	
	TIM0_Stop();
     b08:	0e 94 87 0b 	call	0x170e	; 0x170e <TIM0_Stop>
	
	return TIM_OK;
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	01 c0       	rjmp	.+2      	; 0xb12 <HTIM0_SyncDelay+0x12e>
	
	/* Get Value in micro seconds */
	if(Copy_timeUnit == Seconds)	{u32_a_delay *= SEC_TO_uSEC;}
	else if(Copy_timeUnit == mSeconds)	{u32_a_delay *= mSEC_TO_uSEC;}
	else if(Copy_timeUnit == uSeconds)	{/* Do Nothing */}
	else return TIM_NOK;
     b10:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	TIM0_Stop();
	
	return TIM_OK;
}
     b12:	0f 90       	pop	r0
     b14:	0f 90       	pop	r0
     b16:	df 91       	pop	r29
     b18:	cf 91       	pop	r28
     b1a:	1f 91       	pop	r17
     b1c:	0f 91       	pop	r16
     b1e:	ff 90       	pop	r15
     b20:	ef 90       	pop	r14
     b22:	df 90       	pop	r13
     b24:	cf 90       	pop	r12
     b26:	bf 90       	pop	r11
     b28:	af 90       	pop	r10
     b2a:	9f 90       	pop	r9
     b2c:	8f 90       	pop	r8
     b2e:	08 95       	ret

00000b30 <HTimer_enInit>:
 ************************************************************************************************************/
enu_HTimerError_t HTimer_enInit(void)
{
	enu_HTimerError_t errorStatus = TIMER_OK;

	(void)enuTimer2_init (OVF_MODE);
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	0e 94 ef 0b 	call	0x17de	; 0x17de <enuTimer2_init>
	(void)u8Timer2_setPrescallar(TIMER_PRE_256);
     b36:	84 e0       	ldi	r24, 0x04	; 4
     b38:	0e 94 1d 0c 	call	0x183a	; 0x183a <u8Timer2_setPrescallar>
	(void)vidTimer2_OvfIrqEnable();
     b3c:	0e 94 31 0c 	call	0x1862	; 0x1862 <vidTimer2_OvfIrqEnable>

	return errorStatus;

}
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	08 95       	ret

00000b44 <HTimer_vidDelayMs>:
/*************************************************************************************************************/
void HTimer_vidDelayMs( Uint32_t u32_delay )
{
	(void)u8Timer2_setTime_ms(u32_delay);
     b44:	0e 94 4a 0c 	call	0x1894	; 0x1894 <u8Timer2_setTime_ms>
	(void)vidTimer2_start();
     b48:	0e 94 39 0c 	call	0x1872	; 0x1872 <vidTimer2_start>
     b4c:	08 95       	ret

00000b4e <HTimer_enStop>:

enu_HTimerError_t HTimer_enStop(void)
{
	enu_HTimerError_t errorStatus;

	errorStatus = vidTimer2_stop();
     b4e:	0e 94 43 0c 	call	0x1886	; 0x1886 <vidTimer2_stop>

	return errorStatus;

}
     b52:	08 95       	ret

00000b54 <HTimer_enCBF>:
/*************************************************************************************************************/
enu_HTimerError_t HTimer_enCBF(ptr_funcc pFunc)
{
	enu_HTimerError_t errorStatus = TIMER_OK;

	if(pFunc != NULL)
     b54:	00 97       	sbiw	r24, 0x00	; 0
     b56:	21 f0       	breq	.+8      	; 0xb60 <HTimer_enCBF+0xc>
	{
		vidTimer2_setcbf_OVF(pFunc);
     b58:	0e 94 c7 0c 	call	0x198e	; 0x198e <vidTimer2_setcbf_OVF>

}
/*************************************************************************************************************/
enu_HTimerError_t HTimer_enCBF(ptr_funcc pFunc)
{
	enu_HTimerError_t errorStatus = TIMER_OK;
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	08 95       	ret
	if(pFunc != NULL)
	{
		vidTimer2_setcbf_OVF(pFunc);

	}else{
		errorStatus = TIMER_NOK;
     b60:	81 e0       	ldi	r24, 0x01	; 1
	}

	return errorStatus;

}
     b62:	08 95       	ret

00000b64 <H_EXTINT_create>:
ARGS        : takes the EXINT_NUMBER( INT0,INT1 OR INT2) and sense control and and pointer to the function we want to execute when interrupt occurs.
return      : return EXTINT_OK if the EXINT_NUMBER initializes correctly, EXTINT_NOT_OK otherwise
*/

EN_EXTINT_ERROR H_EXTINT_create(EN_EXINT_NUMBER INTx ,EN_Sence_Control INTxSense,void(*ptrfunc)(void))
{
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	cf 93       	push	r28
     b6a:	c8 2f       	mov	r28, r24
     b6c:	8a 01       	movw	r16, r20
	if(!EXTINT_init(INTx,INTxSense) && !EXTINT_CallBack(INTx,ptrfunc)) return EXTINT_OK;
     b6e:	0e 94 bc 09 	call	0x1378	; 0x1378 <EXTINT_init>
     b72:	81 11       	cpse	r24, r1
     b74:	07 c0       	rjmp	.+14     	; 0xb84 <H_EXTINT_create+0x20>
     b76:	b8 01       	movw	r22, r16
     b78:	8c 2f       	mov	r24, r28
     b7a:	0e 94 43 0a 	call	0x1486	; 0x1486 <EXTINT_CallBack>
     b7e:	81 11       	cpse	r24, r1
     b80:	03 c0       	rjmp	.+6      	; 0xb88 <H_EXTINT_create+0x24>
     b82:	03 c0       	rjmp	.+6      	; 0xb8a <H_EXTINT_create+0x26>
	return EXTINT_NOT_OK;
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	01 c0       	rjmp	.+2      	; 0xb8a <H_EXTINT_create+0x26>
     b88:	81 e0       	ldi	r24, 0x01	; 1
	
     b8a:	cf 91       	pop	r28
     b8c:	1f 91       	pop	r17
     b8e:	0f 91       	pop	r16
     b90:	08 95       	ret

00000b92 <KEYPAD_init>:
 * 											Function Implementation
 ************************************************************************************************************/
void KEYPAD_init()
{
	// INITIALIZE ROWS AS OUTPUTS
	DIO_s8SETPinDir(R1,OUTPUT);
     b92:	61 e0       	ldi	r22, 0x01	; 1
     b94:	82 e1       	ldi	r24, 0x12	; 18
     b96:	0e 94 12 09 	call	0x1224	; 0x1224 <DIO_s8SETPinDir>
	DIO_s8SETPinDir(R2,OUTPUT);
     b9a:	61 e0       	ldi	r22, 0x01	; 1
     b9c:	83 e1       	ldi	r24, 0x13	; 19
     b9e:	0e 94 12 09 	call	0x1224	; 0x1224 <DIO_s8SETPinDir>
	DIO_s8SETPinDir(R3,OUTPUT);
     ba2:	61 e0       	ldi	r22, 0x01	; 1
     ba4:	84 e1       	ldi	r24, 0x14	; 20
     ba6:	0e 94 12 09 	call	0x1224	; 0x1224 <DIO_s8SETPinDir>
	// INITIALIZE COLUMNS AS INPUTS
	DIO_s8SETPinDir(C1,INPUT);
     baa:	60 e0       	ldi	r22, 0x00	; 0
     bac:	85 e1       	ldi	r24, 0x15	; 21
     bae:	0e 94 12 09 	call	0x1224	; 0x1224 <DIO_s8SETPinDir>
	DIO_s8SETPinDir(C2,INPUT);
     bb2:	60 e0       	ldi	r22, 0x00	; 0
     bb4:	86 e1       	ldi	r24, 0x16	; 22
     bb6:	0e 94 12 09 	call	0x1224	; 0x1224 <DIO_s8SETPinDir>
	DIO_s8SETPinDir(C3,INPUT);
     bba:	60 e0       	ldi	r22, 0x00	; 0
     bbc:	87 e1       	ldi	r24, 0x17	; 23
     bbe:	0e 94 12 09 	call	0x1224	; 0x1224 <DIO_s8SETPinDir>
     bc2:	08 95       	ret

00000bc4 <checkR1>:
	
	
}
EN_KEYPAD_BTNS checkR1()
{
     bc4:	cf 93       	push	r28
     bc6:	df 93       	push	r29
     bc8:	1f 92       	push	r1
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
	DIO_s8SETPinVal(C1,HIGH);
     bce:	61 e0       	ldi	r22, 0x01	; 1
     bd0:	85 e1       	ldi	r24, 0x15	; 21
     bd2:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C2,HIGH);
     bd6:	61 e0       	ldi	r22, 0x01	; 1
     bd8:	86 e1       	ldi	r24, 0x16	; 22
     bda:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C3,HIGH);
     bde:	61 e0       	ldi	r22, 0x01	; 1
     be0:	87 e1       	ldi	r24, 0x17	; 23
     be2:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R2,HIGH);
     be6:	61 e0       	ldi	r22, 0x01	; 1
     be8:	83 e1       	ldi	r24, 0x13	; 19
     bea:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R3,HIGH);
     bee:	61 e0       	ldi	r22, 0x01	; 1
     bf0:	84 e1       	ldi	r24, 0x14	; 20
     bf2:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R1,LOW);
     bf6:	60 e0       	ldi	r22, 0x00	; 0
     bf8:	82 e1       	ldi	r24, 0x12	; 18
     bfa:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_s8SETPinVal>
	
	Uchar8_t val = 1;
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C1,&val);
     c02:	be 01       	movw	r22, r28
     c04:	6f 5f       	subi	r22, 0xFF	; 255
     c06:	7f 4f       	sbci	r23, 0xFF	; 255
     c08:	85 e1       	ldi	r24, 0x15	; 21
     c0a:	0e 94 92 09 	call	0x1324	; 0x1324 <DIO_s8GETPinVal>
	if(val == 0)
     c0e:	89 81       	ldd	r24, Y+1	; 0x01
     c10:	88 23       	and	r24, r24
     c12:	39 f0       	breq	.+14     	; 0xc22 <checkR1+0x5e>
     c14:	0b c0       	rjmp	.+22     	; 0xc2c <checkR1+0x68>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C1,&val);
     c16:	be 01       	movw	r22, r28
     c18:	6f 5f       	subi	r22, 0xFF	; 255
     c1a:	7f 4f       	sbci	r23, 0xFF	; 255
     c1c:	85 e1       	ldi	r24, 0x15	; 21
     c1e:	0e 94 92 09 	call	0x1324	; 0x1324 <DIO_s8GETPinVal>
	
	Uchar8_t val = 1;
	DIO_s8GETPinVal(C1,&val);
	if(val == 0)
	{
		while (val == 0)
     c22:	89 81       	ldd	r24, Y+1	; 0x01
     c24:	88 23       	and	r24, r24
     c26:	b9 f3       	breq	.-18     	; 0xc16 <checkR1+0x52>
		{
			DIO_s8GETPinVal(C1,&val);
		}
		return KEY_1;
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	2e c0       	rjmp	.+92     	; 0xc88 <checkR1+0xc4>
	}
	val = 1;
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C2,&val);
     c30:	be 01       	movw	r22, r28
     c32:	6f 5f       	subi	r22, 0xFF	; 255
     c34:	7f 4f       	sbci	r23, 0xFF	; 255
     c36:	86 e1       	ldi	r24, 0x16	; 22
     c38:	0e 94 92 09 	call	0x1324	; 0x1324 <DIO_s8GETPinVal>
	if(val == 0)
     c3c:	89 81       	ldd	r24, Y+1	; 0x01
     c3e:	88 23       	and	r24, r24
     c40:	39 f0       	breq	.+14     	; 0xc50 <checkR1+0x8c>
     c42:	0b c0       	rjmp	.+22     	; 0xc5a <checkR1+0x96>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C2,&val);
     c44:	be 01       	movw	r22, r28
     c46:	6f 5f       	subi	r22, 0xFF	; 255
     c48:	7f 4f       	sbci	r23, 0xFF	; 255
     c4a:	86 e1       	ldi	r24, 0x16	; 22
     c4c:	0e 94 92 09 	call	0x1324	; 0x1324 <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C2,&val);
	if(val == 0)
	{
		while (val == 0)
     c50:	89 81       	ldd	r24, Y+1	; 0x01
     c52:	88 23       	and	r24, r24
     c54:	b9 f3       	breq	.-18     	; 0xc44 <checkR1+0x80>
		{
			DIO_s8GETPinVal(C2,&val);
		}
		return KEY_2;
     c56:	82 e0       	ldi	r24, 0x02	; 2
     c58:	17 c0       	rjmp	.+46     	; 0xc88 <checkR1+0xc4>
	}
	val = 1;
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C3,&val);
     c5e:	be 01       	movw	r22, r28
     c60:	6f 5f       	subi	r22, 0xFF	; 255
     c62:	7f 4f       	sbci	r23, 0xFF	; 255
     c64:	87 e1       	ldi	r24, 0x17	; 23
     c66:	0e 94 92 09 	call	0x1324	; 0x1324 <DIO_s8GETPinVal>
	if(val == 0)
     c6a:	89 81       	ldd	r24, Y+1	; 0x01
     c6c:	88 23       	and	r24, r24
     c6e:	41 f0       	breq	.+16     	; 0xc80 <checkR1+0xbc>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_3;
	}
	return KEY_NOTHING;
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	0a c0       	rjmp	.+20     	; 0xc88 <checkR1+0xc4>
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C3,&val);
     c74:	be 01       	movw	r22, r28
     c76:	6f 5f       	subi	r22, 0xFF	; 255
     c78:	7f 4f       	sbci	r23, 0xFF	; 255
     c7a:	87 e1       	ldi	r24, 0x17	; 23
     c7c:	0e 94 92 09 	call	0x1324	; 0x1324 <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	88 23       	and	r24, r24
     c84:	b9 f3       	breq	.-18     	; 0xc74 <checkR1+0xb0>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_3;
     c86:	83 e0       	ldi	r24, 0x03	; 3
	}
	return KEY_NOTHING;
	
}
     c88:	0f 90       	pop	r0
     c8a:	df 91       	pop	r29
     c8c:	cf 91       	pop	r28
     c8e:	08 95       	ret

00000c90 <checkR2>:
EN_KEYPAD_BTNS checkR2()
{
     c90:	cf 93       	push	r28
     c92:	df 93       	push	r29
     c94:	1f 92       	push	r1
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
	
	DIO_s8SETPinVal(C1,HIGH);
     c9a:	61 e0       	ldi	r22, 0x01	; 1
     c9c:	85 e1       	ldi	r24, 0x15	; 21
     c9e:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C2,HIGH);
     ca2:	61 e0       	ldi	r22, 0x01	; 1
     ca4:	86 e1       	ldi	r24, 0x16	; 22
     ca6:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C3,HIGH);
     caa:	61 e0       	ldi	r22, 0x01	; 1
     cac:	87 e1       	ldi	r24, 0x17	; 23
     cae:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R1,HIGH);
     cb2:	61 e0       	ldi	r22, 0x01	; 1
     cb4:	82 e1       	ldi	r24, 0x12	; 18
     cb6:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R3,HIGH);
     cba:	61 e0       	ldi	r22, 0x01	; 1
     cbc:	84 e1       	ldi	r24, 0x14	; 20
     cbe:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R2,LOW);
     cc2:	60 e0       	ldi	r22, 0x00	; 0
     cc4:	83 e1       	ldi	r24, 0x13	; 19
     cc6:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_s8SETPinVal>
	
	Uchar8_t val = 1;
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C1,&val);
     cce:	be 01       	movw	r22, r28
     cd0:	6f 5f       	subi	r22, 0xFF	; 255
     cd2:	7f 4f       	sbci	r23, 0xFF	; 255
     cd4:	85 e1       	ldi	r24, 0x15	; 21
     cd6:	0e 94 92 09 	call	0x1324	; 0x1324 <DIO_s8GETPinVal>
	if(val == 0)
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	88 23       	and	r24, r24
     cde:	39 f0       	breq	.+14     	; 0xcee <checkR2+0x5e>
     ce0:	0b c0       	rjmp	.+22     	; 0xcf8 <checkR2+0x68>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C1,&val);
     ce2:	be 01       	movw	r22, r28
     ce4:	6f 5f       	subi	r22, 0xFF	; 255
     ce6:	7f 4f       	sbci	r23, 0xFF	; 255
     ce8:	85 e1       	ldi	r24, 0x15	; 21
     cea:	0e 94 92 09 	call	0x1324	; 0x1324 <DIO_s8GETPinVal>
	
	Uchar8_t val = 1;
	DIO_s8GETPinVal(C1,&val);
	if(val == 0)
	{
		while (val == 0)
     cee:	89 81       	ldd	r24, Y+1	; 0x01
     cf0:	88 23       	and	r24, r24
     cf2:	b9 f3       	breq	.-18     	; 0xce2 <checkR2+0x52>
		{
			DIO_s8GETPinVal(C1,&val);
		}
		return KEY_4;
     cf4:	84 e0       	ldi	r24, 0x04	; 4
     cf6:	2e c0       	rjmp	.+92     	; 0xd54 <checkR2+0xc4>
	}
	val = 1;
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C2,&val);
     cfc:	be 01       	movw	r22, r28
     cfe:	6f 5f       	subi	r22, 0xFF	; 255
     d00:	7f 4f       	sbci	r23, 0xFF	; 255
     d02:	86 e1       	ldi	r24, 0x16	; 22
     d04:	0e 94 92 09 	call	0x1324	; 0x1324 <DIO_s8GETPinVal>
	if(val == 0)
     d08:	89 81       	ldd	r24, Y+1	; 0x01
     d0a:	88 23       	and	r24, r24
     d0c:	39 f0       	breq	.+14     	; 0xd1c <checkR2+0x8c>
     d0e:	0b c0       	rjmp	.+22     	; 0xd26 <checkR2+0x96>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C2,&val);
     d10:	be 01       	movw	r22, r28
     d12:	6f 5f       	subi	r22, 0xFF	; 255
     d14:	7f 4f       	sbci	r23, 0xFF	; 255
     d16:	86 e1       	ldi	r24, 0x16	; 22
     d18:	0e 94 92 09 	call	0x1324	; 0x1324 <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C2,&val);
	if(val == 0)
	{
		while (val == 0)
     d1c:	89 81       	ldd	r24, Y+1	; 0x01
     d1e:	88 23       	and	r24, r24
     d20:	b9 f3       	breq	.-18     	; 0xd10 <checkR2+0x80>
		{
			DIO_s8GETPinVal(C2,&val);
		}
		return KEY_5;
     d22:	85 e0       	ldi	r24, 0x05	; 5
     d24:	17 c0       	rjmp	.+46     	; 0xd54 <checkR2+0xc4>
	}
	val = 1;
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C3,&val);
     d2a:	be 01       	movw	r22, r28
     d2c:	6f 5f       	subi	r22, 0xFF	; 255
     d2e:	7f 4f       	sbci	r23, 0xFF	; 255
     d30:	87 e1       	ldi	r24, 0x17	; 23
     d32:	0e 94 92 09 	call	0x1324	; 0x1324 <DIO_s8GETPinVal>
	if(val == 0)
     d36:	89 81       	ldd	r24, Y+1	; 0x01
     d38:	88 23       	and	r24, r24
     d3a:	41 f0       	breq	.+16     	; 0xd4c <checkR2+0xbc>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_6;
	}
	return KEY_NOTHING;
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	0a c0       	rjmp	.+20     	; 0xd54 <checkR2+0xc4>
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C3,&val);
     d40:	be 01       	movw	r22, r28
     d42:	6f 5f       	subi	r22, 0xFF	; 255
     d44:	7f 4f       	sbci	r23, 0xFF	; 255
     d46:	87 e1       	ldi	r24, 0x17	; 23
     d48:	0e 94 92 09 	call	0x1324	; 0x1324 <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
     d4e:	88 23       	and	r24, r24
     d50:	b9 f3       	breq	.-18     	; 0xd40 <checkR2+0xb0>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_6;
     d52:	86 e0       	ldi	r24, 0x06	; 6
	}
	return KEY_NOTHING;
	
}
     d54:	0f 90       	pop	r0
     d56:	df 91       	pop	r29
     d58:	cf 91       	pop	r28
     d5a:	08 95       	ret

00000d5c <checkR3>:
EN_KEYPAD_BTNS checkR3()
{
     d5c:	cf 93       	push	r28
     d5e:	df 93       	push	r29
     d60:	1f 92       	push	r1
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
	
	DIO_s8SETPinVal(C1,HIGH);
     d66:	61 e0       	ldi	r22, 0x01	; 1
     d68:	85 e1       	ldi	r24, 0x15	; 21
     d6a:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C2,HIGH);
     d6e:	61 e0       	ldi	r22, 0x01	; 1
     d70:	86 e1       	ldi	r24, 0x16	; 22
     d72:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C3,HIGH);
     d76:	61 e0       	ldi	r22, 0x01	; 1
     d78:	87 e1       	ldi	r24, 0x17	; 23
     d7a:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R1,HIGH);
     d7e:	61 e0       	ldi	r22, 0x01	; 1
     d80:	82 e1       	ldi	r24, 0x12	; 18
     d82:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R2,HIGH);
     d86:	61 e0       	ldi	r22, 0x01	; 1
     d88:	83 e1       	ldi	r24, 0x13	; 19
     d8a:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R3,LOW);
     d8e:	60 e0       	ldi	r22, 0x00	; 0
     d90:	84 e1       	ldi	r24, 0x14	; 20
     d92:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_s8SETPinVal>
	
	Uchar8_t val = 1;
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C1,&val);
     d9a:	be 01       	movw	r22, r28
     d9c:	6f 5f       	subi	r22, 0xFF	; 255
     d9e:	7f 4f       	sbci	r23, 0xFF	; 255
     da0:	85 e1       	ldi	r24, 0x15	; 21
     da2:	0e 94 92 09 	call	0x1324	; 0x1324 <DIO_s8GETPinVal>
	if(val == 0)
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	39 f0       	breq	.+14     	; 0xdba <checkR3+0x5e>
     dac:	0b c0       	rjmp	.+22     	; 0xdc4 <checkR3+0x68>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C1,&val);
     dae:	be 01       	movw	r22, r28
     db0:	6f 5f       	subi	r22, 0xFF	; 255
     db2:	7f 4f       	sbci	r23, 0xFF	; 255
     db4:	85 e1       	ldi	r24, 0x15	; 21
     db6:	0e 94 92 09 	call	0x1324	; 0x1324 <DIO_s8GETPinVal>
	
	Uchar8_t val = 1;
	DIO_s8GETPinVal(C1,&val);
	if(val == 0)
	{
		while (val == 0)
     dba:	89 81       	ldd	r24, Y+1	; 0x01
     dbc:	88 23       	and	r24, r24
     dbe:	b9 f3       	breq	.-18     	; 0xdae <checkR3+0x52>
		{
			DIO_s8GETPinVal(C1,&val);
		}
		return KEY_7;
     dc0:	87 e0       	ldi	r24, 0x07	; 7
     dc2:	2e c0       	rjmp	.+92     	; 0xe20 <checkR3+0xc4>
	}
	val = 1;
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C2,&val);
     dc8:	be 01       	movw	r22, r28
     dca:	6f 5f       	subi	r22, 0xFF	; 255
     dcc:	7f 4f       	sbci	r23, 0xFF	; 255
     dce:	86 e1       	ldi	r24, 0x16	; 22
     dd0:	0e 94 92 09 	call	0x1324	; 0x1324 <DIO_s8GETPinVal>
	if(val == 0)
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	88 23       	and	r24, r24
     dd8:	39 f0       	breq	.+14     	; 0xde8 <checkR3+0x8c>
     dda:	0b c0       	rjmp	.+22     	; 0xdf2 <checkR3+0x96>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C2,&val);
     ddc:	be 01       	movw	r22, r28
     dde:	6f 5f       	subi	r22, 0xFF	; 255
     de0:	7f 4f       	sbci	r23, 0xFF	; 255
     de2:	86 e1       	ldi	r24, 0x16	; 22
     de4:	0e 94 92 09 	call	0x1324	; 0x1324 <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C2,&val);
	if(val == 0)
	{
		while (val == 0)
     de8:	89 81       	ldd	r24, Y+1	; 0x01
     dea:	88 23       	and	r24, r24
     dec:	b9 f3       	breq	.-18     	; 0xddc <checkR3+0x80>
		{
			DIO_s8GETPinVal(C2,&val);
		}
		return KEY_8;
     dee:	88 e0       	ldi	r24, 0x08	; 8
     df0:	17 c0       	rjmp	.+46     	; 0xe20 <checkR3+0xc4>
	}
	val = 1;
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C3,&val);
     df6:	be 01       	movw	r22, r28
     df8:	6f 5f       	subi	r22, 0xFF	; 255
     dfa:	7f 4f       	sbci	r23, 0xFF	; 255
     dfc:	87 e1       	ldi	r24, 0x17	; 23
     dfe:	0e 94 92 09 	call	0x1324	; 0x1324 <DIO_s8GETPinVal>
	if(val == 0)
     e02:	89 81       	ldd	r24, Y+1	; 0x01
     e04:	88 23       	and	r24, r24
     e06:	41 f0       	breq	.+16     	; 0xe18 <checkR3+0xbc>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_9;
	}
	return KEY_NOTHING;
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	0a c0       	rjmp	.+20     	; 0xe20 <checkR3+0xc4>
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C3,&val);
     e0c:	be 01       	movw	r22, r28
     e0e:	6f 5f       	subi	r22, 0xFF	; 255
     e10:	7f 4f       	sbci	r23, 0xFF	; 255
     e12:	87 e1       	ldi	r24, 0x17	; 23
     e14:	0e 94 92 09 	call	0x1324	; 0x1324 <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	88 23       	and	r24, r24
     e1c:	b9 f3       	breq	.-18     	; 0xe0c <checkR3+0xb0>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_9;
     e1e:	89 e0       	ldi	r24, 0x09	; 9
	}
	return KEY_NOTHING;
}
     e20:	0f 90       	pop	r0
     e22:	df 91       	pop	r29
     e24:	cf 91       	pop	r28
     e26:	08 95       	ret

00000e28 <KEYPAD_GetButton>:
EN_KEYPAD_BTNS KEYPAD_GetButton()
{
	EN_KEYPAD_BTNS PRESSED = KEY_NOTHING;
	while(PRESSED == KEY_NOTHING)
	{
		PRESSED = checkR1();
     e28:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <checkR1>
		if(PRESSED != KEY_NOTHING) return PRESSED;
     e2c:	81 11       	cpse	r24, r1
     e2e:	06 c0       	rjmp	.+12     	; 0xe3c <KEYPAD_GetButton+0x14>
		PRESSED = checkR2();
     e30:	0e 94 48 06 	call	0xc90	; 0xc90 <checkR2>
		if(PRESSED != KEY_NOTHING) return PRESSED;
     e34:	81 11       	cpse	r24, r1
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <KEYPAD_GetButton+0x14>
		PRESSED = checkR3();
     e38:	0e 94 ae 06 	call	0xd5c	; 0xd5c <checkR3>
		if(PRESSED != KEY_NOTHING) return PRESSED;
		return KEY_NOTHING;
	}
	
	return KEY_NOTHING;
}
     e3c:	08 95       	ret

00000e3e <HLCD_vidWritecmd>:
		for (Uchar8_t i = 0; i < 8 ; i++)
		{
			HLCD_vidWriteChar(pu8custom[i]);
		}
	}
}
     e3e:	1f 93       	push	r17
     e40:	cf 93       	push	r28
     e42:	df 93       	push	r29
     e44:	d8 2f       	mov	r29, r24
     e46:	60 e0       	ldi	r22, 0x00	; 0
     e48:	82 e0       	ldi	r24, 0x02	; 2
     e4a:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_s8SETPinVal>
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_s8SETPinVal>
     e56:	1d 2f       	mov	r17, r29
     e58:	12 95       	swap	r17
     e5a:	1f 70       	andi	r17, 0x0F	; 15
     e5c:	c0 e0       	ldi	r28, 0x00	; 0
     e5e:	11 c0       	rjmp	.+34     	; 0xe82 <HLCD_vidWritecmd+0x44>
     e60:	ec 2f       	mov	r30, r28
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	61 2f       	mov	r22, r17
     e66:	70 e0       	ldi	r23, 0x00	; 0
     e68:	0c 2e       	mov	r0, r28
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <HLCD_vidWritecmd+0x32>
     e6c:	75 95       	asr	r23
     e6e:	67 95       	ror	r22
     e70:	0a 94       	dec	r0
     e72:	e2 f7       	brpl	.-8      	; 0xe6c <HLCD_vidWritecmd+0x2e>
     e74:	61 70       	andi	r22, 0x01	; 1
     e76:	ea 58       	subi	r30, 0x8A	; 138
     e78:	fe 4f       	sbci	r31, 0xFE	; 254
     e7a:	80 81       	ld	r24, Z
     e7c:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_s8SETPinVal>
     e80:	cf 5f       	subi	r28, 0xFF	; 255
     e82:	c4 30       	cpi	r28, 0x04	; 4
     e84:	68 f3       	brcs	.-38     	; 0xe60 <HLCD_vidWritecmd+0x22>
     e86:	61 e0       	ldi	r22, 0x01	; 1
     e88:	83 e0       	ldi	r24, 0x03	; 3
     e8a:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_s8SETPinVal>
     e8e:	89 ef       	ldi	r24, 0xF9	; 249
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	01 97       	sbiw	r24, 0x01	; 1
     e94:	f1 f7       	brne	.-4      	; 0xe92 <HLCD_vidWritecmd+0x54>
     e96:	00 c0       	rjmp	.+0      	; 0xe98 <HLCD_vidWritecmd+0x5a>
     e98:	00 00       	nop
     e9a:	60 e0       	ldi	r22, 0x00	; 0
     e9c:	83 e0       	ldi	r24, 0x03	; 3
     e9e:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_s8SETPinVal>
     ea2:	92 e4       	ldi	r25, 0x42	; 66
     ea4:	9a 95       	dec	r25
     ea6:	f1 f7       	brne	.-4      	; 0xea4 <HLCD_vidWritecmd+0x66>
     ea8:	00 c0       	rjmp	.+0      	; 0xeaa <HLCD_vidWritecmd+0x6c>
     eaa:	df 70       	andi	r29, 0x0F	; 15
     eac:	c0 e0       	ldi	r28, 0x00	; 0
     eae:	11 c0       	rjmp	.+34     	; 0xed2 <HLCD_vidWritecmd+0x94>
     eb0:	ec 2f       	mov	r30, r28
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	6d 2f       	mov	r22, r29
     eb6:	70 e0       	ldi	r23, 0x00	; 0
     eb8:	0c 2e       	mov	r0, r28
     eba:	02 c0       	rjmp	.+4      	; 0xec0 <HLCD_vidWritecmd+0x82>
     ebc:	75 95       	asr	r23
     ebe:	67 95       	ror	r22
     ec0:	0a 94       	dec	r0
     ec2:	e2 f7       	brpl	.-8      	; 0xebc <HLCD_vidWritecmd+0x7e>
     ec4:	61 70       	andi	r22, 0x01	; 1
     ec6:	ea 58       	subi	r30, 0x8A	; 138
     ec8:	fe 4f       	sbci	r31, 0xFE	; 254
     eca:	80 81       	ld	r24, Z
     ecc:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_s8SETPinVal>
     ed0:	cf 5f       	subi	r28, 0xFF	; 255
     ed2:	c4 30       	cpi	r28, 0x04	; 4
     ed4:	68 f3       	brcs	.-38     	; 0xeb0 <HLCD_vidWritecmd+0x72>
     ed6:	61 e0       	ldi	r22, 0x01	; 1
     ed8:	83 e0       	ldi	r24, 0x03	; 3
     eda:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_s8SETPinVal>
     ede:	89 ef       	ldi	r24, 0xF9	; 249
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	01 97       	sbiw	r24, 0x01	; 1
     ee4:	f1 f7       	brne	.-4      	; 0xee2 <HLCD_vidWritecmd+0xa4>
     ee6:	00 c0       	rjmp	.+0      	; 0xee8 <HLCD_vidWritecmd+0xaa>
     ee8:	00 00       	nop
     eea:	60 e0       	ldi	r22, 0x00	; 0
     eec:	83 e0       	ldi	r24, 0x03	; 3
     eee:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_s8SETPinVal>
     ef2:	83 ef       	ldi	r24, 0xF3	; 243
     ef4:	91 e0       	ldi	r25, 0x01	; 1
     ef6:	01 97       	sbiw	r24, 0x01	; 1
     ef8:	f1 f7       	brne	.-4      	; 0xef6 <HLCD_vidWritecmd+0xb8>
     efa:	00 c0       	rjmp	.+0      	; 0xefc <HLCD_vidWritecmd+0xbe>
     efc:	00 00       	nop
     efe:	df 91       	pop	r29
     f00:	cf 91       	pop	r28
     f02:	1f 91       	pop	r17
     f04:	08 95       	ret

00000f06 <HLCD_vidInit>:
     f06:	cf 93       	push	r28
     f08:	c0 e0       	ldi	r28, 0x00	; 0
     f0a:	09 c0       	rjmp	.+18     	; 0xf1e <HLCD_vidInit+0x18>
     f0c:	ec 2f       	mov	r30, r28
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	ea 58       	subi	r30, 0x8A	; 138
     f12:	fe 4f       	sbci	r31, 0xFE	; 254
     f14:	61 e0       	ldi	r22, 0x01	; 1
     f16:	80 81       	ld	r24, Z
     f18:	0e 94 12 09 	call	0x1224	; 0x1224 <DIO_s8SETPinDir>
     f1c:	cf 5f       	subi	r28, 0xFF	; 255
     f1e:	c4 30       	cpi	r28, 0x04	; 4
     f20:	a8 f3       	brcs	.-22     	; 0xf0c <HLCD_vidInit+0x6>
     f22:	61 e0       	ldi	r22, 0x01	; 1
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	0e 94 12 09 	call	0x1224	; 0x1224 <DIO_s8SETPinDir>
     f2a:	61 e0       	ldi	r22, 0x01	; 1
     f2c:	82 e0       	ldi	r24, 0x02	; 2
     f2e:	0e 94 12 09 	call	0x1224	; 0x1224 <DIO_s8SETPinDir>
     f32:	61 e0       	ldi	r22, 0x01	; 1
     f34:	83 e0       	ldi	r24, 0x03	; 3
     f36:	0e 94 12 09 	call	0x1224	; 0x1224 <DIO_s8SETPinDir>
     f3a:	8f e0       	ldi	r24, 0x0F	; 15
     f3c:	97 e2       	ldi	r25, 0x27	; 39
     f3e:	01 97       	sbiw	r24, 0x01	; 1
     f40:	f1 f7       	brne	.-4      	; 0xf3e <HLCD_vidInit+0x38>
     f42:	00 c0       	rjmp	.+0      	; 0xf44 <HLCD_vidInit+0x3e>
     f44:	00 00       	nop
     f46:	82 e0       	ldi	r24, 0x02	; 2
     f48:	0e 94 1f 07 	call	0xe3e	; 0xe3e <HLCD_vidWritecmd>
     f4c:	89 ef       	ldi	r24, 0xF9	; 249
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	01 97       	sbiw	r24, 0x01	; 1
     f52:	f1 f7       	brne	.-4      	; 0xf50 <HLCD_vidInit+0x4a>
     f54:	00 c0       	rjmp	.+0      	; 0xf56 <HLCD_vidInit+0x50>
     f56:	00 00       	nop
     f58:	88 e2       	ldi	r24, 0x28	; 40
     f5a:	0e 94 1f 07 	call	0xe3e	; 0xe3e <HLCD_vidWritecmd>
     f5e:	89 ef       	ldi	r24, 0xF9	; 249
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	01 97       	sbiw	r24, 0x01	; 1
     f64:	f1 f7       	brne	.-4      	; 0xf62 <HLCD_vidInit+0x5c>
     f66:	00 c0       	rjmp	.+0      	; 0xf68 <HLCD_vidInit+0x62>
     f68:	00 00       	nop
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	0e 94 1f 07 	call	0xe3e	; 0xe3e <HLCD_vidWritecmd>
     f70:	87 ee       	ldi	r24, 0xE7	; 231
     f72:	93 e0       	ldi	r25, 0x03	; 3
     f74:	01 97       	sbiw	r24, 0x01	; 1
     f76:	f1 f7       	brne	.-4      	; 0xf74 <HLCD_vidInit+0x6e>
     f78:	00 c0       	rjmp	.+0      	; 0xf7a <HLCD_vidInit+0x74>
     f7a:	00 00       	nop
     f7c:	86 e0       	ldi	r24, 0x06	; 6
     f7e:	0e 94 1f 07 	call	0xe3e	; 0xe3e <HLCD_vidWritecmd>
     f82:	89 ef       	ldi	r24, 0xF9	; 249
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	01 97       	sbiw	r24, 0x01	; 1
     f88:	f1 f7       	brne	.-4      	; 0xf86 <HLCD_vidInit+0x80>
     f8a:	00 c0       	rjmp	.+0      	; 0xf8c <HLCD_vidInit+0x86>
     f8c:	00 00       	nop
     f8e:	8e e0       	ldi	r24, 0x0E	; 14
     f90:	0e 94 1f 07 	call	0xe3e	; 0xe3e <HLCD_vidWritecmd>
     f94:	89 ef       	ldi	r24, 0xF9	; 249
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	01 97       	sbiw	r24, 0x01	; 1
     f9a:	f1 f7       	brne	.-4      	; 0xf98 <HLCD_vidInit+0x92>
     f9c:	00 c0       	rjmp	.+0      	; 0xf9e <HLCD_vidInit+0x98>
     f9e:	00 00       	nop
     fa0:	cf 91       	pop	r28
     fa2:	08 95       	ret

00000fa4 <HLCD_vidWriteChar>:
     fa4:	1f 93       	push	r17
     fa6:	cf 93       	push	r28
     fa8:	df 93       	push	r29
     faa:	d8 2f       	mov	r29, r24
     fac:	60 e0       	ldi	r22, 0x00	; 0
     fae:	82 e0       	ldi	r24, 0x02	; 2
     fb0:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_s8SETPinVal>
     fb4:	61 e0       	ldi	r22, 0x01	; 1
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_s8SETPinVal>
     fbc:	1d 2f       	mov	r17, r29
     fbe:	12 95       	swap	r17
     fc0:	1f 70       	andi	r17, 0x0F	; 15
     fc2:	c0 e0       	ldi	r28, 0x00	; 0
     fc4:	11 c0       	rjmp	.+34     	; 0xfe8 <HLCD_vidWriteChar+0x44>
     fc6:	ec 2f       	mov	r30, r28
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	61 2f       	mov	r22, r17
     fcc:	70 e0       	ldi	r23, 0x00	; 0
     fce:	0c 2e       	mov	r0, r28
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <HLCD_vidWriteChar+0x32>
     fd2:	75 95       	asr	r23
     fd4:	67 95       	ror	r22
     fd6:	0a 94       	dec	r0
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <HLCD_vidWriteChar+0x2e>
     fda:	61 70       	andi	r22, 0x01	; 1
     fdc:	ea 58       	subi	r30, 0x8A	; 138
     fde:	fe 4f       	sbci	r31, 0xFE	; 254
     fe0:	80 81       	ld	r24, Z
     fe2:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_s8SETPinVal>
     fe6:	cf 5f       	subi	r28, 0xFF	; 255
     fe8:	c4 30       	cpi	r28, 0x04	; 4
     fea:	68 f3       	brcs	.-38     	; 0xfc6 <HLCD_vidWriteChar+0x22>
     fec:	61 e0       	ldi	r22, 0x01	; 1
     fee:	83 e0       	ldi	r24, 0x03	; 3
     ff0:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_s8SETPinVal>
     ff4:	89 ef       	ldi	r24, 0xF9	; 249
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	01 97       	sbiw	r24, 0x01	; 1
     ffa:	f1 f7       	brne	.-4      	; 0xff8 <HLCD_vidWriteChar+0x54>
     ffc:	00 c0       	rjmp	.+0      	; 0xffe <HLCD_vidWriteChar+0x5a>
     ffe:	00 00       	nop
    1000:	60 e0       	ldi	r22, 0x00	; 0
    1002:	83 e0       	ldi	r24, 0x03	; 3
    1004:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_s8SETPinVal>
    1008:	92 e4       	ldi	r25, 0x42	; 66
    100a:	9a 95       	dec	r25
    100c:	f1 f7       	brne	.-4      	; 0x100a <HLCD_vidWriteChar+0x66>
    100e:	00 c0       	rjmp	.+0      	; 0x1010 <HLCD_vidWriteChar+0x6c>
    1010:	df 70       	andi	r29, 0x0F	; 15
    1012:	c0 e0       	ldi	r28, 0x00	; 0
    1014:	11 c0       	rjmp	.+34     	; 0x1038 <HLCD_vidWriteChar+0x94>
    1016:	ec 2f       	mov	r30, r28
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	6d 2f       	mov	r22, r29
    101c:	70 e0       	ldi	r23, 0x00	; 0
    101e:	0c 2e       	mov	r0, r28
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <HLCD_vidWriteChar+0x82>
    1022:	75 95       	asr	r23
    1024:	67 95       	ror	r22
    1026:	0a 94       	dec	r0
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <HLCD_vidWriteChar+0x7e>
    102a:	61 70       	andi	r22, 0x01	; 1
    102c:	ea 58       	subi	r30, 0x8A	; 138
    102e:	fe 4f       	sbci	r31, 0xFE	; 254
    1030:	80 81       	ld	r24, Z
    1032:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_s8SETPinVal>
    1036:	cf 5f       	subi	r28, 0xFF	; 255
    1038:	c4 30       	cpi	r28, 0x04	; 4
    103a:	68 f3       	brcs	.-38     	; 0x1016 <HLCD_vidWriteChar+0x72>
    103c:	61 e0       	ldi	r22, 0x01	; 1
    103e:	83 e0       	ldi	r24, 0x03	; 3
    1040:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_s8SETPinVal>
    1044:	89 ef       	ldi	r24, 0xF9	; 249
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	01 97       	sbiw	r24, 0x01	; 1
    104a:	f1 f7       	brne	.-4      	; 0x1048 <HLCD_vidWriteChar+0xa4>
    104c:	00 c0       	rjmp	.+0      	; 0x104e <HLCD_vidWriteChar+0xaa>
    104e:	00 00       	nop
    1050:	60 e0       	ldi	r22, 0x00	; 0
    1052:	83 e0       	ldi	r24, 0x03	; 3
    1054:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_s8SETPinVal>
    1058:	83 ef       	ldi	r24, 0xF3	; 243
    105a:	91 e0       	ldi	r25, 0x01	; 1
    105c:	01 97       	sbiw	r24, 0x01	; 1
    105e:	f1 f7       	brne	.-4      	; 0x105c <HLCD_vidWriteChar+0xb8>
    1060:	00 c0       	rjmp	.+0      	; 0x1062 <HLCD_vidWriteChar+0xbe>
    1062:	00 00       	nop
    1064:	df 91       	pop	r29
    1066:	cf 91       	pop	r28
    1068:	1f 91       	pop	r17
    106a:	08 95       	ret

0000106c <HLCD_ClrDisplay>:
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	0e 94 1f 07 	call	0xe3e	; 0xe3e <HLCD_vidWritecmd>
    1072:	87 ee       	ldi	r24, 0xE7	; 231
    1074:	93 e0       	ldi	r25, 0x03	; 3
    1076:	01 97       	sbiw	r24, 0x01	; 1
    1078:	f1 f7       	brne	.-4      	; 0x1076 <HLCD_ClrDisplay+0xa>
    107a:	00 c0       	rjmp	.+0      	; 0x107c <HLCD_ClrDisplay+0x10>
    107c:	00 00       	nop
    107e:	82 e0       	ldi	r24, 0x02	; 2
    1080:	0e 94 1f 07 	call	0xe3e	; 0xe3e <HLCD_vidWritecmd>
    1084:	87 ee       	ldi	r24, 0xE7	; 231
    1086:	93 e0       	ldi	r25, 0x03	; 3
    1088:	01 97       	sbiw	r24, 0x01	; 1
    108a:	f1 f7       	brne	.-4      	; 0x1088 <HLCD_ClrDisplay+0x1c>
    108c:	00 c0       	rjmp	.+0      	; 0x108e <HLCD_ClrDisplay+0x22>
    108e:	00 00       	nop
    1090:	08 95       	ret

00001092 <HLCD_gotoXY>:
    1092:	81 11       	cpse	r24, r1
    1094:	08 c0       	rjmp	.+16     	; 0x10a6 <HLCD_gotoXY+0x14>
    1096:	60 31       	cpi	r22, 0x10	; 16
    1098:	30 f4       	brcc	.+12     	; 0x10a6 <HLCD_gotoXY+0x14>
    109a:	86 2f       	mov	r24, r22
    109c:	8f 70       	andi	r24, 0x0F	; 15
    109e:	80 68       	ori	r24, 0x80	; 128
    10a0:	0e 94 1f 07 	call	0xe3e	; 0xe3e <HLCD_vidWritecmd>
    10a4:	08 95       	ret
    10a6:	81 30       	cpi	r24, 0x01	; 1
    10a8:	39 f4       	brne	.+14     	; 0x10b8 <HLCD_gotoXY+0x26>
    10aa:	60 31       	cpi	r22, 0x10	; 16
    10ac:	28 f4       	brcc	.+10     	; 0x10b8 <HLCD_gotoXY+0x26>
    10ae:	86 2f       	mov	r24, r22
    10b0:	8f 70       	andi	r24, 0x0F	; 15
    10b2:	80 6c       	ori	r24, 0xC0	; 192
    10b4:	0e 94 1f 07 	call	0xe3e	; 0xe3e <HLCD_vidWritecmd>
    10b8:	08 95       	ret

000010ba <HLCD_WriteString>:
    10ba:	0f 93       	push	r16
    10bc:	1f 93       	push	r17
    10be:	cf 93       	push	r28
    10c0:	df 93       	push	r29
    10c2:	8c 01       	movw	r16, r24
    10c4:	fc 01       	movw	r30, r24
    10c6:	80 81       	ld	r24, Z
    10c8:	c0 e0       	ldi	r28, 0x00	; 0
    10ca:	d0 e0       	ldi	r29, 0x00	; 0
    10cc:	07 c0       	rjmp	.+14     	; 0x10dc <HLCD_WriteString+0x22>
    10ce:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <HLCD_vidWriteChar>
    10d2:	21 96       	adiw	r28, 0x01	; 1
    10d4:	f8 01       	movw	r30, r16
    10d6:	ec 0f       	add	r30, r28
    10d8:	fd 1f       	adc	r31, r29
    10da:	80 81       	ld	r24, Z
    10dc:	81 11       	cpse	r24, r1
    10de:	f7 cf       	rjmp	.-18     	; 0x10ce <HLCD_WriteString+0x14>
    10e0:	df 91       	pop	r29
    10e2:	cf 91       	pop	r28
    10e4:	1f 91       	pop	r17
    10e6:	0f 91       	pop	r16
    10e8:	08 95       	ret

000010ea <HLCD_DisplayFloat>:
 * input param 	:
 * 				  f32_a_number -> the floating point number to display
 * return		: void
 * */
void HLCD_DisplayFloat(float32_t f32_a_number)
{
    10ea:	8f 92       	push	r8
    10ec:	9f 92       	push	r9
    10ee:	af 92       	push	r10
    10f0:	bf 92       	push	r11
    10f2:	cf 92       	push	r12
    10f4:	df 92       	push	r13
    10f6:	ef 92       	push	r14
    10f8:	ff 92       	push	r15
    10fa:	1f 93       	push	r17
    10fc:	cf 93       	push	r28
    10fe:	df 93       	push	r29
    1100:	cd b7       	in	r28, 0x3d	; 61
    1102:	de b7       	in	r29, 0x3e	; 62
    1104:	2c 97       	sbiw	r28, 0x0c	; 12
    1106:	0f b6       	in	r0, 0x3f	; 63
    1108:	f8 94       	cli
    110a:	de bf       	out	0x3e, r29	; 62
    110c:	0f be       	out	0x3f, r0	; 63
    110e:	cd bf       	out	0x3d, r28	; 61
    1110:	4b 01       	movw	r8, r22
    1112:	5c 01       	movw	r10, r24
	Uchar8_t arr_l_NumString[12];
	Uchar8_t u8_l_NumIterator = 3, u8_l_StrLen, u8_l_tempVar, u8_l_decimal;
	Uint32_t u32_l_integer;

	/* Get the integer part */
	u32_l_integer = (Uint16_t)f32_a_number;
    1114:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__fixunssfsi>
    1118:	6b 01       	movw	r12, r22
    111a:	e1 2c       	mov	r14, r1
    111c:	f1 2c       	mov	r15, r1
	
	/* Get the first two decimal places */
	u8_l_decimal = (Uint16_t)((f32_a_number - u32_l_integer) * 100);
    111e:	c7 01       	movw	r24, r14
    1120:	b6 01       	movw	r22, r12
    1122:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__floatunsisf>
    1126:	9b 01       	movw	r18, r22
    1128:	ac 01       	movw	r20, r24
    112a:	c5 01       	movw	r24, r10
    112c:	b4 01       	movw	r22, r8
    112e:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <__subsf3>
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	48 ec       	ldi	r20, 0xC8	; 200
    1138:	52 e4       	ldi	r21, 0x42	; 66
    113a:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <__mulsf3>
    113e:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__fixunssfsi>

	/* Get decimal digits as characters */
	arr_l_NumString[0] = u8_l_decimal % 10 + '0';
    1142:	8d ec       	ldi	r24, 0xCD	; 205
    1144:	68 9f       	mul	r22, r24
    1146:	81 2d       	mov	r24, r1
    1148:	11 24       	eor	r1, r1
    114a:	86 95       	lsr	r24
    114c:	86 95       	lsr	r24
    114e:	86 95       	lsr	r24
    1150:	28 2f       	mov	r18, r24
    1152:	22 0f       	add	r18, r18
    1154:	92 2f       	mov	r25, r18
    1156:	99 0f       	add	r25, r25
    1158:	99 0f       	add	r25, r25
    115a:	92 0f       	add	r25, r18
    115c:	69 1b       	sub	r22, r25
    115e:	60 5d       	subi	r22, 0xD0	; 208
    1160:	69 83       	std	Y+1, r22	; 0x01
	arr_l_NumString[1] = u8_l_decimal / 10 + '0';
    1162:	80 5d       	subi	r24, 0xD0	; 208
    1164:	8a 83       	std	Y+2, r24	; 0x02
	
	arr_l_NumString[2] = '.';
    1166:	8e e2       	ldi	r24, 0x2E	; 46
    1168:	8b 83       	std	Y+3, r24	; 0x03
 * return		: void
 * */
void HLCD_DisplayFloat(float32_t f32_a_number)
{
	Uchar8_t arr_l_NumString[12];
	Uchar8_t u8_l_NumIterator = 3, u8_l_StrLen, u8_l_tempVar, u8_l_decimal;
    116a:	13 e0       	ldi	r17, 0x03	; 3
	arr_l_NumString[1] = u8_l_decimal / 10 + '0';
	
	arr_l_NumString[2] = '.';
	
	/* Get integer digits as characters */
	while (u32_l_integer > 0) 
    116c:	15 c0       	rjmp	.+42     	; 0x1198 <HLCD_DisplayFloat+0xae>
	{
		arr_l_NumString[u8_l_NumIterator] = (u32_l_integer % 10) + '0';
    116e:	c7 01       	movw	r24, r14
    1170:	b6 01       	movw	r22, r12
    1172:	2a e0       	ldi	r18, 0x0A	; 10
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	40 e0       	ldi	r20, 0x00	; 0
    1178:	50 e0       	ldi	r21, 0x00	; 0
    117a:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <__udivmodsi4>
    117e:	e1 e0       	ldi	r30, 0x01	; 1
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	ec 0f       	add	r30, r28
    1184:	fd 1f       	adc	r31, r29
    1186:	e1 0f       	add	r30, r17
    1188:	f1 1d       	adc	r31, r1
    118a:	60 5d       	subi	r22, 0xD0	; 208
    118c:	60 83       	st	Z, r22
		u32_l_integer /= 10;
    118e:	c2 2e       	mov	r12, r18
    1190:	d3 2e       	mov	r13, r19
    1192:	e4 2e       	mov	r14, r20
    1194:	f5 2e       	mov	r15, r21
		u8_l_NumIterator++;
    1196:	1f 5f       	subi	r17, 0xFF	; 255
	arr_l_NumString[1] = u8_l_decimal / 10 + '0';
	
	arr_l_NumString[2] = '.';
	
	/* Get integer digits as characters */
	while (u32_l_integer > 0) 
    1198:	c1 14       	cp	r12, r1
    119a:	d1 04       	cpc	r13, r1
    119c:	e1 04       	cpc	r14, r1
    119e:	f1 04       	cpc	r15, r1
    11a0:	31 f7       	brne	.-52     	; 0x116e <HLCD_DisplayFloat+0x84>
		u32_l_integer /= 10;
		u8_l_NumIterator++;
	}
	
	/* Terminate String */
	arr_l_NumString[u8_l_NumIterator] = '\0';
    11a2:	41 2f       	mov	r20, r17
    11a4:	50 e0       	ldi	r21, 0x00	; 0
    11a6:	e1 e0       	ldi	r30, 0x01	; 1
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	ec 0f       	add	r30, r28
    11ac:	fd 1f       	adc	r31, r29
    11ae:	e4 0f       	add	r30, r20
    11b0:	f5 1f       	adc	r31, r21
    11b2:	10 82       	st	Z, r1
	
	u8_l_StrLen = u8_l_NumIterator;

	/* Reverse String */
	for (u8_l_NumIterator = 0; u8_l_NumIterator< u8_l_StrLen/2; u8_l_NumIterator++) 
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	17 c0       	rjmp	.+46     	; 0x11e6 <HLCD_DisplayFloat+0xfc>
	{
		u8_l_tempVar = arr_l_NumString[u8_l_NumIterator];
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	a1 e0       	ldi	r26, 0x01	; 1
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	ac 0f       	add	r26, r28
    11c2:	bd 1f       	adc	r27, r29
    11c4:	a2 0f       	add	r26, r18
    11c6:	b3 1f       	adc	r27, r19
    11c8:	9c 91       	ld	r25, X
		arr_l_NumString[u8_l_NumIterator] = arr_l_NumString[u8_l_StrLen - u8_l_NumIterator - 1];
    11ca:	fa 01       	movw	r30, r20
    11cc:	e2 1b       	sub	r30, r18
    11ce:	f3 0b       	sbc	r31, r19
    11d0:	31 97       	sbiw	r30, 0x01	; 1
    11d2:	21 e0       	ldi	r18, 0x01	; 1
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	2c 0f       	add	r18, r28
    11d8:	3d 1f       	adc	r19, r29
    11da:	e2 0f       	add	r30, r18
    11dc:	f3 1f       	adc	r31, r19
    11de:	20 81       	ld	r18, Z
    11e0:	2c 93       	st	X, r18
		arr_l_NumString[u8_l_StrLen - u8_l_NumIterator - 1] = u8_l_tempVar;
    11e2:	90 83       	st	Z, r25
	arr_l_NumString[u8_l_NumIterator] = '\0';
	
	u8_l_StrLen = u8_l_NumIterator;

	/* Reverse String */
	for (u8_l_NumIterator = 0; u8_l_NumIterator< u8_l_StrLen/2; u8_l_NumIterator++) 
    11e4:	8f 5f       	subi	r24, 0xFF	; 255
    11e6:	91 2f       	mov	r25, r17
    11e8:	96 95       	lsr	r25
    11ea:	89 17       	cp	r24, r25
    11ec:	28 f3       	brcs	.-54     	; 0x11b8 <HLCD_DisplayFloat+0xce>
		arr_l_NumString[u8_l_NumIterator] = arr_l_NumString[u8_l_StrLen - u8_l_NumIterator - 1];
		arr_l_NumString[u8_l_StrLen - u8_l_NumIterator - 1] = u8_l_tempVar;
	}

	/* Display Number */
	HLCD_WriteString(arr_l_NumString);
    11ee:	ce 01       	movw	r24, r28
    11f0:	01 96       	adiw	r24, 0x01	; 1
    11f2:	0e 94 5d 08 	call	0x10ba	; 0x10ba <HLCD_WriteString>
}
    11f6:	2c 96       	adiw	r28, 0x0c	; 12
    11f8:	0f b6       	in	r0, 0x3f	; 63
    11fa:	f8 94       	cli
    11fc:	de bf       	out	0x3e, r29	; 62
    11fe:	0f be       	out	0x3f, r0	; 63
    1200:	cd bf       	out	0x3d, r28	; 61
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	1f 91       	pop	r17
    1208:	ff 90       	pop	r15
    120a:	ef 90       	pop	r14
    120c:	df 90       	pop	r13
    120e:	cf 90       	pop	r12
    1210:	bf 90       	pop	r11
    1212:	af 90       	pop	r10
    1214:	9f 90       	pop	r9
    1216:	8f 90       	pop	r8
    1218:	08 95       	ret

0000121a <main>:
 */ 
#define F_CPU 8000000UL
#include "APP/app.h"
void main(void)
{
	APP_Init();
    121a:	0e 94 70 00 	call	0xe0	; 0xe0 <APP_Init>

    while (1) 
    {
		APP_Start();
    121e:	0e 94 90 00 	call	0x120	; 0x120 <APP_Start>
    1222:	fd cf       	rjmp	.-6      	; 0x121e <main+0x4>

00001224 <DIO_s8SETPinDir>:
	{
		errStatus = E_NOK;
	}
	return errStatus;

}
    1224:	80 32       	cpi	r24, 0x20	; 32
    1226:	c0 f5       	brcc	.+112    	; 0x1298 <DIO_s8SETPinDir+0x74>
    1228:	62 30       	cpi	r22, 0x02	; 2
    122a:	c0 f5       	brcc	.+112    	; 0x129c <DIO_s8SETPinDir+0x78>
    122c:	e8 2f       	mov	r30, r24
    122e:	e6 95       	lsr	r30
    1230:	e6 95       	lsr	r30
    1232:	e6 95       	lsr	r30
    1234:	87 70       	andi	r24, 0x07	; 7
    1236:	61 11       	cpse	r22, r1
    1238:	17 c0       	rjmp	.+46     	; 0x1268 <DIO_s8SETPinDir+0x44>
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	ee 0f       	add	r30, r30
    123e:	ff 1f       	adc	r31, r31
    1240:	ee 57       	subi	r30, 0x7E	; 126
    1242:	fe 4f       	sbci	r31, 0xFE	; 254
    1244:	01 90       	ld	r0, Z+
    1246:	f0 81       	ld	r31, Z
    1248:	e0 2d       	mov	r30, r0
    124a:	40 81       	ld	r20, Z
    124c:	21 e0       	ldi	r18, 0x01	; 1
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	b9 01       	movw	r22, r18
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <DIO_s8SETPinDir+0x34>
    1254:	66 0f       	add	r22, r22
    1256:	77 1f       	adc	r23, r23
    1258:	8a 95       	dec	r24
    125a:	e2 f7       	brpl	.-8      	; 0x1254 <DIO_s8SETPinDir+0x30>
    125c:	cb 01       	movw	r24, r22
    125e:	80 95       	com	r24
    1260:	84 23       	and	r24, r20
    1262:	80 83       	st	Z, r24
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	08 95       	ret
    1268:	61 30       	cpi	r22, 0x01	; 1
    126a:	d1 f4       	brne	.+52     	; 0x12a0 <DIO_s8SETPinDir+0x7c>
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	ee 0f       	add	r30, r30
    1270:	ff 1f       	adc	r31, r31
    1272:	ee 57       	subi	r30, 0x7E	; 126
    1274:	fe 4f       	sbci	r31, 0xFE	; 254
    1276:	01 90       	ld	r0, Z+
    1278:	f0 81       	ld	r31, Z
    127a:	e0 2d       	mov	r30, r0
    127c:	40 81       	ld	r20, Z
    127e:	21 e0       	ldi	r18, 0x01	; 1
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	b9 01       	movw	r22, r18
    1284:	02 c0       	rjmp	.+4      	; 0x128a <DIO_s8SETPinDir+0x66>
    1286:	66 0f       	add	r22, r22
    1288:	77 1f       	adc	r23, r23
    128a:	8a 95       	dec	r24
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <DIO_s8SETPinDir+0x62>
    128e:	cb 01       	movw	r24, r22
    1290:	84 2b       	or	r24, r20
    1292:	80 83       	st	Z, r24
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	08 95       	ret
    1298:	8f ef       	ldi	r24, 0xFF	; 255
    129a:	08 95       	ret
    129c:	8f ef       	ldi	r24, 0xFF	; 255
    129e:	08 95       	ret
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	08 95       	ret

000012a4 <DIO_s8SETPinVal>:
    12a4:	80 32       	cpi	r24, 0x20	; 32
    12a6:	c0 f5       	brcc	.+112    	; 0x1318 <DIO_s8SETPinVal+0x74>
    12a8:	62 30       	cpi	r22, 0x02	; 2
    12aa:	c0 f5       	brcc	.+112    	; 0x131c <DIO_s8SETPinVal+0x78>
    12ac:	e8 2f       	mov	r30, r24
    12ae:	e6 95       	lsr	r30
    12b0:	e6 95       	lsr	r30
    12b2:	e6 95       	lsr	r30
    12b4:	87 70       	andi	r24, 0x07	; 7
    12b6:	61 11       	cpse	r22, r1
    12b8:	17 c0       	rjmp	.+46     	; 0x12e8 <DIO_s8SETPinVal+0x44>
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	ee 0f       	add	r30, r30
    12be:	ff 1f       	adc	r31, r31
    12c0:	e6 57       	subi	r30, 0x76	; 118
    12c2:	fe 4f       	sbci	r31, 0xFE	; 254
    12c4:	01 90       	ld	r0, Z+
    12c6:	f0 81       	ld	r31, Z
    12c8:	e0 2d       	mov	r30, r0
    12ca:	40 81       	ld	r20, Z
    12cc:	21 e0       	ldi	r18, 0x01	; 1
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	b9 01       	movw	r22, r18
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <DIO_s8SETPinVal+0x34>
    12d4:	66 0f       	add	r22, r22
    12d6:	77 1f       	adc	r23, r23
    12d8:	8a 95       	dec	r24
    12da:	e2 f7       	brpl	.-8      	; 0x12d4 <DIO_s8SETPinVal+0x30>
    12dc:	cb 01       	movw	r24, r22
    12de:	80 95       	com	r24
    12e0:	84 23       	and	r24, r20
    12e2:	80 83       	st	Z, r24
    12e4:	80 e0       	ldi	r24, 0x00	; 0
    12e6:	08 95       	ret
    12e8:	61 30       	cpi	r22, 0x01	; 1
    12ea:	d1 f4       	brne	.+52     	; 0x1320 <DIO_s8SETPinVal+0x7c>
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	ee 0f       	add	r30, r30
    12f0:	ff 1f       	adc	r31, r31
    12f2:	e6 57       	subi	r30, 0x76	; 118
    12f4:	fe 4f       	sbci	r31, 0xFE	; 254
    12f6:	01 90       	ld	r0, Z+
    12f8:	f0 81       	ld	r31, Z
    12fa:	e0 2d       	mov	r30, r0
    12fc:	40 81       	ld	r20, Z
    12fe:	21 e0       	ldi	r18, 0x01	; 1
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	b9 01       	movw	r22, r18
    1304:	02 c0       	rjmp	.+4      	; 0x130a <DIO_s8SETPinVal+0x66>
    1306:	66 0f       	add	r22, r22
    1308:	77 1f       	adc	r23, r23
    130a:	8a 95       	dec	r24
    130c:	e2 f7       	brpl	.-8      	; 0x1306 <DIO_s8SETPinVal+0x62>
    130e:	cb 01       	movw	r24, r22
    1310:	84 2b       	or	r24, r20
    1312:	80 83       	st	Z, r24
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	08 95       	ret
    1318:	8f ef       	ldi	r24, 0xFF	; 255
    131a:	08 95       	ret
    131c:	8f ef       	ldi	r24, 0xFF	; 255
    131e:	08 95       	ret
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	08 95       	ret

00001324 <DIO_s8GETPinVal>:
Uchar8_t DIO_s8GETPinVal (enu_pin enPinCopy, Uchar8_t* pu8Val)
{
	Uchar8_t errStatus = E_OK;
	Uchar8_t portID;
	Uchar8_t pinID;
	if (enPinCopy < PIN_INVALID)
    1324:	80 32       	cpi	r24, 0x20	; 32
    1326:	d8 f4       	brcc	.+54     	; 0x135e <DIO_s8GETPinVal+0x3a>
	{
		portID = enPinCopy/8;
    1328:	e8 2f       	mov	r30, r24
    132a:	e6 95       	lsr	r30
    132c:	e6 95       	lsr	r30
    132e:	e6 95       	lsr	r30
		pinID  = enPinCopy%8;
    1330:	87 70       	andi	r24, 0x07	; 7

		*pu8Val = GET_BIT(*pinReg[portID], pinID);
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	ee 0f       	add	r30, r30
    1336:	ff 1f       	adc	r31, r31
    1338:	e6 58       	subi	r30, 0x86	; 134
    133a:	fe 4f       	sbci	r31, 0xFE	; 254
    133c:	01 90       	ld	r0, Z+
    133e:	f0 81       	ld	r31, Z
    1340:	e0 2d       	mov	r30, r0
    1342:	20 81       	ld	r18, Z
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	a9 01       	movw	r20, r18
    1348:	02 c0       	rjmp	.+4      	; 0x134e <DIO_s8GETPinVal+0x2a>
    134a:	55 95       	asr	r21
    134c:	47 95       	ror	r20
    134e:	8a 95       	dec	r24
    1350:	e2 f7       	brpl	.-8      	; 0x134a <DIO_s8GETPinVal+0x26>
    1352:	ca 01       	movw	r24, r20
    1354:	81 70       	andi	r24, 0x01	; 1
    1356:	fb 01       	movw	r30, r22
    1358:	80 83       	st	Z, r24

}

Uchar8_t DIO_s8GETPinVal (enu_pin enPinCopy, Uchar8_t* pu8Val)
{
	Uchar8_t errStatus = E_OK;
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	08 95       	ret
		*pu8Val = GET_BIT(*pinReg[portID], pinID);

	}
	else
	{
		errStatus = E_NOK;
    135e:	8f ef       	ldi	r24, 0xFF	; 255
	}
	return errStatus;
    1360:	08 95       	ret

00001362 <SET_GLOBAL_INTERRUPT>:
void (*ptrINT2)(void) = 0;

EN_EXTINT_ERROR SET_GLOBAL_INTERRUPT(EN_GLOBAL_INT state)
{
	
	if(state == ENABLE)
    1362:	81 30       	cpi	r24, 0x01	; 1
    1364:	19 f4       	brne	.+6      	; 0x136c <SET_GLOBAL_INTERRUPT+0xa>
	sei();
    1366:	78 94       	sei
    else if (state == DISABLE)
	cli();
	else return EXTINT_NOT_OK;
	return EXTINT_OK;
    1368:	80 e0       	ldi	r24, 0x00	; 0
    136a:	08 95       	ret
EN_EXTINT_ERROR SET_GLOBAL_INTERRUPT(EN_GLOBAL_INT state)
{
	
	if(state == ENABLE)
	sei();
    else if (state == DISABLE)
    136c:	81 11       	cpse	r24, r1
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <SET_GLOBAL_INTERRUPT+0x12>
	cli();
    1370:	f8 94       	cli
    1372:	08 95       	ret
	else return EXTINT_NOT_OK;
    1374:	81 e0       	ldi	r24, 0x01	; 1
	return EXTINT_OK;
}
    1376:	08 95       	ret

00001378 <EXTINT_init>:

EN_EXTINT_ERROR EXTINT_init(EN_EXINT_NUMBER INTx ,EN_Sence_Control INTxSense)
{
    1378:	cf 93       	push	r28
    137a:	df 93       	push	r29
    137c:	c8 2f       	mov	r28, r24
    137e:	d6 2f       	mov	r29, r22
	
	SET_GLOBAL_INTERRUPT(ENABLE); // SET GLOBAL INTERRUPT
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	0e 94 b1 09 	call	0x1362	; 0x1362 <SET_GLOBAL_INTERRUPT>
	switch(INTx)
    1386:	c1 30       	cpi	r28, 0x01	; 1
    1388:	99 f1       	breq	.+102    	; 0x13f0 <EXTINT_init+0x78>
    138a:	20 f0       	brcs	.+8      	; 0x1394 <EXTINT_init+0x1c>
    138c:	c2 30       	cpi	r28, 0x02	; 2
    138e:	09 f4       	brne	.+2      	; 0x1392 <EXTINT_init+0x1a>
    1390:	5d c0       	rjmp	.+186    	; 0x144c <EXTINT_init+0xd4>
    1392:	72 c0       	rjmp	.+228    	; 0x1478 <EXTINT_init+0x100>
	{
		case EXTINT0:
		  if(INTxSense == LOW_LEVEL)
    1394:	d1 11       	cpse	r29, r1
    1396:	07 c0       	rjmp	.+14     	; 0x13a6 <EXTINT_init+0x2e>
		  {
			  CLEAR_BIT(MCUCR,ISC00);
    1398:	85 b7       	in	r24, 0x35	; 53
    139a:	8e 7f       	andi	r24, 0xFE	; 254
    139c:	85 bf       	out	0x35, r24	; 53
			  CLEAR_BIT(MCUCR,ISC01);
    139e:	85 b7       	in	r24, 0x35	; 53
    13a0:	8d 7f       	andi	r24, 0xFD	; 253
    13a2:	85 bf       	out	0x35, r24	; 53
    13a4:	20 c0       	rjmp	.+64     	; 0x13e6 <EXTINT_init+0x6e>
		  }
		  else if(INTxSense == FALLING_EDGE)
    13a6:	d1 30       	cpi	r29, 0x01	; 1
    13a8:	39 f4       	brne	.+14     	; 0x13b8 <EXTINT_init+0x40>
		  {
			  CLEAR_BIT(MCUCR,ISC00);
    13aa:	85 b7       	in	r24, 0x35	; 53
    13ac:	8e 7f       	andi	r24, 0xFE	; 254
    13ae:	85 bf       	out	0x35, r24	; 53
			  SET_BIT(MCUCR,ISC01);
    13b0:	85 b7       	in	r24, 0x35	; 53
    13b2:	82 60       	ori	r24, 0x02	; 2
    13b4:	85 bf       	out	0x35, r24	; 53
    13b6:	17 c0       	rjmp	.+46     	; 0x13e6 <EXTINT_init+0x6e>
		  }
		  else if(INTxSense == RISING_EDGE)
    13b8:	d2 30       	cpi	r29, 0x02	; 2
    13ba:	39 f4       	brne	.+14     	; 0x13ca <EXTINT_init+0x52>
		  {
			  SET_BIT(MCUCR,ISC00);
    13bc:	85 b7       	in	r24, 0x35	; 53
    13be:	81 60       	ori	r24, 0x01	; 1
    13c0:	85 bf       	out	0x35, r24	; 53
			  SET_BIT(MCUCR,ISC01);
    13c2:	85 b7       	in	r24, 0x35	; 53
    13c4:	82 60       	ori	r24, 0x02	; 2
    13c6:	85 bf       	out	0x35, r24	; 53
    13c8:	0e c0       	rjmp	.+28     	; 0x13e6 <EXTINT_init+0x6e>
		  }
		  else if(INTxSense == ANY_LOGICAL_CHANGE)
    13ca:	d3 30       	cpi	r29, 0x03	; 3
    13cc:	39 f4       	brne	.+14     	; 0x13dc <EXTINT_init+0x64>
		  {
			  SET_BIT(MCUCR,ISC00);
    13ce:	85 b7       	in	r24, 0x35	; 53
    13d0:	81 60       	ori	r24, 0x01	; 1
    13d2:	85 bf       	out	0x35, r24	; 53
			  CLEAR_BIT(MCUCR,ISC01);
    13d4:	85 b7       	in	r24, 0x35	; 53
    13d6:	8d 7f       	andi	r24, 0xFD	; 253
    13d8:	85 bf       	out	0x35, r24	; 53
    13da:	05 c0       	rjmp	.+10     	; 0x13e6 <EXTINT_init+0x6e>
		  }
		  else   // handle sense option error
		  {
			  SET_GLOBAL_INTERRUPT(DISABLE);
    13dc:	80 e0       	ldi	r24, 0x00	; 0
    13de:	0e 94 b1 09 	call	0x1362	; 0x1362 <SET_GLOBAL_INTERRUPT>
			   return EXTINT_NOT_OK;
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	4d c0       	rjmp	.+154    	; 0x1480 <EXTINT_init+0x108>
		  }	   
		  SET_BIT(GICR,INT0); //Enable External INT0  (PIE)
    13e6:	8b b7       	in	r24, 0x3b	; 59
    13e8:	80 64       	ori	r24, 0x40	; 64
    13ea:	8b bf       	out	0x3b, r24	; 59
		default: // handle wrong Choose for EXT Interrupt Number
		  SET_GLOBAL_INTERRUPT(DISABLE);
		  return EXTINT_NOT_OK;
		  break;
	}
	return EXTINT_OK;
    13ec:	80 e0       	ldi	r24, 0x00	; 0
		  {
			  SET_GLOBAL_INTERRUPT(DISABLE);
			   return EXTINT_NOT_OK;
		  }	   
		  SET_BIT(GICR,INT0); //Enable External INT0  (PIE)
		  break;
    13ee:	48 c0       	rjmp	.+144    	; 0x1480 <EXTINT_init+0x108>
		case EXTINT1:
		  if(INTxSense == LOW_LEVEL)
    13f0:	d1 11       	cpse	r29, r1
    13f2:	07 c0       	rjmp	.+14     	; 0x1402 <EXTINT_init+0x8a>
		  {
			  CLEAR_BIT(MCUCR,ISC10);
    13f4:	85 b7       	in	r24, 0x35	; 53
    13f6:	8b 7f       	andi	r24, 0xFB	; 251
    13f8:	85 bf       	out	0x35, r24	; 53
			  CLEAR_BIT(MCUCR,ISC11);
    13fa:	85 b7       	in	r24, 0x35	; 53
    13fc:	87 7f       	andi	r24, 0xF7	; 247
    13fe:	85 bf       	out	0x35, r24	; 53
    1400:	20 c0       	rjmp	.+64     	; 0x1442 <EXTINT_init+0xca>
		  }
		  else if(INTxSense == FALLING_EDGE)
    1402:	d1 30       	cpi	r29, 0x01	; 1
    1404:	39 f4       	brne	.+14     	; 0x1414 <EXTINT_init+0x9c>
		  {
			  CLEAR_BIT(MCUCR,ISC10);
    1406:	85 b7       	in	r24, 0x35	; 53
    1408:	8b 7f       	andi	r24, 0xFB	; 251
    140a:	85 bf       	out	0x35, r24	; 53
			  SET_BIT(MCUCR,ISC11);
    140c:	85 b7       	in	r24, 0x35	; 53
    140e:	88 60       	ori	r24, 0x08	; 8
    1410:	85 bf       	out	0x35, r24	; 53
    1412:	17 c0       	rjmp	.+46     	; 0x1442 <EXTINT_init+0xca>
		  }
		  else if(INTxSense == RISING_EDGE)
    1414:	d2 30       	cpi	r29, 0x02	; 2
    1416:	39 f4       	brne	.+14     	; 0x1426 <EXTINT_init+0xae>
		  {
			  SET_BIT(MCUCR,ISC10);
    1418:	85 b7       	in	r24, 0x35	; 53
    141a:	84 60       	ori	r24, 0x04	; 4
    141c:	85 bf       	out	0x35, r24	; 53
			  SET_BIT(MCUCR,ISC11);
    141e:	85 b7       	in	r24, 0x35	; 53
    1420:	88 60       	ori	r24, 0x08	; 8
    1422:	85 bf       	out	0x35, r24	; 53
    1424:	0e c0       	rjmp	.+28     	; 0x1442 <EXTINT_init+0xca>
		  }
		  else if(INTxSense == ANY_LOGICAL_CHANGE)
    1426:	d3 30       	cpi	r29, 0x03	; 3
    1428:	39 f4       	brne	.+14     	; 0x1438 <EXTINT_init+0xc0>
		  {
			  SET_BIT(MCUCR,ISC10);
    142a:	85 b7       	in	r24, 0x35	; 53
    142c:	84 60       	ori	r24, 0x04	; 4
    142e:	85 bf       	out	0x35, r24	; 53
			  CLEAR_BIT(MCUCR,ISC11);
    1430:	85 b7       	in	r24, 0x35	; 53
    1432:	87 7f       	andi	r24, 0xF7	; 247
    1434:	85 bf       	out	0x35, r24	; 53
    1436:	05 c0       	rjmp	.+10     	; 0x1442 <EXTINT_init+0xca>
		  }
		  else   // handle sense option error
		  {
		 	 SET_GLOBAL_INTERRUPT(DISABLE);
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	0e 94 b1 09 	call	0x1362	; 0x1362 <SET_GLOBAL_INTERRUPT>
		 	 return EXTINT_NOT_OK;
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	1f c0       	rjmp	.+62     	; 0x1480 <EXTINT_init+0x108>
		  }
		  SET_BIT(GICR,INT1); //Enable External INT1  (PIE)
    1442:	8b b7       	in	r24, 0x3b	; 59
    1444:	80 68       	ori	r24, 0x80	; 128
    1446:	8b bf       	out	0x3b, r24	; 59
		default: // handle wrong Choose for EXT Interrupt Number
		  SET_GLOBAL_INTERRUPT(DISABLE);
		  return EXTINT_NOT_OK;
		  break;
	}
	return EXTINT_OK;
    1448:	80 e0       	ldi	r24, 0x00	; 0
		  {
		 	 SET_GLOBAL_INTERRUPT(DISABLE);
		 	 return EXTINT_NOT_OK;
		  }
		  SET_BIT(GICR,INT1); //Enable External INT1  (PIE)
		  break;
    144a:	1a c0       	rjmp	.+52     	; 0x1480 <EXTINT_init+0x108>
		case EXTINT2:
		 
		  if(INTxSense == FALLING_EDGE)
    144c:	d1 30       	cpi	r29, 0x01	; 1
    144e:	21 f4       	brne	.+8      	; 0x1458 <EXTINT_init+0xe0>
		  {
			  CLEAR_BIT(MCUCSR,ISC2);
    1450:	84 b7       	in	r24, 0x34	; 52
    1452:	8f 7b       	andi	r24, 0xBF	; 191
    1454:	84 bf       	out	0x34, r24	; 52
    1456:	0b c0       	rjmp	.+22     	; 0x146e <EXTINT_init+0xf6>
		  }
		  else if(INTxSense == RISING_EDGE)
    1458:	d2 30       	cpi	r29, 0x02	; 2
    145a:	21 f4       	brne	.+8      	; 0x1464 <EXTINT_init+0xec>
		  {
			  SET_BIT(MCUCSR,ISC2);
    145c:	84 b7       	in	r24, 0x34	; 52
    145e:	80 64       	ori	r24, 0x40	; 64
    1460:	84 bf       	out	0x34, r24	; 52
    1462:	05 c0       	rjmp	.+10     	; 0x146e <EXTINT_init+0xf6>
		  }
		  else   // handle sense option error
		  {
		 	 SET_GLOBAL_INTERRUPT(DISABLE);
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	0e 94 b1 09 	call	0x1362	; 0x1362 <SET_GLOBAL_INTERRUPT>
		 	 return EXTINT_NOT_OK;
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	09 c0       	rjmp	.+18     	; 0x1480 <EXTINT_init+0x108>
		  }
		  SET_BIT(GICR,INT2); //Enable External INT1  (PIE)
    146e:	8b b7       	in	r24, 0x3b	; 59
    1470:	80 62       	ori	r24, 0x20	; 32
    1472:	8b bf       	out	0x3b, r24	; 59
		default: // handle wrong Choose for EXT Interrupt Number
		  SET_GLOBAL_INTERRUPT(DISABLE);
		  return EXTINT_NOT_OK;
		  break;
	}
	return EXTINT_OK;
    1474:	80 e0       	ldi	r24, 0x00	; 0
		  {
		 	 SET_GLOBAL_INTERRUPT(DISABLE);
		 	 return EXTINT_NOT_OK;
		  }
		  SET_BIT(GICR,INT2); //Enable External INT1  (PIE)
		  break;
    1476:	04 c0       	rjmp	.+8      	; 0x1480 <EXTINT_init+0x108>
		default: // handle wrong Choose for EXT Interrupt Number
		  SET_GLOBAL_INTERRUPT(DISABLE);
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	0e 94 b1 09 	call	0x1362	; 0x1362 <SET_GLOBAL_INTERRUPT>
		  return EXTINT_NOT_OK;
    147e:	81 e0       	ldi	r24, 0x01	; 1
		  break;
	}
	return EXTINT_OK;
}
    1480:	df 91       	pop	r29
    1482:	cf 91       	pop	r28
    1484:	08 95       	ret

00001486 <EXTINT_CallBack>:

EN_EXTINT_ERROR EXTINT_CallBack(EN_EXINT_NUMBER INTx,void(*ptrfunc)(void))
{
	if(INTx == EXTINT0 ) ptrINT0 = ptrfunc;
    1486:	81 11       	cpse	r24, r1
    1488:	05 c0       	rjmp	.+10     	; 0x1494 <EXTINT_CallBack+0xe>
    148a:	70 93 b2 02 	sts	0x02B2, r23	; 0x8002b2 <ptrINT0+0x1>
    148e:	60 93 b1 02 	sts	0x02B1, r22	; 0x8002b1 <ptrINT0>
    1492:	08 95       	ret
	else if(INTx == EXTINT1 ) ptrINT1 = ptrfunc;
    1494:	81 30       	cpi	r24, 0x01	; 1
    1496:	31 f4       	brne	.+12     	; 0x14a4 <EXTINT_CallBack+0x1e>
    1498:	70 93 b0 02 	sts	0x02B0, r23	; 0x8002b0 <ptrINT1+0x1>
    149c:	60 93 af 02 	sts	0x02AF, r22	; 0x8002af <ptrINT1>
	else if(INTx == EXTINT2 ) ptrINT2 = ptrfunc;
	else return EXTINT_NOT_OK;
	return EXTINT_OK;
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	08 95       	ret

EN_EXTINT_ERROR EXTINT_CallBack(EN_EXINT_NUMBER INTx,void(*ptrfunc)(void))
{
	if(INTx == EXTINT0 ) ptrINT0 = ptrfunc;
	else if(INTx == EXTINT1 ) ptrINT1 = ptrfunc;
	else if(INTx == EXTINT2 ) ptrINT2 = ptrfunc;
    14a4:	82 30       	cpi	r24, 0x02	; 2
    14a6:	31 f4       	brne	.+12     	; 0x14b4 <EXTINT_CallBack+0x2e>
    14a8:	70 93 ae 02 	sts	0x02AE, r23	; 0x8002ae <ptrINT2+0x1>
    14ac:	60 93 ad 02 	sts	0x02AD, r22	; 0x8002ad <ptrINT2>
	else return EXTINT_NOT_OK;
	return EXTINT_OK;
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	08 95       	ret
EN_EXTINT_ERROR EXTINT_CallBack(EN_EXINT_NUMBER INTx,void(*ptrfunc)(void))
{
	if(INTx == EXTINT0 ) ptrINT0 = ptrfunc;
	else if(INTx == EXTINT1 ) ptrINT1 = ptrfunc;
	else if(INTx == EXTINT2 ) ptrINT2 = ptrfunc;
	else return EXTINT_NOT_OK;
    14b4:	81 e0       	ldi	r24, 0x01	; 1
	return EXTINT_OK;
}
    14b6:	08 95       	ret

000014b8 <__vector_1>:


ISR (EXT_INT_0)
{
    14b8:	1f 92       	push	r1
    14ba:	0f 92       	push	r0
    14bc:	0f b6       	in	r0, 0x3f	; 63
    14be:	0f 92       	push	r0
    14c0:	11 24       	eor	r1, r1
    14c2:	2f 93       	push	r18
    14c4:	3f 93       	push	r19
    14c6:	4f 93       	push	r20
    14c8:	5f 93       	push	r21
    14ca:	6f 93       	push	r22
    14cc:	7f 93       	push	r23
    14ce:	8f 93       	push	r24
    14d0:	9f 93       	push	r25
    14d2:	af 93       	push	r26
    14d4:	bf 93       	push	r27
    14d6:	ef 93       	push	r30
    14d8:	ff 93       	push	r31
	if(ptrINT0) ptrINT0();
    14da:	e0 91 b1 02 	lds	r30, 0x02B1	; 0x8002b1 <ptrINT0>
    14de:	f0 91 b2 02 	lds	r31, 0x02B2	; 0x8002b2 <ptrINT0+0x1>
    14e2:	30 97       	sbiw	r30, 0x00	; 0
    14e4:	09 f0       	breq	.+2      	; 0x14e8 <__vector_1+0x30>
    14e6:	09 95       	icall
}
    14e8:	ff 91       	pop	r31
    14ea:	ef 91       	pop	r30
    14ec:	bf 91       	pop	r27
    14ee:	af 91       	pop	r26
    14f0:	9f 91       	pop	r25
    14f2:	8f 91       	pop	r24
    14f4:	7f 91       	pop	r23
    14f6:	6f 91       	pop	r22
    14f8:	5f 91       	pop	r21
    14fa:	4f 91       	pop	r20
    14fc:	3f 91       	pop	r19
    14fe:	2f 91       	pop	r18
    1500:	0f 90       	pop	r0
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	0f 90       	pop	r0
    1506:	1f 90       	pop	r1
    1508:	18 95       	reti

0000150a <__vector_2>:

ISR (EXT_INT_1)
{
    150a:	1f 92       	push	r1
    150c:	0f 92       	push	r0
    150e:	0f b6       	in	r0, 0x3f	; 63
    1510:	0f 92       	push	r0
    1512:	11 24       	eor	r1, r1
    1514:	2f 93       	push	r18
    1516:	3f 93       	push	r19
    1518:	4f 93       	push	r20
    151a:	5f 93       	push	r21
    151c:	6f 93       	push	r22
    151e:	7f 93       	push	r23
    1520:	8f 93       	push	r24
    1522:	9f 93       	push	r25
    1524:	af 93       	push	r26
    1526:	bf 93       	push	r27
    1528:	ef 93       	push	r30
    152a:	ff 93       	push	r31
	if(ptrINT1) ptrINT1();
    152c:	e0 91 af 02 	lds	r30, 0x02AF	; 0x8002af <ptrINT1>
    1530:	f0 91 b0 02 	lds	r31, 0x02B0	; 0x8002b0 <ptrINT1+0x1>
    1534:	30 97       	sbiw	r30, 0x00	; 0
    1536:	09 f0       	breq	.+2      	; 0x153a <__vector_2+0x30>
    1538:	09 95       	icall
}
    153a:	ff 91       	pop	r31
    153c:	ef 91       	pop	r30
    153e:	bf 91       	pop	r27
    1540:	af 91       	pop	r26
    1542:	9f 91       	pop	r25
    1544:	8f 91       	pop	r24
    1546:	7f 91       	pop	r23
    1548:	6f 91       	pop	r22
    154a:	5f 91       	pop	r21
    154c:	4f 91       	pop	r20
    154e:	3f 91       	pop	r19
    1550:	2f 91       	pop	r18
    1552:	0f 90       	pop	r0
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	0f 90       	pop	r0
    1558:	1f 90       	pop	r1
    155a:	18 95       	reti

0000155c <__vector_3>:

ISR (EXT_INT_2)
{
    155c:	1f 92       	push	r1
    155e:	0f 92       	push	r0
    1560:	0f b6       	in	r0, 0x3f	; 63
    1562:	0f 92       	push	r0
    1564:	11 24       	eor	r1, r1
    1566:	2f 93       	push	r18
    1568:	3f 93       	push	r19
    156a:	4f 93       	push	r20
    156c:	5f 93       	push	r21
    156e:	6f 93       	push	r22
    1570:	7f 93       	push	r23
    1572:	8f 93       	push	r24
    1574:	9f 93       	push	r25
    1576:	af 93       	push	r26
    1578:	bf 93       	push	r27
    157a:	ef 93       	push	r30
    157c:	ff 93       	push	r31
	if(ptrINT2) ptrINT2();
    157e:	e0 91 ad 02 	lds	r30, 0x02AD	; 0x8002ad <ptrINT2>
    1582:	f0 91 ae 02 	lds	r31, 0x02AE	; 0x8002ae <ptrINT2+0x1>
    1586:	30 97       	sbiw	r30, 0x00	; 0
    1588:	09 f0       	breq	.+2      	; 0x158c <__vector_3+0x30>
    158a:	09 95       	icall
    158c:	ff 91       	pop	r31
    158e:	ef 91       	pop	r30
    1590:	bf 91       	pop	r27
    1592:	af 91       	pop	r26
    1594:	9f 91       	pop	r25
    1596:	8f 91       	pop	r24
    1598:	7f 91       	pop	r23
    159a:	6f 91       	pop	r22
    159c:	5f 91       	pop	r21
    159e:	4f 91       	pop	r20
    15a0:	3f 91       	pop	r19
    15a2:	2f 91       	pop	r18
    15a4:	0f 90       	pop	r0
    15a6:	0f be       	out	0x3f, r0	; 63
    15a8:	0f 90       	pop	r0
    15aa:	1f 90       	pop	r1
    15ac:	18 95       	reti

000015ae <SPI_MasterInit>:
	{
		return SPI_NOK;
	}
	
	return SPI_OK;
}
    15ae:	8d b1       	in	r24, 0x0d	; 13
    15b0:	80 61       	ori	r24, 0x10	; 16
    15b2:	8d b9       	out	0x0d, r24	; 13
    15b4:	8d b1       	in	r24, 0x0d	; 13
    15b6:	9e b1       	in	r25, 0x0e	; 14
    15b8:	8e 7f       	andi	r24, 0xFE	; 254
    15ba:	9c 7f       	andi	r25, 0xFC	; 252
    15bc:	9e b9       	out	0x0e, r25	; 14
    15be:	8d b9       	out	0x0d, r24	; 13
    15c0:	8d b1       	in	r24, 0x0d	; 13
    15c2:	9e b1       	in	r25, 0x0e	; 14
    15c4:	93 60       	ori	r25, 0x03	; 3
    15c6:	9e b9       	out	0x0e, r25	; 14
    15c8:	8d b9       	out	0x0d, r24	; 13
    15ca:	8d b1       	in	r24, 0x0d	; 13
    15cc:	87 7f       	andi	r24, 0xF7	; 247
    15ce:	8d b9       	out	0x0d, r24	; 13
    15d0:	8d b1       	in	r24, 0x0d	; 13
    15d2:	8b 7f       	andi	r24, 0xFB	; 251
    15d4:	8d b9       	out	0x0d, r24	; 13
    15d6:	8d b1       	in	r24, 0x0d	; 13
    15d8:	80 64       	ori	r24, 0x40	; 64
    15da:	8d b9       	out	0x0d, r24	; 13
    15dc:	08 95       	ret

000015de <SPI_TranscieveChar>:
    15de:	61 15       	cp	r22, r1
    15e0:	71 05       	cpc	r23, r1
    15e2:	f9 f0       	breq	.+62     	; 0x1622 <SPI_TranscieveChar+0x44>
    15e4:	8f b9       	out	0x0f, r24	; 15
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	dc 01       	movw	r26, r24
    15ec:	03 c0       	rjmp	.+6      	; 0x15f4 <SPI_TranscieveChar+0x16>
    15ee:	01 96       	adiw	r24, 0x01	; 1
    15f0:	a1 1d       	adc	r26, r1
    15f2:	b1 1d       	adc	r27, r1
    15f4:	77 99       	sbic	0x0e, 7	; 14
    15f6:	07 c0       	rjmp	.+14     	; 0x1606 <SPI_TranscieveChar+0x28>
    15f8:	80 3a       	cpi	r24, 0xA0	; 160
    15fa:	26 e8       	ldi	r18, 0x86	; 134
    15fc:	92 07       	cpc	r25, r18
    15fe:	21 e0       	ldi	r18, 0x01	; 1
    1600:	a2 07       	cpc	r26, r18
    1602:	b1 05       	cpc	r27, r1
    1604:	a0 f3       	brcs	.-24     	; 0x15ee <SPI_TranscieveChar+0x10>
    1606:	80 3a       	cpi	r24, 0xA0	; 160
    1608:	96 48       	sbci	r25, 0x86	; 134
    160a:	a1 40       	sbci	r26, 0x01	; 1
    160c:	b1 05       	cpc	r27, r1
    160e:	59 f0       	breq	.+22     	; 0x1626 <SPI_TranscieveChar+0x48>
    1610:	8f b1       	in	r24, 0x0f	; 15
    1612:	fb 01       	movw	r30, r22
    1614:	80 83       	st	Z, r24
    1616:	f1 e2       	ldi	r31, 0x21	; 33
    1618:	fa 95       	dec	r31
    161a:	f1 f7       	brne	.-4      	; 0x1618 <SPI_TranscieveChar+0x3a>
    161c:	00 00       	nop
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	08 95       	ret
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	08 95       	ret
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	08 95       	ret

0000162a <__vector_12>:

/*************************************************************************************************************
 * 													  ISRs
 ************************************************************************************************************/
ISR(SPI_STC_INT)
{
    162a:	1f 92       	push	r1
    162c:	0f 92       	push	r0
    162e:	0f b6       	in	r0, 0x3f	; 63
    1630:	0f 92       	push	r0
    1632:	11 24       	eor	r1, r1
    1634:	2f 93       	push	r18
    1636:	3f 93       	push	r19
    1638:	8f 93       	push	r24
    163a:	9f 93       	push	r25
    163c:	ef 93       	push	r30
    163e:	ff 93       	push	r31
	/*------------------------ Reception ------------------------*/
	u8_g_SlaveReceive = SPDR;
    1640:	8f b1       	in	r24, 0x0f	; 15
    1642:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <u8_g_SlaveReceive>
	//DIO_s8SETPortVal(DIO_PORTA, u8_g_SlaveReceive);
	
	/* If Max size is exceeded, start overriding data */
	if(u8_g_SlaveRxIndex == SPI_BUFFER_SIZE) u8_g_SlaveRxIndex = 0;
    1646:	90 91 c4 02 	lds	r25, 0x02C4	; 0x8002c4 <u8_g_SlaveRxIndex>
    164a:	9f 30       	cpi	r25, 0x0F	; 15
    164c:	11 f4       	brne	.+4      	; 0x1652 <__vector_12+0x28>
    164e:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <u8_g_SlaveRxIndex>
	if(u8_g_SlaveReceive != DATA_END)
    1652:	83 32       	cpi	r24, 0x23	; 35
    1654:	59 f0       	breq	.+22     	; 0x166c <__vector_12+0x42>
	{
		/* Store received byte in buffer */
		arr_g_SlaveRxBuffer[u8_g_SlaveRxIndex] = u8_g_SlaveReceive;
    1656:	90 91 c4 02 	lds	r25, 0x02C4	; 0x8002c4 <u8_g_SlaveRxIndex>
    165a:	e9 2f       	mov	r30, r25
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	ed 54       	subi	r30, 0x4D	; 77
    1660:	fd 4f       	sbci	r31, 0xFD	; 253
    1662:	80 83       	st	Z, r24
		u8_g_SlaveRxIndex++;
    1664:	9f 5f       	subi	r25, 0xFF	; 255
    1666:	90 93 c4 02 	sts	0x02C4, r25	; 0x8002c4 <u8_g_SlaveRxIndex>
    166a:	04 c0       	rjmp	.+8      	; 0x1674 <__vector_12+0x4a>
	}
	else
	{	// Get the number of received bytes
		u8_g_SlaveRxLen = u8_g_SlaveRxIndex;
    166c:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <u8_g_SlaveRxIndex>
    1670:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <u8_g_SlaveRxLen>
	}
	
	/*------------------------- Sending -------------------------*/
	//u8_g_SlaveTxIndex++;
	if((u8_g_SlaveTxIndex < u8_g_SlaveTxLen) && (pu8_g_SlaveTxPtr != NULL))
    1674:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <u8_g_SlaveTxIndex>
    1678:	90 91 f6 02 	lds	r25, 0x02F6	; 0x8002f6 <u8_g_SlaveTxLen>
    167c:	89 17       	cp	r24, r25
    167e:	88 f4       	brcc	.+34     	; 0x16a2 <__vector_12+0x78>
    1680:	20 91 c2 02 	lds	r18, 0x02C2	; 0x8002c2 <pu8_g_SlaveTxPtr>
    1684:	30 91 c3 02 	lds	r19, 0x02C3	; 0x8002c3 <pu8_g_SlaveTxPtr+0x1>
    1688:	21 15       	cp	r18, r1
    168a:	31 05       	cpc	r19, r1
    168c:	51 f0       	breq	.+20     	; 0x16a2 <__vector_12+0x78>
	{
		SPDR = pu8_g_SlaveTxPtr[u8_g_SlaveTxIndex++];
    168e:	91 e0       	ldi	r25, 0x01	; 1
    1690:	98 0f       	add	r25, r24
    1692:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <u8_g_SlaveTxIndex>
    1696:	f9 01       	movw	r30, r18
    1698:	e8 0f       	add	r30, r24
    169a:	f1 1d       	adc	r31, r1
    169c:	80 81       	ld	r24, Z
    169e:	8f b9       	out	0x0f, r24	; 15
    16a0:	04 c0       	rjmp	.+8      	; 0x16aa <__vector_12+0x80>
	}
	else if(u8_g_SlaveTxIndex >= u8_g_SlaveTxLen)
    16a2:	89 17       	cp	r24, r25
    16a4:	10 f0       	brcs	.+4      	; 0x16aa <__vector_12+0x80>
	{
		SPDR = DATA_END;
    16a6:	83 e2       	ldi	r24, 0x23	; 35
    16a8:	8f b9       	out	0x0f, r24	; 15
	}
    16aa:	ff 91       	pop	r31
    16ac:	ef 91       	pop	r30
    16ae:	9f 91       	pop	r25
    16b0:	8f 91       	pop	r24
    16b2:	3f 91       	pop	r19
    16b4:	2f 91       	pop	r18
    16b6:	0f 90       	pop	r0
    16b8:	0f be       	out	0x3f, r0	; 63
    16ba:	0f 90       	pop	r0
    16bc:	1f 90       	pop	r1
    16be:	18 95       	reti

000016c0 <TIM0_voidInit>:
	else
	{
		return TIM_NOK;
	}
	return TIM_OK;
}
    16c0:	81 30       	cpi	r24, 0x01	; 1
    16c2:	61 f0       	breq	.+24     	; 0x16dc <TIM0_voidInit+0x1c>
    16c4:	28 f0       	brcs	.+10     	; 0x16d0 <TIM0_voidInit+0x10>
    16c6:	82 30       	cpi	r24, 0x02	; 2
    16c8:	29 f0       	breq	.+10     	; 0x16d4 <TIM0_voidInit+0x14>
    16ca:	83 30       	cpi	r24, 0x03	; 3
    16cc:	29 f0       	breq	.+10     	; 0x16d8 <TIM0_voidInit+0x18>
    16ce:	0f c0       	rjmp	.+30     	; 0x16ee <TIM0_voidInit+0x2e>
    16d0:	20 e0       	ldi	r18, 0x00	; 0
    16d2:	05 c0       	rjmp	.+10     	; 0x16de <TIM0_voidInit+0x1e>
    16d4:	28 e0       	ldi	r18, 0x08	; 8
    16d6:	03 c0       	rjmp	.+6      	; 0x16de <TIM0_voidInit+0x1e>
    16d8:	28 e4       	ldi	r18, 0x48	; 72
    16da:	01 c0       	rjmp	.+2      	; 0x16de <TIM0_voidInit+0x1e>
    16dc:	20 e4       	ldi	r18, 0x40	; 64
    16de:	93 b7       	in	r25, 0x33	; 51
    16e0:	97 7b       	andi	r25, 0xB7	; 183
    16e2:	93 bf       	out	0x33, r25	; 51
    16e4:	83 b7       	in	r24, 0x33	; 51
    16e6:	82 2b       	or	r24, r18
    16e8:	83 bf       	out	0x33, r24	; 51
    16ea:	80 e0       	ldi	r24, 0x00	; 0
    16ec:	08 95       	ret
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	08 95       	ret

000016f2 <TIM0_Start>:
    16f2:	9f ef       	ldi	r25, 0xFF	; 255
    16f4:	98 0f       	add	r25, r24
    16f6:	97 30       	cpi	r25, 0x07	; 7
    16f8:	40 f4       	brcc	.+16     	; 0x170a <TIM0_Start+0x18>
    16fa:	93 b7       	in	r25, 0x33	; 51
    16fc:	98 7f       	andi	r25, 0xF8	; 248
    16fe:	93 bf       	out	0x33, r25	; 51
    1700:	93 b7       	in	r25, 0x33	; 51
    1702:	89 2b       	or	r24, r25
    1704:	83 bf       	out	0x33, r24	; 51
    1706:	80 e0       	ldi	r24, 0x00	; 0
    1708:	08 95       	ret
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	08 95       	ret

0000170e <TIM0_Stop>:
    170e:	83 b7       	in	r24, 0x33	; 51
    1710:	88 7f       	andi	r24, 0xF8	; 248
    1712:	83 bf       	out	0x33, r24	; 51
    1714:	12 be       	out	0x32, r1	; 50
    1716:	88 b7       	in	r24, 0x38	; 56
    1718:	8e 7f       	andi	r24, 0xFE	; 254
    171a:	88 bf       	out	0x38, r24	; 56
    171c:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <u8_gs_OVFCount>
    1720:	08 95       	ret

00001722 <TIM0_SetValue>:
    1722:	82 bf       	out	0x32, r24	; 50
    1724:	08 95       	ret

00001726 <TIM0_GetOVF>:
    1726:	fc 01       	movw	r30, r24
    1728:	89 2b       	or	r24, r25
    172a:	29 f0       	breq	.+10     	; 0x1736 <TIM0_GetOVF+0x10>
    172c:	98 b7       	in	r25, 0x38	; 56
    172e:	91 70       	andi	r25, 0x01	; 1
    1730:	90 83       	st	Z, r25
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	08 95       	ret
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	08 95       	ret

0000173a <TIM0_ClearOVF>:
    173a:	88 b7       	in	r24, 0x38	; 56
    173c:	81 60       	ori	r24, 0x01	; 1
    173e:	88 bf       	out	0x38, r24	; 56
    1740:	08 95       	ret

00001742 <TIM0_GetState>:
    1742:	00 97       	sbiw	r24, 0x00	; 0
    1744:	61 f0       	breq	.+24     	; 0x175e <TIM0_GetState+0x1c>
    1746:	03 b6       	in	r0, 0x33	; 51
    1748:	00 fe       	sbrs	r0, 0
    174a:	05 c0       	rjmp	.+10     	; 0x1756 <TIM0_GetState+0x14>
    174c:	21 e0       	ldi	r18, 0x01	; 1
    174e:	fc 01       	movw	r30, r24
    1750:	20 83       	st	Z, r18
    1752:	80 e0       	ldi	r24, 0x00	; 0
    1754:	08 95       	ret
    1756:	fc 01       	movw	r30, r24
    1758:	10 82       	st	Z, r1
    175a:	80 e0       	ldi	r24, 0x00	; 0
    175c:	08 95       	ret
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	08 95       	ret

00001762 <__vector_11>:


/*========================== ISRs =============================*/

ISR(TIM0_OVF_INT)
{
    1762:	1f 92       	push	r1
    1764:	0f 92       	push	r0
    1766:	0f b6       	in	r0, 0x3f	; 63
    1768:	0f 92       	push	r0
    176a:	11 24       	eor	r1, r1
    176c:	2f 93       	push	r18
    176e:	3f 93       	push	r19
    1770:	4f 93       	push	r20
    1772:	5f 93       	push	r21
    1774:	6f 93       	push	r22
    1776:	7f 93       	push	r23
    1778:	8f 93       	push	r24
    177a:	9f 93       	push	r25
    177c:	af 93       	push	r26
    177e:	bf 93       	push	r27
    1780:	ef 93       	push	r30
    1782:	ff 93       	push	r31
	if(TIM0_OVFCallbackFn != NULL)
    1784:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <TIM0_OVFCallbackFn>
    1788:	90 91 c7 02 	lds	r25, 0x02C7	; 0x8002c7 <TIM0_OVFCallbackFn+0x1>
    178c:	89 2b       	or	r24, r25
    178e:	b1 f0       	breq	.+44     	; 0x17bc <__vector_11+0x5a>
	{
		/* Delay is complete */
		if(u8_gs_OVFCount == u8_g_TotalOVF)
    1790:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <u8_gs_OVFCount>
    1794:	90 91 c9 02 	lds	r25, 0x02C9	; 0x8002c9 <u8_g_TotalOVF>
    1798:	89 13       	cpse	r24, r25
    179a:	0d c0       	rjmp	.+26     	; 0x17b6 <__vector_11+0x54>
		{
			/* Stop the timer */
			TIM0_Stop();
    179c:	0e 94 87 0b 	call	0x170e	; 0x170e <TIM0_Stop>
			
			/* Reset the OVF counter */
			u8_gs_OVFCount = 0;
    17a0:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <u8_gs_OVFCount>
			
			/* Disable OVF interrupt */
			CLEAR_BIT(TIMSK, TIMSK_TOIE0);
    17a4:	89 b7       	in	r24, 0x39	; 57
    17a6:	8e 7f       	andi	r24, 0xFE	; 254
    17a8:	89 bf       	out	0x39, r24	; 57
			
			/* Call the Callback function */
			TIM0_OVFCallbackFn();
    17aa:	e0 91 c6 02 	lds	r30, 0x02C6	; 0x8002c6 <TIM0_OVFCallbackFn>
    17ae:	f0 91 c7 02 	lds	r31, 0x02C7	; 0x8002c7 <TIM0_OVFCallbackFn+0x1>
    17b2:	09 95       	icall
    17b4:	03 c0       	rjmp	.+6      	; 0x17bc <__vector_11+0x5a>
		}
		else
		{
			/* Increment the overflow count */
			u8_gs_OVFCount++;
    17b6:	8f 5f       	subi	r24, 0xFF	; 255
    17b8:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <u8_gs_OVFCount>
		}
	}
}
    17bc:	ff 91       	pop	r31
    17be:	ef 91       	pop	r30
    17c0:	bf 91       	pop	r27
    17c2:	af 91       	pop	r26
    17c4:	9f 91       	pop	r25
    17c6:	8f 91       	pop	r24
    17c8:	7f 91       	pop	r23
    17ca:	6f 91       	pop	r22
    17cc:	5f 91       	pop	r21
    17ce:	4f 91       	pop	r20
    17d0:	3f 91       	pop	r19
    17d2:	2f 91       	pop	r18
    17d4:	0f 90       	pop	r0
    17d6:	0f be       	out	0x3f, r0	; 63
    17d8:	0f 90       	pop	r0
    17da:	1f 90       	pop	r1
    17dc:	18 95       	reti

000017de <enuTimer2_init>:
	enu_timerStatus_t errorStatus = TIMER_OK;

	CLEAR_BIT(TIMSK_REG, TOIE2);

	return errorStatus;
}
    17de:	84 30       	cpi	r24, 0x04	; 4
    17e0:	40 f5       	brcc	.+80     	; 0x1832 <enuTimer2_init+0x54>
    17e2:	81 30       	cpi	r24, 0x01	; 1
    17e4:	71 f0       	breq	.+28     	; 0x1802 <enuTimer2_init+0x24>
    17e6:	28 f0       	brcs	.+10     	; 0x17f2 <enuTimer2_init+0x14>
    17e8:	82 30       	cpi	r24, 0x02	; 2
    17ea:	99 f0       	breq	.+38     	; 0x1812 <enuTimer2_init+0x34>
    17ec:	83 30       	cpi	r24, 0x03	; 3
    17ee:	c9 f0       	breq	.+50     	; 0x1822 <enuTimer2_init+0x44>
    17f0:	22 c0       	rjmp	.+68     	; 0x1836 <enuTimer2_init+0x58>
    17f2:	85 b5       	in	r24, 0x25	; 37
    17f4:	87 7f       	andi	r24, 0xF7	; 247
    17f6:	85 bd       	out	0x25, r24	; 37
    17f8:	85 b5       	in	r24, 0x25	; 37
    17fa:	8f 7b       	andi	r24, 0xBF	; 191
    17fc:	85 bd       	out	0x25, r24	; 37
    17fe:	80 e0       	ldi	r24, 0x00	; 0
    1800:	08 95       	ret
    1802:	85 b5       	in	r24, 0x25	; 37
    1804:	87 7f       	andi	r24, 0xF7	; 247
    1806:	85 bd       	out	0x25, r24	; 37
    1808:	85 b5       	in	r24, 0x25	; 37
    180a:	80 64       	ori	r24, 0x40	; 64
    180c:	85 bd       	out	0x25, r24	; 37
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	08 95       	ret
    1812:	85 b5       	in	r24, 0x25	; 37
    1814:	88 60       	ori	r24, 0x08	; 8
    1816:	85 bd       	out	0x25, r24	; 37
    1818:	85 b5       	in	r24, 0x25	; 37
    181a:	8f 7b       	andi	r24, 0xBF	; 191
    181c:	85 bd       	out	0x25, r24	; 37
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	08 95       	ret
    1822:	85 b5       	in	r24, 0x25	; 37
    1824:	88 60       	ori	r24, 0x08	; 8
    1826:	85 bd       	out	0x25, r24	; 37
    1828:	85 b5       	in	r24, 0x25	; 37
    182a:	80 64       	ori	r24, 0x40	; 64
    182c:	85 bd       	out	0x25, r24	; 37
    182e:	80 e0       	ldi	r24, 0x00	; 0
    1830:	08 95       	ret
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	08 95       	ret
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	08 95       	ret

0000183a <u8Timer2_setPrescallar>:
    183a:	88 30       	cpi	r24, 0x08	; 8
    183c:	70 f4       	brcc	.+28     	; 0x185a <u8Timer2_setPrescallar+0x20>
    183e:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <global_prescaller>
    1842:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <global_timerStatus>
    1846:	91 30       	cpi	r25, 0x01	; 1
    1848:	51 f4       	brne	.+20     	; 0x185e <u8Timer2_setPrescallar+0x24>
    184a:	95 b5       	in	r25, 0x25	; 37
    184c:	98 7f       	andi	r25, 0xF8	; 248
    184e:	89 2b       	or	r24, r25
    1850:	95 b5       	in	r25, 0x25	; 37
    1852:	89 2b       	or	r24, r25
    1854:	85 bd       	out	0x25, r24	; 37
    1856:	80 e0       	ldi	r24, 0x00	; 0
    1858:	08 95       	ret
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	08 95       	ret
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	08 95       	ret

00001862 <vidTimer2_OvfIrqEnable>:
    1862:	89 b7       	in	r24, 0x39	; 57
    1864:	80 64       	ori	r24, 0x40	; 64
    1866:	89 bf       	out	0x39, r24	; 57
    1868:	8f b7       	in	r24, 0x3f	; 63
    186a:	80 68       	ori	r24, 0x80	; 128
    186c:	8f bf       	out	0x3f, r24	; 63
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	08 95       	ret

00001872 <vidTimer2_start>:
/*************************************************************************************************************/
enu_timerStatus_t vidTimer2_start(void)
{
	enu_timerStatus_t errorStatus = TIMER_OK;

	TCCR2_REG |=  global_prescaller << PRESCALLER_OFFSET;
    1872:	95 b5       	in	r25, 0x25	; 37
    1874:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <global_prescaller>
    1878:	89 2b       	or	r24, r25
    187a:	85 bd       	out	0x25, r24	; 37
	global_timerStatus  = RUNNING;
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <global_timerStatus>

	return errorStatus;
}
    1882:	80 e0       	ldi	r24, 0x00	; 0
    1884:	08 95       	ret

00001886 <vidTimer2_stop>:
/*************************************************************************************************************/
enu_timerStatus_t vidTimer2_stop(void)
{
	enu_timerStatus_t errorStatus = TIMER_OK;

	TCCR2_REG &=  PRESCALLER_CLR_MSK;
    1886:	85 b5       	in	r24, 0x25	; 37
    1888:	88 7f       	andi	r24, 0xF8	; 248
    188a:	85 bd       	out	0x25, r24	; 37
	global_timerStatus = STOPPED;
    188c:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <global_timerStatus>

	return errorStatus;
}
    1890:	80 e0       	ldi	r24, 0x00	; 0
    1892:	08 95       	ret

00001894 <u8Timer2_setTime_ms>:
/*************************************************************************************************************/
enu_timerStatus_t u8Timer2_setTime_ms(Uint32_t u32_time_ms)
{
    1894:	8f 92       	push	r8
    1896:	9f 92       	push	r9
    1898:	af 92       	push	r10
    189a:	bf 92       	push	r11
    189c:	cf 92       	push	r12
    189e:	df 92       	push	r13
    18a0:	ef 92       	push	r14
    18a2:	ff 92       	push	r15
	enu_timerStatus_t errorStatus = TIMER_OK;
	Uint32_t desired_ticks;
	float32_t tick_time_ms;
	if( u32_time_ms < MAX_TIM_MS )
    18a4:	68 38       	cpi	r22, 0x88	; 136
    18a6:	23 e1       	ldi	r18, 0x13	; 19
    18a8:	72 07       	cpc	r23, r18
    18aa:	81 05       	cpc	r24, r1
    18ac:	91 05       	cpc	r25, r1
    18ae:	08 f0       	brcs	.+2      	; 0x18b2 <u8Timer2_setTime_ms+0x1e>
    18b0:	60 c0       	rjmp	.+192    	; 0x1972 <u8Timer2_setTime_ms+0xde>
    18b2:	6b 01       	movw	r12, r22
    18b4:	7c 01       	movw	r14, r24
	{
		tick_time_ms = (float32_t)prescaller_map[global_prescaller] / ((Uint32_t)F_CPU / 1000U)  ;
    18b6:	e0 91 d1 02 	lds	r30, 0x02D1	; 0x8002d1 <global_prescaller>
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	ee 0f       	add	r30, r30
    18be:	ff 1f       	adc	r31, r31
    18c0:	e8 56       	subi	r30, 0x68	; 104
    18c2:	fd 4f       	sbci	r31, 0xFD	; 253
    18c4:	60 81       	ld	r22, Z
    18c6:	71 81       	ldd	r23, Z+1	; 0x01
    18c8:	80 e0       	ldi	r24, 0x00	; 0
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__floatunsisf>
    18d0:	20 e0       	ldi	r18, 0x00	; 0
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	4a ef       	ldi	r20, 0xFA	; 250
    18d6:	55 e4       	ldi	r21, 0x45	; 69
    18d8:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__divsf3>
    18dc:	4b 01       	movw	r8, r22
    18de:	5c 01       	movw	r10, r24
		desired_ticks = u32_time_ms / tick_time_ms;
    18e0:	c7 01       	movw	r24, r14
    18e2:	b6 01       	movw	r22, r12
    18e4:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__floatunsisf>
    18e8:	a5 01       	movw	r20, r10
    18ea:	94 01       	movw	r18, r8
    18ec:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__divsf3>
    18f0:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__fixunssfsi>

		/* Compare ticks with OVF_ticks */
		if(desired_ticks == OVF_TICKS)
    18f4:	61 15       	cp	r22, r1
    18f6:	21 e0       	ldi	r18, 0x01	; 1
    18f8:	72 07       	cpc	r23, r18
    18fa:	81 05       	cpc	r24, r1
    18fc:	91 05       	cpc	r25, r1
    18fe:	29 f4       	brne	.+10     	; 0x190a <u8Timer2_setTime_ms+0x76>
		{
			global_ovf = 1;
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <global_ovf>
	return errorStatus;
}
/*************************************************************************************************************/
enu_timerStatus_t u8Timer2_setTime_ms(Uint32_t u32_time_ms)
{
	enu_timerStatus_t errorStatus = TIMER_OK;
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	39 c0       	rjmp	.+114    	; 0x197c <u8Timer2_setTime_ms+0xe8>
		/* Compare ticks with OVF_ticks */
		if(desired_ticks == OVF_TICKS)
		{
			global_ovf = 1;
		}
		else if(desired_ticks < OVF_TICKS)
    190a:	6f 3f       	cpi	r22, 0xFF	; 255
    190c:	71 05       	cpc	r23, r1
    190e:	81 05       	cpc	r24, r1
    1910:	91 05       	cpc	r25, r1
    1912:	09 f0       	breq	.+2      	; 0x1916 <u8Timer2_setTime_ms+0x82>
    1914:	78 f4       	brcc	.+30     	; 0x1934 <u8Timer2_setTime_ms+0xa0>
		{
			preload = OVF_TICKS - desired_ticks;
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	31 e0       	ldi	r19, 0x01	; 1
    191a:	c9 01       	movw	r24, r18
    191c:	86 1b       	sub	r24, r22
    191e:	97 0b       	sbc	r25, r23
    1920:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <preload+0x1>
    1924:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <preload>
			TCNT2_REG = preload;
    1928:	84 bd       	out	0x24, r24	; 36
			global_ovf = 1;
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <global_ovf>
	return errorStatus;
}
/*************************************************************************************************************/
enu_timerStatus_t u8Timer2_setTime_ms(Uint32_t u32_time_ms)
{
	enu_timerStatus_t errorStatus = TIMER_OK;
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	24 c0       	rjmp	.+72     	; 0x197c <u8Timer2_setTime_ms+0xe8>
		{
			preload = OVF_TICKS - desired_ticks;
			TCNT2_REG = preload;
			global_ovf = 1;
		}
		else if(desired_ticks > OVF_TICKS)
    1934:	61 30       	cpi	r22, 0x01	; 1
    1936:	21 e0       	ldi	r18, 0x01	; 1
    1938:	72 07       	cpc	r23, r18
    193a:	81 05       	cpc	r24, r1
    193c:	91 05       	cpc	r25, r1
    193e:	d8 f0       	brcs	.+54     	; 0x1976 <u8Timer2_setTime_ms+0xe2>
		{
			global_ovf = (Uchar8_t)(desired_ticks / OVF_TICKS);
    1940:	70 93 cf 02 	sts	0x02CF, r23	; 0x8002cf <global_ovf>
			preload = (uint16_t)(OVF_TICKS - (desired_ticks % OVF_TICKS ));
    1944:	77 27       	eor	r23, r23
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	91 e0       	ldi	r25, 0x01	; 1
    194a:	86 1b       	sub	r24, r22
    194c:	97 0b       	sbc	r25, r23
    194e:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <preload+0x1>
    1952:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <preload>
			TCNT2_REG = preload;
    1956:	84 bd       	out	0x24, r24	; 36
			if (preload > 0U)
    1958:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <preload>
    195c:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <preload+0x1>
    1960:	89 2b       	or	r24, r25
    1962:	59 f0       	breq	.+22     	; 0x197a <u8Timer2_setTime_ms+0xe6>
			{
				global_ovf++;
    1964:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <global_ovf>
    1968:	8f 5f       	subi	r24, 0xFF	; 255
    196a:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <global_ovf>
	return errorStatus;
}
/*************************************************************************************************************/
enu_timerStatus_t u8Timer2_setTime_ms(Uint32_t u32_time_ms)
{
	enu_timerStatus_t errorStatus = TIMER_OK;
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	05 c0       	rjmp	.+10     	; 0x197c <u8Timer2_setTime_ms+0xe8>
			}
		}
	}
		else
		{
			errorStatus = TIMER_NOK;
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	03 c0       	rjmp	.+6      	; 0x197c <u8Timer2_setTime_ms+0xe8>
	return errorStatus;
}
/*************************************************************************************************************/
enu_timerStatus_t u8Timer2_setTime_ms(Uint32_t u32_time_ms)
{
	enu_timerStatus_t errorStatus = TIMER_OK;
    1976:	80 e0       	ldi	r24, 0x00	; 0
    1978:	01 c0       	rjmp	.+2      	; 0x197c <u8Timer2_setTime_ms+0xe8>
    197a:	80 e0       	ldi	r24, 0x00	; 0
			errorStatus = TIMER_NOK;
		}


		return errorStatus;
	}
    197c:	ff 90       	pop	r15
    197e:	ef 90       	pop	r14
    1980:	df 90       	pop	r13
    1982:	cf 90       	pop	r12
    1984:	bf 90       	pop	r11
    1986:	af 90       	pop	r10
    1988:	9f 90       	pop	r9
    198a:	8f 90       	pop	r8
    198c:	08 95       	ret

0000198e <vidTimer2_setcbf_OVF>:

/*************************************************************************************************************/
void vidTimer2_setcbf_OVF(cbf_t cbf)
{
	if (cbf != NULL)
    198e:	00 97       	sbiw	r24, 0x00	; 0
    1990:	21 f0       	breq	.+8      	; 0x199a <vidTimer2_setcbf_OVF+0xc>
	{
		globalCallFunc = cbf;
    1992:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <globalCallFunc+0x1>
    1996:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <globalCallFunc>
    199a:	08 95       	ret

0000199c <__vector_5>:

/*************************************************************************************************************
 * 							ISR Interrupt Handling
 ************************************************************************************************************/
ISR(TIMER2_OVF_vect)
{
    199c:	1f 92       	push	r1
    199e:	0f 92       	push	r0
    19a0:	0f b6       	in	r0, 0x3f	; 63
    19a2:	0f 92       	push	r0
    19a4:	11 24       	eor	r1, r1
    19a6:	2f 93       	push	r18
    19a8:	3f 93       	push	r19
    19aa:	4f 93       	push	r20
    19ac:	5f 93       	push	r21
    19ae:	6f 93       	push	r22
    19b0:	7f 93       	push	r23
    19b2:	8f 93       	push	r24
    19b4:	9f 93       	push	r25
    19b6:	af 93       	push	r26
    19b8:	bf 93       	push	r27
    19ba:	ef 93       	push	r30
    19bc:	ff 93       	push	r31
	static Uchar8_t counter = 0;
	counter++;
    19be:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <counter.1731>
    19c2:	8f 5f       	subi	r24, 0xFF	; 255
    19c4:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <counter.1731>
	if(counter == global_ovf)
    19c8:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <global_ovf>
    19cc:	89 13       	cpse	r24, r25
    19ce:	0c c0       	rjmp	.+24     	; 0x19e8 <__vector_5+0x4c>
	{
		if (globalCallFunc != NULL)
    19d0:	e0 91 cb 02 	lds	r30, 0x02CB	; 0x8002cb <globalCallFunc>
    19d4:	f0 91 cc 02 	lds	r31, 0x02CC	; 0x8002cc <globalCallFunc+0x1>
    19d8:	30 97       	sbiw	r30, 0x00	; 0
    19da:	31 f0       	breq	.+12     	; 0x19e8 <__vector_5+0x4c>
		{
			counter = 0;
    19dc:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <counter.1731>

			globalCallFunc();
    19e0:	09 95       	icall
			TCNT2_REG = preload;
    19e2:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <preload>
    19e6:	84 bd       	out	0x24, r24	; 36
//			global_ovf = 0;
//			vidTimer1_stop();
		}
	}
}
    19e8:	ff 91       	pop	r31
    19ea:	ef 91       	pop	r30
    19ec:	bf 91       	pop	r27
    19ee:	af 91       	pop	r26
    19f0:	9f 91       	pop	r25
    19f2:	8f 91       	pop	r24
    19f4:	7f 91       	pop	r23
    19f6:	6f 91       	pop	r22
    19f8:	5f 91       	pop	r21
    19fa:	4f 91       	pop	r20
    19fc:	3f 91       	pop	r19
    19fe:	2f 91       	pop	r18
    1a00:	0f 90       	pop	r0
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	0f 90       	pop	r0
    1a06:	1f 90       	pop	r1
    1a08:	18 95       	reti

00001a0a <__subsf3>:
    1a0a:	50 58       	subi	r21, 0x80	; 128

00001a0c <__addsf3>:
    1a0c:	bb 27       	eor	r27, r27
    1a0e:	aa 27       	eor	r26, r26
    1a10:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__addsf3x>
    1a14:	0c 94 90 0e 	jmp	0x1d20	; 0x1d20 <__fp_round>
    1a18:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__fp_pscA>
    1a1c:	38 f0       	brcs	.+14     	; 0x1a2c <__addsf3+0x20>
    1a1e:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <__fp_pscB>
    1a22:	20 f0       	brcs	.+8      	; 0x1a2c <__addsf3+0x20>
    1a24:	39 f4       	brne	.+14     	; 0x1a34 <__addsf3+0x28>
    1a26:	9f 3f       	cpi	r25, 0xFF	; 255
    1a28:	19 f4       	brne	.+6      	; 0x1a30 <__addsf3+0x24>
    1a2a:	26 f4       	brtc	.+8      	; 0x1a34 <__addsf3+0x28>
    1a2c:	0c 94 7f 0e 	jmp	0x1cfe	; 0x1cfe <__fp_nan>
    1a30:	0e f4       	brtc	.+2      	; 0x1a34 <__addsf3+0x28>
    1a32:	e0 95       	com	r30
    1a34:	e7 fb       	bst	r30, 7
    1a36:	0c 94 79 0e 	jmp	0x1cf2	; 0x1cf2 <__fp_inf>

00001a3a <__addsf3x>:
    1a3a:	e9 2f       	mov	r30, r25
    1a3c:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__fp_split3>
    1a40:	58 f3       	brcs	.-42     	; 0x1a18 <__addsf3+0xc>
    1a42:	ba 17       	cp	r27, r26
    1a44:	62 07       	cpc	r22, r18
    1a46:	73 07       	cpc	r23, r19
    1a48:	84 07       	cpc	r24, r20
    1a4a:	95 07       	cpc	r25, r21
    1a4c:	20 f0       	brcs	.+8      	; 0x1a56 <__addsf3x+0x1c>
    1a4e:	79 f4       	brne	.+30     	; 0x1a6e <__addsf3x+0x34>
    1a50:	a6 f5       	brtc	.+104    	; 0x1aba <__addsf3x+0x80>
    1a52:	0c 94 c3 0e 	jmp	0x1d86	; 0x1d86 <__fp_zero>
    1a56:	0e f4       	brtc	.+2      	; 0x1a5a <__addsf3x+0x20>
    1a58:	e0 95       	com	r30
    1a5a:	0b 2e       	mov	r0, r27
    1a5c:	ba 2f       	mov	r27, r26
    1a5e:	a0 2d       	mov	r26, r0
    1a60:	0b 01       	movw	r0, r22
    1a62:	b9 01       	movw	r22, r18
    1a64:	90 01       	movw	r18, r0
    1a66:	0c 01       	movw	r0, r24
    1a68:	ca 01       	movw	r24, r20
    1a6a:	a0 01       	movw	r20, r0
    1a6c:	11 24       	eor	r1, r1
    1a6e:	ff 27       	eor	r31, r31
    1a70:	59 1b       	sub	r21, r25
    1a72:	99 f0       	breq	.+38     	; 0x1a9a <__addsf3x+0x60>
    1a74:	59 3f       	cpi	r21, 0xF9	; 249
    1a76:	50 f4       	brcc	.+20     	; 0x1a8c <__addsf3x+0x52>
    1a78:	50 3e       	cpi	r21, 0xE0	; 224
    1a7a:	68 f1       	brcs	.+90     	; 0x1ad6 <__addsf3x+0x9c>
    1a7c:	1a 16       	cp	r1, r26
    1a7e:	f0 40       	sbci	r31, 0x00	; 0
    1a80:	a2 2f       	mov	r26, r18
    1a82:	23 2f       	mov	r18, r19
    1a84:	34 2f       	mov	r19, r20
    1a86:	44 27       	eor	r20, r20
    1a88:	58 5f       	subi	r21, 0xF8	; 248
    1a8a:	f3 cf       	rjmp	.-26     	; 0x1a72 <__addsf3x+0x38>
    1a8c:	46 95       	lsr	r20
    1a8e:	37 95       	ror	r19
    1a90:	27 95       	ror	r18
    1a92:	a7 95       	ror	r26
    1a94:	f0 40       	sbci	r31, 0x00	; 0
    1a96:	53 95       	inc	r21
    1a98:	c9 f7       	brne	.-14     	; 0x1a8c <__addsf3x+0x52>
    1a9a:	7e f4       	brtc	.+30     	; 0x1aba <__addsf3x+0x80>
    1a9c:	1f 16       	cp	r1, r31
    1a9e:	ba 0b       	sbc	r27, r26
    1aa0:	62 0b       	sbc	r22, r18
    1aa2:	73 0b       	sbc	r23, r19
    1aa4:	84 0b       	sbc	r24, r20
    1aa6:	ba f0       	brmi	.+46     	; 0x1ad6 <__addsf3x+0x9c>
    1aa8:	91 50       	subi	r25, 0x01	; 1
    1aaa:	a1 f0       	breq	.+40     	; 0x1ad4 <__addsf3x+0x9a>
    1aac:	ff 0f       	add	r31, r31
    1aae:	bb 1f       	adc	r27, r27
    1ab0:	66 1f       	adc	r22, r22
    1ab2:	77 1f       	adc	r23, r23
    1ab4:	88 1f       	adc	r24, r24
    1ab6:	c2 f7       	brpl	.-16     	; 0x1aa8 <__addsf3x+0x6e>
    1ab8:	0e c0       	rjmp	.+28     	; 0x1ad6 <__addsf3x+0x9c>
    1aba:	ba 0f       	add	r27, r26
    1abc:	62 1f       	adc	r22, r18
    1abe:	73 1f       	adc	r23, r19
    1ac0:	84 1f       	adc	r24, r20
    1ac2:	48 f4       	brcc	.+18     	; 0x1ad6 <__addsf3x+0x9c>
    1ac4:	87 95       	ror	r24
    1ac6:	77 95       	ror	r23
    1ac8:	67 95       	ror	r22
    1aca:	b7 95       	ror	r27
    1acc:	f7 95       	ror	r31
    1ace:	9e 3f       	cpi	r25, 0xFE	; 254
    1ad0:	08 f0       	brcs	.+2      	; 0x1ad4 <__addsf3x+0x9a>
    1ad2:	b0 cf       	rjmp	.-160    	; 0x1a34 <__addsf3+0x28>
    1ad4:	93 95       	inc	r25
    1ad6:	88 0f       	add	r24, r24
    1ad8:	08 f0       	brcs	.+2      	; 0x1adc <__addsf3x+0xa2>
    1ada:	99 27       	eor	r25, r25
    1adc:	ee 0f       	add	r30, r30
    1ade:	97 95       	ror	r25
    1ae0:	87 95       	ror	r24
    1ae2:	08 95       	ret

00001ae4 <__cmpsf2>:
    1ae4:	0e 94 55 0e 	call	0x1caa	; 0x1caa <__fp_cmp>
    1ae8:	08 f4       	brcc	.+2      	; 0x1aec <__cmpsf2+0x8>
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	08 95       	ret

00001aee <__divsf3>:
    1aee:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__divsf3x>
    1af2:	0c 94 90 0e 	jmp	0x1d20	; 0x1d20 <__fp_round>
    1af6:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <__fp_pscB>
    1afa:	58 f0       	brcs	.+22     	; 0x1b12 <__divsf3+0x24>
    1afc:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__fp_pscA>
    1b00:	40 f0       	brcs	.+16     	; 0x1b12 <__divsf3+0x24>
    1b02:	29 f4       	brne	.+10     	; 0x1b0e <__divsf3+0x20>
    1b04:	5f 3f       	cpi	r21, 0xFF	; 255
    1b06:	29 f0       	breq	.+10     	; 0x1b12 <__divsf3+0x24>
    1b08:	0c 94 79 0e 	jmp	0x1cf2	; 0x1cf2 <__fp_inf>
    1b0c:	51 11       	cpse	r21, r1
    1b0e:	0c 94 c4 0e 	jmp	0x1d88	; 0x1d88 <__fp_szero>
    1b12:	0c 94 7f 0e 	jmp	0x1cfe	; 0x1cfe <__fp_nan>

00001b16 <__divsf3x>:
    1b16:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__fp_split3>
    1b1a:	68 f3       	brcs	.-38     	; 0x1af6 <__divsf3+0x8>

00001b1c <__divsf3_pse>:
    1b1c:	99 23       	and	r25, r25
    1b1e:	b1 f3       	breq	.-20     	; 0x1b0c <__divsf3+0x1e>
    1b20:	55 23       	and	r21, r21
    1b22:	91 f3       	breq	.-28     	; 0x1b08 <__divsf3+0x1a>
    1b24:	95 1b       	sub	r25, r21
    1b26:	55 0b       	sbc	r21, r21
    1b28:	bb 27       	eor	r27, r27
    1b2a:	aa 27       	eor	r26, r26
    1b2c:	62 17       	cp	r22, r18
    1b2e:	73 07       	cpc	r23, r19
    1b30:	84 07       	cpc	r24, r20
    1b32:	38 f0       	brcs	.+14     	; 0x1b42 <__divsf3_pse+0x26>
    1b34:	9f 5f       	subi	r25, 0xFF	; 255
    1b36:	5f 4f       	sbci	r21, 0xFF	; 255
    1b38:	22 0f       	add	r18, r18
    1b3a:	33 1f       	adc	r19, r19
    1b3c:	44 1f       	adc	r20, r20
    1b3e:	aa 1f       	adc	r26, r26
    1b40:	a9 f3       	breq	.-22     	; 0x1b2c <__divsf3_pse+0x10>
    1b42:	35 d0       	rcall	.+106    	; 0x1bae <__divsf3_pse+0x92>
    1b44:	0e 2e       	mov	r0, r30
    1b46:	3a f0       	brmi	.+14     	; 0x1b56 <__divsf3_pse+0x3a>
    1b48:	e0 e8       	ldi	r30, 0x80	; 128
    1b4a:	32 d0       	rcall	.+100    	; 0x1bb0 <__divsf3_pse+0x94>
    1b4c:	91 50       	subi	r25, 0x01	; 1
    1b4e:	50 40       	sbci	r21, 0x00	; 0
    1b50:	e6 95       	lsr	r30
    1b52:	00 1c       	adc	r0, r0
    1b54:	ca f7       	brpl	.-14     	; 0x1b48 <__divsf3_pse+0x2c>
    1b56:	2b d0       	rcall	.+86     	; 0x1bae <__divsf3_pse+0x92>
    1b58:	fe 2f       	mov	r31, r30
    1b5a:	29 d0       	rcall	.+82     	; 0x1bae <__divsf3_pse+0x92>
    1b5c:	66 0f       	add	r22, r22
    1b5e:	77 1f       	adc	r23, r23
    1b60:	88 1f       	adc	r24, r24
    1b62:	bb 1f       	adc	r27, r27
    1b64:	26 17       	cp	r18, r22
    1b66:	37 07       	cpc	r19, r23
    1b68:	48 07       	cpc	r20, r24
    1b6a:	ab 07       	cpc	r26, r27
    1b6c:	b0 e8       	ldi	r27, 0x80	; 128
    1b6e:	09 f0       	breq	.+2      	; 0x1b72 <__divsf3_pse+0x56>
    1b70:	bb 0b       	sbc	r27, r27
    1b72:	80 2d       	mov	r24, r0
    1b74:	bf 01       	movw	r22, r30
    1b76:	ff 27       	eor	r31, r31
    1b78:	93 58       	subi	r25, 0x83	; 131
    1b7a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b7c:	3a f0       	brmi	.+14     	; 0x1b8c <__divsf3_pse+0x70>
    1b7e:	9e 3f       	cpi	r25, 0xFE	; 254
    1b80:	51 05       	cpc	r21, r1
    1b82:	78 f0       	brcs	.+30     	; 0x1ba2 <__divsf3_pse+0x86>
    1b84:	0c 94 79 0e 	jmp	0x1cf2	; 0x1cf2 <__fp_inf>
    1b88:	0c 94 c4 0e 	jmp	0x1d88	; 0x1d88 <__fp_szero>
    1b8c:	5f 3f       	cpi	r21, 0xFF	; 255
    1b8e:	e4 f3       	brlt	.-8      	; 0x1b88 <__divsf3_pse+0x6c>
    1b90:	98 3e       	cpi	r25, 0xE8	; 232
    1b92:	d4 f3       	brlt	.-12     	; 0x1b88 <__divsf3_pse+0x6c>
    1b94:	86 95       	lsr	r24
    1b96:	77 95       	ror	r23
    1b98:	67 95       	ror	r22
    1b9a:	b7 95       	ror	r27
    1b9c:	f7 95       	ror	r31
    1b9e:	9f 5f       	subi	r25, 0xFF	; 255
    1ba0:	c9 f7       	brne	.-14     	; 0x1b94 <__divsf3_pse+0x78>
    1ba2:	88 0f       	add	r24, r24
    1ba4:	91 1d       	adc	r25, r1
    1ba6:	96 95       	lsr	r25
    1ba8:	87 95       	ror	r24
    1baa:	97 f9       	bld	r25, 7
    1bac:	08 95       	ret
    1bae:	e1 e0       	ldi	r30, 0x01	; 1
    1bb0:	66 0f       	add	r22, r22
    1bb2:	77 1f       	adc	r23, r23
    1bb4:	88 1f       	adc	r24, r24
    1bb6:	bb 1f       	adc	r27, r27
    1bb8:	62 17       	cp	r22, r18
    1bba:	73 07       	cpc	r23, r19
    1bbc:	84 07       	cpc	r24, r20
    1bbe:	ba 07       	cpc	r27, r26
    1bc0:	20 f0       	brcs	.+8      	; 0x1bca <__divsf3_pse+0xae>
    1bc2:	62 1b       	sub	r22, r18
    1bc4:	73 0b       	sbc	r23, r19
    1bc6:	84 0b       	sbc	r24, r20
    1bc8:	ba 0b       	sbc	r27, r26
    1bca:	ee 1f       	adc	r30, r30
    1bcc:	88 f7       	brcc	.-30     	; 0x1bb0 <__divsf3_pse+0x94>
    1bce:	e0 95       	com	r30
    1bd0:	08 95       	ret

00001bd2 <__fixunssfsi>:
    1bd2:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <__fp_splitA>
    1bd6:	88 f0       	brcs	.+34     	; 0x1bfa <__fixunssfsi+0x28>
    1bd8:	9f 57       	subi	r25, 0x7F	; 127
    1bda:	98 f0       	brcs	.+38     	; 0x1c02 <__fixunssfsi+0x30>
    1bdc:	b9 2f       	mov	r27, r25
    1bde:	99 27       	eor	r25, r25
    1be0:	b7 51       	subi	r27, 0x17	; 23
    1be2:	b0 f0       	brcs	.+44     	; 0x1c10 <__fixunssfsi+0x3e>
    1be4:	e1 f0       	breq	.+56     	; 0x1c1e <__fixunssfsi+0x4c>
    1be6:	66 0f       	add	r22, r22
    1be8:	77 1f       	adc	r23, r23
    1bea:	88 1f       	adc	r24, r24
    1bec:	99 1f       	adc	r25, r25
    1bee:	1a f0       	brmi	.+6      	; 0x1bf6 <__fixunssfsi+0x24>
    1bf0:	ba 95       	dec	r27
    1bf2:	c9 f7       	brne	.-14     	; 0x1be6 <__fixunssfsi+0x14>
    1bf4:	14 c0       	rjmp	.+40     	; 0x1c1e <__fixunssfsi+0x4c>
    1bf6:	b1 30       	cpi	r27, 0x01	; 1
    1bf8:	91 f0       	breq	.+36     	; 0x1c1e <__fixunssfsi+0x4c>
    1bfa:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <__fp_zero>
    1bfe:	b1 e0       	ldi	r27, 0x01	; 1
    1c00:	08 95       	ret
    1c02:	0c 94 c3 0e 	jmp	0x1d86	; 0x1d86 <__fp_zero>
    1c06:	67 2f       	mov	r22, r23
    1c08:	78 2f       	mov	r23, r24
    1c0a:	88 27       	eor	r24, r24
    1c0c:	b8 5f       	subi	r27, 0xF8	; 248
    1c0e:	39 f0       	breq	.+14     	; 0x1c1e <__fixunssfsi+0x4c>
    1c10:	b9 3f       	cpi	r27, 0xF9	; 249
    1c12:	cc f3       	brlt	.-14     	; 0x1c06 <__fixunssfsi+0x34>
    1c14:	86 95       	lsr	r24
    1c16:	77 95       	ror	r23
    1c18:	67 95       	ror	r22
    1c1a:	b3 95       	inc	r27
    1c1c:	d9 f7       	brne	.-10     	; 0x1c14 <__fixunssfsi+0x42>
    1c1e:	3e f4       	brtc	.+14     	; 0x1c2e <__fixunssfsi+0x5c>
    1c20:	90 95       	com	r25
    1c22:	80 95       	com	r24
    1c24:	70 95       	com	r23
    1c26:	61 95       	neg	r22
    1c28:	7f 4f       	sbci	r23, 0xFF	; 255
    1c2a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c2e:	08 95       	ret

00001c30 <__floatunsisf>:
    1c30:	e8 94       	clt
    1c32:	09 c0       	rjmp	.+18     	; 0x1c46 <__floatsisf+0x12>

00001c34 <__floatsisf>:
    1c34:	97 fb       	bst	r25, 7
    1c36:	3e f4       	brtc	.+14     	; 0x1c46 <__floatsisf+0x12>
    1c38:	90 95       	com	r25
    1c3a:	80 95       	com	r24
    1c3c:	70 95       	com	r23
    1c3e:	61 95       	neg	r22
    1c40:	7f 4f       	sbci	r23, 0xFF	; 255
    1c42:	8f 4f       	sbci	r24, 0xFF	; 255
    1c44:	9f 4f       	sbci	r25, 0xFF	; 255
    1c46:	99 23       	and	r25, r25
    1c48:	a9 f0       	breq	.+42     	; 0x1c74 <__floatsisf+0x40>
    1c4a:	f9 2f       	mov	r31, r25
    1c4c:	96 e9       	ldi	r25, 0x96	; 150
    1c4e:	bb 27       	eor	r27, r27
    1c50:	93 95       	inc	r25
    1c52:	f6 95       	lsr	r31
    1c54:	87 95       	ror	r24
    1c56:	77 95       	ror	r23
    1c58:	67 95       	ror	r22
    1c5a:	b7 95       	ror	r27
    1c5c:	f1 11       	cpse	r31, r1
    1c5e:	f8 cf       	rjmp	.-16     	; 0x1c50 <__floatsisf+0x1c>
    1c60:	fa f4       	brpl	.+62     	; 0x1ca0 <__floatsisf+0x6c>
    1c62:	bb 0f       	add	r27, r27
    1c64:	11 f4       	brne	.+4      	; 0x1c6a <__floatsisf+0x36>
    1c66:	60 ff       	sbrs	r22, 0
    1c68:	1b c0       	rjmp	.+54     	; 0x1ca0 <__floatsisf+0x6c>
    1c6a:	6f 5f       	subi	r22, 0xFF	; 255
    1c6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c6e:	8f 4f       	sbci	r24, 0xFF	; 255
    1c70:	9f 4f       	sbci	r25, 0xFF	; 255
    1c72:	16 c0       	rjmp	.+44     	; 0x1ca0 <__floatsisf+0x6c>
    1c74:	88 23       	and	r24, r24
    1c76:	11 f0       	breq	.+4      	; 0x1c7c <__floatsisf+0x48>
    1c78:	96 e9       	ldi	r25, 0x96	; 150
    1c7a:	11 c0       	rjmp	.+34     	; 0x1c9e <__floatsisf+0x6a>
    1c7c:	77 23       	and	r23, r23
    1c7e:	21 f0       	breq	.+8      	; 0x1c88 <__floatsisf+0x54>
    1c80:	9e e8       	ldi	r25, 0x8E	; 142
    1c82:	87 2f       	mov	r24, r23
    1c84:	76 2f       	mov	r23, r22
    1c86:	05 c0       	rjmp	.+10     	; 0x1c92 <__floatsisf+0x5e>
    1c88:	66 23       	and	r22, r22
    1c8a:	71 f0       	breq	.+28     	; 0x1ca8 <__floatsisf+0x74>
    1c8c:	96 e8       	ldi	r25, 0x86	; 134
    1c8e:	86 2f       	mov	r24, r22
    1c90:	70 e0       	ldi	r23, 0x00	; 0
    1c92:	60 e0       	ldi	r22, 0x00	; 0
    1c94:	2a f0       	brmi	.+10     	; 0x1ca0 <__floatsisf+0x6c>
    1c96:	9a 95       	dec	r25
    1c98:	66 0f       	add	r22, r22
    1c9a:	77 1f       	adc	r23, r23
    1c9c:	88 1f       	adc	r24, r24
    1c9e:	da f7       	brpl	.-10     	; 0x1c96 <__floatsisf+0x62>
    1ca0:	88 0f       	add	r24, r24
    1ca2:	96 95       	lsr	r25
    1ca4:	87 95       	ror	r24
    1ca6:	97 f9       	bld	r25, 7
    1ca8:	08 95       	ret

00001caa <__fp_cmp>:
    1caa:	99 0f       	add	r25, r25
    1cac:	00 08       	sbc	r0, r0
    1cae:	55 0f       	add	r21, r21
    1cb0:	aa 0b       	sbc	r26, r26
    1cb2:	e0 e8       	ldi	r30, 0x80	; 128
    1cb4:	fe ef       	ldi	r31, 0xFE	; 254
    1cb6:	16 16       	cp	r1, r22
    1cb8:	17 06       	cpc	r1, r23
    1cba:	e8 07       	cpc	r30, r24
    1cbc:	f9 07       	cpc	r31, r25
    1cbe:	c0 f0       	brcs	.+48     	; 0x1cf0 <__fp_cmp+0x46>
    1cc0:	12 16       	cp	r1, r18
    1cc2:	13 06       	cpc	r1, r19
    1cc4:	e4 07       	cpc	r30, r20
    1cc6:	f5 07       	cpc	r31, r21
    1cc8:	98 f0       	brcs	.+38     	; 0x1cf0 <__fp_cmp+0x46>
    1cca:	62 1b       	sub	r22, r18
    1ccc:	73 0b       	sbc	r23, r19
    1cce:	84 0b       	sbc	r24, r20
    1cd0:	95 0b       	sbc	r25, r21
    1cd2:	39 f4       	brne	.+14     	; 0x1ce2 <__fp_cmp+0x38>
    1cd4:	0a 26       	eor	r0, r26
    1cd6:	61 f0       	breq	.+24     	; 0x1cf0 <__fp_cmp+0x46>
    1cd8:	23 2b       	or	r18, r19
    1cda:	24 2b       	or	r18, r20
    1cdc:	25 2b       	or	r18, r21
    1cde:	21 f4       	brne	.+8      	; 0x1ce8 <__fp_cmp+0x3e>
    1ce0:	08 95       	ret
    1ce2:	0a 26       	eor	r0, r26
    1ce4:	09 f4       	brne	.+2      	; 0x1ce8 <__fp_cmp+0x3e>
    1ce6:	a1 40       	sbci	r26, 0x01	; 1
    1ce8:	a6 95       	lsr	r26
    1cea:	8f ef       	ldi	r24, 0xFF	; 255
    1cec:	81 1d       	adc	r24, r1
    1cee:	81 1d       	adc	r24, r1
    1cf0:	08 95       	ret

00001cf2 <__fp_inf>:
    1cf2:	97 f9       	bld	r25, 7
    1cf4:	9f 67       	ori	r25, 0x7F	; 127
    1cf6:	80 e8       	ldi	r24, 0x80	; 128
    1cf8:	70 e0       	ldi	r23, 0x00	; 0
    1cfa:	60 e0       	ldi	r22, 0x00	; 0
    1cfc:	08 95       	ret

00001cfe <__fp_nan>:
    1cfe:	9f ef       	ldi	r25, 0xFF	; 255
    1d00:	80 ec       	ldi	r24, 0xC0	; 192
    1d02:	08 95       	ret

00001d04 <__fp_pscA>:
    1d04:	00 24       	eor	r0, r0
    1d06:	0a 94       	dec	r0
    1d08:	16 16       	cp	r1, r22
    1d0a:	17 06       	cpc	r1, r23
    1d0c:	18 06       	cpc	r1, r24
    1d0e:	09 06       	cpc	r0, r25
    1d10:	08 95       	ret

00001d12 <__fp_pscB>:
    1d12:	00 24       	eor	r0, r0
    1d14:	0a 94       	dec	r0
    1d16:	12 16       	cp	r1, r18
    1d18:	13 06       	cpc	r1, r19
    1d1a:	14 06       	cpc	r1, r20
    1d1c:	05 06       	cpc	r0, r21
    1d1e:	08 95       	ret

00001d20 <__fp_round>:
    1d20:	09 2e       	mov	r0, r25
    1d22:	03 94       	inc	r0
    1d24:	00 0c       	add	r0, r0
    1d26:	11 f4       	brne	.+4      	; 0x1d2c <__fp_round+0xc>
    1d28:	88 23       	and	r24, r24
    1d2a:	52 f0       	brmi	.+20     	; 0x1d40 <__fp_round+0x20>
    1d2c:	bb 0f       	add	r27, r27
    1d2e:	40 f4       	brcc	.+16     	; 0x1d40 <__fp_round+0x20>
    1d30:	bf 2b       	or	r27, r31
    1d32:	11 f4       	brne	.+4      	; 0x1d38 <__fp_round+0x18>
    1d34:	60 ff       	sbrs	r22, 0
    1d36:	04 c0       	rjmp	.+8      	; 0x1d40 <__fp_round+0x20>
    1d38:	6f 5f       	subi	r22, 0xFF	; 255
    1d3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d3c:	8f 4f       	sbci	r24, 0xFF	; 255
    1d3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d40:	08 95       	ret

00001d42 <__fp_split3>:
    1d42:	57 fd       	sbrc	r21, 7
    1d44:	90 58       	subi	r25, 0x80	; 128
    1d46:	44 0f       	add	r20, r20
    1d48:	55 1f       	adc	r21, r21
    1d4a:	59 f0       	breq	.+22     	; 0x1d62 <__fp_splitA+0x10>
    1d4c:	5f 3f       	cpi	r21, 0xFF	; 255
    1d4e:	71 f0       	breq	.+28     	; 0x1d6c <__fp_splitA+0x1a>
    1d50:	47 95       	ror	r20

00001d52 <__fp_splitA>:
    1d52:	88 0f       	add	r24, r24
    1d54:	97 fb       	bst	r25, 7
    1d56:	99 1f       	adc	r25, r25
    1d58:	61 f0       	breq	.+24     	; 0x1d72 <__fp_splitA+0x20>
    1d5a:	9f 3f       	cpi	r25, 0xFF	; 255
    1d5c:	79 f0       	breq	.+30     	; 0x1d7c <__fp_splitA+0x2a>
    1d5e:	87 95       	ror	r24
    1d60:	08 95       	ret
    1d62:	12 16       	cp	r1, r18
    1d64:	13 06       	cpc	r1, r19
    1d66:	14 06       	cpc	r1, r20
    1d68:	55 1f       	adc	r21, r21
    1d6a:	f2 cf       	rjmp	.-28     	; 0x1d50 <__fp_split3+0xe>
    1d6c:	46 95       	lsr	r20
    1d6e:	f1 df       	rcall	.-30     	; 0x1d52 <__fp_splitA>
    1d70:	08 c0       	rjmp	.+16     	; 0x1d82 <__fp_splitA+0x30>
    1d72:	16 16       	cp	r1, r22
    1d74:	17 06       	cpc	r1, r23
    1d76:	18 06       	cpc	r1, r24
    1d78:	99 1f       	adc	r25, r25
    1d7a:	f1 cf       	rjmp	.-30     	; 0x1d5e <__fp_splitA+0xc>
    1d7c:	86 95       	lsr	r24
    1d7e:	71 05       	cpc	r23, r1
    1d80:	61 05       	cpc	r22, r1
    1d82:	08 94       	sec
    1d84:	08 95       	ret

00001d86 <__fp_zero>:
    1d86:	e8 94       	clt

00001d88 <__fp_szero>:
    1d88:	bb 27       	eor	r27, r27
    1d8a:	66 27       	eor	r22, r22
    1d8c:	77 27       	eor	r23, r23
    1d8e:	cb 01       	movw	r24, r22
    1d90:	97 f9       	bld	r25, 7
    1d92:	08 95       	ret

00001d94 <__mulsf3>:
    1d94:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <__mulsf3x>
    1d98:	0c 94 90 0e 	jmp	0x1d20	; 0x1d20 <__fp_round>
    1d9c:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__fp_pscA>
    1da0:	38 f0       	brcs	.+14     	; 0x1db0 <__mulsf3+0x1c>
    1da2:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <__fp_pscB>
    1da6:	20 f0       	brcs	.+8      	; 0x1db0 <__mulsf3+0x1c>
    1da8:	95 23       	and	r25, r21
    1daa:	11 f0       	breq	.+4      	; 0x1db0 <__mulsf3+0x1c>
    1dac:	0c 94 79 0e 	jmp	0x1cf2	; 0x1cf2 <__fp_inf>
    1db0:	0c 94 7f 0e 	jmp	0x1cfe	; 0x1cfe <__fp_nan>
    1db4:	11 24       	eor	r1, r1
    1db6:	0c 94 c4 0e 	jmp	0x1d88	; 0x1d88 <__fp_szero>

00001dba <__mulsf3x>:
    1dba:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__fp_split3>
    1dbe:	70 f3       	brcs	.-36     	; 0x1d9c <__mulsf3+0x8>

00001dc0 <__mulsf3_pse>:
    1dc0:	95 9f       	mul	r25, r21
    1dc2:	c1 f3       	breq	.-16     	; 0x1db4 <__mulsf3+0x20>
    1dc4:	95 0f       	add	r25, r21
    1dc6:	50 e0       	ldi	r21, 0x00	; 0
    1dc8:	55 1f       	adc	r21, r21
    1dca:	62 9f       	mul	r22, r18
    1dcc:	f0 01       	movw	r30, r0
    1dce:	72 9f       	mul	r23, r18
    1dd0:	bb 27       	eor	r27, r27
    1dd2:	f0 0d       	add	r31, r0
    1dd4:	b1 1d       	adc	r27, r1
    1dd6:	63 9f       	mul	r22, r19
    1dd8:	aa 27       	eor	r26, r26
    1dda:	f0 0d       	add	r31, r0
    1ddc:	b1 1d       	adc	r27, r1
    1dde:	aa 1f       	adc	r26, r26
    1de0:	64 9f       	mul	r22, r20
    1de2:	66 27       	eor	r22, r22
    1de4:	b0 0d       	add	r27, r0
    1de6:	a1 1d       	adc	r26, r1
    1de8:	66 1f       	adc	r22, r22
    1dea:	82 9f       	mul	r24, r18
    1dec:	22 27       	eor	r18, r18
    1dee:	b0 0d       	add	r27, r0
    1df0:	a1 1d       	adc	r26, r1
    1df2:	62 1f       	adc	r22, r18
    1df4:	73 9f       	mul	r23, r19
    1df6:	b0 0d       	add	r27, r0
    1df8:	a1 1d       	adc	r26, r1
    1dfa:	62 1f       	adc	r22, r18
    1dfc:	83 9f       	mul	r24, r19
    1dfe:	a0 0d       	add	r26, r0
    1e00:	61 1d       	adc	r22, r1
    1e02:	22 1f       	adc	r18, r18
    1e04:	74 9f       	mul	r23, r20
    1e06:	33 27       	eor	r19, r19
    1e08:	a0 0d       	add	r26, r0
    1e0a:	61 1d       	adc	r22, r1
    1e0c:	23 1f       	adc	r18, r19
    1e0e:	84 9f       	mul	r24, r20
    1e10:	60 0d       	add	r22, r0
    1e12:	21 1d       	adc	r18, r1
    1e14:	82 2f       	mov	r24, r18
    1e16:	76 2f       	mov	r23, r22
    1e18:	6a 2f       	mov	r22, r26
    1e1a:	11 24       	eor	r1, r1
    1e1c:	9f 57       	subi	r25, 0x7F	; 127
    1e1e:	50 40       	sbci	r21, 0x00	; 0
    1e20:	9a f0       	brmi	.+38     	; 0x1e48 <__mulsf3_pse+0x88>
    1e22:	f1 f0       	breq	.+60     	; 0x1e60 <__mulsf3_pse+0xa0>
    1e24:	88 23       	and	r24, r24
    1e26:	4a f0       	brmi	.+18     	; 0x1e3a <__mulsf3_pse+0x7a>
    1e28:	ee 0f       	add	r30, r30
    1e2a:	ff 1f       	adc	r31, r31
    1e2c:	bb 1f       	adc	r27, r27
    1e2e:	66 1f       	adc	r22, r22
    1e30:	77 1f       	adc	r23, r23
    1e32:	88 1f       	adc	r24, r24
    1e34:	91 50       	subi	r25, 0x01	; 1
    1e36:	50 40       	sbci	r21, 0x00	; 0
    1e38:	a9 f7       	brne	.-22     	; 0x1e24 <__mulsf3_pse+0x64>
    1e3a:	9e 3f       	cpi	r25, 0xFE	; 254
    1e3c:	51 05       	cpc	r21, r1
    1e3e:	80 f0       	brcs	.+32     	; 0x1e60 <__mulsf3_pse+0xa0>
    1e40:	0c 94 79 0e 	jmp	0x1cf2	; 0x1cf2 <__fp_inf>
    1e44:	0c 94 c4 0e 	jmp	0x1d88	; 0x1d88 <__fp_szero>
    1e48:	5f 3f       	cpi	r21, 0xFF	; 255
    1e4a:	e4 f3       	brlt	.-8      	; 0x1e44 <__mulsf3_pse+0x84>
    1e4c:	98 3e       	cpi	r25, 0xE8	; 232
    1e4e:	d4 f3       	brlt	.-12     	; 0x1e44 <__mulsf3_pse+0x84>
    1e50:	86 95       	lsr	r24
    1e52:	77 95       	ror	r23
    1e54:	67 95       	ror	r22
    1e56:	b7 95       	ror	r27
    1e58:	f7 95       	ror	r31
    1e5a:	e7 95       	ror	r30
    1e5c:	9f 5f       	subi	r25, 0xFF	; 255
    1e5e:	c1 f7       	brne	.-16     	; 0x1e50 <__mulsf3_pse+0x90>
    1e60:	fe 2b       	or	r31, r30
    1e62:	88 0f       	add	r24, r24
    1e64:	91 1d       	adc	r25, r1
    1e66:	96 95       	lsr	r25
    1e68:	87 95       	ror	r24
    1e6a:	97 f9       	bld	r25, 7
    1e6c:	08 95       	ret

00001e6e <__mulsi3>:
    1e6e:	db 01       	movw	r26, r22
    1e70:	8f 93       	push	r24
    1e72:	9f 93       	push	r25
    1e74:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__muluhisi3>
    1e78:	bf 91       	pop	r27
    1e7a:	af 91       	pop	r26
    1e7c:	a2 9f       	mul	r26, r18
    1e7e:	80 0d       	add	r24, r0
    1e80:	91 1d       	adc	r25, r1
    1e82:	a3 9f       	mul	r26, r19
    1e84:	90 0d       	add	r25, r0
    1e86:	b2 9f       	mul	r27, r18
    1e88:	90 0d       	add	r25, r0
    1e8a:	11 24       	eor	r1, r1
    1e8c:	08 95       	ret

00001e8e <__udivmodsi4>:
    1e8e:	a1 e2       	ldi	r26, 0x21	; 33
    1e90:	1a 2e       	mov	r1, r26
    1e92:	aa 1b       	sub	r26, r26
    1e94:	bb 1b       	sub	r27, r27
    1e96:	fd 01       	movw	r30, r26
    1e98:	0d c0       	rjmp	.+26     	; 0x1eb4 <__udivmodsi4_ep>

00001e9a <__udivmodsi4_loop>:
    1e9a:	aa 1f       	adc	r26, r26
    1e9c:	bb 1f       	adc	r27, r27
    1e9e:	ee 1f       	adc	r30, r30
    1ea0:	ff 1f       	adc	r31, r31
    1ea2:	a2 17       	cp	r26, r18
    1ea4:	b3 07       	cpc	r27, r19
    1ea6:	e4 07       	cpc	r30, r20
    1ea8:	f5 07       	cpc	r31, r21
    1eaa:	20 f0       	brcs	.+8      	; 0x1eb4 <__udivmodsi4_ep>
    1eac:	a2 1b       	sub	r26, r18
    1eae:	b3 0b       	sbc	r27, r19
    1eb0:	e4 0b       	sbc	r30, r20
    1eb2:	f5 0b       	sbc	r31, r21

00001eb4 <__udivmodsi4_ep>:
    1eb4:	66 1f       	adc	r22, r22
    1eb6:	77 1f       	adc	r23, r23
    1eb8:	88 1f       	adc	r24, r24
    1eba:	99 1f       	adc	r25, r25
    1ebc:	1a 94       	dec	r1
    1ebe:	69 f7       	brne	.-38     	; 0x1e9a <__udivmodsi4_loop>
    1ec0:	60 95       	com	r22
    1ec2:	70 95       	com	r23
    1ec4:	80 95       	com	r24
    1ec6:	90 95       	com	r25
    1ec8:	9b 01       	movw	r18, r22
    1eca:	ac 01       	movw	r20, r24
    1ecc:	bd 01       	movw	r22, r26
    1ece:	cf 01       	movw	r24, r30
    1ed0:	08 95       	ret

00001ed2 <__muluhisi3>:
    1ed2:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <__umulhisi3>
    1ed6:	a5 9f       	mul	r26, r21
    1ed8:	90 0d       	add	r25, r0
    1eda:	b4 9f       	mul	r27, r20
    1edc:	90 0d       	add	r25, r0
    1ede:	a4 9f       	mul	r26, r20
    1ee0:	80 0d       	add	r24, r0
    1ee2:	91 1d       	adc	r25, r1
    1ee4:	11 24       	eor	r1, r1
    1ee6:	08 95       	ret

00001ee8 <__umulhisi3>:
    1ee8:	a2 9f       	mul	r26, r18
    1eea:	b0 01       	movw	r22, r0
    1eec:	b3 9f       	mul	r27, r19
    1eee:	c0 01       	movw	r24, r0
    1ef0:	a3 9f       	mul	r26, r19
    1ef2:	70 0d       	add	r23, r0
    1ef4:	81 1d       	adc	r24, r1
    1ef6:	11 24       	eor	r1, r1
    1ef8:	91 1d       	adc	r25, r1
    1efa:	b2 9f       	mul	r27, r18
    1efc:	70 0d       	add	r23, r0
    1efe:	81 1d       	adc	r24, r1
    1f00:	11 24       	eor	r1, r1
    1f02:	91 1d       	adc	r25, r1
    1f04:	08 95       	ret

00001f06 <atof>:
    1f06:	66 27       	eor	r22, r22
    1f08:	77 27       	eor	r23, r23
    1f0a:	0c 94 97 0f 	jmp	0x1f2e	; 0x1f2e <strtod>

00001f0e <strcmp>:
    1f0e:	fb 01       	movw	r30, r22
    1f10:	dc 01       	movw	r26, r24
    1f12:	8d 91       	ld	r24, X+
    1f14:	01 90       	ld	r0, Z+
    1f16:	80 19       	sub	r24, r0
    1f18:	01 10       	cpse	r0, r1
    1f1a:	d9 f3       	breq	.-10     	; 0x1f12 <strcmp+0x4>
    1f1c:	99 0b       	sbc	r25, r25
    1f1e:	08 95       	ret

00001f20 <strcpy>:
    1f20:	fb 01       	movw	r30, r22
    1f22:	dc 01       	movw	r26, r24
    1f24:	01 90       	ld	r0, Z+
    1f26:	0d 92       	st	X+, r0
    1f28:	00 20       	and	r0, r0
    1f2a:	e1 f7       	brne	.-8      	; 0x1f24 <strcpy+0x4>
    1f2c:	08 95       	ret

00001f2e <strtod>:
    1f2e:	a0 e0       	ldi	r26, 0x00	; 0
    1f30:	b0 e0       	ldi	r27, 0x00	; 0
    1f32:	ed e9       	ldi	r30, 0x9D	; 157
    1f34:	ff e0       	ldi	r31, 0x0F	; 15
    1f36:	0c 94 0f 11 	jmp	0x221e	; 0x221e <__prologue_saves__+0xc>
    1f3a:	ec 01       	movw	r28, r24
    1f3c:	6b 01       	movw	r12, r22
    1f3e:	61 15       	cp	r22, r1
    1f40:	71 05       	cpc	r23, r1
    1f42:	19 f0       	breq	.+6      	; 0x1f4a <strtod+0x1c>
    1f44:	fb 01       	movw	r30, r22
    1f46:	91 83       	std	Z+1, r25	; 0x01
    1f48:	80 83       	st	Z, r24
    1f4a:	7e 01       	movw	r14, r28
    1f4c:	ff ef       	ldi	r31, 0xFF	; 255
    1f4e:	ef 1a       	sub	r14, r31
    1f50:	ff 0a       	sbc	r15, r31
    1f52:	08 81       	ld	r16, Y
    1f54:	80 2f       	mov	r24, r16
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	0e 94 e5 10 	call	0x21ca	; 0x21ca <isspace>
    1f5c:	89 2b       	or	r24, r25
    1f5e:	11 f0       	breq	.+4      	; 0x1f64 <strtod+0x36>
    1f60:	e7 01       	movw	r28, r14
    1f62:	f3 cf       	rjmp	.-26     	; 0x1f4a <strtod+0x1c>
    1f64:	0d 32       	cpi	r16, 0x2D	; 45
    1f66:	39 f4       	brne	.+14     	; 0x1f76 <strtod+0x48>
    1f68:	7e 01       	movw	r14, r28
    1f6a:	82 e0       	ldi	r24, 0x02	; 2
    1f6c:	e8 0e       	add	r14, r24
    1f6e:	f1 1c       	adc	r15, r1
    1f70:	09 81       	ldd	r16, Y+1	; 0x01
    1f72:	11 e0       	ldi	r17, 0x01	; 1
    1f74:	08 c0       	rjmp	.+16     	; 0x1f86 <strtod+0x58>
    1f76:	0b 32       	cpi	r16, 0x2B	; 43
    1f78:	29 f4       	brne	.+10     	; 0x1f84 <strtod+0x56>
    1f7a:	7e 01       	movw	r14, r28
    1f7c:	92 e0       	ldi	r25, 0x02	; 2
    1f7e:	e9 0e       	add	r14, r25
    1f80:	f1 1c       	adc	r15, r1
    1f82:	09 81       	ldd	r16, Y+1	; 0x01
    1f84:	10 e0       	ldi	r17, 0x00	; 0
    1f86:	e7 01       	movw	r28, r14
    1f88:	21 97       	sbiw	r28, 0x01	; 1
    1f8a:	43 e0       	ldi	r20, 0x03	; 3
    1f8c:	50 e0       	ldi	r21, 0x00	; 0
    1f8e:	6c e5       	ldi	r22, 0x5C	; 92
    1f90:	70 e0       	ldi	r23, 0x00	; 0
    1f92:	ce 01       	movw	r24, r28
    1f94:	0e 94 ee 10 	call	0x21dc	; 0x21dc <strncasecmp_P>
    1f98:	89 2b       	or	r24, r25
    1f9a:	c1 f4       	brne	.+48     	; 0x1fcc <strtod+0x9e>
    1f9c:	23 96       	adiw	r28, 0x03	; 3
    1f9e:	45 e0       	ldi	r20, 0x05	; 5
    1fa0:	50 e0       	ldi	r21, 0x00	; 0
    1fa2:	67 e5       	ldi	r22, 0x57	; 87
    1fa4:	70 e0       	ldi	r23, 0x00	; 0
    1fa6:	ce 01       	movw	r24, r28
    1fa8:	0e 94 ee 10 	call	0x21dc	; 0x21dc <strncasecmp_P>
    1fac:	89 2b       	or	r24, r25
    1fae:	09 f4       	brne	.+2      	; 0x1fb2 <strtod+0x84>
    1fb0:	25 96       	adiw	r28, 0x05	; 5
    1fb2:	c1 14       	cp	r12, r1
    1fb4:	d1 04       	cpc	r13, r1
    1fb6:	19 f0       	breq	.+6      	; 0x1fbe <strtod+0x90>
    1fb8:	f6 01       	movw	r30, r12
    1fba:	d1 83       	std	Z+1, r29	; 0x01
    1fbc:	c0 83       	st	Z, r28
    1fbe:	11 11       	cpse	r17, r1
    1fc0:	f6 c0       	rjmp	.+492    	; 0x21ae <strtod+0x280>
    1fc2:	60 e0       	ldi	r22, 0x00	; 0
    1fc4:	70 e0       	ldi	r23, 0x00	; 0
    1fc6:	80 e8       	ldi	r24, 0x80	; 128
    1fc8:	9f e7       	ldi	r25, 0x7F	; 127
    1fca:	fa c0       	rjmp	.+500    	; 0x21c0 <strtod+0x292>
    1fcc:	43 e0       	ldi	r20, 0x03	; 3
    1fce:	50 e0       	ldi	r21, 0x00	; 0
    1fd0:	64 e5       	ldi	r22, 0x54	; 84
    1fd2:	70 e0       	ldi	r23, 0x00	; 0
    1fd4:	ce 01       	movw	r24, r28
    1fd6:	0e 94 ee 10 	call	0x21dc	; 0x21dc <strncasecmp_P>
    1fda:	89 2b       	or	r24, r25
    1fdc:	59 f4       	brne	.+22     	; 0x1ff4 <strtod+0xc6>
    1fde:	c1 14       	cp	r12, r1
    1fe0:	d1 04       	cpc	r13, r1
    1fe2:	09 f4       	brne	.+2      	; 0x1fe6 <strtod+0xb8>
    1fe4:	e9 c0       	rjmp	.+466    	; 0x21b8 <strtod+0x28a>
    1fe6:	f2 e0       	ldi	r31, 0x02	; 2
    1fe8:	ef 0e       	add	r14, r31
    1fea:	f1 1c       	adc	r15, r1
    1fec:	f6 01       	movw	r30, r12
    1fee:	f1 82       	std	Z+1, r15	; 0x01
    1ff0:	e0 82       	st	Z, r14
    1ff2:	e2 c0       	rjmp	.+452    	; 0x21b8 <strtod+0x28a>
    1ff4:	20 e0       	ldi	r18, 0x00	; 0
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	a9 01       	movw	r20, r18
    1ffa:	c0 e0       	ldi	r28, 0x00	; 0
    1ffc:	d0 e0       	ldi	r29, 0x00	; 0
    1ffe:	f7 01       	movw	r30, r14
    2000:	80 ed       	ldi	r24, 0xD0	; 208
    2002:	a8 2e       	mov	r10, r24
    2004:	a0 0e       	add	r10, r16
    2006:	89 e0       	ldi	r24, 0x09	; 9
    2008:	8a 15       	cp	r24, r10
    200a:	30 f1       	brcs	.+76     	; 0x2058 <strtod+0x12a>
    200c:	91 2f       	mov	r25, r17
    200e:	92 60       	ori	r25, 0x02	; 2
    2010:	b9 2e       	mov	r11, r25
    2012:	81 2f       	mov	r24, r17
    2014:	88 70       	andi	r24, 0x08	; 8
    2016:	12 ff       	sbrs	r17, 2
    2018:	04 c0       	rjmp	.+8      	; 0x2022 <strtod+0xf4>
    201a:	81 11       	cpse	r24, r1
    201c:	24 c0       	rjmp	.+72     	; 0x2066 <strtod+0x138>
    201e:	21 96       	adiw	r28, 0x01	; 1
    2020:	22 c0       	rjmp	.+68     	; 0x2066 <strtod+0x138>
    2022:	81 11       	cpse	r24, r1
    2024:	21 97       	sbiw	r28, 0x01	; 1
    2026:	a5 e0       	ldi	r26, 0x05	; 5
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__muluhisi3>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	88 0f       	add	r24, r24
    2034:	99 1f       	adc	r25, r25
    2036:	aa 1f       	adc	r26, r26
    2038:	bb 1f       	adc	r27, r27
    203a:	9c 01       	movw	r18, r24
    203c:	ad 01       	movw	r20, r26
    203e:	2a 0d       	add	r18, r10
    2040:	31 1d       	adc	r19, r1
    2042:	41 1d       	adc	r20, r1
    2044:	51 1d       	adc	r21, r1
    2046:	28 39       	cpi	r18, 0x98	; 152
    2048:	89 e9       	ldi	r24, 0x99	; 153
    204a:	38 07       	cpc	r19, r24
    204c:	48 07       	cpc	r20, r24
    204e:	89 e1       	ldi	r24, 0x19	; 25
    2050:	58 07       	cpc	r21, r24
    2052:	48 f0       	brcs	.+18     	; 0x2066 <strtod+0x138>
    2054:	16 60       	ori	r17, 0x06	; 6
    2056:	06 c0       	rjmp	.+12     	; 0x2064 <strtod+0x136>
    2058:	9e ef       	ldi	r25, 0xFE	; 254
    205a:	a9 12       	cpse	r10, r25
    205c:	0a c0       	rjmp	.+20     	; 0x2072 <strtod+0x144>
    205e:	13 fd       	sbrc	r17, 3
    2060:	40 c0       	rjmp	.+128    	; 0x20e2 <strtod+0x1b4>
    2062:	18 60       	ori	r17, 0x08	; 8
    2064:	b1 2e       	mov	r11, r17
    2066:	8f ef       	ldi	r24, 0xFF	; 255
    2068:	e8 1a       	sub	r14, r24
    206a:	f8 0a       	sbc	r15, r24
    206c:	00 81       	ld	r16, Z
    206e:	1b 2d       	mov	r17, r11
    2070:	c6 cf       	rjmp	.-116    	; 0x1ffe <strtod+0xd0>
    2072:	80 2f       	mov	r24, r16
    2074:	8f 7d       	andi	r24, 0xDF	; 223
    2076:	85 34       	cpi	r24, 0x45	; 69
    2078:	a1 f5       	brne	.+104    	; 0x20e2 <strtod+0x1b4>
    207a:	80 81       	ld	r24, Z
    207c:	8d 32       	cpi	r24, 0x2D	; 45
    207e:	11 f4       	brne	.+4      	; 0x2084 <strtod+0x156>
    2080:	10 61       	ori	r17, 0x10	; 16
    2082:	06 c0       	rjmp	.+12     	; 0x2090 <strtod+0x162>
    2084:	8b 32       	cpi	r24, 0x2B	; 43
    2086:	21 f0       	breq	.+8      	; 0x2090 <strtod+0x162>
    2088:	31 96       	adiw	r30, 0x01	; 1
    208a:	61 e0       	ldi	r22, 0x01	; 1
    208c:	70 e0       	ldi	r23, 0x00	; 0
    208e:	04 c0       	rjmp	.+8      	; 0x2098 <strtod+0x16a>
    2090:	81 81       	ldd	r24, Z+1	; 0x01
    2092:	32 96       	adiw	r30, 0x02	; 2
    2094:	62 e0       	ldi	r22, 0x02	; 2
    2096:	70 e0       	ldi	r23, 0x00	; 0
    2098:	80 53       	subi	r24, 0x30	; 48
    209a:	8a 30       	cpi	r24, 0x0A	; 10
    209c:	18 f0       	brcs	.+6      	; 0x20a4 <strtod+0x176>
    209e:	e6 1b       	sub	r30, r22
    20a0:	f7 0b       	sbc	r31, r23
    20a2:	1f c0       	rjmp	.+62     	; 0x20e2 <strtod+0x1b4>
    20a4:	60 e0       	ldi	r22, 0x00	; 0
    20a6:	70 e0       	ldi	r23, 0x00	; 0
    20a8:	60 38       	cpi	r22, 0x80	; 128
    20aa:	9c e0       	ldi	r25, 0x0C	; 12
    20ac:	79 07       	cpc	r23, r25
    20ae:	5c f4       	brge	.+22     	; 0x20c6 <strtod+0x198>
    20b0:	db 01       	movw	r26, r22
    20b2:	aa 0f       	add	r26, r26
    20b4:	bb 1f       	adc	r27, r27
    20b6:	aa 0f       	add	r26, r26
    20b8:	bb 1f       	adc	r27, r27
    20ba:	6a 0f       	add	r22, r26
    20bc:	7b 1f       	adc	r23, r27
    20be:	66 0f       	add	r22, r22
    20c0:	77 1f       	adc	r23, r23
    20c2:	68 0f       	add	r22, r24
    20c4:	71 1d       	adc	r23, r1
    20c6:	31 96       	adiw	r30, 0x01	; 1
    20c8:	df 01       	movw	r26, r30
    20ca:	11 97       	sbiw	r26, 0x01	; 1
    20cc:	8c 91       	ld	r24, X
    20ce:	80 53       	subi	r24, 0x30	; 48
    20d0:	8a 30       	cpi	r24, 0x0A	; 10
    20d2:	50 f3       	brcs	.-44     	; 0x20a8 <strtod+0x17a>
    20d4:	14 ff       	sbrs	r17, 4
    20d6:	03 c0       	rjmp	.+6      	; 0x20de <strtod+0x1b0>
    20d8:	71 95       	neg	r23
    20da:	61 95       	neg	r22
    20dc:	71 09       	sbc	r23, r1
    20de:	c6 0f       	add	r28, r22
    20e0:	d7 1f       	adc	r29, r23
    20e2:	11 ff       	sbrs	r17, 1
    20e4:	08 c0       	rjmp	.+16     	; 0x20f6 <strtod+0x1c8>
    20e6:	c1 14       	cp	r12, r1
    20e8:	d1 04       	cpc	r13, r1
    20ea:	29 f0       	breq	.+10     	; 0x20f6 <strtod+0x1c8>
    20ec:	cf 01       	movw	r24, r30
    20ee:	01 97       	sbiw	r24, 0x01	; 1
    20f0:	f6 01       	movw	r30, r12
    20f2:	91 83       	std	Z+1, r25	; 0x01
    20f4:	80 83       	st	Z, r24
    20f6:	ca 01       	movw	r24, r20
    20f8:	b9 01       	movw	r22, r18
    20fa:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__floatunsisf>
    20fe:	21 2f       	mov	r18, r17
    2100:	23 70       	andi	r18, 0x03	; 3
    2102:	23 30       	cpi	r18, 0x03	; 3
    2104:	19 f0       	breq	.+6      	; 0x210c <strtod+0x1de>
    2106:	4b 01       	movw	r8, r22
    2108:	5c 01       	movw	r10, r24
    210a:	06 c0       	rjmp	.+12     	; 0x2118 <strtod+0x1ea>
    210c:	4b 01       	movw	r8, r22
    210e:	5c 01       	movw	r10, r24
    2110:	b7 fa       	bst	r11, 7
    2112:	b0 94       	com	r11
    2114:	b7 f8       	bld	r11, 7
    2116:	b0 94       	com	r11
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	a9 01       	movw	r20, r18
    211e:	c5 01       	movw	r24, r10
    2120:	b4 01       	movw	r22, r8
    2122:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <__cmpsf2>
    2126:	88 23       	and	r24, r24
    2128:	09 f4       	brne	.+2      	; 0x212c <strtod+0x1fe>
    212a:	3e c0       	rjmp	.+124    	; 0x21a8 <strtod+0x27a>
    212c:	d7 ff       	sbrs	r29, 7
    212e:	06 c0       	rjmp	.+12     	; 0x213c <strtod+0x20e>
    2130:	d1 95       	neg	r29
    2132:	c1 95       	neg	r28
    2134:	d1 09       	sbc	r29, r1
    2136:	03 e7       	ldi	r16, 0x73	; 115
    2138:	10 e0       	ldi	r17, 0x00	; 0
    213a:	02 c0       	rjmp	.+4      	; 0x2140 <strtod+0x212>
    213c:	0b e8       	ldi	r16, 0x8B	; 139
    213e:	10 e0       	ldi	r17, 0x00	; 0
    2140:	68 01       	movw	r12, r16
    2142:	f8 e1       	ldi	r31, 0x18	; 24
    2144:	cf 1a       	sub	r12, r31
    2146:	d1 08       	sbc	r13, r1
    2148:	90 e2       	ldi	r25, 0x20	; 32
    214a:	e9 2e       	mov	r14, r25
    214c:	f1 2c       	mov	r15, r1
    214e:	ce 15       	cp	r28, r14
    2150:	df 05       	cpc	r29, r15
    2152:	74 f0       	brlt	.+28     	; 0x2170 <strtod+0x242>
    2154:	f8 01       	movw	r30, r16
    2156:	25 91       	lpm	r18, Z+
    2158:	35 91       	lpm	r19, Z+
    215a:	45 91       	lpm	r20, Z+
    215c:	54 91       	lpm	r21, Z
    215e:	c5 01       	movw	r24, r10
    2160:	b4 01       	movw	r22, r8
    2162:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <__mulsf3>
    2166:	4b 01       	movw	r8, r22
    2168:	5c 01       	movw	r10, r24
    216a:	ce 19       	sub	r28, r14
    216c:	df 09       	sbc	r29, r15
    216e:	ef cf       	rjmp	.-34     	; 0x214e <strtod+0x220>
    2170:	04 50       	subi	r16, 0x04	; 4
    2172:	11 09       	sbc	r17, r1
    2174:	f5 94       	asr	r15
    2176:	e7 94       	ror	r14
    2178:	0c 15       	cp	r16, r12
    217a:	1d 05       	cpc	r17, r13
    217c:	41 f7       	brne	.-48     	; 0x214e <strtod+0x220>
    217e:	8a 2d       	mov	r24, r10
    2180:	88 0f       	add	r24, r24
    2182:	8b 2d       	mov	r24, r11
    2184:	88 1f       	adc	r24, r24
    2186:	8f 3f       	cpi	r24, 0xFF	; 255
    2188:	49 f0       	breq	.+18     	; 0x219c <strtod+0x26e>
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	a9 01       	movw	r20, r18
    2190:	c5 01       	movw	r24, r10
    2192:	b4 01       	movw	r22, r8
    2194:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <__cmpsf2>
    2198:	81 11       	cpse	r24, r1
    219a:	06 c0       	rjmp	.+12     	; 0x21a8 <strtod+0x27a>
    219c:	82 e2       	ldi	r24, 0x22	; 34
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	90 93 f8 02 	sts	0x02F8, r25	; 0x8002f8 <errno+0x1>
    21a4:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <errno>
    21a8:	c5 01       	movw	r24, r10
    21aa:	b4 01       	movw	r22, r8
    21ac:	09 c0       	rjmp	.+18     	; 0x21c0 <strtod+0x292>
    21ae:	60 e0       	ldi	r22, 0x00	; 0
    21b0:	70 e0       	ldi	r23, 0x00	; 0
    21b2:	80 e8       	ldi	r24, 0x80	; 128
    21b4:	9f ef       	ldi	r25, 0xFF	; 255
    21b6:	04 c0       	rjmp	.+8      	; 0x21c0 <strtod+0x292>
    21b8:	60 e0       	ldi	r22, 0x00	; 0
    21ba:	70 e0       	ldi	r23, 0x00	; 0
    21bc:	80 ec       	ldi	r24, 0xC0	; 192
    21be:	9f e7       	ldi	r25, 0x7F	; 127
    21c0:	cd b7       	in	r28, 0x3d	; 61
    21c2:	de b7       	in	r29, 0x3e	; 62
    21c4:	ec e0       	ldi	r30, 0x0C	; 12
    21c6:	0c 94 2b 11 	jmp	0x2256	; 0x2256 <__epilogue_restores__+0xc>

000021ca <isspace>:
    21ca:	91 11       	cpse	r25, r1
    21cc:	0c 94 06 11 	jmp	0x220c	; 0x220c <__ctype_isfalse>
    21d0:	80 32       	cpi	r24, 0x20	; 32
    21d2:	19 f0       	breq	.+6      	; 0x21da <isspace+0x10>
    21d4:	89 50       	subi	r24, 0x09	; 9
    21d6:	85 50       	subi	r24, 0x05	; 5
    21d8:	c8 f7       	brcc	.-14     	; 0x21cc <isspace+0x2>
    21da:	08 95       	ret

000021dc <strncasecmp_P>:
    21dc:	fb 01       	movw	r30, r22
    21de:	dc 01       	movw	r26, r24
    21e0:	41 50       	subi	r20, 0x01	; 1
    21e2:	50 40       	sbci	r21, 0x00	; 0
    21e4:	88 f0       	brcs	.+34     	; 0x2208 <strncasecmp_P+0x2c>
    21e6:	8d 91       	ld	r24, X+
    21e8:	81 34       	cpi	r24, 0x41	; 65
    21ea:	1c f0       	brlt	.+6      	; 0x21f2 <strncasecmp_P+0x16>
    21ec:	8b 35       	cpi	r24, 0x5B	; 91
    21ee:	0c f4       	brge	.+2      	; 0x21f2 <strncasecmp_P+0x16>
    21f0:	80 5e       	subi	r24, 0xE0	; 224
    21f2:	65 91       	lpm	r22, Z+
    21f4:	61 34       	cpi	r22, 0x41	; 65
    21f6:	1c f0       	brlt	.+6      	; 0x21fe <strncasecmp_P+0x22>
    21f8:	6b 35       	cpi	r22, 0x5B	; 91
    21fa:	0c f4       	brge	.+2      	; 0x21fe <strncasecmp_P+0x22>
    21fc:	60 5e       	subi	r22, 0xE0	; 224
    21fe:	86 1b       	sub	r24, r22
    2200:	61 11       	cpse	r22, r1
    2202:	71 f3       	breq	.-36     	; 0x21e0 <strncasecmp_P+0x4>
    2204:	99 0b       	sbc	r25, r25
    2206:	08 95       	ret
    2208:	88 1b       	sub	r24, r24
    220a:	fc cf       	rjmp	.-8      	; 0x2204 <strncasecmp_P+0x28>

0000220c <__ctype_isfalse>:
    220c:	99 27       	eor	r25, r25
    220e:	88 27       	eor	r24, r24

00002210 <__ctype_istrue>:
    2210:	08 95       	ret

00002212 <__prologue_saves__>:
    2212:	2f 92       	push	r2
    2214:	3f 92       	push	r3
    2216:	4f 92       	push	r4
    2218:	5f 92       	push	r5
    221a:	6f 92       	push	r6
    221c:	7f 92       	push	r7
    221e:	8f 92       	push	r8
    2220:	9f 92       	push	r9
    2222:	af 92       	push	r10
    2224:	bf 92       	push	r11
    2226:	cf 92       	push	r12
    2228:	df 92       	push	r13
    222a:	ef 92       	push	r14
    222c:	ff 92       	push	r15
    222e:	0f 93       	push	r16
    2230:	1f 93       	push	r17
    2232:	cf 93       	push	r28
    2234:	df 93       	push	r29
    2236:	cd b7       	in	r28, 0x3d	; 61
    2238:	de b7       	in	r29, 0x3e	; 62
    223a:	ca 1b       	sub	r28, r26
    223c:	db 0b       	sbc	r29, r27
    223e:	0f b6       	in	r0, 0x3f	; 63
    2240:	f8 94       	cli
    2242:	de bf       	out	0x3e, r29	; 62
    2244:	0f be       	out	0x3f, r0	; 63
    2246:	cd bf       	out	0x3d, r28	; 61
    2248:	09 94       	ijmp

0000224a <__epilogue_restores__>:
    224a:	2a 88       	ldd	r2, Y+18	; 0x12
    224c:	39 88       	ldd	r3, Y+17	; 0x11
    224e:	48 88       	ldd	r4, Y+16	; 0x10
    2250:	5f 84       	ldd	r5, Y+15	; 0x0f
    2252:	6e 84       	ldd	r6, Y+14	; 0x0e
    2254:	7d 84       	ldd	r7, Y+13	; 0x0d
    2256:	8c 84       	ldd	r8, Y+12	; 0x0c
    2258:	9b 84       	ldd	r9, Y+11	; 0x0b
    225a:	aa 84       	ldd	r10, Y+10	; 0x0a
    225c:	b9 84       	ldd	r11, Y+9	; 0x09
    225e:	c8 84       	ldd	r12, Y+8	; 0x08
    2260:	df 80       	ldd	r13, Y+7	; 0x07
    2262:	ee 80       	ldd	r14, Y+6	; 0x06
    2264:	fd 80       	ldd	r15, Y+5	; 0x05
    2266:	0c 81       	ldd	r16, Y+4	; 0x04
    2268:	1b 81       	ldd	r17, Y+3	; 0x03
    226a:	aa 81       	ldd	r26, Y+2	; 0x02
    226c:	b9 81       	ldd	r27, Y+1	; 0x01
    226e:	ce 0f       	add	r28, r30
    2270:	d1 1d       	adc	r29, r1
    2272:	0f b6       	in	r0, 0x3f	; 63
    2274:	f8 94       	cli
    2276:	de bf       	out	0x3e, r29	; 62
    2278:	0f be       	out	0x3f, r0	; 63
    227a:	cd bf       	out	0x3d, r28	; 61
    227c:	ed 01       	movw	r28, r26
    227e:	08 95       	ret

00002280 <_exit>:
    2280:	f8 94       	cli

00002282 <__stop_program>:
    2282:	ff cf       	rjmp	.-2      	; 0x2282 <__stop_program>
