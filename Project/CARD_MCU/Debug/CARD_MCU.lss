
CARD_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000172  00800060  000008c6  0000095a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000042  008001d2  008001d2  00000acc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000acc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000afc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e8  00000000  00000000  00000b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002abd  00000000  00000000  00000e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001007  00000000  00000000  000038dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001981  00000000  00000000  000048e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000664  00000000  00000000  00006268  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ef4  00000000  00000000  000068cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a20  00000000  00000000  000077c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000248  00000000  00000000  000091e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 ca 03 	jmp	0x794	; 0x794 <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ec       	ldi	r30, 0xC6	; 198
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3d       	cpi	r26, 0xD2	; 210
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	a2 ed       	ldi	r26, 0xD2	; 210
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 31       	cpi	r26, 0x14	; 20
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <main>
  8a:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_Init>:
* 											Function Implementation
************************************************************************************************************/

void APP_Init(void)
{
	(void)HUSART_enInit();
  92:	0e 94 be 02 	call	0x57c	; 0x57c <HUSART_enInit>
	HSPI_SlaveInit();
  96:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <HSPI_SlaveInit>
	eeprom_init();
  9a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <eeprom_init>
	sei();
  9e:	78 94       	sei
  a0:	08 95       	ret

000000a2 <APP_Start>:

void APP_Start(void)
{
	// 	APP_terminalPanGet(pan_arr);
	// 	HUSART_sendSTRING(pan_arr);
	switch(u8_g_CardState)
  a2:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <__data_end>
  a6:	82 30       	cpi	r24, 0x02	; 2
  a8:	09 f4       	brne	.+2      	; 0xac <APP_Start+0xa>
  aa:	4e c0       	rjmp	.+156    	; 0x148 <APP_Start+0xa6>
  ac:	28 f4       	brcc	.+10     	; 0xb8 <APP_Start+0x16>
  ae:	88 23       	and	r24, r24
  b0:	51 f0       	breq	.+20     	; 0xc6 <APP_Start+0x24>
  b2:	81 30       	cpi	r24, 0x01	; 1
  b4:	e1 f1       	breq	.+120    	; 0x12e <APP_Start+0x8c>
  b6:	08 95       	ret
  b8:	83 30       	cpi	r24, 0x03	; 3
  ba:	09 f4       	brne	.+2      	; 0xbe <APP_Start+0x1c>
  bc:	57 c0       	rjmp	.+174    	; 0x16c <APP_Start+0xca>
  be:	84 30       	cpi	r24, 0x04	; 4
  c0:	09 f4       	brne	.+2      	; 0xc4 <APP_Start+0x22>
  c2:	6f c0       	rjmp	.+222    	; 0x1a2 <APP_Start+0x100>
  c4:	08 95       	ret
	{
		case CardGetMode:
		{
			u8_g_EepromFlag = eeprom_read_byte(0x100);
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	0e 94 0e 02 	call	0x41c	; 0x41c <eeprom_read_byte>
  ce:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <u8_g_EepromFlag>
			HUSART_enSendData(u8_g_EepromFlag);
  d2:	0e 94 c3 02 	call	0x586	; 0x586 <HUSART_enSendData>
			if(u8_g_EepromFlag == 0xFF) u8_g_CardState = CardProgMode_GetPan;
  d6:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <u8_g_EepromFlag>
  da:	8f 3f       	cpi	r24, 0xFF	; 255
  dc:	21 f4       	brne	.+8      	; 0xe6 <APP_Start+0x44>
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <__data_end>
  e4:	08 95       	ret
			else
			{
				HUSART_sendSTRING("Please press 1 for entering user mode and 2 for programming mode:");
  e6:	80 e7       	ldi	r24, 0x70	; 112
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <HUSART_sendSTRING>
				while(HUSART_enRecieveData(&u8_gs_ModeSelect));
  ee:	87 ee       	ldi	r24, 0xE7	; 231
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	0e 94 c8 02 	call	0x590	; 0x590 <HUSART_enRecieveData>
  f6:	81 11       	cpse	r24, r1
  f8:	fa cf       	rjmp	.-12     	; 0xee <APP_Start+0x4c>
				HUSART_enSendData(u8_gs_ModeSelect);
  fa:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <u8_gs_ModeSelect>
  fe:	0e 94 c3 02 	call	0x586	; 0x586 <HUSART_enSendData>
				HUSART_enSendData('\n\r');
 102:	8d e0       	ldi	r24, 0x0D	; 13
 104:	0e 94 c3 02 	call	0x586	; 0x586 <HUSART_enSendData>
				if('1' == u8_gs_ModeSelect)	u8_g_CardState = CardUserMode;
 108:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <u8_gs_ModeSelect>
 10c:	81 33       	cpi	r24, 0x31	; 49
 10e:	21 f4       	brne	.+8      	; 0x118 <APP_Start+0x76>
 110:	83 e0       	ldi	r24, 0x03	; 3
 112:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <__data_end>
 116:	08 95       	ret
				else if('2' == u8_gs_ModeSelect) u8_g_CardState = CardProgMode_GetPan;
 118:	82 33       	cpi	r24, 0x32	; 50
 11a:	21 f4       	brne	.+8      	; 0x124 <APP_Start+0x82>
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <__data_end>
 122:	08 95       	ret
				else HUSART_sendSTRING("Invalid Choice, ");
 124:	82 eb       	ldi	r24, 0xB2	; 178
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <HUSART_sendSTRING>
 12c:	08 95       	ret
			}
			break;
		}
		case CardProgMode_GetPan:
		{
			u8_g_PanValid = APP_terminalPanGet(pan_arr);
 12e:	8d ef       	ldi	r24, 0xFD	; 253
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	0e 94 18 01 	call	0x230	; 0x230 <APP_terminalPanGet>
 136:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <u8_g_PanValid>
			if(PANGET_OK == u8_g_PanValid) u8_g_CardState = CardProgMode_GetPin;
 13a:	81 30       	cpi	r24, 0x01	; 1
 13c:	09 f0       	breq	.+2      	; 0x140 <APP_Start+0x9e>
 13e:	4d c0       	rjmp	.+154    	; 0x1da <APP_Start+0x138>
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <__data_end>
 146:	08 95       	ret
			break;
		}
		case CardProgMode_GetPin:
		{
			if(CARD_MatchPINs() == PIN_Match_OK)
 148:	0e 94 a0 01 	call	0x340	; 0x340 <CARD_MatchPINs>
 14c:	81 30       	cpi	r24, 0x01	; 1
 14e:	51 f4       	brne	.+20     	; 0x164 <APP_Start+0xc2>
			{
				SaveCardData(pan_arr,pin_arr);
 150:	69 ee       	ldi	r22, 0xE9	; 233
 152:	71 e0       	ldi	r23, 0x01	; 1
 154:	8d ef       	ldi	r24, 0xFD	; 253
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	0e 94 42 01 	call	0x284	; 0x284 <SaveCardData>
				u8_g_CardState = CardUserMode;
 15c:	83 e0       	ldi	r24, 0x03	; 3
 15e:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <__data_end>
 162:	08 95       	ret
			}
			else u8_g_CardState = CardProgMode_GetPin;
 164:	82 e0       	ldi	r24, 0x02	; 2
 166:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <__data_end>
 16a:	08 95       	ret
			break;
		}
		case CardUserMode:
		{
			HUSART_sendSTRING("\n\r------------- User Mode -------------\n");
 16c:	83 ec       	ldi	r24, 0xC3	; 195
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <HUSART_sendSTRING>
			//_delay_ms(5000);
			/* Trigger ATM */
			HSPI_SlaveRequest(pin_arr, PIN_LENGTH);
 174:	65 e0       	ldi	r22, 0x05	; 5
 176:	89 ee       	ldi	r24, 0xE9	; 233
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	0e 94 aa 02 	call	0x554	; 0x554 <HSPI_SlaveRequest>
			
			/* Get PIN from EEPROM to prepare data in SPI buffer */
			ReadCardData(pan_arr,pin_arr);
 17e:	69 ee       	ldi	r22, 0xE9	; 233
 180:	71 e0       	ldi	r23, 0x01	; 1
 182:	8d ef       	ldi	r24, 0xFD	; 253
 184:	91 e0       	ldi	r25, 0x01	; 1
 186:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <ReadCardData>
			HUSART_sendSTRING(pan_arr);
 18a:	8d ef       	ldi	r24, 0xFD	; 253
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <HUSART_sendSTRING>
			HUSART_sendSTRING(pin_arr);
 192:	89 ee       	ldi	r24, 0xE9	; 233
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <HUSART_sendSTRING>
			u8_g_CardState = CardCommMode;
 19a:	84 e0       	ldi	r24, 0x04	; 4
 19c:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <__data_end>
			break;
 1a0:	08 95       	ret
		}
		case CardCommMode:
		{
			if(CARD_PIN_REQUEST == u8_g_SlaveReceive)
 1a2:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <u8_g_SlaveReceive>
 1a6:	80 35       	cpi	r24, 0x50	; 80
 1a8:	41 f4       	brne	.+16     	; 0x1ba <APP_Start+0x118>
			{
				u8_g_SlaveReceive = 0;
 1aa:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <u8_g_SlaveReceive>
				HSPI_SlaveSetData(pin_arr, PIN_LENGTH);
 1ae:	65 e0       	ldi	r22, 0x05	; 5
 1b0:	89 ee       	ldi	r24, 0xE9	; 233
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	0e 94 b5 02 	call	0x56a	; 0x56a <HSPI_SlaveSetData>
 1b8:	08 95       	ret
			}
			else if(CARD_PAN_REQUEST == u8_g_SlaveReceive)
 1ba:	87 34       	cpi	r24, 0x47	; 71
 1bc:	41 f4       	brne	.+16     	; 0x1ce <APP_Start+0x12c>
			{
				u8_g_SlaveReceive = 0;
 1be:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <u8_g_SlaveReceive>
				HSPI_SlaveSetData(pan_arr, PAN_LENGTH);
 1c2:	64 e1       	ldi	r22, 0x14	; 20
 1c4:	8d ef       	ldi	r24, 0xFD	; 253
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	0e 94 b5 02 	call	0x56a	; 0x56a <HSPI_SlaveSetData>
 1cc:	08 95       	ret
			}
			else if(ATM_REQUEST_EJECTED == u8_g_SlaveReceive)
 1ce:	85 34       	cpi	r24, 0x45	; 69
 1d0:	21 f4       	brne	.+8      	; 0x1da <APP_Start+0x138>
			{
				u8_g_SlaveReceive = 0;
 1d2:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <u8_g_SlaveReceive>
				u8_g_CardState = CardGetMode;
 1d6:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <__data_end>
 1da:	08 95       	ret

000001dc <APP_terminalPinGet>:
 * FUNCTION			: APP_terminalPinGet
 * DESCRIPTION		: Get pin from User within terminal and doing some validation
 * RETURN			: en_terminalPinGetStatus_t {PINGET_NOK or PINGET_OK}
 */
en_terminalPinGetStatus_t APP_terminalPinGet(Uchar8_t* arr)
{
 1dc:	0f 93       	push	r16
 1de:	1f 93       	push	r17
 1e0:	cf 93       	push	r28
 1e2:	8c 01       	movw	r16, r24
	en_terminalPinGetStatus_t errorStatus = PINGET_OK;

	Uchar8_t counter = 0, flag = 0;
	HUSART_receiveSTRING(arr, 5);
 1e4:	65 e0       	ldi	r22, 0x05	; 5
 1e6:	0e 94 d5 02 	call	0x5aa	; 0x5aa <HUSART_receiveSTRING>
 */
en_terminalPinGetStatus_t APP_terminalPinGet(Uchar8_t* arr)
{
	en_terminalPinGetStatus_t errorStatus = PINGET_OK;

	Uchar8_t counter = 0, flag = 0;
 1ea:	c0 e0       	ldi	r28, 0x00	; 0
	HUSART_receiveSTRING(arr, 5);
	while(arr[counter] != null)
 1ec:	0c c0       	rjmp	.+24     	; 0x206 <APP_terminalPinGet+0x2a>
	{
		if(arr[counter] >= '0' && arr[counter] <= '9')
 1ee:	80 53       	subi	r24, 0x30	; 48
 1f0:	8a 30       	cpi	r24, 0x0A	; 10
 1f2:	10 f4       	brcc	.+4      	; 0x1f8 <APP_terminalPinGet+0x1c>
		{
			counter++;
 1f4:	cf 5f       	subi	r28, 0xFF	; 255
 1f6:	07 c0       	rjmp	.+14     	; 0x206 <APP_terminalPinGet+0x2a>
		}
		else
		{
			HUSART_sendSTRING( (Uchar8_t*) "\rNot numeric ");
 1f8:	8c ee       	ldi	r24, 0xEC	; 236
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <HUSART_sendSTRING>
			flag = 1;
 200:	91 e0       	ldi	r25, 0x01	; 1
			errorStatus = PINGET_NOK;
 202:	80 e0       	ldi	r24, 0x00	; 0
			break;
 204:	08 c0       	rjmp	.+16     	; 0x216 <APP_terminalPinGet+0x3a>
{
	en_terminalPinGetStatus_t errorStatus = PINGET_OK;

	Uchar8_t counter = 0, flag = 0;
	HUSART_receiveSTRING(arr, 5);
	while(arr[counter] != null)
 206:	f8 01       	movw	r30, r16
 208:	ec 0f       	add	r30, r28
 20a:	f1 1d       	adc	r31, r1
 20c:	80 81       	ld	r24, Z
 20e:	81 11       	cpse	r24, r1
 210:	ee cf       	rjmp	.-36     	; 0x1ee <APP_terminalPinGet+0x12>
 */
en_terminalPinGetStatus_t APP_terminalPinGet(Uchar8_t* arr)
{
	en_terminalPinGetStatus_t errorStatus = PINGET_OK;

	Uchar8_t counter = 0, flag = 0;
 212:	90 e0       	ldi	r25, 0x00	; 0
 * DESCRIPTION		: Get pin from User within terminal and doing some validation
 * RETURN			: en_terminalPinGetStatus_t {PINGET_NOK or PINGET_OK}
 */
en_terminalPinGetStatus_t APP_terminalPinGet(Uchar8_t* arr)
{
	en_terminalPinGetStatus_t errorStatus = PINGET_OK;
 214:	81 e0       	ldi	r24, 0x01	; 1
			flag = 1;
			errorStatus = PINGET_NOK;
			break;
		}
	}
	if(counter < 4 && flag == 0)
 216:	c4 30       	cpi	r28, 0x04	; 4
 218:	38 f4       	brcc	.+14     	; 0x228 <APP_terminalPinGet+0x4c>
 21a:	91 11       	cpse	r25, r1
 21c:	05 c0       	rjmp	.+10     	; 0x228 <APP_terminalPinGet+0x4c>
	{
		HUSART_sendSTRING( (Uchar8_t*) "\rbelow 4 dig ");
 21e:	8a ef       	ldi	r24, 0xFA	; 250
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <HUSART_sendSTRING>
		errorStatus = PINGET_NOK;
 226:	80 e0       	ldi	r24, 0x00	; 0
	}
	return errorStatus;
}
 228:	cf 91       	pop	r28
 22a:	1f 91       	pop	r17
 22c:	0f 91       	pop	r16
 22e:	08 95       	ret

00000230 <APP_terminalPanGet>:
 * FUNCTION			: APP_terminalPanGet
 * DESCRIPTION		: Get pan from User within terminal and doing some validation
 * RETURN			: en_terminalPanGetStatus_t {PANGET_NOK or PANGET_OK}
 */
en_terminalPanGetStatus_t APP_terminalPanGet(Uchar8_t* arr)
{
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	ec 01       	movw	r28, r24
	Uchar8_t loc_counter=0;
	HUSART_sendSTRING((Uchar8_t*)"\n\rEnter Card Pan : ");
 236:	88 e0       	ldi	r24, 0x08	; 8
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <HUSART_sendSTRING>
	HUSART_receiveSTRING(arr,20);
 23e:	64 e1       	ldi	r22, 0x14	; 20
 240:	ce 01       	movw	r24, r28
 242:	0e 94 d5 02 	call	0x5aa	; 0x5aa <HUSART_receiveSTRING>
 * DESCRIPTION		: Get pan from User within terminal and doing some validation
 * RETURN			: en_terminalPanGetStatus_t {PANGET_NOK or PANGET_OK}
 */
en_terminalPanGetStatus_t APP_terminalPanGet(Uchar8_t* arr)
{
	Uchar8_t loc_counter=0;
 246:	90 e0       	ldi	r25, 0x00	; 0
	HUSART_sendSTRING((Uchar8_t*)"\n\rEnter Card Pan : ");
	HUSART_receiveSTRING(arr,20);
	while(arr[loc_counter] != null)
 248:	0b c0       	rjmp	.+22     	; 0x260 <APP_terminalPanGet+0x30>
	{
		if(arr[loc_counter] >= '0' && arr[loc_counter] <= '9')
 24a:	80 53       	subi	r24, 0x30	; 48
 24c:	8a 30       	cpi	r24, 0x0A	; 10
 24e:	10 f4       	brcc	.+4      	; 0x254 <APP_terminalPanGet+0x24>
		{
			loc_counter++;
 250:	9f 5f       	subi	r25, 0xFF	; 255
 252:	06 c0       	rjmp	.+12     	; 0x260 <APP_terminalPanGet+0x30>
		}
		else
		{
			HUSART_sendSTRING((Uchar8_t*) "\n\rInvalid Pan Number - must contain Numbers only");
 254:	8c e1       	ldi	r24, 0x1C	; 28
 256:	91 e0       	ldi	r25, 0x01	; 1
 258:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <HUSART_sendSTRING>
			return PANGET_NOK;
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	0f c0       	rjmp	.+30     	; 0x27e <APP_terminalPanGet+0x4e>
en_terminalPanGetStatus_t APP_terminalPanGet(Uchar8_t* arr)
{
	Uchar8_t loc_counter=0;
	HUSART_sendSTRING((Uchar8_t*)"\n\rEnter Card Pan : ");
	HUSART_receiveSTRING(arr,20);
	while(arr[loc_counter] != null)
 260:	fe 01       	movw	r30, r28
 262:	e9 0f       	add	r30, r25
 264:	f1 1d       	adc	r31, r1
 266:	80 81       	ld	r24, Z
 268:	81 11       	cpse	r24, r1
 26a:	ef cf       	rjmp	.-34     	; 0x24a <APP_terminalPanGet+0x1a>
		{
			HUSART_sendSTRING((Uchar8_t*) "\n\rInvalid Pan Number - must contain Numbers only");
			return PANGET_NOK;
		}
	}
	if(loc_counter<16)
 26c:	90 31       	cpi	r25, 0x10	; 16
 26e:	30 f4       	brcc	.+12     	; 0x27c <APP_terminalPanGet+0x4c>
	{
	 HUSART_sendSTRING((Uchar8_t*) "\n\rInvalid Pan Number - must contain at least 16 numbers");
 270:	8d e4       	ldi	r24, 0x4D	; 77
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <HUSART_sendSTRING>
	 return PANGET_NOK;
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	01 c0       	rjmp	.+2      	; 0x27e <APP_terminalPanGet+0x4e>
	}
	return PANGET_OK;
 27c:	81 e0       	ldi	r24, 0x01	; 1
}
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	08 95       	ret

00000284 <SaveCardData>:


EN_TerminalDataState SaveCardData(Uchar8_t *CardPan,Uchar8_t *CardPin)
{
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
	EN_TerminalDataState ret = DATA_NSAVED;
	
	if(CardPan == null || CardPin == null)
 288:	00 97       	sbiw	r24, 0x00	; 0
 28a:	71 f1       	breq	.+92     	; 0x2e8 <SaveCardData+0x64>
 28c:	61 15       	cp	r22, r1
 28e:	71 05       	cpc	r23, r1
 290:	69 f1       	breq	.+90     	; 0x2ec <SaveCardData+0x68>
 292:	eb 01       	movw	r28, r22
 294:	bc 01       	movw	r22, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 296:	8f e4       	ldi	r24, 0x4F	; 79
 298:	93 ec       	ldi	r25, 0xC3	; 195
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <SaveCardData+0x16>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <SaveCardData+0x1c>
 2a0:	00 00       	nop
		ret = DATA_NSAVED;
	}
	else
	{
		_delay_ms(200);
		eeprom_write_string(PAN_PAGE,CardPan);
 2a2:	80 e4       	ldi	r24, 0x40	; 64
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	0e 94 2b 02 	call	0x456	; 0x456 <eeprom_write_string>
 2aa:	8f e4       	ldi	r24, 0x4F	; 79
 2ac:	93 ec       	ldi	r25, 0xC3	; 195
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <SaveCardData+0x2a>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <SaveCardData+0x30>
 2b4:	00 00       	nop
		_delay_ms(200);
		eeprom_write_string(PIN_PAGE,CardPin);
 2b6:	be 01       	movw	r22, r28
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	0e 94 2b 02 	call	0x456	; 0x456 <eeprom_write_string>
 2c0:	8f e4       	ldi	r24, 0x4F	; 79
 2c2:	93 ec       	ldi	r25, 0xC3	; 195
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <SaveCardData+0x40>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <SaveCardData+0x46>
 2ca:	00 00       	nop
		_delay_ms(200);
		eeprom_write_string(FLAG_PAGE, (Uchar8_t*)"1");
 2cc:	65 e8       	ldi	r22, 0x85	; 133
 2ce:	71 e0       	ldi	r23, 0x01	; 1
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	0e 94 2b 02 	call	0x456	; 0x456 <eeprom_write_string>
 2d8:	8f e4       	ldi	r24, 0x4F	; 79
 2da:	93 ec       	ldi	r25, 0xC3	; 195
 2dc:	01 97       	sbiw	r24, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <SaveCardData+0x58>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <SaveCardData+0x5e>
 2e2:	00 00       	nop
		_delay_ms(200);
		ret = DATA_SAVED;
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	03 c0       	rjmp	.+6      	; 0x2ee <SaveCardData+0x6a>
{
	EN_TerminalDataState ret = DATA_NSAVED;
	
	if(CardPan == null || CardPin == null)
	{
		ret = DATA_NSAVED;
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	01 c0       	rjmp	.+2      	; 0x2ee <SaveCardData+0x6a>
 2ec:	81 e0       	ldi	r24, 0x01	; 1
		_delay_ms(200);
		ret = DATA_SAVED;
	}
	
	return ret;
}
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	08 95       	ret

000002f4 <ReadCardData>:

EN_TerminalDataState ReadCardData(Uchar8_t *CardPan,Uchar8_t *CardPin)
{
 2f4:	cf 93       	push	r28
 2f6:	df 93       	push	r29
		EN_TerminalDataState ret = DATA_NREAD;
		
		if(CardPan == null || CardPin == null)
 2f8:	00 97       	sbiw	r24, 0x00	; 0
 2fa:	e1 f0       	breq	.+56     	; 0x334 <ReadCardData+0x40>
 2fc:	61 15       	cp	r22, r1
 2fe:	71 05       	cpc	r23, r1
 300:	d9 f0       	breq	.+54     	; 0x338 <ReadCardData+0x44>
 302:	eb 01       	movw	r28, r22
 304:	bc 01       	movw	r22, r24
		{
			ret = DATA_NREAD;
		}
		else
		{
			eeprom_read_string(0x0000,CardPan);
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	0e 94 56 02 	call	0x4ac	; 0x4ac <eeprom_read_string>
 30e:	8f e4       	ldi	r24, 0x4F	; 79
 310:	93 ec       	ldi	r25, 0xC3	; 195
 312:	01 97       	sbiw	r24, 0x01	; 1
 314:	f1 f7       	brne	.-4      	; 0x312 <ReadCardData+0x1e>
 316:	00 c0       	rjmp	.+0      	; 0x318 <ReadCardData+0x24>
 318:	00 00       	nop
			_delay_ms(200);
			eeprom_read_string(0x0020,CardPin);
 31a:	be 01       	movw	r22, r28
 31c:	80 e2       	ldi	r24, 0x20	; 32
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 56 02 	call	0x4ac	; 0x4ac <eeprom_read_string>
 324:	8f e4       	ldi	r24, 0x4F	; 79
 326:	93 ec       	ldi	r25, 0xC3	; 195
 328:	01 97       	sbiw	r24, 0x01	; 1
 32a:	f1 f7       	brne	.-4      	; 0x328 <ReadCardData+0x34>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <ReadCardData+0x3a>
 32e:	00 00       	nop
			
// 			EEPROM_readPage(PAN_PAGE , CardPan);
// 			_delay_ms(200);
// 			EEPROM_readPage(PIN_PAGE , CardPin);
// 			_delay_ms(200);
			ret = DATA_READ;
 330:	82 e0       	ldi	r24, 0x02	; 2
 332:	03 c0       	rjmp	.+6      	; 0x33a <ReadCardData+0x46>
{
		EN_TerminalDataState ret = DATA_NREAD;
		
		if(CardPan == null || CardPin == null)
		{
			ret = DATA_NREAD;
 334:	83 e0       	ldi	r24, 0x03	; 3
 336:	01 c0       	rjmp	.+2      	; 0x33a <ReadCardData+0x46>
 338:	83 e0       	ldi	r24, 0x03	; 3
// 			EEPROM_readPage(PIN_PAGE , CardPin);
// 			_delay_ms(200);
			ret = DATA_READ;
		}
		return ret;
}
 33a:	df 91       	pop	r29
 33c:	cf 91       	pop	r28
 33e:	08 95       	ret

00000340 <CARD_MatchPINs>:

en_CardPinMatchError_t CARD_MatchPINs()
{
 340:	1f 93       	push	r17
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
 346:	cd b7       	in	r28, 0x3d	; 61
 348:	de b7       	in	r29, 0x3e	; 62
 34a:	2a 97       	sbiw	r28, 0x0a	; 10
 34c:	0f b6       	in	r0, 0x3f	; 63
 34e:	f8 94       	cli
 350:	de bf       	out	0x3e, r29	; 62
 352:	0f be       	out	0x3f, r0	; 63
 354:	cd bf       	out	0x3d, r28	; 61
	Uchar8_t PIN_Confirm[10], u8_l_PINiterator;
	Uchar8_t u8_l_ValidatePIN, u8_l_ValidateConfirmPIN;
	
	/* Get PIN from user */
	HUSART_sendSTRING( (Uchar8_t*) "\n\rEnter your PIN : ");
 356:	87 e8       	ldi	r24, 0x87	; 135
 358:	91 e0       	ldi	r25, 0x01	; 1
 35a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <HUSART_sendSTRING>
	u8_l_ValidatePIN = APP_terminalPinGet(pin_arr);
 35e:	89 ee       	ldi	r24, 0xE9	; 233
 360:	91 e0       	ldi	r25, 0x01	; 1
 362:	0e 94 ee 00 	call	0x1dc	; 0x1dc <APP_terminalPinGet>
 366:	18 2f       	mov	r17, r24
	if(u8_l_ValidatePIN == PINGET_NOK) return PIN_Match_NOK;
 368:	88 23       	and	r24, r24
 36a:	71 f1       	breq	.+92     	; 0x3c8 <CARD_MatchPINs+0x88>
	/* Get PIN again for Confirmation */
	HUSART_sendSTRING((Uchar8_t *)"\n\rConfirm Your PIN : ");
 36c:	8b e9       	ldi	r24, 0x9B	; 155
 36e:	91 e0       	ldi	r25, 0x01	; 1
 370:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <HUSART_sendSTRING>
	u8_l_ValidateConfirmPIN = APP_terminalPinGet(PIN_Confirm);
 374:	ce 01       	movw	r24, r28
 376:	01 96       	adiw	r24, 0x01	; 1
 378:	0e 94 ee 00 	call	0x1dc	; 0x1dc <APP_terminalPinGet>
	
	if((PINGET_OK == u8_l_ValidatePIN) && (PINGET_OK == u8_l_ValidateConfirmPIN))
 37c:	11 30       	cpi	r17, 0x01	; 1
 37e:	31 f5       	brne	.+76     	; 0x3cc <CARD_MatchPINs+0x8c>
 380:	81 30       	cpi	r24, 0x01	; 1
 382:	c9 f0       	breq	.+50     	; 0x3b6 <CARD_MatchPINs+0x76>
		
		HUSART_sendSTRING((Uchar8_t *)"\n\rPin Matched");
		return PIN_Match_OK;
	}
	
	return PIN_Match_NOK;
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	23 c0       	rjmp	.+70     	; 0x3ce <CARD_MatchPINs+0x8e>
	if((PINGET_OK == u8_l_ValidatePIN) && (PINGET_OK == u8_l_ValidateConfirmPIN))
	{
		/* Check if the user entered same PIN both times */
		for(u8_l_PINiterator=0; u8_l_PINiterator<PIN_LENGTH; u8_l_PINiterator++)
		{
			if(pin_arr[u8_l_PINiterator] != PIN_Confirm[u8_l_PINiterator])
 388:	82 2f       	mov	r24, r18
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	fc 01       	movw	r30, r24
 38e:	e7 51       	subi	r30, 0x17	; 23
 390:	fe 4f       	sbci	r31, 0xFE	; 254
 392:	30 81       	ld	r19, Z
 394:	e1 e0       	ldi	r30, 0x01	; 1
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	ec 0f       	add	r30, r28
 39a:	fd 1f       	adc	r31, r29
 39c:	e8 0f       	add	r30, r24
 39e:	f9 1f       	adc	r31, r25
 3a0:	80 81       	ld	r24, Z
 3a2:	38 17       	cp	r19, r24
 3a4:	31 f0       	breq	.+12     	; 0x3b2 <CARD_MatchPINs+0x72>
			{
				HUSART_sendSTRING((Uchar8_t *)"\n\rPin Not Matched");
 3a6:	81 eb       	ldi	r24, 0xB1	; 177
 3a8:	91 e0       	ldi	r25, 0x01	; 1
 3aa:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <HUSART_sendSTRING>
				return PIN_Match_NOK;
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	0e c0       	rjmp	.+28     	; 0x3ce <CARD_MatchPINs+0x8e>
	u8_l_ValidateConfirmPIN = APP_terminalPinGet(PIN_Confirm);
	
	if((PINGET_OK == u8_l_ValidatePIN) && (PINGET_OK == u8_l_ValidateConfirmPIN))
	{
		/* Check if the user entered same PIN both times */
		for(u8_l_PINiterator=0; u8_l_PINiterator<PIN_LENGTH; u8_l_PINiterator++)
 3b2:	2f 5f       	subi	r18, 0xFF	; 255
 3b4:	01 c0       	rjmp	.+2      	; 0x3b8 <CARD_MatchPINs+0x78>
 3b6:	20 e0       	ldi	r18, 0x00	; 0
 3b8:	25 30       	cpi	r18, 0x05	; 5
 3ba:	30 f3       	brcs	.-52     	; 0x388 <CARD_MatchPINs+0x48>
				HUSART_sendSTRING((Uchar8_t *)"\n\rPin Not Matched");
				return PIN_Match_NOK;
			}
		}
		
		HUSART_sendSTRING((Uchar8_t *)"\n\rPin Matched");
 3bc:	83 ec       	ldi	r24, 0xC3	; 195
 3be:	91 e0       	ldi	r25, 0x01	; 1
 3c0:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <HUSART_sendSTRING>
		return PIN_Match_OK;
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	03 c0       	rjmp	.+6      	; 0x3ce <CARD_MatchPINs+0x8e>
	Uchar8_t u8_l_ValidatePIN, u8_l_ValidateConfirmPIN;
	
	/* Get PIN from user */
	HUSART_sendSTRING( (Uchar8_t*) "\n\rEnter your PIN : ");
	u8_l_ValidatePIN = APP_terminalPinGet(pin_arr);
	if(u8_l_ValidatePIN == PINGET_NOK) return PIN_Match_NOK;
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	01 c0       	rjmp	.+2      	; 0x3ce <CARD_MatchPINs+0x8e>
		
		HUSART_sendSTRING((Uchar8_t *)"\n\rPin Matched");
		return PIN_Match_OK;
	}
	
	return PIN_Match_NOK;
 3cc:	80 e0       	ldi	r24, 0x00	; 0
}
 3ce:	2a 96       	adiw	r28, 0x0a	; 10
 3d0:	0f b6       	in	r0, 0x3f	; 63
 3d2:	f8 94       	cli
 3d4:	de bf       	out	0x3e, r29	; 62
 3d6:	0f be       	out	0x3f, r0	; 63
 3d8:	cd bf       	out	0x3d, r28	; 61
 3da:	df 91       	pop	r29
 3dc:	cf 91       	pop	r28
 3de:	1f 91       	pop	r17
 3e0:	08 95       	ret

000003e2 <eeprom_init>:
*
* \return void
*/
void eeprom_init(void)
{
	i2c_init_master(); // call function that init I2c Master
 3e2:	0e 94 5d 03 	call	0x6ba	; 0x6ba <i2c_init_master>
 3e6:	08 95       	ret

000003e8 <eeprom_write_byte>:
*		 : Uchar8_t data : This Is Data That Will Be Write	
*
* \return void
*/
void eeprom_write_byte(Uint16_t address, Uchar8_t data)  
{
 3e8:	1f 93       	push	r17
 3ea:	cf 93       	push	r28
 3ec:	df 93       	push	r29
 3ee:	d8 2f       	mov	r29, r24
 3f0:	19 2f       	mov	r17, r25
 3f2:	c6 2f       	mov	r28, r22
	
	i2c_start(); // Send Start Bit On I2c
 3f4:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <i2c_start>
	i2c_send_slave_address_with_write_req(0x50);// Send Slave Address With Write Bit On I2c
 3f8:	80 e5       	ldi	r24, 0x50	; 80
 3fa:	0e 94 7f 03 	call	0x6fe	; 0x6fe <i2c_send_slave_address_with_write_req>
	i2c_write_byte(address >> 8); // Write Byte Contain Device Address Shifted By 8 On I2c
 3fe:	81 2f       	mov	r24, r17
 400:	0e 94 9d 03 	call	0x73a	; 0x73a <i2c_write_byte>
	i2c_write_byte(address); // Write Byte Contain Device Address On I2c
 404:	8d 2f       	mov	r24, r29
 406:	0e 94 9d 03 	call	0x73a	; 0x73a <i2c_write_byte>
	i2c_write_byte(data); // Write Byte Contain Data On I2c
 40a:	8c 2f       	mov	r24, r28
 40c:	0e 94 9d 03 	call	0x73a	; 0x73a <i2c_write_byte>
	i2c_stop(); // Send Stop Bit On I2c
 410:	0e 94 ac 03 	call	0x758	; 0x758 <i2c_stop>
}
 414:	df 91       	pop	r29
 416:	cf 91       	pop	r28
 418:	1f 91       	pop	r17
 41a:	08 95       	ret

0000041c <eeprom_read_byte>:
* \param : Uint16_t address : This Is Device Address	
*
* \return Uchar8_t : Function Will Return Uchar8_t Contain The Data
*/
Uchar8_t eeprom_read_byte(Uint16_t address)
{
 41c:	cf 93       	push	r28
 41e:	df 93       	push	r29
 420:	c8 2f       	mov	r28, r24
 422:	d9 2f       	mov	r29, r25
	Uchar8_t data = 0;
	i2c_start();// Send Start Bit On I2c
 424:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <i2c_start>
	i2c_send_slave_address_with_write_req(0x50);// Send Slave Address With Write Bit On I2c
 428:	80 e5       	ldi	r24, 0x50	; 80
 42a:	0e 94 7f 03 	call	0x6fe	; 0x6fe <i2c_send_slave_address_with_write_req>
	i2c_write_byte(address >> 8);// Write Byte Contain Device Address Shifted By 8 On I2c
 42e:	8d 2f       	mov	r24, r29
 430:	0e 94 9d 03 	call	0x73a	; 0x73a <i2c_write_byte>
	i2c_write_byte(address & 0xFF);// Write Byte Contain Device Address On I2c
 434:	8c 2f       	mov	r24, r28
 436:	0e 94 9d 03 	call	0x73a	; 0x73a <i2c_write_byte>
	i2c_repeated_start();// Send Repeated Start Bit On I2c
 43a:	0e 94 75 03 	call	0x6ea	; 0x6ea <i2c_repeated_start>
	i2c_send_slave_address_with_read_req(0x50);// Send Slave Address With Read Bit On I2c
 43e:	80 e5       	ldi	r24, 0x50	; 80
 440:	0e 94 8e 03 	call	0x71c	; 0x71c <i2c_send_slave_address_with_read_req>
	data = i2c_read_byte_nack();// Read Byte Contain Data On I2c With No Ack
 444:	0e 94 af 03 	call	0x75e	; 0x75e <i2c_read_byte_nack>
 448:	c8 2f       	mov	r28, r24
	i2c_stop();// Send Stop Bit On I2c
 44a:	0e 94 ac 03 	call	0x758	; 0x758 <i2c_stop>
	return data;//Return The Data That Been Read 
}
 44e:	8c 2f       	mov	r24, r28
 450:	df 91       	pop	r29
 452:	cf 91       	pop	r28
 454:	08 95       	ret

00000456 <eeprom_write_string>:
* \param : Uint16_t address : This Is Device Address
*		 : Uchar8_t *str	: This Pointer Will Store The Address Of The Array Of The Chars
* \return  Void
*/
void eeprom_write_string(Uint16_t Copy_u8Address, const Uchar8_t* str)
{
 456:	ef 92       	push	r14
 458:	ff 92       	push	r15
 45a:	0f 93       	push	r16
 45c:	1f 93       	push	r17
 45e:	cf 93       	push	r28
 460:	7b 01       	movw	r14, r22
	Uchar8_t i = 0;
 462:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[i] != '\0') // Loop Until The End Of The String
 464:	0e c0       	rjmp	.+28     	; 0x482 <eeprom_write_string+0x2c>
 466:	a3 ed       	ldi	r26, 0xD3	; 211
 468:	b0 e3       	ldi	r27, 0x30	; 48
 46a:	11 97       	sbiw	r26, 0x01	; 1
 46c:	f1 f7       	brne	.-4      	; 0x46a <eeprom_write_string+0x14>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <eeprom_write_string+0x1a>
 470:	00 00       	nop
	{
		_delay_ms(50);
		eeprom_write_byte(Copy_u8Address++,str[i++]);//Call This Function To Write Char In EEPROM And Increment The Address And Index
 472:	cf 5f       	subi	r28, 0xFF	; 255
 474:	8c 01       	movw	r16, r24
 476:	0f 5f       	subi	r16, 0xFF	; 255
 478:	1f 4f       	sbci	r17, 0xFF	; 255
 47a:	60 81       	ld	r22, Z
 47c:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <eeprom_write_byte>
 480:	c8 01       	movw	r24, r16
* \return  Void
*/
void eeprom_write_string(Uint16_t Copy_u8Address, const Uchar8_t* str)
{
	Uchar8_t i = 0;
	while(str[i] != '\0') // Loop Until The End Of The String
 482:	f7 01       	movw	r30, r14
 484:	ec 0f       	add	r30, r28
 486:	f1 1d       	adc	r31, r1
 488:	20 81       	ld	r18, Z
 48a:	21 11       	cpse	r18, r1
 48c:	ec cf       	rjmp	.-40     	; 0x466 <eeprom_write_string+0x10>
 48e:	e3 ed       	ldi	r30, 0xD3	; 211
 490:	f0 e3       	ldi	r31, 0x30	; 48
 492:	31 97       	sbiw	r30, 0x01	; 1
 494:	f1 f7       	brne	.-4      	; 0x492 <eeprom_write_string+0x3c>
 496:	00 c0       	rjmp	.+0      	; 0x498 <eeprom_write_string+0x42>
 498:	00 00       	nop
	{
		_delay_ms(50);
		eeprom_write_byte(Copy_u8Address++,str[i++]);//Call This Function To Write Char In EEPROM And Increment The Address And Index
	}
	_delay_ms(50);
	eeprom_write_byte(Copy_u8Address++,'\0');//Call This Function To Write Null After The Last Char Of The String To Know Where The String Is End
 49a:	60 e0       	ldi	r22, 0x00	; 0
 49c:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <eeprom_write_byte>
}
 4a0:	cf 91       	pop	r28
 4a2:	1f 91       	pop	r17
 4a4:	0f 91       	pop	r16
 4a6:	ff 90       	pop	r15
 4a8:	ef 90       	pop	r14
 4aa:	08 95       	ret

000004ac <eeprom_read_string>:
* \param : Uint16_t address : This Is Device Address
*		 : Uchar8_t *str	: This Pointer Will Store The Address Of The Array Of The Chars That Will Return String In It
* \return  Void
*/
void eeprom_read_string(Uint16_t Copy_u8Address, Uchar8_t* str)
{
 4ac:	cf 92       	push	r12
 4ae:	df 92       	push	r13
 4b0:	ef 92       	push	r14
 4b2:	ff 92       	push	r15
 4b4:	0f 93       	push	r16
 4b6:	1f 93       	push	r17
 4b8:	cf 93       	push	r28
 4ba:	6b 01       	movw	r12, r22
	Uchar8_t len = 0;
 4bc:	c0 e0       	ldi	r28, 0x00	; 0
 4be:	e3 ed       	ldi	r30, 0xD3	; 211
 4c0:	f0 e3       	ldi	r31, 0x30	; 48
 4c2:	31 97       	sbiw	r30, 0x01	; 1
 4c4:	f1 f7       	brne	.-4      	; 0x4c2 <eeprom_read_string+0x16>
 4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <eeprom_read_string+0x1c>
 4c8:	00 00       	nop
	do
	{
		_delay_ms(50);
		str[len] = eeprom_read_byte(Copy_u8Address++);//Call This Function To Read Char From EEPROM And Increment The Address And Index
 4ca:	76 01       	movw	r14, r12
 4cc:	ec 0e       	add	r14, r28
 4ce:	f1 1c       	adc	r15, r1
 4d0:	8c 01       	movw	r16, r24
 4d2:	0f 5f       	subi	r16, 0xFF	; 255
 4d4:	1f 4f       	sbci	r17, 0xFF	; 255
 4d6:	0e 94 0e 02 	call	0x41c	; 0x41c <eeprom_read_byte>
 4da:	28 2f       	mov	r18, r24
 4dc:	f7 01       	movw	r30, r14
 4de:	80 83       	st	Z, r24
	}
	while(str[len++] != '\0');// Loop Until The End Of The String
 4e0:	cf 5f       	subi	r28, 0xFF	; 255
{
	Uchar8_t len = 0;
	do
	{
		_delay_ms(50);
		str[len] = eeprom_read_byte(Copy_u8Address++);//Call This Function To Read Char From EEPROM And Increment The Address And Index
 4e2:	c8 01       	movw	r24, r16
	}
	while(str[len++] != '\0');// Loop Until The End Of The String
 4e4:	21 11       	cpse	r18, r1
 4e6:	eb cf       	rjmp	.-42     	; 0x4be <eeprom_read_string+0x12>
}
 4e8:	cf 91       	pop	r28
 4ea:	1f 91       	pop	r17
 4ec:	0f 91       	pop	r16
 4ee:	ff 90       	pop	r15
 4f0:	ef 90       	pop	r14
 4f2:	df 90       	pop	r13
 4f4:	cf 90       	pop	r12
 4f6:	08 95       	ret

000004f8 <HSPI_SlaveInit>:
	{
		return HSPI_NOK;
	}
	
	return HSPI_OK;
}
 4f8:	60 e0       	ldi	r22, 0x00	; 0
 4fa:	8d e0       	ldi	r24, 0x0D	; 13
 4fc:	0e 94 dd 02 	call	0x5ba	; 0x5ba <DIO_s8SETPinDir>
 500:	60 e0       	ldi	r22, 0x00	; 0
 502:	8f e0       	ldi	r24, 0x0F	; 15
 504:	0e 94 dd 02 	call	0x5ba	; 0x5ba <DIO_s8SETPinDir>
 508:	60 e0       	ldi	r22, 0x00	; 0
 50a:	8c e0       	ldi	r24, 0x0C	; 12
 50c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <DIO_s8SETPinDir>
 510:	61 e0       	ldi	r22, 0x01	; 1
 512:	8c e0       	ldi	r24, 0x0C	; 12
 514:	0e 94 1d 03 	call	0x63a	; 0x63a <DIO_s8SETPinVal>
 518:	61 e0       	ldi	r22, 0x01	; 1
 51a:	8e e0       	ldi	r24, 0x0E	; 14
 51c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <DIO_s8SETPinDir>
 520:	61 e0       	ldi	r22, 0x01	; 1
 522:	88 e0       	ldi	r24, 0x08	; 8
 524:	0e 94 dd 02 	call	0x5ba	; 0x5ba <DIO_s8SETPinDir>
 528:	0e 94 ba 03 	call	0x774	; 0x774 <SPI_SlaveInit>
 52c:	61 e0       	ldi	r22, 0x01	; 1
 52e:	8c e0       	ldi	r24, 0x0C	; 12
 530:	0e 94 1d 03 	call	0x63a	; 0x63a <DIO_s8SETPinVal>
 534:	08 95       	ret

00000536 <HSPI_MasterTrigger>:
}

void HSPI_MasterTrigger(void)
{
	/* Send Request to Master */
	DIO_s8SETPinVal(SLAVE_SEND_REQUEST_PIN, HIGH);
 536:	61 e0       	ldi	r22, 0x01	; 1
 538:	88 e0       	ldi	r24, 0x08	; 8
 53a:	0e 94 1d 03 	call	0x63a	; 0x63a <DIO_s8SETPinVal>
 53e:	83 ec       	ldi	r24, 0xC3	; 195
 540:	99 e0       	ldi	r25, 0x09	; 9
 542:	01 97       	sbiw	r24, 0x01	; 1
 544:	f1 f7       	brne	.-4      	; 0x542 <HSPI_MasterTrigger+0xc>
 546:	00 c0       	rjmp	.+0      	; 0x548 <HSPI_MasterTrigger+0x12>
 548:	00 00       	nop
	_delay_ms(10);
	DIO_s8SETPinVal(SLAVE_SEND_REQUEST_PIN, LOW);
 54a:	60 e0       	ldi	r22, 0x00	; 0
 54c:	88 e0       	ldi	r24, 0x08	; 8
 54e:	0e 94 1d 03 	call	0x63a	; 0x63a <DIO_s8SETPinVal>
 552:	08 95       	ret

00000554 <HSPI_SlaveRequest>:
 * \return void
 */
void HSPI_SlaveRequest(Uchar8_t* pu8_a_dataPtr, Uchar8_t u8_a_DataSize)
{
	/* Reset transmission data index */
	u8_g_SlaveTxIndex = 0;
 554:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <u8_g_SlaveTxIndex>
	
	/* Set global transmission data ptr to point to given data */
	pu8_g_SlaveTxPtr = pu8_a_dataPtr;
 558:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <pu8_g_SlaveTxPtr+0x1>
 55c:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <pu8_g_SlaveTxPtr>
	
	u8_g_SlaveTxLen = u8_a_DataSize;
 560:	60 93 13 02 	sts	0x0213, r22	; 0x800213 <u8_g_SlaveTxLen>
	/* Set the Data register with value */
	//SPI_SetValue(pu8_g_SlaveTxPtr[u8_g_SlaveTxIndex++]);

	/* Send Request to Master */
	//DIO_s8TOGPinVal(SLAVE_SEND_REQUEST_PIN);
HSPI_MasterTrigger();
 564:	0e 94 9b 02 	call	0x536	; 0x536 <HSPI_MasterTrigger>
 568:	08 95       	ret

0000056a <HSPI_SlaveSetData>:
}

void HSPI_SlaveSetData(Uchar8_t* pu8_a_dataPtr, Uchar8_t u8_a_DataSize)
{
	/* Reset transmission data index */
	u8_g_SlaveTxIndex = 0;
 56a:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <u8_g_SlaveTxIndex>
	
	/* Set global transmission data ptr to point to given data */
	pu8_g_SlaveTxPtr = pu8_a_dataPtr;
 56e:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <pu8_g_SlaveTxPtr+0x1>
 572:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <pu8_g_SlaveTxPtr>
	
	u8_g_SlaveTxLen = u8_a_DataSize;
 576:	60 93 13 02 	sts	0x0213, r22	; 0x800213 <u8_g_SlaveTxLen>
 57a:	08 95       	ret

0000057c <HUSART_enInit>:
#include "husart.h"


EN_USART_ERROR HUSART_enInit(void)
{
	if(USART_init())return USART_NOT_OK;
 57c:	0e 94 15 04 	call	0x82a	; 0x82a <USART_init>
 580:	81 11       	cpse	r24, r1
 582:	81 e0       	ldi	r24, 0x01	; 1
	return USART_OK;
}
 584:	08 95       	ret

00000586 <HUSART_enSendData>:
EN_USART_ERROR HUSART_enSendData(Uchar8_t Copy_u8DataH)
{
	if(USART_sendData(Copy_u8DataH))return USART_NOT_OK;
 586:	0e 94 21 04 	call	0x842	; 0x842 <USART_sendData>
 58a:	81 11       	cpse	r24, r1
 58c:	81 e0       	ldi	r24, 0x01	; 1
	return USART_OK;
}
 58e:	08 95       	ret

00000590 <HUSART_enRecieveData>:
EN_USART_ERROR HUSART_enRecieveData(Uchar8_t* Ref_u8DataH)
{
 590:	cf 93       	push	r28
 592:	df 93       	push	r29
 594:	ec 01       	movw	r28, r24
	*Ref_u8DataH = USART_receiveData();
 596:	0e 94 26 04 	call	0x84c	; 0x84c <USART_receiveData>
 59a:	88 83       	st	Y, r24
	return USART_OK;
}
 59c:	80 e0       	ldi	r24, 0x00	; 0
 59e:	df 91       	pop	r29
 5a0:	cf 91       	pop	r28
 5a2:	08 95       	ret

000005a4 <HUSART_sendSTRING>:

void HUSART_sendSTRING(Uchar8_t * Hstr)
{
	USART_sendSTRING(Hstr);
 5a4:	0e 94 2a 04 	call	0x854	; 0x854 <USART_sendSTRING>
 5a8:	08 95       	ret

000005aa <HUSART_receiveSTRING>:
}
void HUSART_receiveSTRING(Uchar8_t * Hstr ,Uchar8_t Hsize )
{
	USART_receiveSTRING(Hstr,Hsize);
 5aa:	0e 94 3d 04 	call	0x87a	; 0x87a <USART_receiveSTRING>
 5ae:	08 95       	ret

000005b0 <main>:
 */ 
#define F_CPU 8000000UL
#include "APP/app.h"
int main(void)
{
	APP_Init();
 5b0:	0e 94 49 00 	call	0x92	; 0x92 <APP_Init>
    while (1) 
    {
      APP_Start();
 5b4:	0e 94 51 00 	call	0xa2	; 0xa2 <APP_Start>
 5b8:	fd cf       	rjmp	.-6      	; 0x5b4 <main+0x4>

000005ba <DIO_s8SETPinDir>:
{
	Uchar8_t errStatus = E_OK;
	Uchar8_t portID;
	Uchar8_t pinID;

	if (enPinCopy < PIN_INVALID && enPortDir< DIR_INVALID)
 5ba:	80 32       	cpi	r24, 0x20	; 32
 5bc:	c0 f5       	brcc	.+112    	; 0x62e <DIO_s8SETPinDir+0x74>
 5be:	62 30       	cpi	r22, 0x02	; 2
 5c0:	c0 f5       	brcc	.+112    	; 0x632 <DIO_s8SETPinDir+0x78>
	{
		portID = enPinCopy/8;
 5c2:	e8 2f       	mov	r30, r24
 5c4:	e6 95       	lsr	r30
 5c6:	e6 95       	lsr	r30
 5c8:	e6 95       	lsr	r30
		pinID  = enPinCopy%8;
 5ca:	87 70       	andi	r24, 0x07	; 7

		if (enPortDir == INPUT)
 5cc:	61 11       	cpse	r22, r1
 5ce:	17 c0       	rjmp	.+46     	; 0x5fe <DIO_s8SETPinDir+0x44>
		{
			CLEAR_BIT(*ddrReg[portID],pinID);
 5d0:	f0 e0       	ldi	r31, 0x00	; 0
 5d2:	ee 0f       	add	r30, r30
 5d4:	ff 1f       	adc	r31, r31
 5d6:	e0 5a       	subi	r30, 0xA0	; 160
 5d8:	ff 4f       	sbci	r31, 0xFF	; 255
 5da:	01 90       	ld	r0, Z+
 5dc:	f0 81       	ld	r31, Z
 5de:	e0 2d       	mov	r30, r0
 5e0:	40 81       	ld	r20, Z
 5e2:	21 e0       	ldi	r18, 0x01	; 1
 5e4:	30 e0       	ldi	r19, 0x00	; 0
 5e6:	b9 01       	movw	r22, r18
 5e8:	02 c0       	rjmp	.+4      	; 0x5ee <DIO_s8SETPinDir+0x34>
 5ea:	66 0f       	add	r22, r22
 5ec:	77 1f       	adc	r23, r23
 5ee:	8a 95       	dec	r24
 5f0:	e2 f7       	brpl	.-8      	; 0x5ea <DIO_s8SETPinDir+0x30>
 5f2:	cb 01       	movw	r24, r22
 5f4:	80 95       	com	r24
 5f6:	84 23       	and	r24, r20
 5f8:	80 83       	st	Z, r24



Uchar8_t DIO_s8SETPinDir (enu_pin enPinCopy, enu_dir enPortDir)
{
	Uchar8_t errStatus = E_OK;
 5fa:	80 e0       	ldi	r24, 0x00	; 0
 5fc:	08 95       	ret

		if (enPortDir == INPUT)
		{
			CLEAR_BIT(*ddrReg[portID],pinID);
		}
		else if(enPortDir == OUTPUT)
 5fe:	61 30       	cpi	r22, 0x01	; 1
 600:	d1 f4       	brne	.+52     	; 0x636 <DIO_s8SETPinDir+0x7c>
		{
			SET_BIT(*ddrReg[portID],pinID);
 602:	f0 e0       	ldi	r31, 0x00	; 0
 604:	ee 0f       	add	r30, r30
 606:	ff 1f       	adc	r31, r31
 608:	e0 5a       	subi	r30, 0xA0	; 160
 60a:	ff 4f       	sbci	r31, 0xFF	; 255
 60c:	01 90       	ld	r0, Z+
 60e:	f0 81       	ld	r31, Z
 610:	e0 2d       	mov	r30, r0
 612:	40 81       	ld	r20, Z
 614:	21 e0       	ldi	r18, 0x01	; 1
 616:	30 e0       	ldi	r19, 0x00	; 0
 618:	b9 01       	movw	r22, r18
 61a:	02 c0       	rjmp	.+4      	; 0x620 <DIO_s8SETPinDir+0x66>
 61c:	66 0f       	add	r22, r22
 61e:	77 1f       	adc	r23, r23
 620:	8a 95       	dec	r24
 622:	e2 f7       	brpl	.-8      	; 0x61c <DIO_s8SETPinDir+0x62>
 624:	cb 01       	movw	r24, r22
 626:	84 2b       	or	r24, r20
 628:	80 83       	st	Z, r24



Uchar8_t DIO_s8SETPinDir (enu_pin enPinCopy, enu_dir enPortDir)
{
	Uchar8_t errStatus = E_OK;
 62a:	80 e0       	ldi	r24, 0x00	; 0
 62c:	08 95       	ret
			/* do nothing */
		}
	}
	else
	{
		errStatus = E_NOK;
 62e:	8f ef       	ldi	r24, 0xFF	; 255
 630:	08 95       	ret
 632:	8f ef       	ldi	r24, 0xFF	; 255
 634:	08 95       	ret



Uchar8_t DIO_s8SETPinDir (enu_pin enPinCopy, enu_dir enPortDir)
{
	Uchar8_t errStatus = E_OK;
 636:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		errStatus = E_NOK;
	}
	return errStatus;
}
 638:	08 95       	ret

0000063a <DIO_s8SETPinVal>:
{
	Uchar8_t errStatus = E_OK;
	Uchar8_t portID;
	Uchar8_t pinID;

	if (enPinCopy < PIN_INVALID && enPortVal< VAL_INVALID)
 63a:	80 32       	cpi	r24, 0x20	; 32
 63c:	c0 f5       	brcc	.+112    	; 0x6ae <DIO_s8SETPinVal+0x74>
 63e:	62 30       	cpi	r22, 0x02	; 2
 640:	c0 f5       	brcc	.+112    	; 0x6b2 <DIO_s8SETPinVal+0x78>
	{
		portID = enPinCopy/8;
 642:	e8 2f       	mov	r30, r24
 644:	e6 95       	lsr	r30
 646:	e6 95       	lsr	r30
 648:	e6 95       	lsr	r30
		pinID  = enPinCopy%8;
 64a:	87 70       	andi	r24, 0x07	; 7

		if (enPortVal == LOW)
 64c:	61 11       	cpse	r22, r1
 64e:	17 c0       	rjmp	.+46     	; 0x67e <DIO_s8SETPinVal+0x44>
		{
			CLEAR_BIT(*portReg[portID],pinID);
 650:	f0 e0       	ldi	r31, 0x00	; 0
 652:	ee 0f       	add	r30, r30
 654:	ff 1f       	adc	r31, r31
 656:	e8 59       	subi	r30, 0x98	; 152
 658:	ff 4f       	sbci	r31, 0xFF	; 255
 65a:	01 90       	ld	r0, Z+
 65c:	f0 81       	ld	r31, Z
 65e:	e0 2d       	mov	r30, r0
 660:	40 81       	ld	r20, Z
 662:	21 e0       	ldi	r18, 0x01	; 1
 664:	30 e0       	ldi	r19, 0x00	; 0
 666:	b9 01       	movw	r22, r18
 668:	02 c0       	rjmp	.+4      	; 0x66e <DIO_s8SETPinVal+0x34>
 66a:	66 0f       	add	r22, r22
 66c:	77 1f       	adc	r23, r23
 66e:	8a 95       	dec	r24
 670:	e2 f7       	brpl	.-8      	; 0x66a <DIO_s8SETPinVal+0x30>
 672:	cb 01       	movw	r24, r22
 674:	80 95       	com	r24
 676:	84 23       	and	r24, r20
 678:	80 83       	st	Z, r24
}


Uchar8_t DIO_s8SETPinVal (enu_pin enPinCopy, enu_val enPortVal)
{
	Uchar8_t errStatus = E_OK;
 67a:	80 e0       	ldi	r24, 0x00	; 0
 67c:	08 95       	ret

		if (enPortVal == LOW)
		{
			CLEAR_BIT(*portReg[portID],pinID);
		}
		else if(enPortVal == HIGH)
 67e:	61 30       	cpi	r22, 0x01	; 1
 680:	d1 f4       	brne	.+52     	; 0x6b6 <DIO_s8SETPinVal+0x7c>
		{
			SET_BIT(*portReg[portID],pinID);
 682:	f0 e0       	ldi	r31, 0x00	; 0
 684:	ee 0f       	add	r30, r30
 686:	ff 1f       	adc	r31, r31
 688:	e8 59       	subi	r30, 0x98	; 152
 68a:	ff 4f       	sbci	r31, 0xFF	; 255
 68c:	01 90       	ld	r0, Z+
 68e:	f0 81       	ld	r31, Z
 690:	e0 2d       	mov	r30, r0
 692:	40 81       	ld	r20, Z
 694:	21 e0       	ldi	r18, 0x01	; 1
 696:	30 e0       	ldi	r19, 0x00	; 0
 698:	b9 01       	movw	r22, r18
 69a:	02 c0       	rjmp	.+4      	; 0x6a0 <DIO_s8SETPinVal+0x66>
 69c:	66 0f       	add	r22, r22
 69e:	77 1f       	adc	r23, r23
 6a0:	8a 95       	dec	r24
 6a2:	e2 f7       	brpl	.-8      	; 0x69c <DIO_s8SETPinVal+0x62>
 6a4:	cb 01       	movw	r24, r22
 6a6:	84 2b       	or	r24, r20
 6a8:	80 83       	st	Z, r24
}


Uchar8_t DIO_s8SETPinVal (enu_pin enPinCopy, enu_val enPortVal)
{
	Uchar8_t errStatus = E_OK;
 6aa:	80 e0       	ldi	r24, 0x00	; 0
 6ac:	08 95       	ret
			/* do nothing */
		}
	}
	else
	{
		errStatus = E_NOK;
 6ae:	8f ef       	ldi	r24, 0xFF	; 255
 6b0:	08 95       	ret
 6b2:	8f ef       	ldi	r24, 0xFF	; 255
 6b4:	08 95       	ret
}


Uchar8_t DIO_s8SETPinVal (enu_pin enPinCopy, enu_val enPortVal)
{
	Uchar8_t errStatus = E_OK;
 6b6:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		errStatus = E_NOK;
	}
	return errStatus;
}
 6b8:	08 95       	ret

000006ba <i2c_init_master>:
	SET_BIT(TWCR, TWEN);
	/* Waiting for TWINT flag to be set */
	while ( !(GET_BIT(TWCR,TWINT)) );
	/* Waiting if this condition becoming true */
	while ( (TWSR & 0xF8) != SLAVE_BYTE_TRANSMITTED );
}
 6ba:	81 b1       	in	r24, 0x01	; 1
 6bc:	8e 7f       	andi	r24, 0xFE	; 254
 6be:	81 b9       	out	0x01, r24	; 1
 6c0:	81 b1       	in	r24, 0x01	; 1
 6c2:	8d 7f       	andi	r24, 0xFD	; 253
 6c4:	81 b9       	out	0x01, r24	; 1
 6c6:	82 e0       	ldi	r24, 0x02	; 2
 6c8:	80 b9       	out	0x00, r24	; 0
 6ca:	80 ea       	ldi	r24, 0xA0	; 160
 6cc:	82 b9       	out	0x02, r24	; 2
 6ce:	86 b7       	in	r24, 0x36	; 54
 6d0:	84 60       	ori	r24, 0x04	; 4
 6d2:	86 bf       	out	0x36, r24	; 54
 6d4:	08 95       	ret

000006d6 <i2c_start>:
 6d6:	84 ea       	ldi	r24, 0xA4	; 164
 6d8:	86 bf       	out	0x36, r24	; 54
 6da:	06 b6       	in	r0, 0x36	; 54
 6dc:	07 fe       	sbrs	r0, 7
 6de:	fd cf       	rjmp	.-6      	; 0x6da <i2c_start+0x4>
 6e0:	81 b1       	in	r24, 0x01	; 1
 6e2:	88 7f       	andi	r24, 0xF8	; 248
 6e4:	88 30       	cpi	r24, 0x08	; 8
 6e6:	e1 f7       	brne	.-8      	; 0x6e0 <i2c_start+0xa>
 6e8:	08 95       	ret

000006ea <i2c_repeated_start>:
 6ea:	84 ea       	ldi	r24, 0xA4	; 164
 6ec:	86 bf       	out	0x36, r24	; 54
 6ee:	06 b6       	in	r0, 0x36	; 54
 6f0:	07 fe       	sbrs	r0, 7
 6f2:	fd cf       	rjmp	.-6      	; 0x6ee <i2c_repeated_start+0x4>
 6f4:	81 b1       	in	r24, 0x01	; 1
 6f6:	88 7f       	andi	r24, 0xF8	; 248
 6f8:	80 31       	cpi	r24, 0x10	; 16
 6fa:	e1 f7       	brne	.-8      	; 0x6f4 <i2c_repeated_start+0xa>
 6fc:	08 95       	ret

000006fe <i2c_send_slave_address_with_write_req>:
 6fe:	88 0f       	add	r24, r24
 700:	83 b9       	out	0x03, r24	; 3
 702:	83 b1       	in	r24, 0x03	; 3
 704:	8e 7f       	andi	r24, 0xFE	; 254
 706:	83 b9       	out	0x03, r24	; 3
 708:	84 e8       	ldi	r24, 0x84	; 132
 70a:	86 bf       	out	0x36, r24	; 54
 70c:	06 b6       	in	r0, 0x36	; 54
 70e:	07 fe       	sbrs	r0, 7
 710:	fd cf       	rjmp	.-6      	; 0x70c <i2c_send_slave_address_with_write_req+0xe>
 712:	81 b1       	in	r24, 0x01	; 1
 714:	88 7f       	andi	r24, 0xF8	; 248
 716:	88 31       	cpi	r24, 0x18	; 24
 718:	e1 f7       	brne	.-8      	; 0x712 <i2c_send_slave_address_with_write_req+0x14>
 71a:	08 95       	ret

0000071c <i2c_send_slave_address_with_read_req>:
 71c:	88 0f       	add	r24, r24
 71e:	83 b9       	out	0x03, r24	; 3
 720:	83 b1       	in	r24, 0x03	; 3
 722:	81 60       	ori	r24, 0x01	; 1
 724:	83 b9       	out	0x03, r24	; 3
 726:	84 e8       	ldi	r24, 0x84	; 132
 728:	86 bf       	out	0x36, r24	; 54
 72a:	06 b6       	in	r0, 0x36	; 54
 72c:	07 fe       	sbrs	r0, 7
 72e:	fd cf       	rjmp	.-6      	; 0x72a <i2c_send_slave_address_with_read_req+0xe>
 730:	81 b1       	in	r24, 0x01	; 1
 732:	88 7f       	andi	r24, 0xF8	; 248
 734:	80 34       	cpi	r24, 0x40	; 64
 736:	e1 f7       	brne	.-8      	; 0x730 <i2c_send_slave_address_with_read_req+0x14>
 738:	08 95       	ret

0000073a <i2c_write_byte>:
 73a:	83 b9       	out	0x03, r24	; 3
 73c:	86 b7       	in	r24, 0x36	; 54
 73e:	80 68       	ori	r24, 0x80	; 128
 740:	86 bf       	out	0x36, r24	; 54
 742:	86 b7       	in	r24, 0x36	; 54
 744:	84 60       	ori	r24, 0x04	; 4
 746:	86 bf       	out	0x36, r24	; 54
 748:	06 b6       	in	r0, 0x36	; 54
 74a:	07 fe       	sbrs	r0, 7
 74c:	fd cf       	rjmp	.-6      	; 0x748 <i2c_write_byte+0xe>
 74e:	81 b1       	in	r24, 0x01	; 1
 750:	88 7f       	andi	r24, 0xF8	; 248
 752:	88 32       	cpi	r24, 0x28	; 40
 754:	e1 f7       	brne	.-8      	; 0x74e <i2c_write_byte+0x14>
 756:	08 95       	ret

00000758 <i2c_stop>:
 758:	84 e9       	ldi	r24, 0x94	; 148
 75a:	86 bf       	out	0x36, r24	; 54
 75c:	08 95       	ret

0000075e <i2c_read_byte_nack>:


Uchar8_t i2c_read_byte_nack(void)
{
	/* Clear TWINT flag */
	SET_BIT(TWCR, TWINT);
 75e:	86 b7       	in	r24, 0x36	; 54
 760:	80 68       	ori	r24, 0x80	; 128
 762:	86 bf       	out	0x36, r24	; 54

	/* Enable I2C peripheral */
	SET_BIT(TWCR, TWEN);
 764:	86 b7       	in	r24, 0x36	; 54
 766:	84 60       	ori	r24, 0x04	; 4
 768:	86 bf       	out	0x36, r24	; 54
	
	/* Waiting for TWINT flag to be set */
	while ( !(GET_BIT(TWCR,TWINT)) );
 76a:	06 b6       	in	r0, 0x36	; 54
 76c:	07 fe       	sbrs	r0, 7
 76e:	fd cf       	rjmp	.-6      	; 0x76a <i2c_read_byte_nack+0xc>

	return TWDR;
 770:	83 b1       	in	r24, 0x03	; 3
}
 772:	08 95       	ret

00000774 <SPI_SlaveInit>:
	{
		return SPI_NOK;
	}
	
	return SPI_OK;
}
 774:	8d b1       	in	r24, 0x0d	; 13
 776:	8f 7e       	andi	r24, 0xEF	; 239
 778:	8d b9       	out	0x0d, r24	; 13
 77a:	8d b1       	in	r24, 0x0d	; 13
 77c:	87 7f       	andi	r24, 0xF7	; 247
 77e:	8d b9       	out	0x0d, r24	; 13
 780:	8d b1       	in	r24, 0x0d	; 13
 782:	8b 7f       	andi	r24, 0xFB	; 251
 784:	8d b9       	out	0x0d, r24	; 13
 786:	8d b1       	in	r24, 0x0d	; 13
 788:	80 68       	ori	r24, 0x80	; 128
 78a:	8d b9       	out	0x0d, r24	; 13
 78c:	8d b1       	in	r24, 0x0d	; 13
 78e:	80 64       	ori	r24, 0x40	; 64
 790:	8d b9       	out	0x0d, r24	; 13
 792:	08 95       	ret

00000794 <__vector_12>:

/*************************************************************************************************************
 * 													  ISRs
 ************************************************************************************************************/
ISR(SPI_STC_INT)
{
 794:	1f 92       	push	r1
 796:	0f 92       	push	r0
 798:	0f b6       	in	r0, 0x3f	; 63
 79a:	0f 92       	push	r0
 79c:	11 24       	eor	r1, r1
 79e:	2f 93       	push	r18
 7a0:	3f 93       	push	r19
 7a2:	8f 93       	push	r24
 7a4:	9f 93       	push	r25
 7a6:	ef 93       	push	r30
 7a8:	ff 93       	push	r31
	/*------------------------ Reception ------------------------*/
	u8_g_SlaveReceive = SPDR;
 7aa:	8f b1       	in	r24, 0x0f	; 15
 7ac:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <u8_g_SlaveReceive>
	//DIO_s8SETPortVal(DIO_PORTA, u8_g_SlaveReceive);
	
	/* If Max size is exceeded, start overriding data */
	if(u8_g_SlaveRxIndex == SPI_BUFFER_SIZE) u8_g_SlaveRxIndex = 0;
 7b0:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <u8_g_SlaveRxIndex>
 7b4:	9f 30       	cpi	r25, 0x0F	; 15
 7b6:	11 f4       	brne	.+4      	; 0x7bc <__vector_12+0x28>
 7b8:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <u8_g_SlaveRxIndex>
	if(u8_g_SlaveReceive != DATA_END)
 7bc:	83 32       	cpi	r24, 0x23	; 35
 7be:	59 f0       	breq	.+22     	; 0x7d6 <__vector_12+0x42>
	{
		/* Store received byte in buffer */
		arr_g_SlaveRxBuffer[u8_g_SlaveRxIndex] = u8_g_SlaveReceive;
 7c0:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <u8_g_SlaveRxIndex>
 7c4:	e9 2f       	mov	r30, r25
 7c6:	f0 e0       	ldi	r31, 0x00	; 0
 7c8:	ed 52       	subi	r30, 0x2D	; 45
 7ca:	fe 4f       	sbci	r31, 0xFE	; 254
 7cc:	80 83       	st	Z, r24
		u8_g_SlaveRxIndex++;
 7ce:	9f 5f       	subi	r25, 0xFF	; 255
 7d0:	90 93 e4 01 	sts	0x01E4, r25	; 0x8001e4 <u8_g_SlaveRxIndex>
 7d4:	04 c0       	rjmp	.+8      	; 0x7de <__vector_12+0x4a>
	}
	else
	{	// Get the number of received bytes
		u8_g_SlaveRxLen = u8_g_SlaveRxIndex;
 7d6:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <u8_g_SlaveRxIndex>
 7da:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <u8_g_SlaveRxLen>
	}
	
	/*------------------------- Sending -------------------------*/
	//u8_g_SlaveTxIndex++;
	if((u8_g_SlaveTxIndex < u8_g_SlaveTxLen) && (pu8_g_SlaveTxPtr != null))
 7de:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <u8_g_SlaveTxIndex>
 7e2:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <u8_g_SlaveTxLen>
 7e6:	89 17       	cp	r24, r25
 7e8:	88 f4       	brcc	.+34     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7ea:	20 91 e2 01 	lds	r18, 0x01E2	; 0x8001e2 <pu8_g_SlaveTxPtr>
 7ee:	30 91 e3 01 	lds	r19, 0x01E3	; 0x8001e3 <pu8_g_SlaveTxPtr+0x1>
 7f2:	21 15       	cp	r18, r1
 7f4:	31 05       	cpc	r19, r1
 7f6:	51 f0       	breq	.+20     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
	{
		SPDR = pu8_g_SlaveTxPtr[u8_g_SlaveTxIndex++];
 7f8:	91 e0       	ldi	r25, 0x01	; 1
 7fa:	98 0f       	add	r25, r24
 7fc:	90 93 e5 01 	sts	0x01E5, r25	; 0x8001e5 <u8_g_SlaveTxIndex>
 800:	f9 01       	movw	r30, r18
 802:	e8 0f       	add	r30, r24
 804:	f1 1d       	adc	r31, r1
 806:	80 81       	ld	r24, Z
 808:	8f b9       	out	0x0f, r24	; 15
 80a:	04 c0       	rjmp	.+8      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
	}
	else if(u8_g_SlaveTxIndex >= u8_g_SlaveTxLen)
 80c:	89 17       	cp	r24, r25
 80e:	10 f0       	brcs	.+4      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
	{
		SPDR = DATA_END;
 810:	83 e2       	ldi	r24, 0x23	; 35
 812:	8f b9       	out	0x0f, r24	; 15
	}
 814:	ff 91       	pop	r31
 816:	ef 91       	pop	r30
 818:	9f 91       	pop	r25
 81a:	8f 91       	pop	r24
 81c:	3f 91       	pop	r19
 81e:	2f 91       	pop	r18
 820:	0f 90       	pop	r0
 822:	0f be       	out	0x3f, r0	; 63
 824:	0f 90       	pop	r0
 826:	1f 90       	pop	r1
 828:	18 95       	reti

0000082a <USART_init>:
	CLEAR_BIT(UCSRB,UCSZ2);
	
	#elif USART_SET_DATA_SIZE == USART_DATA_SIZE_8
	SET_BIT(UCSRC,UCSZ0);
	SET_BIT(UCSRC,UCSZ1);
	CLEAR_BIT(UCSRB,UCSZ2);
 82a:	8a b1       	in	r24, 0x0a	; 10
 82c:	8b 7f       	andi	r24, 0xFB	; 251
	
	#endif
	
	/* select USART Speed (Normal,Double) */
	#if USART_SET_SPEED == USART_NORMAL_SPEED
	CLEAR_BIT(UCSRA,U2X);
 82e:	9b b1       	in	r25, 0x0b	; 11
 830:	9d 7f       	andi	r25, 0xFD	; 253
 832:	9b b9       	out	0x0b, r25	; 11
	return USART_NOT_OK;
	
	#endif
	/* Enable Transmit and receive bits in UCSRB*/
	SET_BIT(UCSRB,RXEN);
	SET_BIT(UCSRB,TXEN);
 834:	88 61       	ori	r24, 0x18	; 24
 836:	8a b9       	out	0x0a, r24	; 10
	
	/* assign UBRRL and UBRRH with calculated BAUD_PRESCALLER */
	UBRRL = BAUD_PRESCALLER;
 838:	83 e3       	ldi	r24, 0x33	; 51
 83a:	89 b9       	out	0x09, r24	; 9
	UBRRH = (BAUD_PRESCALLER>>8);
 83c:	10 bc       	out	0x20, r1	; 32
	
   return USART_OK;
}
 83e:	80 e0       	ldi	r24, 0x00	; 0
 840:	08 95       	ret

00000842 <USART_sendData>:
EN_USART_ERROR USART_sendData(Uchar8_t data)
{
	// WAIT UNTIL ISEMPTY FLAG IS SET
	while(!GET_BIT(UCSRA,UDRE));
 842:	5d 9b       	sbis	0x0b, 5	; 11
 844:	fe cf       	rjmp	.-4      	; 0x842 <USART_sendData>
	
	// assign data to UDR register to be sent
	UDR = data;
 846:	8c b9       	out	0x0c, r24	; 12
	
	return USART_OK;
}
 848:	80 e0       	ldi	r24, 0x00	; 0
 84a:	08 95       	ret

0000084c <USART_receiveData>:
Uchar8_t USART_receiveData(void)
{
	// WAIT UNTIL Recieve FLAG IS SET
	while(!GET_BIT(UCSRA,RXC));
 84c:	5f 9b       	sbis	0x0b, 7	; 11
 84e:	fe cf       	rjmp	.-4      	; 0x84c <USART_receiveData>
	return UDR;
}
 850:	8c b1       	in	r24, 0x0c	; 12
 852:	08 95       	ret

00000854 <USART_sendSTRING>:
void USART_sendSTRING(Uchar8_t * str)
{
 854:	0f 93       	push	r16
 856:	1f 93       	push	r17
 858:	cf 93       	push	r28
 85a:	8c 01       	movw	r16, r24
	Uchar8_t COUNTER = 0;
 85c:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[COUNTER] != null)
 85e:	03 c0       	rjmp	.+6      	; 0x866 <__stack+0x7>
	{
		USART_sendData(str[COUNTER]);
 860:	0e 94 21 04 	call	0x842	; 0x842 <USART_sendData>
		COUNTER++;
 864:	cf 5f       	subi	r28, 0xFF	; 255
	return UDR;
}
void USART_sendSTRING(Uchar8_t * str)
{
	Uchar8_t COUNTER = 0;
	while(str[COUNTER] != null)
 866:	f8 01       	movw	r30, r16
 868:	ec 0f       	add	r30, r28
 86a:	f1 1d       	adc	r31, r1
 86c:	80 81       	ld	r24, Z
 86e:	81 11       	cpse	r24, r1
 870:	f7 cf       	rjmp	.-18     	; 0x860 <__stack+0x1>
	{
		USART_sendData(str[COUNTER]);
		COUNTER++;
	}
}
 872:	cf 91       	pop	r28
 874:	1f 91       	pop	r17
 876:	0f 91       	pop	r16
 878:	08 95       	ret

0000087a <USART_receiveSTRING>:
void USART_receiveSTRING(Uchar8_t * str ,Uchar8_t size )
{
 87a:	0f 93       	push	r16
 87c:	1f 93       	push	r17
 87e:	cf 93       	push	r28
 880:	df 93       	push	r29
 882:	8c 01       	movw	r16, r24
 884:	d6 2f       	mov	r29, r22
	Uchar8_t COUNTER = 0;
 886:	c0 e0       	ldi	r28, 0x00	; 0
	while(COUNTER < size-1)
 888:	0b c0       	rjmp	.+22     	; 0x8a0 <USART_receiveSTRING+0x26>
	{
		
		str[COUNTER]= USART_receiveData();
 88a:	0e 94 26 04 	call	0x84c	; 0x84c <USART_receiveData>
 88e:	f8 01       	movw	r30, r16
 890:	ec 0f       	add	r30, r28
 892:	f1 1d       	adc	r31, r1
 894:	80 83       	st	Z, r24
		if(str[COUNTER] == ENTER_KEY)break;
 896:	8d 30       	cpi	r24, 0x0D	; 13
 898:	59 f0       	breq	.+22     	; 0x8b0 <USART_receiveSTRING+0x36>
		USART_sendData(str[COUNTER]);
 89a:	0e 94 21 04 	call	0x842	; 0x842 <USART_sendData>
		COUNTER++;
 89e:	cf 5f       	subi	r28, 0xFF	; 255
	}
}
void USART_receiveSTRING(Uchar8_t * str ,Uchar8_t size )
{
	Uchar8_t COUNTER = 0;
	while(COUNTER < size-1)
 8a0:	2c 2f       	mov	r18, r28
 8a2:	30 e0       	ldi	r19, 0x00	; 0
 8a4:	8d 2f       	mov	r24, r29
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	01 97       	sbiw	r24, 0x01	; 1
 8aa:	28 17       	cp	r18, r24
 8ac:	39 07       	cpc	r19, r25
 8ae:	6c f3       	brlt	.-38     	; 0x88a <USART_receiveSTRING+0x10>
		str[COUNTER]= USART_receiveData();
		if(str[COUNTER] == ENTER_KEY)break;
		USART_sendData(str[COUNTER]);
		COUNTER++;
	}
	str[COUNTER] = null;
 8b0:	f8 01       	movw	r30, r16
 8b2:	ec 0f       	add	r30, r28
 8b4:	f1 1d       	adc	r31, r1
 8b6:	10 82       	st	Z, r1
}
 8b8:	df 91       	pop	r29
 8ba:	cf 91       	pop	r28
 8bc:	1f 91       	pop	r17
 8be:	0f 91       	pop	r16
 8c0:	08 95       	ret

000008c2 <_exit>:
 8c2:	f8 94       	cli

000008c4 <__stop_program>:
 8c4:	ff cf       	rjmp	.-2      	; 0x8c4 <__stop_program>
