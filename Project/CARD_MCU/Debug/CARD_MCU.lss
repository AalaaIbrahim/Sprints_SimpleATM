
CARD_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000160  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800060  00800060  000001d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fb4  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000099f  00000000  00000000  00001314  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000082e  00000000  00000000  00001cb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  000024e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c9  00000000  00000000  0000270c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005e3  00000000  00000000  00002dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000033b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 57 00 	jmp	0xae	; 0xae <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e6       	ldi	r30, 0x60	; 96
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 37       	cpi	r26, 0x76	; 118
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  8a:	0c 94 ae 00 	jmp	0x15c	; 0x15c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_Init>:
	else HUSART_sendSTRING((Uchar8_t*)"\r\nCORRECT PAN");
	return PANGET_OK;
}
void APP_Init(void)
{
	(void)HUSART_enInit();
  92:	0e 94 4d 00 	call	0x9a	; 0x9a <HUSART_enInit>
  96:	08 95       	ret

00000098 <APP_Start>:

}


void APP_Start(void)
{
  98:	08 95       	ret

0000009a <HUSART_enInit>:
#include "husart.h"


EN_USART_ERROR HUSART_enInit(void)
{
	if(USART_init())return USART_NOT_OK;
  9a:	0e 94 a2 00 	call	0x144	; 0x144 <USART_init>
  9e:	81 11       	cpse	r24, r1
  a0:	81 e0       	ldi	r24, 0x01	; 1
	return USART_OK;
}
  a2:	08 95       	ret

000000a4 <main>:
 * Author : ME
 */ 
#include "APP/app.h"
int main(void)
{
	APP_Init();
  a4:	0e 94 49 00 	call	0x92	; 0x92 <APP_Init>
    while (1) 
    {
      APP_Start();
  a8:	0e 94 4c 00 	call	0x98	; 0x98 <APP_Start>
  ac:	fd cf       	rjmp	.-6      	; 0xa8 <main+0x4>

000000ae <__vector_12>:

/*************************************************************************************************************
 * 													  ISRs
 ************************************************************************************************************/
ISR(SPI_STC_INT)
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	2f 93       	push	r18
  ba:	3f 93       	push	r19
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	ef 93       	push	r30
  c2:	ff 93       	push	r31
	/*------------------------ Reception ------------------------*/
	u8_g_SlaveReceive = SPDR;
  c4:	8f b1       	in	r24, 0x0f	; 15
  c6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <u8_g_SlaveReceive>
	//DIO_s8SETPortVal(DIO_PORTA, u8_g_SlaveReceive);
	
	/* If Max size is exceeded, start overriding data */
	if(u8_g_SlaveRxIndex == SPI_BUFFER_SIZE) u8_g_SlaveRxIndex = 0;
  ca:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <u8_g_SlaveRxIndex>
  ce:	9f 30       	cpi	r25, 0x0F	; 15
  d0:	11 f4       	brne	.+4      	; 0xd6 <__vector_12+0x28>
  d2:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <u8_g_SlaveRxIndex>
	if(u8_g_SlaveReceive != DATA_END)
  d6:	83 32       	cpi	r24, 0x23	; 35
  d8:	59 f0       	breq	.+22     	; 0xf0 <__vector_12+0x42>
	{
		/* Store received byte in buffer */
		arr_g_SlaveRxBuffer[u8_g_SlaveRxIndex] = u8_g_SlaveReceive;
  da:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <u8_g_SlaveRxIndex>
  de:	e9 2f       	mov	r30, r25
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	e0 5a       	subi	r30, 0xA0	; 160
  e4:	ff 4f       	sbci	r31, 0xFF	; 255
  e6:	80 83       	st	Z, r24
		u8_g_SlaveRxIndex++;
  e8:	9f 5f       	subi	r25, 0xFF	; 255
  ea:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <u8_g_SlaveRxIndex>
  ee:	04 c0       	rjmp	.+8      	; 0xf8 <__vector_12+0x4a>
	}
	else
	{	// Get the number of received bytes
		u8_g_SlaveRxLen = u8_g_SlaveRxIndex;
  f0:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <u8_g_SlaveRxIndex>
  f4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <u8_g_SlaveRxLen>
	}
	
	/*------------------------- Sending -------------------------*/
	//u8_g_SlaveTxIndex++;
	if((u8_g_SlaveTxIndex < u8_g_SlaveTxLen) && (pu8_g_SlaveTxPtr != NULL))
  f8:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <u8_g_SlaveTxIndex>
  fc:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <u8_g_SlaveTxLen>
 100:	89 17       	cp	r24, r25
 102:	88 f4       	brcc	.+34     	; 0x126 <__vector_12+0x78>
 104:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <pu8_g_SlaveTxPtr>
 108:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <pu8_g_SlaveTxPtr+0x1>
 10c:	21 15       	cp	r18, r1
 10e:	31 05       	cpc	r19, r1
 110:	51 f0       	breq	.+20     	; 0x126 <__vector_12+0x78>
	{
		SPDR = pu8_g_SlaveTxPtr[u8_g_SlaveTxIndex++];
 112:	91 e0       	ldi	r25, 0x01	; 1
 114:	98 0f       	add	r25, r24
 116:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <u8_g_SlaveTxIndex>
 11a:	f9 01       	movw	r30, r18
 11c:	e8 0f       	add	r30, r24
 11e:	f1 1d       	adc	r31, r1
 120:	80 81       	ld	r24, Z
 122:	8f b9       	out	0x0f, r24	; 15
 124:	04 c0       	rjmp	.+8      	; 0x12e <__vector_12+0x80>
	}
	else if(u8_g_SlaveTxIndex >= u8_g_SlaveTxLen)
 126:	89 17       	cp	r24, r25
 128:	10 f0       	brcs	.+4      	; 0x12e <__vector_12+0x80>
	{
		SPDR = DATA_END;
 12a:	83 e2       	ldi	r24, 0x23	; 35
 12c:	8f b9       	out	0x0f, r24	; 15
	}
 12e:	ff 91       	pop	r31
 130:	ef 91       	pop	r30
 132:	9f 91       	pop	r25
 134:	8f 91       	pop	r24
 136:	3f 91       	pop	r19
 138:	2f 91       	pop	r18
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <USART_init>:
	CLEAR_BIT(UCSRB,UCSZ2);
	
	#elif USART_SET_DATA_SIZE == USART_DATA_SIZE_8
	SET_BIT(UCSRC,UCSZ0);
	SET_BIT(UCSRC,UCSZ1);
	CLEAR_BIT(UCSRB,UCSZ2);
 144:	8a b1       	in	r24, 0x0a	; 10
 146:	8b 7f       	andi	r24, 0xFB	; 251
	
	#endif
	
	/* select USART Speed (Normal,Double) */
	#if USART_SET_SPEED == USART_NORMAL_SPEED
	CLEAR_BIT(UCSRA,U2X);
 148:	9b b1       	in	r25, 0x0b	; 11
 14a:	9d 7f       	andi	r25, 0xFD	; 253
 14c:	9b b9       	out	0x0b, r25	; 11
	return USART_NOT_OK;
	
	#endif
	/* Enable Transmit and receive bits in UCSRB*/
	SET_BIT(UCSRB,RXEN);
	SET_BIT(UCSRB,TXEN);
 14e:	88 61       	ori	r24, 0x18	; 24
 150:	8a b9       	out	0x0a, r24	; 10
	
	/* assign UBRRL and UBRRH with calculated BAUD_PRESCALLER */
	UBRRL = BAUD_PRESCALLER;
 152:	83 e3       	ldi	r24, 0x33	; 51
 154:	89 b9       	out	0x09, r24	; 9
	UBRRH = (BAUD_PRESCALLER>>8);
 156:	10 bc       	out	0x20, r1	; 32
	
   return USART_OK;
}
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	08 95       	ret

0000015c <_exit>:
 15c:	f8 94       	cli

0000015e <__stop_program>:
 15e:	ff cf       	rjmp	.-2      	; 0x15e <__stop_program>
