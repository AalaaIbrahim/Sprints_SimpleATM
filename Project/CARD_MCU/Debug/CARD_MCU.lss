
CARD_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000016e  00800060  000008aa  0000093e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000042  008001ce  008001ce  00000aac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000aac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000adc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d8  00000000  00000000  00000b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a0a  00000000  00000000  00000df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001000  00000000  00000000  000037fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001913  00000000  00000000  000047fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000064c  00000000  00000000  00006110  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ecc  00000000  00000000  0000675c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000019df  00000000  00000000  00007628  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000238  00000000  00000000  00009007  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 bc 03 	jmp	0x778	; 0x778 <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ea       	ldi	r30, 0xAA	; 170
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 3c       	cpi	r26, 0xCE	; 206
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	ae ec       	ldi	r26, 0xCE	; 206
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 31       	cpi	r26, 0x10	; 16
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b7 02 	call	0x56e	; 0x56e <main>
  8a:	0c 94 53 04 	jmp	0x8a6	; 0x8a6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_Init>:
* 											Function Implementation
************************************************************************************************************/

void APP_Init(void)
{
	(void)HUSART_enInit();
  92:	0e 94 9d 02 	call	0x53a	; 0x53a <HUSART_enInit>
	HSPI_SlaveInit();
  96:	0e 94 69 02 	call	0x4d2	; 0x4d2 <HSPI_SlaveInit>
	sei();
  9a:	78 94       	sei
  9c:	08 95       	ret

0000009e <APP_Start>:
void APP_Start(void)
{
	// 	APP_terminalPanGet(pan_arr);
	// 	HUSART_sendSTRING(pan_arr);
	
	switch(u8_g_CardState)
  9e:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <__data_end>
  a2:	82 30       	cpi	r24, 0x02	; 2
  a4:	09 f4       	brne	.+2      	; 0xa8 <APP_Start+0xa>
  a6:	4a c0       	rjmp	.+148    	; 0x13c <APP_Start+0x9e>
  a8:	28 f4       	brcc	.+10     	; 0xb4 <APP_Start+0x16>
  aa:	88 23       	and	r24, r24
  ac:	51 f0       	breq	.+20     	; 0xc2 <APP_Start+0x24>
  ae:	81 30       	cpi	r24, 0x01	; 1
  b0:	c1 f1       	breq	.+112    	; 0x122 <APP_Start+0x84>
  b2:	08 95       	ret
  b4:	83 30       	cpi	r24, 0x03	; 3
  b6:	09 f4       	brne	.+2      	; 0xba <APP_Start+0x1c>
  b8:	53 c0       	rjmp	.+166    	; 0x160 <APP_Start+0xc2>
  ba:	84 30       	cpi	r24, 0x04	; 4
  bc:	09 f4       	brne	.+2      	; 0xc0 <APP_Start+0x22>
  be:	63 c0       	rjmp	.+198    	; 0x186 <APP_Start+0xe8>
  c0:	08 95       	ret
	{
		case CardGetMode:
		{
			u8_g_EepromFlag = eeprom_read_byte(0x0050);
  c2:	80 e5       	ldi	r24, 0x50	; 80
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 fd 01 	call	0x3fa	; 0x3fa <eeprom_read_byte>
  ca:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <u8_g_EepromFlag>
			if(u8_g_EepromFlag == 0xFF) u8_g_CardState = CardProgMode_GetPan;
  ce:	8f 3f       	cpi	r24, 0xFF	; 255
  d0:	21 f4       	brne	.+8      	; 0xda <APP_Start+0x3c>
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <__data_end>
  d8:	08 95       	ret
			else
			{
				HUSART_sendSTRING("Please press 1 for entering user mode\rand 2 for programming mode:\r");
  da:	80 e7       	ldi	r24, 0x70	; 112
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 b1 02 	call	0x562	; 0x562 <HUSART_sendSTRING>
				while(HUSART_enRecieveData(&u8_gs_ModeSelect));
  e2:	83 ee       	ldi	r24, 0xE3	; 227
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	0e 94 a7 02 	call	0x54e	; 0x54e <HUSART_enRecieveData>
  ea:	81 11       	cpse	r24, r1
  ec:	fa cf       	rjmp	.-12     	; 0xe2 <APP_Start+0x44>
				HUSART_enSendData(u8_gs_ModeSelect);
  ee:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <u8_gs_ModeSelect>
  f2:	0e 94 a2 02 	call	0x544	; 0x544 <HUSART_enSendData>
				HUSART_enSendData('\r\r');
  f6:	8d e0       	ldi	r24, 0x0D	; 13
  f8:	0e 94 a2 02 	call	0x544	; 0x544 <HUSART_enSendData>
				if('1' == u8_gs_ModeSelect)	u8_g_CardState = CardUserMode;
  fc:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <u8_gs_ModeSelect>
 100:	81 33       	cpi	r24, 0x31	; 49
 102:	21 f4       	brne	.+8      	; 0x10c <APP_Start+0x6e>
 104:	83 e0       	ldi	r24, 0x03	; 3
 106:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <__data_end>
 10a:	08 95       	ret
				else if('2' == u8_gs_ModeSelect) u8_g_CardState = CardProgMode_GetPan;
 10c:	82 33       	cpi	r24, 0x32	; 50
 10e:	21 f4       	brne	.+8      	; 0x118 <APP_Start+0x7a>
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <__data_end>
 116:	08 95       	ret
				else HUSART_sendSTRING("Invalid Choice, ");
 118:	83 eb       	ldi	r24, 0xB3	; 179
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 b1 02 	call	0x562	; 0x562 <HUSART_sendSTRING>
 120:	08 95       	ret
			}
			break;
		}
		case CardProgMode_GetPan:
		{
			u8_g_PanValid = APP_terminalPanGet(pan_arr);
 122:	89 ef       	ldi	r24, 0xF9	; 249
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	0e 94 0a 01 	call	0x214	; 0x214 <APP_terminalPanGet>
 12a:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <u8_g_PanValid>
			if(PANGET_OK == u8_g_PanValid) u8_g_CardState = CardProgMode_GetPin;
 12e:	81 30       	cpi	r24, 0x01	; 1
 130:	09 f0       	breq	.+2      	; 0x134 <APP_Start+0x96>
 132:	45 c0       	rjmp	.+138    	; 0x1be <APP_Start+0x120>
 134:	82 e0       	ldi	r24, 0x02	; 2
 136:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <__data_end>
 13a:	08 95       	ret
			break;
		}
		case CardProgMode_GetPin:
		{
			if(CARD_MatchPINs() == PIN_Match_OK)
 13c:	0e 94 92 01 	call	0x324	; 0x324 <CARD_MatchPINs>
 140:	81 30       	cpi	r24, 0x01	; 1
 142:	51 f4       	brne	.+20     	; 0x158 <APP_Start+0xba>
			{
				SaveCardData(pan_arr,pin_arr);
 144:	65 ee       	ldi	r22, 0xE5	; 229
 146:	71 e0       	ldi	r23, 0x01	; 1
 148:	89 ef       	ldi	r24, 0xF9	; 249
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	0e 94 34 01 	call	0x268	; 0x268 <SaveCardData>
				u8_g_CardState = CardUserMode;
 150:	83 e0       	ldi	r24, 0x03	; 3
 152:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <__data_end>
 156:	08 95       	ret
			}
			else u8_g_CardState = CardProgMode_GetPin;
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <__data_end>
 15e:	08 95       	ret
			break;
		}
		case CardUserMode:
		{
			HUSART_sendSTRING("\r------------- User Mode -------------\r");
 160:	84 ec       	ldi	r24, 0xC4	; 196
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 b1 02 	call	0x562	; 0x562 <HUSART_sendSTRING>
			//_delay_ms(5000);
			/* Trigger ATM */
			HSPI_SlaveRequest(pin_arr, PIN_LENGTH);
 168:	65 e0       	ldi	r22, 0x05	; 5
 16a:	85 ee       	ldi	r24, 0xE5	; 229
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	0e 94 88 02 	call	0x510	; 0x510 <HSPI_SlaveRequest>
			
			/* Get PIN from EEPROM to prepare data in SPI buffer */
			ReadCardData(pan_arr,pin_arr);
 172:	65 ee       	ldi	r22, 0xE5	; 229
 174:	71 e0       	ldi	r23, 0x01	; 1
 176:	89 ef       	ldi	r24, 0xF9	; 249
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <ReadCardData>
			u8_g_CardState = CardCommMode;
 17e:	84 e0       	ldi	r24, 0x04	; 4
 180:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <__data_end>
			break;
 184:	08 95       	ret
		}
		case CardCommMode:
		{
			if(CARD_PIN_REQUEST == u8_g_SlaveReceive)
 186:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <u8_g_SlaveReceive>
 18a:	80 35       	cpi	r24, 0x50	; 80
 18c:	41 f4       	brne	.+16     	; 0x19e <APP_Start+0x100>
			{
				u8_g_SlaveReceive = 0;
 18e:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <u8_g_SlaveReceive>
				HSPI_SlaveSetData(pin_arr, PIN_LENGTH);
 192:	65 e0       	ldi	r22, 0x05	; 5
 194:	85 ee       	ldi	r24, 0xE5	; 229
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	0e 94 94 02 	call	0x528	; 0x528 <HSPI_SlaveSetData>
 19c:	08 95       	ret
			}
			else if(CARD_PAN_REQUEST == u8_g_SlaveReceive)
 19e:	87 34       	cpi	r24, 0x47	; 71
 1a0:	41 f4       	brne	.+16     	; 0x1b2 <APP_Start+0x114>
			{
				u8_g_SlaveReceive = 0;
 1a2:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <u8_g_SlaveReceive>
				HSPI_SlaveSetData(pan_arr, PAN_LENGTH);
 1a6:	64 e1       	ldi	r22, 0x14	; 20
 1a8:	89 ef       	ldi	r24, 0xF9	; 249
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	0e 94 94 02 	call	0x528	; 0x528 <HSPI_SlaveSetData>
 1b0:	08 95       	ret
			}
			else if(ATM_REQUEST_EJECTED == u8_g_SlaveReceive)
 1b2:	85 34       	cpi	r24, 0x45	; 69
 1b4:	21 f4       	brne	.+8      	; 0x1be <APP_Start+0x120>
			{
				u8_g_SlaveReceive = 0;
 1b6:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <u8_g_SlaveReceive>
				u8_g_CardState = CardGetMode;
 1ba:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <__data_end>
 1be:	08 95       	ret

000001c0 <APP_terminalPinGet>:
 * FUNCTION			: APP_terminalPinGet
 * DESCRIPTION		: Get pin from User within terminal and doing some validation
 * RETURN			: en_terminalPinGetStatus_t {PINGET_NOK or PINGET_OK}
 */
en_terminalPinGetStatus_t APP_terminalPinGet(Uchar8_t* arr)
{
 1c0:	0f 93       	push	r16
 1c2:	1f 93       	push	r17
 1c4:	cf 93       	push	r28
 1c6:	8c 01       	movw	r16, r24
	en_terminalPinGetStatus_t errorStatus = PINGET_OK;

	Uchar8_t counter = 0, flag = 0;
	HUSART_receiveSTRING(arr, 5);
 1c8:	65 e0       	ldi	r22, 0x05	; 5
 1ca:	0e 94 b4 02 	call	0x568	; 0x568 <HUSART_receiveSTRING>
 */
en_terminalPinGetStatus_t APP_terminalPinGet(Uchar8_t* arr)
{
	en_terminalPinGetStatus_t errorStatus = PINGET_OK;

	Uchar8_t counter = 0, flag = 0;
 1ce:	c0 e0       	ldi	r28, 0x00	; 0
	HUSART_receiveSTRING(arr, 5);
	while(arr[counter] != null)
 1d0:	0c c0       	rjmp	.+24     	; 0x1ea <APP_terminalPinGet+0x2a>
	{
		if(arr[counter] >= '0' && arr[counter] <= '9')
 1d2:	80 53       	subi	r24, 0x30	; 48
 1d4:	8a 30       	cpi	r24, 0x0A	; 10
 1d6:	10 f4       	brcc	.+4      	; 0x1dc <APP_terminalPinGet+0x1c>
		{
			counter++;
 1d8:	cf 5f       	subi	r28, 0xFF	; 255
 1da:	07 c0       	rjmp	.+14     	; 0x1ea <APP_terminalPinGet+0x2a>
		}
		else
		{
			HUSART_sendSTRING( (Uchar8_t*) "\rNot numeric ");
 1dc:	8c ee       	ldi	r24, 0xEC	; 236
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 b1 02 	call	0x562	; 0x562 <HUSART_sendSTRING>
			flag = 1;
 1e4:	91 e0       	ldi	r25, 0x01	; 1
			errorStatus = PINGET_NOK;
 1e6:	80 e0       	ldi	r24, 0x00	; 0
			break;
 1e8:	08 c0       	rjmp	.+16     	; 0x1fa <APP_terminalPinGet+0x3a>
{
	en_terminalPinGetStatus_t errorStatus = PINGET_OK;

	Uchar8_t counter = 0, flag = 0;
	HUSART_receiveSTRING(arr, 5);
	while(arr[counter] != null)
 1ea:	f8 01       	movw	r30, r16
 1ec:	ec 0f       	add	r30, r28
 1ee:	f1 1d       	adc	r31, r1
 1f0:	80 81       	ld	r24, Z
 1f2:	81 11       	cpse	r24, r1
 1f4:	ee cf       	rjmp	.-36     	; 0x1d2 <APP_terminalPinGet+0x12>
 */
en_terminalPinGetStatus_t APP_terminalPinGet(Uchar8_t* arr)
{
	en_terminalPinGetStatus_t errorStatus = PINGET_OK;

	Uchar8_t counter = 0, flag = 0;
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 * DESCRIPTION		: Get pin from User within terminal and doing some validation
 * RETURN			: en_terminalPinGetStatus_t {PINGET_NOK or PINGET_OK}
 */
en_terminalPinGetStatus_t APP_terminalPinGet(Uchar8_t* arr)
{
	en_terminalPinGetStatus_t errorStatus = PINGET_OK;
 1f8:	81 e0       	ldi	r24, 0x01	; 1
			flag = 1;
			errorStatus = PINGET_NOK;
			break;
		}
	}
	if(counter < 4 && flag == 0)
 1fa:	c4 30       	cpi	r28, 0x04	; 4
 1fc:	38 f4       	brcc	.+14     	; 0x20c <APP_terminalPinGet+0x4c>
 1fe:	91 11       	cpse	r25, r1
 200:	05 c0       	rjmp	.+10     	; 0x20c <APP_terminalPinGet+0x4c>
	{
		HUSART_sendSTRING( (Uchar8_t*) "\rbelow 4 dig ");
 202:	8a ef       	ldi	r24, 0xFA	; 250
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 b1 02 	call	0x562	; 0x562 <HUSART_sendSTRING>
		errorStatus = PINGET_NOK;
 20a:	80 e0       	ldi	r24, 0x00	; 0
	}
	return errorStatus;
}
 20c:	cf 91       	pop	r28
 20e:	1f 91       	pop	r17
 210:	0f 91       	pop	r16
 212:	08 95       	ret

00000214 <APP_terminalPanGet>:
 * FUNCTION			: APP_terminalPanGet
 * DESCRIPTION		: Get pan from User within terminal and doing some validation
 * RETURN			: en_terminalPanGetStatus_t {PANGET_NOK or PANGET_OK}
 */
en_terminalPanGetStatus_t APP_terminalPanGet(Uchar8_t* arr)
{
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	ec 01       	movw	r28, r24
	Uchar8_t loc_counter=0;
	HUSART_sendSTRING((Uchar8_t*)"\r\nEnter Card Pan : \r");
 21a:	88 e0       	ldi	r24, 0x08	; 8
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	0e 94 b1 02 	call	0x562	; 0x562 <HUSART_sendSTRING>
	HUSART_receiveSTRING(arr,20);
 222:	64 e1       	ldi	r22, 0x14	; 20
 224:	ce 01       	movw	r24, r28
 226:	0e 94 b4 02 	call	0x568	; 0x568 <HUSART_receiveSTRING>
 * DESCRIPTION		: Get pan from User within terminal and doing some validation
 * RETURN			: en_terminalPanGetStatus_t {PANGET_NOK or PANGET_OK}
 */
en_terminalPanGetStatus_t APP_terminalPanGet(Uchar8_t* arr)
{
	Uchar8_t loc_counter=0;
 22a:	90 e0       	ldi	r25, 0x00	; 0
	HUSART_sendSTRING((Uchar8_t*)"\r\nEnter Card Pan : \r");
	HUSART_receiveSTRING(arr,20);
	while(arr[loc_counter] != null)
 22c:	0b c0       	rjmp	.+22     	; 0x244 <APP_terminalPanGet+0x30>
	{
		if(arr[loc_counter] >= '0' && arr[loc_counter] <= '9')
 22e:	80 53       	subi	r24, 0x30	; 48
 230:	8a 30       	cpi	r24, 0x0A	; 10
 232:	10 f4       	brcc	.+4      	; 0x238 <APP_terminalPanGet+0x24>
		{
			loc_counter++;
 234:	9f 5f       	subi	r25, 0xFF	; 255
 236:	06 c0       	rjmp	.+12     	; 0x244 <APP_terminalPanGet+0x30>
		}
		else
		{
			HUSART_sendSTRING((Uchar8_t*) "\r\nInvalid Pan Number - must contain Numbers only");
 238:	8d e1       	ldi	r24, 0x1D	; 29
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	0e 94 b1 02 	call	0x562	; 0x562 <HUSART_sendSTRING>
			return PANGET_NOK;
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	0f c0       	rjmp	.+30     	; 0x262 <APP_terminalPanGet+0x4e>
en_terminalPanGetStatus_t APP_terminalPanGet(Uchar8_t* arr)
{
	Uchar8_t loc_counter=0;
	HUSART_sendSTRING((Uchar8_t*)"\r\nEnter Card Pan : \r");
	HUSART_receiveSTRING(arr,20);
	while(arr[loc_counter] != null)
 244:	fe 01       	movw	r30, r28
 246:	e9 0f       	add	r30, r25
 248:	f1 1d       	adc	r31, r1
 24a:	80 81       	ld	r24, Z
 24c:	81 11       	cpse	r24, r1
 24e:	ef cf       	rjmp	.-34     	; 0x22e <APP_terminalPanGet+0x1a>
		{
			HUSART_sendSTRING((Uchar8_t*) "\r\nInvalid Pan Number - must contain Numbers only");
			return PANGET_NOK;
		}
	}
	if(loc_counter<16)
 250:	90 31       	cpi	r25, 0x10	; 16
 252:	30 f4       	brcc	.+12     	; 0x260 <APP_terminalPanGet+0x4c>
	{
	 HUSART_sendSTRING((Uchar8_t*) "\r\nInvalid Pan Number - must contain at least 16 numbers");
 254:	8e e4       	ldi	r24, 0x4E	; 78
 256:	91 e0       	ldi	r25, 0x01	; 1
 258:	0e 94 b1 02 	call	0x562	; 0x562 <HUSART_sendSTRING>
	 return PANGET_NOK;
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	01 c0       	rjmp	.+2      	; 0x262 <APP_terminalPanGet+0x4e>
	}
	return PANGET_OK;
 260:	81 e0       	ldi	r24, 0x01	; 1
}
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	08 95       	ret

00000268 <SaveCardData>:


EN_TerminalDataState SaveCardData(Uchar8_t *CardPan,Uchar8_t *CardPin)
{
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
	EN_TerminalDataState ret = DATA_NSAVED;
	
	if(CardPan == null || CardPin == null)
 26c:	00 97       	sbiw	r24, 0x00	; 0
 26e:	71 f1       	breq	.+92     	; 0x2cc <SaveCardData+0x64>
 270:	61 15       	cp	r22, r1
 272:	71 05       	cpc	r23, r1
 274:	69 f1       	breq	.+90     	; 0x2d0 <SaveCardData+0x68>
 276:	eb 01       	movw	r28, r22
 278:	bc 01       	movw	r22, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 27a:	8f e4       	ldi	r24, 0x4F	; 79
 27c:	93 ec       	ldi	r25, 0xC3	; 195
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <SaveCardData+0x16>
 282:	00 c0       	rjmp	.+0      	; 0x284 <SaveCardData+0x1c>
 284:	00 00       	nop
		ret = DATA_NSAVED;
	}
	else
	{
		_delay_ms(200);
		eeprom_write_string(0x0000,CardPan);
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	0e 94 1a 02 	call	0x434	; 0x434 <eeprom_write_string>
 28e:	8f e4       	ldi	r24, 0x4F	; 79
 290:	93 ec       	ldi	r25, 0xC3	; 195
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <SaveCardData+0x2a>
 296:	00 c0       	rjmp	.+0      	; 0x298 <SaveCardData+0x30>
 298:	00 00       	nop
		_delay_ms(200);
		eeprom_write_string(0x0020,CardPin);
 29a:	be 01       	movw	r22, r28
 29c:	80 e2       	ldi	r24, 0x20	; 32
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	0e 94 1a 02 	call	0x434	; 0x434 <eeprom_write_string>
 2a4:	8f e4       	ldi	r24, 0x4F	; 79
 2a6:	93 ec       	ldi	r25, 0xC3	; 195
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <SaveCardData+0x40>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <SaveCardData+0x46>
 2ae:	00 00       	nop
		_delay_ms(200);
		eeprom_write_string(0x0050, (Uchar8_t*)"1");
 2b0:	66 e8       	ldi	r22, 0x86	; 134
 2b2:	71 e0       	ldi	r23, 0x01	; 1
 2b4:	80 e5       	ldi	r24, 0x50	; 80
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 1a 02 	call	0x434	; 0x434 <eeprom_write_string>
 2bc:	8f e4       	ldi	r24, 0x4F	; 79
 2be:	93 ec       	ldi	r25, 0xC3	; 195
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <SaveCardData+0x58>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <SaveCardData+0x5e>
 2c6:	00 00       	nop
		_delay_ms(200);
		ret = DATA_SAVED;
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	03 c0       	rjmp	.+6      	; 0x2d2 <SaveCardData+0x6a>
{
	EN_TerminalDataState ret = DATA_NSAVED;
	
	if(CardPan == null || CardPin == null)
	{
		ret = DATA_NSAVED;
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	01 c0       	rjmp	.+2      	; 0x2d2 <SaveCardData+0x6a>
 2d0:	81 e0       	ldi	r24, 0x01	; 1
		_delay_ms(200);
		ret = DATA_SAVED;
	}
	
	return ret;
}
 2d2:	df 91       	pop	r29
 2d4:	cf 91       	pop	r28
 2d6:	08 95       	ret

000002d8 <ReadCardData>:

EN_TerminalDataState ReadCardData(Uchar8_t *CardPan,Uchar8_t *CardPin)
{
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
		EN_TerminalDataState ret = DATA_NREAD;
		
		if(CardPan == null || CardPin == null)
 2dc:	00 97       	sbiw	r24, 0x00	; 0
 2de:	e1 f0       	breq	.+56     	; 0x318 <ReadCardData+0x40>
 2e0:	61 15       	cp	r22, r1
 2e2:	71 05       	cpc	r23, r1
 2e4:	d9 f0       	breq	.+54     	; 0x31c <ReadCardData+0x44>
 2e6:	eb 01       	movw	r28, r22
 2e8:	bc 01       	movw	r22, r24
		{
			ret = DATA_NREAD;
		}
		else
		{
			eeprom_read_string(0x0000,CardPan);
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0e 94 42 02 	call	0x484	; 0x484 <eeprom_read_string>
 2f2:	8f e4       	ldi	r24, 0x4F	; 79
 2f4:	93 ec       	ldi	r25, 0xC3	; 195
 2f6:	01 97       	sbiw	r24, 0x01	; 1
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <ReadCardData+0x1e>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <ReadCardData+0x24>
 2fc:	00 00       	nop
			_delay_ms(200);
			eeprom_read_string(0x0020,CardPin);
 2fe:	be 01       	movw	r22, r28
 300:	80 e2       	ldi	r24, 0x20	; 32
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 42 02 	call	0x484	; 0x484 <eeprom_read_string>
 308:	8f e4       	ldi	r24, 0x4F	; 79
 30a:	93 ec       	ldi	r25, 0xC3	; 195
 30c:	01 97       	sbiw	r24, 0x01	; 1
 30e:	f1 f7       	brne	.-4      	; 0x30c <ReadCardData+0x34>
 310:	00 c0       	rjmp	.+0      	; 0x312 <ReadCardData+0x3a>
 312:	00 00       	nop
			_delay_ms(200);
			ret = DATA_READ;
 314:	82 e0       	ldi	r24, 0x02	; 2
 316:	03 c0       	rjmp	.+6      	; 0x31e <ReadCardData+0x46>
{
		EN_TerminalDataState ret = DATA_NREAD;
		
		if(CardPan == null || CardPin == null)
		{
			ret = DATA_NREAD;
 318:	83 e0       	ldi	r24, 0x03	; 3
 31a:	01 c0       	rjmp	.+2      	; 0x31e <ReadCardData+0x46>
 31c:	83 e0       	ldi	r24, 0x03	; 3
			eeprom_read_string(0x0020,CardPin);
			_delay_ms(200);
			ret = DATA_READ;
		}
		return ret;
}
 31e:	df 91       	pop	r29
 320:	cf 91       	pop	r28
 322:	08 95       	ret

00000324 <CARD_MatchPINs>:

en_CardPinMatchError_t CARD_MatchPINs()
{
 324:	1f 93       	push	r17
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
 32a:	cd b7       	in	r28, 0x3d	; 61
 32c:	de b7       	in	r29, 0x3e	; 62
 32e:	2a 97       	sbiw	r28, 0x0a	; 10
 330:	0f b6       	in	r0, 0x3f	; 63
 332:	f8 94       	cli
 334:	de bf       	out	0x3e, r29	; 62
 336:	0f be       	out	0x3f, r0	; 63
 338:	cd bf       	out	0x3d, r28	; 61
	Uchar8_t PIN_Confirm[10], u8_l_PINiterator;
	Uchar8_t u8_l_ValidatePIN, u8_l_ValidateConfirmPIN;
	
	/* Get PIN from user */
	HUSART_sendSTRING( (Uchar8_t*) "\rEnter your PIN : ");
 33a:	88 e8       	ldi	r24, 0x88	; 136
 33c:	91 e0       	ldi	r25, 0x01	; 1
 33e:	0e 94 b1 02 	call	0x562	; 0x562 <HUSART_sendSTRING>
	u8_l_ValidatePIN = APP_terminalPinGet(pin_arr);
 342:	85 ee       	ldi	r24, 0xE5	; 229
 344:	91 e0       	ldi	r25, 0x01	; 1
 346:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <APP_terminalPinGet>
 34a:	18 2f       	mov	r17, r24
	if(u8_l_ValidatePIN == PINGET_NOK) return PIN_Match_NOK;
 34c:	88 23       	and	r24, r24
 34e:	71 f1       	breq	.+92     	; 0x3ac <CARD_MatchPINs+0x88>
	/* Get PIN again for Confirmation */
	HUSART_sendSTRING((Uchar8_t *)"\rConfirm Your PIN : ");
 350:	8b e9       	ldi	r24, 0x9B	; 155
 352:	91 e0       	ldi	r25, 0x01	; 1
 354:	0e 94 b1 02 	call	0x562	; 0x562 <HUSART_sendSTRING>
	u8_l_ValidateConfirmPIN = APP_terminalPinGet(PIN_Confirm);
 358:	ce 01       	movw	r24, r28
 35a:	01 96       	adiw	r24, 0x01	; 1
 35c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <APP_terminalPinGet>
	
	if((PINGET_OK == u8_l_ValidatePIN) && (PINGET_OK == u8_l_ValidateConfirmPIN))
 360:	11 30       	cpi	r17, 0x01	; 1
 362:	31 f5       	brne	.+76     	; 0x3b0 <CARD_MatchPINs+0x8c>
 364:	81 30       	cpi	r24, 0x01	; 1
 366:	c9 f0       	breq	.+50     	; 0x39a <CARD_MatchPINs+0x76>
		
		HUSART_sendSTRING((Uchar8_t *)"\rPin Matched");
		return PIN_Match_OK;
	}
	
	return PIN_Match_NOK;
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	23 c0       	rjmp	.+70     	; 0x3b2 <CARD_MatchPINs+0x8e>
	if((PINGET_OK == u8_l_ValidatePIN) && (PINGET_OK == u8_l_ValidateConfirmPIN))
	{
		/* Check if the user entered same PIN both times */
		for(u8_l_PINiterator=0; u8_l_PINiterator<PIN_LENGTH; u8_l_PINiterator++)
		{
			if(pin_arr[u8_l_PINiterator] != PIN_Confirm[u8_l_PINiterator])
 36c:	82 2f       	mov	r24, r18
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	fc 01       	movw	r30, r24
 372:	eb 51       	subi	r30, 0x1B	; 27
 374:	fe 4f       	sbci	r31, 0xFE	; 254
 376:	30 81       	ld	r19, Z
 378:	e1 e0       	ldi	r30, 0x01	; 1
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	ec 0f       	add	r30, r28
 37e:	fd 1f       	adc	r31, r29
 380:	e8 0f       	add	r30, r24
 382:	f9 1f       	adc	r31, r25
 384:	80 81       	ld	r24, Z
 386:	38 17       	cp	r19, r24
 388:	31 f0       	breq	.+12     	; 0x396 <CARD_MatchPINs+0x72>
			{
				HUSART_sendSTRING((Uchar8_t *)"\rPin Not Matched");
 38a:	80 eb       	ldi	r24, 0xB0	; 176
 38c:	91 e0       	ldi	r25, 0x01	; 1
 38e:	0e 94 b1 02 	call	0x562	; 0x562 <HUSART_sendSTRING>
				return PIN_Match_NOK;
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	0e c0       	rjmp	.+28     	; 0x3b2 <CARD_MatchPINs+0x8e>
	u8_l_ValidateConfirmPIN = APP_terminalPinGet(PIN_Confirm);
	
	if((PINGET_OK == u8_l_ValidatePIN) && (PINGET_OK == u8_l_ValidateConfirmPIN))
	{
		/* Check if the user entered same PIN both times */
		for(u8_l_PINiterator=0; u8_l_PINiterator<PIN_LENGTH; u8_l_PINiterator++)
 396:	2f 5f       	subi	r18, 0xFF	; 255
 398:	01 c0       	rjmp	.+2      	; 0x39c <CARD_MatchPINs+0x78>
 39a:	20 e0       	ldi	r18, 0x00	; 0
 39c:	25 30       	cpi	r18, 0x05	; 5
 39e:	30 f3       	brcs	.-52     	; 0x36c <CARD_MatchPINs+0x48>
				HUSART_sendSTRING((Uchar8_t *)"\rPin Not Matched");
				return PIN_Match_NOK;
			}
		}
		
		HUSART_sendSTRING((Uchar8_t *)"\rPin Matched");
 3a0:	81 ec       	ldi	r24, 0xC1	; 193
 3a2:	91 e0       	ldi	r25, 0x01	; 1
 3a4:	0e 94 b1 02 	call	0x562	; 0x562 <HUSART_sendSTRING>
		return PIN_Match_OK;
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	03 c0       	rjmp	.+6      	; 0x3b2 <CARD_MatchPINs+0x8e>
	Uchar8_t u8_l_ValidatePIN, u8_l_ValidateConfirmPIN;
	
	/* Get PIN from user */
	HUSART_sendSTRING( (Uchar8_t*) "\rEnter your PIN : ");
	u8_l_ValidatePIN = APP_terminalPinGet(pin_arr);
	if(u8_l_ValidatePIN == PINGET_NOK) return PIN_Match_NOK;
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <CARD_MatchPINs+0x8e>
		
		HUSART_sendSTRING((Uchar8_t *)"\rPin Matched");
		return PIN_Match_OK;
	}
	
	return PIN_Match_NOK;
 3b0:	80 e0       	ldi	r24, 0x00	; 0
}
 3b2:	2a 96       	adiw	r28, 0x0a	; 10
 3b4:	0f b6       	in	r0, 0x3f	; 63
 3b6:	f8 94       	cli
 3b8:	de bf       	out	0x3e, r29	; 62
 3ba:	0f be       	out	0x3f, r0	; 63
 3bc:	cd bf       	out	0x3d, r28	; 61
 3be:	df 91       	pop	r29
 3c0:	cf 91       	pop	r28
 3c2:	1f 91       	pop	r17
 3c4:	08 95       	ret

000003c6 <eeprom_write_byte>:
	i2c_init_master();
}


void eeprom_write_byte(Uint16_t address, Uchar8_t data)  // address is 10 bit
{
 3c6:	1f 93       	push	r17
 3c8:	cf 93       	push	r28
 3ca:	df 93       	push	r29
 3cc:	d8 2f       	mov	r29, r24
 3ce:	19 2f       	mov	r17, r25
 3d0:	c6 2f       	mov	r28, r22
	deviceAddress = EEPROM_ADDRESS;	
	/*deviceAddress = EEPROM_ADDRESS | ((address >> 8) & 0x0003);*/
//	dataAddress = (address & 0b0011111111);

	/* Send start condition */
	i2c_start();
 3d2:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <i2c_start>
	/* Send slave address */
	i2c_send_slave_address_with_write_req(deviceAddress);     // i2c_write_byte(0x50 | (address >> 8) & 0x00000111 );
 3d6:	80 e5       	ldi	r24, 0x50	; 80
 3d8:	0e 94 6f 03 	call	0x6de	; 0x6de <i2c_send_slave_address_with_write_req>
	 	 	 	 	 	 	 	 	 	 	 	 	 	 	  // 520 = 0b 01010 0  0  1   1 01110 11
	 	 	 	 	 	 	 	 	 	 	 	 	 	 	  //                A2 P1 P2  B7      B0
	/* Send data location */
	i2c_write_byte((Uchar8_t) (address >> 8)); // or i2c_write_byte(dataAddress);
 3dc:	81 2f       	mov	r24, r17
 3de:	0e 94 89 03 	call	0x712	; 0x712 <i2c_write_byte>
	i2c_write_byte((Uchar8_t) address);
 3e2:	8d 2f       	mov	r24, r29
 3e4:	0e 94 89 03 	call	0x712	; 0x712 <i2c_write_byte>
	/* Send data */
	i2c_write_byte(data);
 3e8:	8c 2f       	mov	r24, r28
 3ea:	0e 94 89 03 	call	0x712	; 0x712 <i2c_write_byte>
	/* Send Stop Condition */
	i2c_stop();
 3ee:	0e 94 9f 03 	call	0x73e	; 0x73e <i2c_stop>
}
 3f2:	df 91       	pop	r29
 3f4:	cf 91       	pop	r28
 3f6:	1f 91       	pop	r17
 3f8:	08 95       	ret

000003fa <eeprom_read_byte>:


Uchar8_t eeprom_read_byte(Uint16_t address)
{
 3fa:	cf 93       	push	r28
 3fc:	df 93       	push	r29
 3fe:	c8 2f       	mov	r28, r24
 400:	d9 2f       	mov	r29, r25
	deviceAddress = EEPROM_ADDRESS;

// 	deviceAddress = EEPROM_ADDRESS | ((address >> 8) & 0x0003);

	/* Send start condition */
	i2c_start();
 402:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <i2c_start>
	/* Send slave address with write request*/
	i2c_send_slave_address_with_write_req(deviceAddress);
 406:	80 e5       	ldi	r24, 0x50	; 80
 408:	0e 94 6f 03 	call	0x6de	; 0x6de <i2c_send_slave_address_with_write_req>
	/* Send Data location*/
		i2c_write_byte((Uchar8_t) (address >> 8));
 40c:	8d 2f       	mov	r24, r29
 40e:	0e 94 89 03 	call	0x712	; 0x712 <i2c_write_byte>
		i2c_write_byte((Uchar8_t) address);
 412:	8c 2f       	mov	r24, r28
 414:	0e 94 89 03 	call	0x712	; 0x712 <i2c_write_byte>
	/* Send Repeated Start Condition*/
	i2c_repeated_start();
 418:	0e 94 65 03 	call	0x6ca	; 0x6ca <i2c_repeated_start>
	/* Send slave address with read request*/
	i2c_send_slave_address_with_read_req(deviceAddress);
 41c:	80 e5       	ldi	r24, 0x50	; 80
 41e:	0e 94 7e 03 	call	0x6fc	; 0x6fc <i2c_send_slave_address_with_read_req>
	/*Read Received Byte*/
	data = i2c_read_byte();
 422:	0e 94 98 03 	call	0x730	; 0x730 <i2c_read_byte>
 426:	c8 2f       	mov	r28, r24
	/* Send Stop Condition */
	i2c_stop();
 428:	0e 94 9f 03 	call	0x73e	; 0x73e <i2c_stop>

	return data;
}
 42c:	8c 2f       	mov	r24, r28
 42e:	df 91       	pop	r29
 430:	cf 91       	pop	r28
 432:	08 95       	ret

00000434 <eeprom_write_string>:
*/



void eeprom_write_string(Uint16_t Copy_u8Address, const Uchar8_t* str)
{
 434:	cf 92       	push	r12
 436:	df 92       	push	r13
 438:	ef 92       	push	r14
 43a:	ff 92       	push	r15
 43c:	0f 93       	push	r16
 43e:	1f 93       	push	r17
 440:	cf 93       	push	r28
 442:	6b 01       	movw	r12, r22
		Uchar8_t len = 0;
 444:	c0 e0       	ldi	r28, 0x00	; 0
			
			do 
			{
				eeprom_write_byte(Copy_u8Address++,str[len]);
 446:	86 01       	movw	r16, r12
 448:	0c 0f       	add	r16, r28
 44a:	11 1d       	adc	r17, r1
 44c:	7c 01       	movw	r14, r24
 44e:	2f ef       	ldi	r18, 0xFF	; 255
 450:	e2 1a       	sub	r14, r18
 452:	f2 0a       	sbc	r15, r18
 454:	f8 01       	movw	r30, r16
 456:	60 81       	ld	r22, Z
 458:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <eeprom_write_byte>
 45c:	8f e4       	ldi	r24, 0x4F	; 79
 45e:	93 ec       	ldi	r25, 0xC3	; 195
 460:	01 97       	sbiw	r24, 0x01	; 1
 462:	f1 f7       	brne	.-4      	; 0x460 <eeprom_write_string+0x2c>
 464:	00 c0       	rjmp	.+0      	; 0x466 <eeprom_write_string+0x32>
 466:	00 00       	nop
				_delay_ms(200);
			}
			while(str[len++] != '\0');
 468:	cf 5f       	subi	r28, 0xFF	; 255
 46a:	f8 01       	movw	r30, r16
 46c:	20 81       	ld	r18, Z
{
		Uchar8_t len = 0;
			
			do 
			{
				eeprom_write_byte(Copy_u8Address++,str[len]);
 46e:	c7 01       	movw	r24, r14
				_delay_ms(200);
			}
			while(str[len++] != '\0');
 470:	21 11       	cpse	r18, r1
 472:	e9 cf       	rjmp	.-46     	; 0x446 <eeprom_write_string+0x12>

			
}
 474:	cf 91       	pop	r28
 476:	1f 91       	pop	r17
 478:	0f 91       	pop	r16
 47a:	ff 90       	pop	r15
 47c:	ef 90       	pop	r14
 47e:	df 90       	pop	r13
 480:	cf 90       	pop	r12
 482:	08 95       	ret

00000484 <eeprom_read_string>:


void eeprom_read_string(Uint16_t Copy_u8Address, Uchar8_t* str)
{
 484:	cf 92       	push	r12
 486:	df 92       	push	r13
 488:	ef 92       	push	r14
 48a:	ff 92       	push	r15
 48c:	0f 93       	push	r16
 48e:	1f 93       	push	r17
 490:	cf 93       	push	r28
 492:	6b 01       	movw	r12, r22
			Uchar8_t len = 0;
 494:	c0 e0       	ldi	r28, 0x00	; 0
			do
			{
				str[len] = eeprom_read_byte(Copy_u8Address++);
 496:	86 01       	movw	r16, r12
 498:	0c 0f       	add	r16, r28
 49a:	11 1d       	adc	r17, r1
 49c:	7c 01       	movw	r14, r24
 49e:	2f ef       	ldi	r18, 0xFF	; 255
 4a0:	e2 1a       	sub	r14, r18
 4a2:	f2 0a       	sbc	r15, r18
 4a4:	0e 94 fd 01 	call	0x3fa	; 0x3fa <eeprom_read_byte>
 4a8:	f8 01       	movw	r30, r16
 4aa:	80 83       	st	Z, r24
 4ac:	8f e4       	ldi	r24, 0x4F	; 79
 4ae:	93 ec       	ldi	r25, 0xC3	; 195
 4b0:	01 97       	sbiw	r24, 0x01	; 1
 4b2:	f1 f7       	brne	.-4      	; 0x4b0 <eeprom_read_string+0x2c>
 4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <eeprom_read_string+0x32>
 4b6:	00 00       	nop
				_delay_ms(200);
			}
			while(str[len++] != '\0');
 4b8:	cf 5f       	subi	r28, 0xFF	; 255
 4ba:	20 81       	ld	r18, Z
void eeprom_read_string(Uint16_t Copy_u8Address, Uchar8_t* str)
{
			Uchar8_t len = 0;
			do
			{
				str[len] = eeprom_read_byte(Copy_u8Address++);
 4bc:	c7 01       	movw	r24, r14
				_delay_ms(200);
			}
			while(str[len++] != '\0');
 4be:	21 11       	cpse	r18, r1
 4c0:	ea cf       	rjmp	.-44     	; 0x496 <eeprom_read_string+0x12>
}
 4c2:	cf 91       	pop	r28
 4c4:	1f 91       	pop	r17
 4c6:	0f 91       	pop	r16
 4c8:	ff 90       	pop	r15
 4ca:	ef 90       	pop	r14
 4cc:	df 90       	pop	r13
 4ce:	cf 90       	pop	r12
 4d0:	08 95       	ret

000004d2 <HSPI_SlaveInit>:
void HSPI_MasterTrigger(void)
{
	/* Send Request to Master */
	DIO_s8SETPinVal(SLAVE_SEND_REQUEST_PIN, HIGH);
	_delay_ms(10);
	DIO_s8SETPinVal(SLAVE_SEND_REQUEST_PIN, LOW);
 4d2:	60 e0       	ldi	r22, 0x00	; 0
 4d4:	8d e0       	ldi	r24, 0x0D	; 13
 4d6:	0e 94 bc 02 	call	0x578	; 0x578 <DIO_s8SETPinDir>
 4da:	60 e0       	ldi	r22, 0x00	; 0
 4dc:	8f e0       	ldi	r24, 0x0F	; 15
 4de:	0e 94 bc 02 	call	0x578	; 0x578 <DIO_s8SETPinDir>
 4e2:	60 e0       	ldi	r22, 0x00	; 0
 4e4:	8c e0       	ldi	r24, 0x0C	; 12
 4e6:	0e 94 bc 02 	call	0x578	; 0x578 <DIO_s8SETPinDir>
 4ea:	61 e0       	ldi	r22, 0x01	; 1
 4ec:	8c e0       	ldi	r24, 0x0C	; 12
 4ee:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <DIO_s8SETPinVal>
 4f2:	61 e0       	ldi	r22, 0x01	; 1
 4f4:	8e e0       	ldi	r24, 0x0E	; 14
 4f6:	0e 94 bc 02 	call	0x578	; 0x578 <DIO_s8SETPinDir>
 4fa:	61 e0       	ldi	r22, 0x01	; 1
 4fc:	88 e0       	ldi	r24, 0x08	; 8
 4fe:	0e 94 bc 02 	call	0x578	; 0x578 <DIO_s8SETPinDir>
 502:	0e 94 ac 03 	call	0x758	; 0x758 <SPI_SlaveInit>
 506:	61 e0       	ldi	r22, 0x01	; 1
 508:	8c e0       	ldi	r24, 0x0C	; 12
 50a:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <DIO_s8SETPinVal>
 50e:	08 95       	ret

00000510 <HSPI_SlaveRequest>:
 510:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <u8_g_SlaveTxIndex>
 514:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <pu8_g_SlaveTxPtr+0x1>
 518:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <pu8_g_SlaveTxPtr>
 51c:	60 93 0f 02 	sts	0x020F, r22	; 0x80020f <u8_g_SlaveTxLen>
 520:	88 e0       	ldi	r24, 0x08	; 8
 522:	0e 94 3c 03 	call	0x678	; 0x678 <DIO_s8TOGPinVal>
 526:	08 95       	ret

00000528 <HSPI_SlaveSetData>:
}

void HSPI_SlaveSetData(Uchar8_t* pu8_a_dataPtr, Uchar8_t u8_a_DataSize)
{
	/* Reset transmission data index */
	u8_g_SlaveTxIndex = 0;
 528:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <u8_g_SlaveTxIndex>
	
	/* Set global transmission data ptr to point to given data */
	pu8_g_SlaveTxPtr = pu8_a_dataPtr;
 52c:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <pu8_g_SlaveTxPtr+0x1>
 530:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <pu8_g_SlaveTxPtr>
	
	u8_g_SlaveTxLen = u8_a_DataSize;
 534:	60 93 0f 02 	sts	0x020F, r22	; 0x80020f <u8_g_SlaveTxLen>
 538:	08 95       	ret

0000053a <HUSART_enInit>:
#include "husart.h"


EN_USART_ERROR HUSART_enInit(void)
{
	if(USART_init())return USART_NOT_OK;
 53a:	0e 94 07 04 	call	0x80e	; 0x80e <USART_init>
 53e:	81 11       	cpse	r24, r1
 540:	81 e0       	ldi	r24, 0x01	; 1
	return USART_OK;
}
 542:	08 95       	ret

00000544 <HUSART_enSendData>:
EN_USART_ERROR HUSART_enSendData(Uchar8_t Copy_u8DataH)
{
	if(USART_sendData(Copy_u8DataH))return USART_NOT_OK;
 544:	0e 94 13 04 	call	0x826	; 0x826 <USART_sendData>
 548:	81 11       	cpse	r24, r1
 54a:	81 e0       	ldi	r24, 0x01	; 1
	return USART_OK;
}
 54c:	08 95       	ret

0000054e <HUSART_enRecieveData>:
EN_USART_ERROR HUSART_enRecieveData(Uchar8_t* Ref_u8DataH)
{
 54e:	cf 93       	push	r28
 550:	df 93       	push	r29
 552:	ec 01       	movw	r28, r24
	*Ref_u8DataH = USART_receiveData();
 554:	0e 94 18 04 	call	0x830	; 0x830 <USART_receiveData>
 558:	88 83       	st	Y, r24
	return USART_OK;
}
 55a:	80 e0       	ldi	r24, 0x00	; 0
 55c:	df 91       	pop	r29
 55e:	cf 91       	pop	r28
 560:	08 95       	ret

00000562 <HUSART_sendSTRING>:

void HUSART_sendSTRING(Uchar8_t * Hstr)
{
	USART_sendSTRING(Hstr);
 562:	0e 94 1c 04 	call	0x838	; 0x838 <USART_sendSTRING>
 566:	08 95       	ret

00000568 <HUSART_receiveSTRING>:
}
void HUSART_receiveSTRING(Uchar8_t * Hstr ,Uchar8_t Hsize )
{
	USART_receiveSTRING(Hstr,Hsize);
 568:	0e 94 2f 04 	call	0x85e	; 0x85e <USART_receiveSTRING>
 56c:	08 95       	ret

0000056e <main>:
 * Author : ME
 */ 
#include "APP/app.h"
int main(void)
{
	APP_Init();
 56e:	0e 94 49 00 	call	0x92	; 0x92 <APP_Init>
    while (1) 
    {
      APP_Start();
 572:	0e 94 4f 00 	call	0x9e	; 0x9e <APP_Start>
 576:	fd cf       	rjmp	.-6      	; 0x572 <main+0x4>

00000578 <DIO_s8SETPinDir>:
{
	Uchar8_t errStatus = E_OK;
	Uchar8_t portID;
	Uchar8_t pinID;

	if (enPinCopy < PIN_INVALID && enPortDir< DIR_INVALID)
 578:	80 32       	cpi	r24, 0x20	; 32
 57a:	c0 f5       	brcc	.+112    	; 0x5ec <DIO_s8SETPinDir+0x74>
 57c:	62 30       	cpi	r22, 0x02	; 2
 57e:	c0 f5       	brcc	.+112    	; 0x5f0 <DIO_s8SETPinDir+0x78>
	{
		portID = enPinCopy/8;
 580:	e8 2f       	mov	r30, r24
 582:	e6 95       	lsr	r30
 584:	e6 95       	lsr	r30
 586:	e6 95       	lsr	r30
		pinID  = enPinCopy%8;
 588:	87 70       	andi	r24, 0x07	; 7

		if (enPortDir == INPUT)
 58a:	61 11       	cpse	r22, r1
 58c:	17 c0       	rjmp	.+46     	; 0x5bc <DIO_s8SETPinDir+0x44>
		{
			CLEAR_BIT(*ddrReg[portID],pinID);
 58e:	f0 e0       	ldi	r31, 0x00	; 0
 590:	ee 0f       	add	r30, r30
 592:	ff 1f       	adc	r31, r31
 594:	e0 5a       	subi	r30, 0xA0	; 160
 596:	ff 4f       	sbci	r31, 0xFF	; 255
 598:	01 90       	ld	r0, Z+
 59a:	f0 81       	ld	r31, Z
 59c:	e0 2d       	mov	r30, r0
 59e:	40 81       	ld	r20, Z
 5a0:	21 e0       	ldi	r18, 0x01	; 1
 5a2:	30 e0       	ldi	r19, 0x00	; 0
 5a4:	b9 01       	movw	r22, r18
 5a6:	02 c0       	rjmp	.+4      	; 0x5ac <DIO_s8SETPinDir+0x34>
 5a8:	66 0f       	add	r22, r22
 5aa:	77 1f       	adc	r23, r23
 5ac:	8a 95       	dec	r24
 5ae:	e2 f7       	brpl	.-8      	; 0x5a8 <DIO_s8SETPinDir+0x30>
 5b0:	cb 01       	movw	r24, r22
 5b2:	80 95       	com	r24
 5b4:	84 23       	and	r24, r20
 5b6:	80 83       	st	Z, r24



Uchar8_t DIO_s8SETPinDir (enu_pin enPinCopy, enu_dir enPortDir)
{
	Uchar8_t errStatus = E_OK;
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	08 95       	ret

		if (enPortDir == INPUT)
		{
			CLEAR_BIT(*ddrReg[portID],pinID);
		}
		else if(enPortDir == OUTPUT)
 5bc:	61 30       	cpi	r22, 0x01	; 1
 5be:	d1 f4       	brne	.+52     	; 0x5f4 <DIO_s8SETPinDir+0x7c>
		{
			SET_BIT(*ddrReg[portID],pinID);
 5c0:	f0 e0       	ldi	r31, 0x00	; 0
 5c2:	ee 0f       	add	r30, r30
 5c4:	ff 1f       	adc	r31, r31
 5c6:	e0 5a       	subi	r30, 0xA0	; 160
 5c8:	ff 4f       	sbci	r31, 0xFF	; 255
 5ca:	01 90       	ld	r0, Z+
 5cc:	f0 81       	ld	r31, Z
 5ce:	e0 2d       	mov	r30, r0
 5d0:	40 81       	ld	r20, Z
 5d2:	21 e0       	ldi	r18, 0x01	; 1
 5d4:	30 e0       	ldi	r19, 0x00	; 0
 5d6:	b9 01       	movw	r22, r18
 5d8:	02 c0       	rjmp	.+4      	; 0x5de <DIO_s8SETPinDir+0x66>
 5da:	66 0f       	add	r22, r22
 5dc:	77 1f       	adc	r23, r23
 5de:	8a 95       	dec	r24
 5e0:	e2 f7       	brpl	.-8      	; 0x5da <DIO_s8SETPinDir+0x62>
 5e2:	cb 01       	movw	r24, r22
 5e4:	84 2b       	or	r24, r20
 5e6:	80 83       	st	Z, r24



Uchar8_t DIO_s8SETPinDir (enu_pin enPinCopy, enu_dir enPortDir)
{
	Uchar8_t errStatus = E_OK;
 5e8:	80 e0       	ldi	r24, 0x00	; 0
 5ea:	08 95       	ret
			/* do nothing */
		}
	}
	else
	{
		errStatus = E_NOK;
 5ec:	8f ef       	ldi	r24, 0xFF	; 255
 5ee:	08 95       	ret
 5f0:	8f ef       	ldi	r24, 0xFF	; 255
 5f2:	08 95       	ret



Uchar8_t DIO_s8SETPinDir (enu_pin enPinCopy, enu_dir enPortDir)
{
	Uchar8_t errStatus = E_OK;
 5f4:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		errStatus = E_NOK;
	}
	return errStatus;
}
 5f6:	08 95       	ret

000005f8 <DIO_s8SETPinVal>:
{
	Uchar8_t errStatus = E_OK;
	Uchar8_t portID;
	Uchar8_t pinID;

	if (enPinCopy < PIN_INVALID && enPortVal< VAL_INVALID)
 5f8:	80 32       	cpi	r24, 0x20	; 32
 5fa:	c0 f5       	brcc	.+112    	; 0x66c <DIO_s8SETPinVal+0x74>
 5fc:	62 30       	cpi	r22, 0x02	; 2
 5fe:	c0 f5       	brcc	.+112    	; 0x670 <DIO_s8SETPinVal+0x78>
	{
		portID = enPinCopy/8;
 600:	e8 2f       	mov	r30, r24
 602:	e6 95       	lsr	r30
 604:	e6 95       	lsr	r30
 606:	e6 95       	lsr	r30
		pinID  = enPinCopy%8;
 608:	87 70       	andi	r24, 0x07	; 7

		if (enPortVal == LOW)
 60a:	61 11       	cpse	r22, r1
 60c:	17 c0       	rjmp	.+46     	; 0x63c <DIO_s8SETPinVal+0x44>
		{
			CLEAR_BIT(*portReg[portID],pinID);
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	ee 0f       	add	r30, r30
 612:	ff 1f       	adc	r31, r31
 614:	e8 59       	subi	r30, 0x98	; 152
 616:	ff 4f       	sbci	r31, 0xFF	; 255
 618:	01 90       	ld	r0, Z+
 61a:	f0 81       	ld	r31, Z
 61c:	e0 2d       	mov	r30, r0
 61e:	40 81       	ld	r20, Z
 620:	21 e0       	ldi	r18, 0x01	; 1
 622:	30 e0       	ldi	r19, 0x00	; 0
 624:	b9 01       	movw	r22, r18
 626:	02 c0       	rjmp	.+4      	; 0x62c <DIO_s8SETPinVal+0x34>
 628:	66 0f       	add	r22, r22
 62a:	77 1f       	adc	r23, r23
 62c:	8a 95       	dec	r24
 62e:	e2 f7       	brpl	.-8      	; 0x628 <DIO_s8SETPinVal+0x30>
 630:	cb 01       	movw	r24, r22
 632:	80 95       	com	r24
 634:	84 23       	and	r24, r20
 636:	80 83       	st	Z, r24
}


Uchar8_t DIO_s8SETPinVal (enu_pin enPinCopy, enu_val enPortVal)
{
	Uchar8_t errStatus = E_OK;
 638:	80 e0       	ldi	r24, 0x00	; 0
 63a:	08 95       	ret

		if (enPortVal == LOW)
		{
			CLEAR_BIT(*portReg[portID],pinID);
		}
		else if(enPortVal == HIGH)
 63c:	61 30       	cpi	r22, 0x01	; 1
 63e:	d1 f4       	brne	.+52     	; 0x674 <DIO_s8SETPinVal+0x7c>
		{
			SET_BIT(*portReg[portID],pinID);
 640:	f0 e0       	ldi	r31, 0x00	; 0
 642:	ee 0f       	add	r30, r30
 644:	ff 1f       	adc	r31, r31
 646:	e8 59       	subi	r30, 0x98	; 152
 648:	ff 4f       	sbci	r31, 0xFF	; 255
 64a:	01 90       	ld	r0, Z+
 64c:	f0 81       	ld	r31, Z
 64e:	e0 2d       	mov	r30, r0
 650:	40 81       	ld	r20, Z
 652:	21 e0       	ldi	r18, 0x01	; 1
 654:	30 e0       	ldi	r19, 0x00	; 0
 656:	b9 01       	movw	r22, r18
 658:	02 c0       	rjmp	.+4      	; 0x65e <DIO_s8SETPinVal+0x66>
 65a:	66 0f       	add	r22, r22
 65c:	77 1f       	adc	r23, r23
 65e:	8a 95       	dec	r24
 660:	e2 f7       	brpl	.-8      	; 0x65a <DIO_s8SETPinVal+0x62>
 662:	cb 01       	movw	r24, r22
 664:	84 2b       	or	r24, r20
 666:	80 83       	st	Z, r24
}


Uchar8_t DIO_s8SETPinVal (enu_pin enPinCopy, enu_val enPortVal)
{
	Uchar8_t errStatus = E_OK;
 668:	80 e0       	ldi	r24, 0x00	; 0
 66a:	08 95       	ret
			/* do nothing */
		}
	}
	else
	{
		errStatus = E_NOK;
 66c:	8f ef       	ldi	r24, 0xFF	; 255
 66e:	08 95       	ret
 670:	8f ef       	ldi	r24, 0xFF	; 255
 672:	08 95       	ret
}


Uchar8_t DIO_s8SETPinVal (enu_pin enPinCopy, enu_val enPortVal)
{
	Uchar8_t errStatus = E_OK;
 674:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		errStatus = E_NOK;
	}
	return errStatus;
}
 676:	08 95       	ret

00000678 <DIO_s8TOGPinVal>:
{
	Uchar8_t errStatus = E_OK;
	Uchar8_t portID;
	Uchar8_t pinID;

	if (enPinCopy < PIN_INVALID)
 678:	80 32       	cpi	r24, 0x20	; 32
 67a:	d8 f4       	brcc	.+54     	; 0x6b2 <DIO_s8TOGPinVal+0x3a>
	{
		portID = enPinCopy/8;
 67c:	e8 2f       	mov	r30, r24
 67e:	e6 95       	lsr	r30
 680:	e6 95       	lsr	r30
 682:	e6 95       	lsr	r30
		pinID  = enPinCopy%8;
 684:	87 70       	andi	r24, 0x07	; 7

		TOGGLE_BIT(*portReg[portID],pinID);
 686:	f0 e0       	ldi	r31, 0x00	; 0
 688:	ee 0f       	add	r30, r30
 68a:	ff 1f       	adc	r31, r31
 68c:	e8 59       	subi	r30, 0x98	; 152
 68e:	ff 4f       	sbci	r31, 0xFF	; 255
 690:	01 90       	ld	r0, Z+
 692:	f0 81       	ld	r31, Z
 694:	e0 2d       	mov	r30, r0
 696:	40 81       	ld	r20, Z
 698:	21 e0       	ldi	r18, 0x01	; 1
 69a:	30 e0       	ldi	r19, 0x00	; 0
 69c:	b9 01       	movw	r22, r18
 69e:	02 c0       	rjmp	.+4      	; 0x6a4 <DIO_s8TOGPinVal+0x2c>
 6a0:	66 0f       	add	r22, r22
 6a2:	77 1f       	adc	r23, r23
 6a4:	8a 95       	dec	r24
 6a6:	e2 f7       	brpl	.-8      	; 0x6a0 <DIO_s8TOGPinVal+0x28>
 6a8:	cb 01       	movw	r24, r22
 6aa:	84 27       	eor	r24, r20
 6ac:	80 83       	st	Z, r24
}


Uchar8_t DIO_s8TOGPinVal (enu_pin enPinCopy)
{
	Uchar8_t errStatus = E_OK;
 6ae:	80 e0       	ldi	r24, 0x00	; 0
 6b0:	08 95       	ret

		TOGGLE_BIT(*portReg[portID],pinID);
	}
	else
	{
		errStatus = E_NOK;
 6b2:	8f ef       	ldi	r24, 0xFF	; 255
	}
	return errStatus;

}
 6b4:	08 95       	ret

000006b6 <i2c_start>:
}


void i2c_start(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 6b6:	84 ea       	ldi	r24, 0xA4	; 164
 6b8:	86 bf       	out	0x36, r24	; 54
	/* Enable Start bit */
//	SET_BIT(TWCR, TWSTA);
	/* Enable I2C peripheral */
//	SET_BIT(TWCR, TWEN);
	/* Waiting for TWINT flag to be set */
	while ( !(GET_BIT(TWCR,TWINT)) );
 6ba:	06 b6       	in	r0, 0x36	; 54
 6bc:	07 fe       	sbrs	r0, 7
 6be:	fd cf       	rjmp	.-6      	; 0x6ba <i2c_start+0x4>
	/* Waiting if this condition becoming true */
	while ( (TWSR & 0xF8) != START_ACK );
 6c0:	81 b1       	in	r24, 0x01	; 1
 6c2:	88 7f       	andi	r24, 0xF8	; 248
 6c4:	88 30       	cpi	r24, 0x08	; 8
 6c6:	e1 f7       	brne	.-8      	; 0x6c0 <i2c_start+0xa>
	/* Disable Start bit */
//	CLEAR_BIT(TWCR, TWSTA);
}
 6c8:	08 95       	ret

000006ca <i2c_repeated_start>:


void i2c_repeated_start(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 6ca:	84 ea       	ldi	r24, 0xA4	; 164
 6cc:	86 bf       	out	0x36, r24	; 54
	/* Enable Start bit */
//	SET_BIT(TWCR, TWSTA);
	/* Enable I2C peripheral */
//	SET_BIT(TWCR, TWEN);
	/* Waiting for TWINT flag to be set */
	while ( !(GET_BIT(TWCR,TWINT)) );
 6ce:	06 b6       	in	r0, 0x36	; 54
 6d0:	07 fe       	sbrs	r0, 7
 6d2:	fd cf       	rjmp	.-6      	; 0x6ce <i2c_repeated_start+0x4>
	/* Waiting if this condition becoming true */
	while ( (TWSR & 0xF8) != REP_START_ACK );
 6d4:	81 b1       	in	r24, 0x01	; 1
 6d6:	88 7f       	andi	r24, 0xF8	; 248
 6d8:	80 31       	cpi	r24, 0x10	; 16
 6da:	e1 f7       	brne	.-8      	; 0x6d4 <i2c_repeated_start+0xa>
	/* Disable Start bit */
//	CLEAR_BIT(TWCR, TWSTA);
}
 6dc:	08 95       	ret

000006de <i2c_send_slave_address_with_write_req>:


void i2c_send_slave_address_with_write_req(Uchar8_t slave_address)
{
	/* Putting slave address to TWDR register to be transmitted */
	TWDR = (slave_address<<1);
 6de:	88 0f       	add	r24, r24
 6e0:	83 b9       	out	0x03, r24	; 3
	/* Set bit 0 on TWDR register to make write operation */
	CLEAR_BIT(TWDR, R_W);
 6e2:	83 b1       	in	r24, 0x03	; 3
 6e4:	8e 7f       	andi	r24, 0xFE	; 254
 6e6:	83 b9       	out	0x03, r24	; 3

	TWCR = (1<<TWINT) | (1<<TWEN);
 6e8:	84 e8       	ldi	r24, 0x84	; 132
 6ea:	86 bf       	out	0x36, r24	; 54
	/* Clear TWINT flag */
//	SET_BIT(TWCR, TWINT);
	/* Enable I2C peripheral */
//	SET_BIT(TWCR, TWEN);
	/* Waiting for TWINT flag to be set */
	while ( !(GET_BIT(TWCR,TWINT)) );
 6ec:	06 b6       	in	r0, 0x36	; 54
 6ee:	07 fe       	sbrs	r0, 7
 6f0:	fd cf       	rjmp	.-6      	; 0x6ec <i2c_send_slave_address_with_write_req+0xe>
	/* Waiting if this condition becoming true */
	while ( (TWSR & 0xF8) != SLAVE_ADD_AND_WR_ACK );
 6f2:	81 b1       	in	r24, 0x01	; 1
 6f4:	88 7f       	andi	r24, 0xF8	; 248
 6f6:	88 31       	cpi	r24, 0x18	; 24
 6f8:	e1 f7       	brne	.-8      	; 0x6f2 <i2c_send_slave_address_with_write_req+0x14>
}
 6fa:	08 95       	ret

000006fc <i2c_send_slave_address_with_read_req>:


void i2c_send_slave_address_with_read_req(Uchar8_t slave_address)
{
	TWDR = (slave_address<<1);
 6fc:	88 0f       	add	r24, r24
 6fe:	83 b9       	out	0x03, r24	; 3
	TWDR |= (1<<0);
 700:	83 b1       	in	r24, 0x03	; 3
 702:	81 60       	ori	r24, 0x01	; 1
 704:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
 706:	84 e8       	ldi	r24, 0x84	; 132
 708:	86 bf       	out	0x36, r24	; 54
#endif
/*********************************************************************************/
	/* Enable I2C peripheral */
//	SET_BIT(TWCR, TWEN);
	/* Waiting for TWINT flag to be set */
	while ( !(GET_BIT(TWCR,TWINT)) );
 70a:	06 b6       	in	r0, 0x36	; 54
 70c:	07 fe       	sbrs	r0, 7
 70e:	fd cf       	rjmp	.-6      	; 0x70a <i2c_send_slave_address_with_read_req+0xe>
	/* Waiting if this condition becoming true */
//	while ( (TWSR & 0xF8) != SLAVE_ADD_AND_RD_ACK );
}
 710:	08 95       	ret

00000712 <i2c_write_byte>:

void i2c_write_byte(Uchar8_t byte)
{

	/* Putting data to TWDR register to be transmitted */
	TWDR = byte;
 712:	83 b9       	out	0x03, r24	; 3

//	TWCR = (1<<TWINT) | (1<<TWEN);
	/* Clear TWINT flag */
	SET_BIT(TWCR, TWINT);
 714:	86 b7       	in	r24, 0x36	; 54
 716:	80 68       	ori	r24, 0x80	; 128
 718:	86 bf       	out	0x36, r24	; 54
	/* Enable I2C peripheral */
	SET_BIT(TWCR, TWEN);
 71a:	86 b7       	in	r24, 0x36	; 54
 71c:	84 60       	ori	r24, 0x04	; 4
 71e:	86 bf       	out	0x36, r24	; 54
	/* Waiting for TWINT flag to be set */
	while ( !(GET_BIT(TWCR,TWINT)) );
 720:	06 b6       	in	r0, 0x36	; 54
 722:	07 fe       	sbrs	r0, 7
 724:	fd cf       	rjmp	.-6      	; 0x720 <i2c_write_byte+0xe>
	/* Waiting if this condition becoming true */
	while ( (TWSR & 0xF8) != WR_BYTE_ACK );
 726:	81 b1       	in	r24, 0x01	; 1
 728:	88 7f       	andi	r24, 0xF8	; 248
 72a:	88 32       	cpi	r24, 0x28	; 40
 72c:	e1 f7       	brne	.-8      	; 0x726 <i2c_write_byte+0x14>
}
 72e:	08 95       	ret

00000730 <i2c_read_byte>:


Uchar8_t i2c_read_byte(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 730:	84 e8       	ldi	r24, 0x84	; 132
 732:	86 bf       	out	0x36, r24	; 54
	/* Clear TWINT flag */
//	SET_BIT(TWCR, TWINT);
	/* Enable I2C peripheral */
//	SET_BIT(TWCR, TWEN);
	/* Waiting for TWINT flag to be set */
	while ( !(GET_BIT(TWCR,TWINT)) );
 734:	06 b6       	in	r0, 0x36	; 54
 736:	07 fe       	sbrs	r0, 7
 738:	fd cf       	rjmp	.-6      	; 0x734 <i2c_read_byte+0x4>
#elif MI2C_ACK_STATUS == MI2C_ACK_ENABLE
	/* Waiting if this condition becoming true */
	while ( (TWSR & 0xF8) != RD_BYTE_WITH_ACK );
#endif
/*********************************************************************************/
	return TWDR;
 73a:	83 b1       	in	r24, 0x03	; 3
}
 73c:	08 95       	ret

0000073e <i2c_stop>:

void i2c_stop(void)
{
//	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
	/* Clear TWINT flag */
	SET_BIT(TWCR, TWINT);
 73e:	86 b7       	in	r24, 0x36	; 54
 740:	80 68       	ori	r24, 0x80	; 128
 742:	86 bf       	out	0x36, r24	; 54
	/* Enable Stop bit */
	SET_BIT(TWCR, TWSTO);
 744:	86 b7       	in	r24, 0x36	; 54
 746:	80 61       	ori	r24, 0x10	; 16
 748:	86 bf       	out	0x36, r24	; 54
	/* Enable I2C peripheral */
	SET_BIT(TWCR, TWEN);
 74a:	86 b7       	in	r24, 0x36	; 54
 74c:	84 60       	ori	r24, 0x04	; 4
 74e:	86 bf       	out	0x36, r24	; 54

	while(TWCR&(1<<TWSTO));
 750:	06 b6       	in	r0, 0x36	; 54
 752:	04 fc       	sbrc	r0, 4
 754:	fd cf       	rjmp	.-6      	; 0x750 <i2c_stop+0x12>

//	CLEAR_BIT(TWCR, TWSTA);
}
 756:	08 95       	ret

00000758 <SPI_SlaveInit>:
	{
		return SPI_NOK;
	}
	
	return SPI_OK;
}
 758:	8d b1       	in	r24, 0x0d	; 13
 75a:	8f 7e       	andi	r24, 0xEF	; 239
 75c:	8d b9       	out	0x0d, r24	; 13
 75e:	8d b1       	in	r24, 0x0d	; 13
 760:	87 7f       	andi	r24, 0xF7	; 247
 762:	8d b9       	out	0x0d, r24	; 13
 764:	8d b1       	in	r24, 0x0d	; 13
 766:	8b 7f       	andi	r24, 0xFB	; 251
 768:	8d b9       	out	0x0d, r24	; 13
 76a:	8d b1       	in	r24, 0x0d	; 13
 76c:	80 68       	ori	r24, 0x80	; 128
 76e:	8d b9       	out	0x0d, r24	; 13
 770:	8d b1       	in	r24, 0x0d	; 13
 772:	80 64       	ori	r24, 0x40	; 64
 774:	8d b9       	out	0x0d, r24	; 13
 776:	08 95       	ret

00000778 <__vector_12>:

/*************************************************************************************************************
 * 													  ISRs
 ************************************************************************************************************/
ISR(SPI_STC_INT)
{
 778:	1f 92       	push	r1
 77a:	0f 92       	push	r0
 77c:	0f b6       	in	r0, 0x3f	; 63
 77e:	0f 92       	push	r0
 780:	11 24       	eor	r1, r1
 782:	2f 93       	push	r18
 784:	3f 93       	push	r19
 786:	8f 93       	push	r24
 788:	9f 93       	push	r25
 78a:	ef 93       	push	r30
 78c:	ff 93       	push	r31
	/*------------------------ Reception ------------------------*/
	u8_g_SlaveReceive = SPDR;
 78e:	8f b1       	in	r24, 0x0f	; 15
 790:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <u8_g_SlaveReceive>
	//DIO_s8SETPortVal(DIO_PORTA, u8_g_SlaveReceive);
	
	/* If Max size is exceeded, start overriding data */
	if(u8_g_SlaveRxIndex == SPI_BUFFER_SIZE) u8_g_SlaveRxIndex = 0;
 794:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <u8_g_SlaveRxIndex>
 798:	9f 30       	cpi	r25, 0x0F	; 15
 79a:	11 f4       	brne	.+4      	; 0x7a0 <__vector_12+0x28>
 79c:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <u8_g_SlaveRxIndex>
	if(u8_g_SlaveReceive != DATA_END)
 7a0:	83 32       	cpi	r24, 0x23	; 35
 7a2:	59 f0       	breq	.+22     	; 0x7ba <__vector_12+0x42>
	{
		/* Store received byte in buffer */
		arr_g_SlaveRxBuffer[u8_g_SlaveRxIndex] = u8_g_SlaveReceive;
 7a4:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <u8_g_SlaveRxIndex>
 7a8:	e9 2f       	mov	r30, r25
 7aa:	f0 e0       	ldi	r31, 0x00	; 0
 7ac:	e1 53       	subi	r30, 0x31	; 49
 7ae:	fe 4f       	sbci	r31, 0xFE	; 254
 7b0:	80 83       	st	Z, r24
		u8_g_SlaveRxIndex++;
 7b2:	9f 5f       	subi	r25, 0xFF	; 255
 7b4:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <u8_g_SlaveRxIndex>
 7b8:	04 c0       	rjmp	.+8      	; 0x7c2 <__vector_12+0x4a>
	}
	else
	{	// Get the number of received bytes
		u8_g_SlaveRxLen = u8_g_SlaveRxIndex;
 7ba:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <u8_g_SlaveRxIndex>
 7be:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <u8_g_SlaveRxLen>
	}
	
	/*------------------------- Sending -------------------------*/
	//u8_g_SlaveTxIndex++;
	if((u8_g_SlaveTxIndex < u8_g_SlaveTxLen) && (pu8_g_SlaveTxPtr != null))
 7c2:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <u8_g_SlaveTxIndex>
 7c6:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <u8_g_SlaveTxLen>
 7ca:	89 17       	cp	r24, r25
 7cc:	88 f4       	brcc	.+34     	; 0x7f0 <__vector_12+0x78>
 7ce:	20 91 de 01 	lds	r18, 0x01DE	; 0x8001de <pu8_g_SlaveTxPtr>
 7d2:	30 91 df 01 	lds	r19, 0x01DF	; 0x8001df <pu8_g_SlaveTxPtr+0x1>
 7d6:	21 15       	cp	r18, r1
 7d8:	31 05       	cpc	r19, r1
 7da:	51 f0       	breq	.+20     	; 0x7f0 <__vector_12+0x78>
	{
		SPDR = pu8_g_SlaveTxPtr[u8_g_SlaveTxIndex++];
 7dc:	91 e0       	ldi	r25, 0x01	; 1
 7de:	98 0f       	add	r25, r24
 7e0:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <u8_g_SlaveTxIndex>
 7e4:	f9 01       	movw	r30, r18
 7e6:	e8 0f       	add	r30, r24
 7e8:	f1 1d       	adc	r31, r1
 7ea:	80 81       	ld	r24, Z
 7ec:	8f b9       	out	0x0f, r24	; 15
 7ee:	04 c0       	rjmp	.+8      	; 0x7f8 <__vector_12+0x80>
	}
	else if(u8_g_SlaveTxIndex >= u8_g_SlaveTxLen)
 7f0:	89 17       	cp	r24, r25
 7f2:	10 f0       	brcs	.+4      	; 0x7f8 <__vector_12+0x80>
	{
		SPDR = DATA_END;
 7f4:	83 e2       	ldi	r24, 0x23	; 35
 7f6:	8f b9       	out	0x0f, r24	; 15
	}
 7f8:	ff 91       	pop	r31
 7fa:	ef 91       	pop	r30
 7fc:	9f 91       	pop	r25
 7fe:	8f 91       	pop	r24
 800:	3f 91       	pop	r19
 802:	2f 91       	pop	r18
 804:	0f 90       	pop	r0
 806:	0f be       	out	0x3f, r0	; 63
 808:	0f 90       	pop	r0
 80a:	1f 90       	pop	r1
 80c:	18 95       	reti

0000080e <USART_init>:
	CLEAR_BIT(UCSRB,UCSZ2);
	
	#elif USART_SET_DATA_SIZE == USART_DATA_SIZE_8
	SET_BIT(UCSRC,UCSZ0);
	SET_BIT(UCSRC,UCSZ1);
	CLEAR_BIT(UCSRB,UCSZ2);
 80e:	8a b1       	in	r24, 0x0a	; 10
 810:	8b 7f       	andi	r24, 0xFB	; 251
	
	#endif
	
	/* select USART Speed (Normal,Double) */
	#if USART_SET_SPEED == USART_NORMAL_SPEED
	CLEAR_BIT(UCSRA,U2X);
 812:	9b b1       	in	r25, 0x0b	; 11
 814:	9d 7f       	andi	r25, 0xFD	; 253
 816:	9b b9       	out	0x0b, r25	; 11
	return USART_NOT_OK;
	
	#endif
	/* Enable Transmit and receive bits in UCSRB*/
	SET_BIT(UCSRB,RXEN);
	SET_BIT(UCSRB,TXEN);
 818:	88 61       	ori	r24, 0x18	; 24
 81a:	8a b9       	out	0x0a, r24	; 10
	
	/* assign UBRRL and UBRRH with calculated BAUD_PRESCALLER */
	UBRRL = BAUD_PRESCALLER;
 81c:	83 e3       	ldi	r24, 0x33	; 51
 81e:	89 b9       	out	0x09, r24	; 9
	UBRRH = (BAUD_PRESCALLER>>8);
 820:	10 bc       	out	0x20, r1	; 32
	
   return USART_OK;
}
 822:	80 e0       	ldi	r24, 0x00	; 0
 824:	08 95       	ret

00000826 <USART_sendData>:
EN_USART_ERROR USART_sendData(Uchar8_t data)
{
	// WAIT UNTIL ISEMPTY FLAG IS SET
	while(!GET_BIT(UCSRA,UDRE));
 826:	5d 9b       	sbis	0x0b, 5	; 11
 828:	fe cf       	rjmp	.-4      	; 0x826 <USART_sendData>
	
	// assign data to UDR register to be sent
	UDR = data;
 82a:	8c b9       	out	0x0c, r24	; 12
	
	return USART_OK;
}
 82c:	80 e0       	ldi	r24, 0x00	; 0
 82e:	08 95       	ret

00000830 <USART_receiveData>:
Uchar8_t USART_receiveData(void)
{
	// WAIT UNTIL Recieve FLAG IS SET
	while(!GET_BIT(UCSRA,RXC));
 830:	5f 9b       	sbis	0x0b, 7	; 11
 832:	fe cf       	rjmp	.-4      	; 0x830 <USART_receiveData>
	return UDR;
}
 834:	8c b1       	in	r24, 0x0c	; 12
 836:	08 95       	ret

00000838 <USART_sendSTRING>:
void USART_sendSTRING(Uchar8_t * str)
{
 838:	0f 93       	push	r16
 83a:	1f 93       	push	r17
 83c:	cf 93       	push	r28
 83e:	8c 01       	movw	r16, r24
	Uchar8_t COUNTER = 0;
 840:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[COUNTER] != null)
 842:	03 c0       	rjmp	.+6      	; 0x84a <USART_sendSTRING+0x12>
	{
		USART_sendData(str[COUNTER]);
 844:	0e 94 13 04 	call	0x826	; 0x826 <USART_sendData>
		COUNTER++;
 848:	cf 5f       	subi	r28, 0xFF	; 255
	return UDR;
}
void USART_sendSTRING(Uchar8_t * str)
{
	Uchar8_t COUNTER = 0;
	while(str[COUNTER] != null)
 84a:	f8 01       	movw	r30, r16
 84c:	ec 0f       	add	r30, r28
 84e:	f1 1d       	adc	r31, r1
 850:	80 81       	ld	r24, Z
 852:	81 11       	cpse	r24, r1
 854:	f7 cf       	rjmp	.-18     	; 0x844 <USART_sendSTRING+0xc>
	{
		USART_sendData(str[COUNTER]);
		COUNTER++;
	}
}
 856:	cf 91       	pop	r28
 858:	1f 91       	pop	r17
 85a:	0f 91       	pop	r16
 85c:	08 95       	ret

0000085e <USART_receiveSTRING>:
void USART_receiveSTRING(Uchar8_t * str ,Uchar8_t size )
{
 85e:	0f 93       	push	r16
 860:	1f 93       	push	r17
 862:	cf 93       	push	r28
 864:	df 93       	push	r29
 866:	8c 01       	movw	r16, r24
 868:	d6 2f       	mov	r29, r22
	Uchar8_t COUNTER = 0;
 86a:	c0 e0       	ldi	r28, 0x00	; 0
	while(COUNTER < size-1)
 86c:	0b c0       	rjmp	.+22     	; 0x884 <__stack+0x25>
	{
		
		str[COUNTER]= USART_receiveData();
 86e:	0e 94 18 04 	call	0x830	; 0x830 <USART_receiveData>
 872:	f8 01       	movw	r30, r16
 874:	ec 0f       	add	r30, r28
 876:	f1 1d       	adc	r31, r1
 878:	80 83       	st	Z, r24
		if(str[COUNTER] == ENTER_KEY)break;
 87a:	8d 30       	cpi	r24, 0x0D	; 13
 87c:	59 f0       	breq	.+22     	; 0x894 <__stack+0x35>
		USART_sendData(str[COUNTER]);
 87e:	0e 94 13 04 	call	0x826	; 0x826 <USART_sendData>
		COUNTER++;
 882:	cf 5f       	subi	r28, 0xFF	; 255
	}
}
void USART_receiveSTRING(Uchar8_t * str ,Uchar8_t size )
{
	Uchar8_t COUNTER = 0;
	while(COUNTER < size-1)
 884:	2c 2f       	mov	r18, r28
 886:	30 e0       	ldi	r19, 0x00	; 0
 888:	8d 2f       	mov	r24, r29
 88a:	90 e0       	ldi	r25, 0x00	; 0
 88c:	01 97       	sbiw	r24, 0x01	; 1
 88e:	28 17       	cp	r18, r24
 890:	39 07       	cpc	r19, r25
 892:	6c f3       	brlt	.-38     	; 0x86e <__stack+0xf>
		str[COUNTER]= USART_receiveData();
		if(str[COUNTER] == ENTER_KEY)break;
		USART_sendData(str[COUNTER]);
		COUNTER++;
	}
	str[COUNTER] = null;
 894:	f8 01       	movw	r30, r16
 896:	ec 0f       	add	r30, r28
 898:	f1 1d       	adc	r31, r1
 89a:	10 82       	st	Z, r1
}
 89c:	df 91       	pop	r29
 89e:	cf 91       	pop	r28
 8a0:	1f 91       	pop	r17
 8a2:	0f 91       	pop	r16
 8a4:	08 95       	ret

000008a6 <_exit>:
 8a6:	f8 94       	cli

000008a8 <__stop_program>:
 8a8:	ff cf       	rjmp	.-2      	; 0x8a8 <__stop_program>
