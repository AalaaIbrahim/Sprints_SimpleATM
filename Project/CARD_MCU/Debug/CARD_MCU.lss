
CARD_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800060  00800060  000001a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007a3  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005f8  00000000  00000000  00000a17  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000031f  00000000  00000000  0000100f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001330  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a6  00000000  00000000  000013f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000160  00000000  00000000  00001896  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000019f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 4a 00 	jmp	0x94	; 0x94 <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e2       	ldi	r30, 0x2C	; 44
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 37       	cpi	r26, 0x76	; 118
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 94 00 	jmp	0x128	; 0x128 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
 * Created: 4/29/2023 6:11:52 AM
 * Author : ME
 */ 

int main(void)
{
  92:	ff cf       	rjmp	.-2      	; 0x92 <main>

00000094 <__vector_12>:

/*************************************************************************************************************
 * 													  ISRs
 ************************************************************************************************************/
ISR(SPI_STC_INT)
{
  94:	1f 92       	push	r1
  96:	0f 92       	push	r0
  98:	0f b6       	in	r0, 0x3f	; 63
  9a:	0f 92       	push	r0
  9c:	11 24       	eor	r1, r1
  9e:	2f 93       	push	r18
  a0:	3f 93       	push	r19
  a2:	8f 93       	push	r24
  a4:	9f 93       	push	r25
  a6:	ef 93       	push	r30
  a8:	ff 93       	push	r31
	/*------------------------ Reception ------------------------*/
	u8_g_SlaveReceive = SPDR;
  aa:	8f b1       	in	r24, 0x0f	; 15
  ac:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <u8_g_SlaveReceive>
	if(u8_g_SlaveRxIndex == SPI_BUFFER_SIZE) u8_g_SlaveRxIndex = 0;
  b0:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <u8_g_SlaveRxIndex>
  b4:	9f 30       	cpi	r25, 0x0F	; 15
  b6:	11 f4       	brne	.+4      	; 0xbc <__vector_12+0x28>
  b8:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <u8_g_SlaveRxIndex>
	if(u8_g_SlaveReceive != DATA_END)
  bc:	83 32       	cpi	r24, 0x23	; 35
  be:	59 f0       	breq	.+22     	; 0xd6 <__vector_12+0x42>
	{
		/* Store received byte in buffer */
		arr_g_SlaveRxBuffer[u8_g_SlaveRxIndex] = u8_g_SlaveReceive;
  c0:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <u8_g_SlaveRxIndex>
  c4:	e9 2f       	mov	r30, r25
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	e0 5a       	subi	r30, 0xA0	; 160
  ca:	ff 4f       	sbci	r31, 0xFF	; 255
  cc:	80 83       	st	Z, r24
		u8_g_SlaveRxIndex++;
  ce:	9f 5f       	subi	r25, 0xFF	; 255
  d0:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <u8_g_SlaveRxIndex>
  d4:	04 c0       	rjmp	.+8      	; 0xde <__vector_12+0x4a>
	}
	else
	{	// Get the number of received bytes
		u8_g_SlaveRxLen = u8_g_SlaveRxIndex;
  d6:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <u8_g_SlaveRxIndex>
  da:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <u8_g_SlaveRxLen>
	}
	
	/*------------------------- Sending -------------------------*/
	if((u8_g_SlaveTxIndex < u8_g_SlaveTxLen) && (pu8_g_SlaveTxPtr != NULL))
  de:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <u8_g_SlaveTxIndex>
  e2:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <u8_g_SlaveTxLen>
  e6:	89 17       	cp	r24, r25
  e8:	90 f4       	brcc	.+36     	; 0x10e <__vector_12+0x7a>
  ea:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <pu8_g_SlaveTxPtr>
  ee:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <pu8_g_SlaveTxPtr+0x1>
  f2:	21 15       	cp	r18, r1
  f4:	31 05       	cpc	r19, r1
  f6:	59 f0       	breq	.+22     	; 0x10e <__vector_12+0x7a>
	{
		SPDR = pu8_g_SlaveTxPtr[u8_g_SlaveTxIndex];
  f8:	f9 01       	movw	r30, r18
  fa:	e8 0f       	add	r30, r24
  fc:	f1 1d       	adc	r31, r1
  fe:	80 81       	ld	r24, Z
 100:	8f b9       	out	0x0f, r24	; 15
		u8_g_SlaveTxIndex++;
 102:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <u8_g_SlaveTxIndex>
 106:	8f 5f       	subi	r24, 0xFF	; 255
 108:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <u8_g_SlaveTxIndex>
 10c:	02 c0       	rjmp	.+4      	; 0x112 <__vector_12+0x7e>
	}
	else
	{	
		SPDR = DATA_END;
 10e:	83 e2       	ldi	r24, 0x23	; 35
 110:	8f b9       	out	0x0f, r24	; 15
	}
 112:	ff 91       	pop	r31
 114:	ef 91       	pop	r30
 116:	9f 91       	pop	r25
 118:	8f 91       	pop	r24
 11a:	3f 91       	pop	r19
 11c:	2f 91       	pop	r18
 11e:	0f 90       	pop	r0
 120:	0f be       	out	0x3f, r0	; 63
 122:	0f 90       	pop	r0
 124:	1f 90       	pop	r1
 126:	18 95       	reti

00000128 <_exit>:
 128:	f8 94       	cli

0000012a <__stop_program>:
 12a:	ff cf       	rjmp	.-2      	; 0x12a <__stop_program>
