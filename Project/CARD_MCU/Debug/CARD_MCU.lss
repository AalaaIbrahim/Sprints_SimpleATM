
CARD_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000018c  00800060  000008be  00000952  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  008001ec  008001ec  00000ade  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ade  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b10  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e8  00000000  00000000  00000b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ac4  00000000  00000000  00000e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001007  00000000  00000000  000038f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001977  00000000  00000000  000048ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000664  00000000  00000000  00006278  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ef4  00000000  00000000  000068dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a20  00000000  00000000  000077d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000248  00000000  00000000  000091f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 c6 03 	jmp	0x78c	; 0x78c <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee eb       	ldi	r30, 0xBE	; 190
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 3e       	cpi	r26, 0xEC	; 236
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	ac ee       	ldi	r26, 0xEC	; 236
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 30       	cpi	r26, 0x06	; 6
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <main>
  8a:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_Init>:
* 											Function Implementation
************************************************************************************************************/

void APP_Init(void)
{
	(void)HUSART_enInit();
  92:	0e 94 ba 02 	call	0x574	; 0x574 <HUSART_enInit>
	HSPI_SlaveInit();
  96:	0e 94 78 02 	call	0x4f0	; 0x4f0 <HSPI_SlaveInit>
	eeprom_init();
  9a:	0e 94 ed 01 	call	0x3da	; 0x3da <eeprom_init>
	sei();
  9e:	78 94       	sei
  a0:	08 95       	ret

000000a2 <APP_Start>:

void APP_Start(void)
{
	// 	APP_terminalPanGet(pan_arr);
	// 	HUSART_sendSTRING(pan_arr);
	switch(u8_g_CardState)
  a2:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <__data_end>
  a6:	82 30       	cpi	r24, 0x02	; 2
  a8:	09 f4       	brne	.+2      	; 0xac <APP_Start+0xa>
  aa:	4a c0       	rjmp	.+148    	; 0x140 <APP_Start+0x9e>
  ac:	28 f4       	brcc	.+10     	; 0xb8 <APP_Start+0x16>
  ae:	88 23       	and	r24, r24
  b0:	51 f0       	breq	.+20     	; 0xc6 <APP_Start+0x24>
  b2:	81 30       	cpi	r24, 0x01	; 1
  b4:	c1 f1       	breq	.+112    	; 0x126 <APP_Start+0x84>
  b6:	08 95       	ret
  b8:	83 30       	cpi	r24, 0x03	; 3
  ba:	09 f4       	brne	.+2      	; 0xbe <APP_Start+0x1c>
  bc:	53 c0       	rjmp	.+166    	; 0x164 <APP_Start+0xc2>
  be:	84 30       	cpi	r24, 0x04	; 4
  c0:	09 f4       	brne	.+2      	; 0xc4 <APP_Start+0x22>
  c2:	6b c0       	rjmp	.+214    	; 0x19a <APP_Start+0xf8>
  c4:	08 95       	ret
	{
		case CardGetMode:
		{
			u8_g_EepromFlag = eeprom_read_byte(FLAG_PAGE);
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	0e 94 0a 02 	call	0x414	; 0x414 <eeprom_read_byte>
  ce:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <u8_g_EepromFlag>
			if(u8_g_EepromFlag == 0xFF) u8_g_CardState = CardProgMode_GetPan;
  d2:	8f 3f       	cpi	r24, 0xFF	; 255
  d4:	21 f4       	brne	.+8      	; 0xde <APP_Start+0x3c>
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <__data_end>
  dc:	08 95       	ret
			else
			{
				HUSART_sendSTRING("\n\rPlease press 1 for entering user mode and 2 for programming mode:");
  de:	89 e8       	ldi	r24, 0x89	; 137
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 ce 02 	call	0x59c	; 0x59c <HUSART_sendSTRING>
				while(HUSART_enRecieveData(&u8_gs_ModeSelect));
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	92 e0       	ldi	r25, 0x02	; 2
  ea:	0e 94 c4 02 	call	0x588	; 0x588 <HUSART_enRecieveData>
  ee:	81 11       	cpse	r24, r1
  f0:	fa cf       	rjmp	.-12     	; 0xe6 <APP_Start+0x44>
				HUSART_enSendData(u8_gs_ModeSelect);
  f2:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <u8_gs_ModeSelect>
  f6:	0e 94 bf 02 	call	0x57e	; 0x57e <HUSART_enSendData>
				HUSART_enSendData('\n\r');
  fa:	8d e0       	ldi	r24, 0x0D	; 13
  fc:	0e 94 bf 02 	call	0x57e	; 0x57e <HUSART_enSendData>
				if('1' == u8_gs_ModeSelect)	u8_g_CardState = CardUserMode;
 100:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <u8_gs_ModeSelect>
 104:	81 33       	cpi	r24, 0x31	; 49
 106:	21 f4       	brne	.+8      	; 0x110 <APP_Start+0x6e>
 108:	83 e0       	ldi	r24, 0x03	; 3
 10a:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <__data_end>
 10e:	08 95       	ret
				else if('2' == u8_gs_ModeSelect) u8_g_CardState = CardProgMode_GetPan;
 110:	82 33       	cpi	r24, 0x32	; 50
 112:	21 f4       	brne	.+8      	; 0x11c <APP_Start+0x7a>
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <__data_end>
 11a:	08 95       	ret
				else HUSART_sendSTRING("Invalid Choice, ");
 11c:	8d ec       	ldi	r24, 0xCD	; 205
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 ce 02 	call	0x59c	; 0x59c <HUSART_sendSTRING>
 124:	08 95       	ret
			}
			break;
		}
		case CardProgMode_GetPan:
		{
			u8_g_PanValid = APP_terminalPanGet(pan_arr);
 126:	80 e6       	ldi	r24, 0x60	; 96
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 14 01 	call	0x228	; 0x228 <APP_terminalPanGet>
 12e:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <u8_g_PanValid>
			if(PANGET_OK == u8_g_PanValid) u8_g_CardState = CardProgMode_GetPin;
 132:	81 30       	cpi	r24, 0x01	; 1
 134:	09 f0       	breq	.+2      	; 0x138 <APP_Start+0x96>
 136:	4d c0       	rjmp	.+154    	; 0x1d2 <APP_Start+0x130>
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <__data_end>
 13e:	08 95       	ret
			break;
		}
		case CardProgMode_GetPin:
		{
			if(CARD_MatchPINs() == PIN_Match_OK)
 140:	0e 94 9c 01 	call	0x338	; 0x338 <CARD_MatchPINs>
 144:	81 30       	cpi	r24, 0x01	; 1
 146:	51 f4       	brne	.+20     	; 0x15c <APP_Start+0xba>
			{
				SaveCardData(pan_arr,pin_arr);
 148:	64 e7       	ldi	r22, 0x74	; 116
 14a:	70 e0       	ldi	r23, 0x00	; 0
 14c:	80 e6       	ldi	r24, 0x60	; 96
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 3e 01 	call	0x27c	; 0x27c <SaveCardData>
				u8_g_CardState = CardUserMode;
 154:	83 e0       	ldi	r24, 0x03	; 3
 156:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <__data_end>
 15a:	08 95       	ret
			}
			else u8_g_CardState = CardProgMode_GetPin;
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <__data_end>
 162:	08 95       	ret
			break;
		}
		case CardUserMode:
		{
			HUSART_sendSTRING("\n\r------------- User Mode -------------\n");
 164:	8e ed       	ldi	r24, 0xDE	; 222
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 ce 02 	call	0x59c	; 0x59c <HUSART_sendSTRING>
			//_delay_ms(5000);
			/* Trigger ATM */
			HSPI_SlaveRequest(pin_arr, PIN_LENGTH);
 16c:	65 e0       	ldi	r22, 0x05	; 5
 16e:	84 e7       	ldi	r24, 0x74	; 116
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 a6 02 	call	0x54c	; 0x54c <HSPI_SlaveRequest>
			
			/* Get PIN from EEPROM to prepare data in SPI buffer */
			ReadCardData(pan_arr,pin_arr);
 176:	64 e7       	ldi	r22, 0x74	; 116
 178:	70 e0       	ldi	r23, 0x00	; 0
 17a:	80 e6       	ldi	r24, 0x60	; 96
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 76 01 	call	0x2ec	; 0x2ec <ReadCardData>
			HUSART_sendSTRING(pan_arr);
 182:	80 e6       	ldi	r24, 0x60	; 96
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 ce 02 	call	0x59c	; 0x59c <HUSART_sendSTRING>
			HUSART_sendSTRING(pin_arr);
 18a:	84 e7       	ldi	r24, 0x74	; 116
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 ce 02 	call	0x59c	; 0x59c <HUSART_sendSTRING>
			u8_g_CardState = CardCommMode;
 192:	84 e0       	ldi	r24, 0x04	; 4
 194:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <__data_end>
			break;
 198:	08 95       	ret
		}
		case CardCommMode:
		{
			if(CARD_PIN_REQUEST == u8_g_SlaveReceive)
 19a:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <u8_g_SlaveReceive>
 19e:	80 35       	cpi	r24, 0x50	; 80
 1a0:	41 f4       	brne	.+16     	; 0x1b2 <APP_Start+0x110>
			{
				u8_g_SlaveReceive = 0;
 1a2:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <u8_g_SlaveReceive>
				HSPI_SlaveSetData(pin_arr, PIN_LENGTH);
 1a6:	65 e0       	ldi	r22, 0x05	; 5
 1a8:	84 e7       	ldi	r24, 0x74	; 116
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 b1 02 	call	0x562	; 0x562 <HSPI_SlaveSetData>
 1b0:	08 95       	ret
			}
			else if(CARD_PAN_REQUEST == u8_g_SlaveReceive)
 1b2:	87 34       	cpi	r24, 0x47	; 71
 1b4:	41 f4       	brne	.+16     	; 0x1c6 <APP_Start+0x124>
			{
				u8_g_SlaveReceive = 0;
 1b6:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <u8_g_SlaveReceive>
				HSPI_SlaveSetData(pan_arr, PAN_LENGTH);
 1ba:	64 e1       	ldi	r22, 0x14	; 20
 1bc:	80 e6       	ldi	r24, 0x60	; 96
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 b1 02 	call	0x562	; 0x562 <HSPI_SlaveSetData>
 1c4:	08 95       	ret
			}
			else if(ATM_REQUEST_EJECTED == u8_g_SlaveReceive)
 1c6:	85 34       	cpi	r24, 0x45	; 69
 1c8:	21 f4       	brne	.+8      	; 0x1d2 <APP_Start+0x130>
			{
				u8_g_SlaveReceive = 0;
 1ca:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <u8_g_SlaveReceive>
				u8_g_CardState = CardGetMode;
 1ce:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <__data_end>
 1d2:	08 95       	ret

000001d4 <APP_terminalPinGet>:
 * FUNCTION			: APP_terminalPinGet
 * DESCRIPTION		: Get pin from User within terminal and doing some validation
 * RETURN			: en_terminalPinGetStatus_t {PINGET_NOK or PINGET_OK}
 */
en_terminalPinGetStatus_t APP_terminalPinGet(Uchar8_t* arr)
{
 1d4:	0f 93       	push	r16
 1d6:	1f 93       	push	r17
 1d8:	cf 93       	push	r28
 1da:	8c 01       	movw	r16, r24
	en_terminalPinGetStatus_t errorStatus = PINGET_OK;

	Uchar8_t counter = 0, flag = 0;
	HUSART_receiveSTRING(arr, 5);
 1dc:	65 e0       	ldi	r22, 0x05	; 5
 1de:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <HUSART_receiveSTRING>
 */
en_terminalPinGetStatus_t APP_terminalPinGet(Uchar8_t* arr)
{
	en_terminalPinGetStatus_t errorStatus = PINGET_OK;

	Uchar8_t counter = 0, flag = 0;
 1e2:	c0 e0       	ldi	r28, 0x00	; 0
	HUSART_receiveSTRING(arr, 5);
	while(arr[counter] != null)
 1e4:	0c c0       	rjmp	.+24     	; 0x1fe <APP_terminalPinGet+0x2a>
	{
		if(arr[counter] >= '0' && arr[counter] <= '9')
 1e6:	80 53       	subi	r24, 0x30	; 48
 1e8:	8a 30       	cpi	r24, 0x0A	; 10
 1ea:	10 f4       	brcc	.+4      	; 0x1f0 <APP_terminalPinGet+0x1c>
		{
			counter++;
 1ec:	cf 5f       	subi	r28, 0xFF	; 255
 1ee:	07 c0       	rjmp	.+14     	; 0x1fe <APP_terminalPinGet+0x2a>
		}
		else
		{
			HUSART_sendSTRING( (Uchar8_t*) "\rNot numeric ");
 1f0:	87 e0       	ldi	r24, 0x07	; 7
 1f2:	91 e0       	ldi	r25, 0x01	; 1
 1f4:	0e 94 ce 02 	call	0x59c	; 0x59c <HUSART_sendSTRING>
			flag = 1;
 1f8:	91 e0       	ldi	r25, 0x01	; 1
			errorStatus = PINGET_NOK;
 1fa:	80 e0       	ldi	r24, 0x00	; 0
			break;
 1fc:	08 c0       	rjmp	.+16     	; 0x20e <APP_terminalPinGet+0x3a>
{
	en_terminalPinGetStatus_t errorStatus = PINGET_OK;

	Uchar8_t counter = 0, flag = 0;
	HUSART_receiveSTRING(arr, 5);
	while(arr[counter] != null)
 1fe:	f8 01       	movw	r30, r16
 200:	ec 0f       	add	r30, r28
 202:	f1 1d       	adc	r31, r1
 204:	80 81       	ld	r24, Z
 206:	81 11       	cpse	r24, r1
 208:	ee cf       	rjmp	.-36     	; 0x1e6 <APP_terminalPinGet+0x12>
 */
en_terminalPinGetStatus_t APP_terminalPinGet(Uchar8_t* arr)
{
	en_terminalPinGetStatus_t errorStatus = PINGET_OK;

	Uchar8_t counter = 0, flag = 0;
 20a:	90 e0       	ldi	r25, 0x00	; 0
 * DESCRIPTION		: Get pin from User within terminal and doing some validation
 * RETURN			: en_terminalPinGetStatus_t {PINGET_NOK or PINGET_OK}
 */
en_terminalPinGetStatus_t APP_terminalPinGet(Uchar8_t* arr)
{
	en_terminalPinGetStatus_t errorStatus = PINGET_OK;
 20c:	81 e0       	ldi	r24, 0x01	; 1
			flag = 1;
			errorStatus = PINGET_NOK;
			break;
		}
	}
	if(counter < 4 && flag == 0)
 20e:	c4 30       	cpi	r28, 0x04	; 4
 210:	38 f4       	brcc	.+14     	; 0x220 <APP_terminalPinGet+0x4c>
 212:	91 11       	cpse	r25, r1
 214:	05 c0       	rjmp	.+10     	; 0x220 <APP_terminalPinGet+0x4c>
	{
		HUSART_sendSTRING( (Uchar8_t*) "\rbelow 4 dig ");
 216:	85 e1       	ldi	r24, 0x15	; 21
 218:	91 e0       	ldi	r25, 0x01	; 1
 21a:	0e 94 ce 02 	call	0x59c	; 0x59c <HUSART_sendSTRING>
		errorStatus = PINGET_NOK;
 21e:	80 e0       	ldi	r24, 0x00	; 0
	}
	return errorStatus;
}
 220:	cf 91       	pop	r28
 222:	1f 91       	pop	r17
 224:	0f 91       	pop	r16
 226:	08 95       	ret

00000228 <APP_terminalPanGet>:
 * FUNCTION			: APP_terminalPanGet
 * DESCRIPTION		: Get pan from User within terminal and doing some validation
 * RETURN			: en_terminalPanGetStatus_t {PANGET_NOK or PANGET_OK}
 */
en_terminalPanGetStatus_t APP_terminalPanGet(Uchar8_t* arr)
{
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	ec 01       	movw	r28, r24
	Uchar8_t loc_counter=0;
	HUSART_sendSTRING((Uchar8_t*)"\n\rEnter Card Pan : ");
 22e:	83 e2       	ldi	r24, 0x23	; 35
 230:	91 e0       	ldi	r25, 0x01	; 1
 232:	0e 94 ce 02 	call	0x59c	; 0x59c <HUSART_sendSTRING>
	HUSART_receiveSTRING(arr,20);
 236:	64 e1       	ldi	r22, 0x14	; 20
 238:	ce 01       	movw	r24, r28
 23a:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <HUSART_receiveSTRING>
 * DESCRIPTION		: Get pan from User within terminal and doing some validation
 * RETURN			: en_terminalPanGetStatus_t {PANGET_NOK or PANGET_OK}
 */
en_terminalPanGetStatus_t APP_terminalPanGet(Uchar8_t* arr)
{
	Uchar8_t loc_counter=0;
 23e:	90 e0       	ldi	r25, 0x00	; 0
	HUSART_sendSTRING((Uchar8_t*)"\n\rEnter Card Pan : ");
	HUSART_receiveSTRING(arr,20);
	while(arr[loc_counter] != null)
 240:	0b c0       	rjmp	.+22     	; 0x258 <APP_terminalPanGet+0x30>
	{
		if(arr[loc_counter] >= '0' && arr[loc_counter] <= '9')
 242:	80 53       	subi	r24, 0x30	; 48
 244:	8a 30       	cpi	r24, 0x0A	; 10
 246:	10 f4       	brcc	.+4      	; 0x24c <APP_terminalPanGet+0x24>
		{
			loc_counter++;
 248:	9f 5f       	subi	r25, 0xFF	; 255
 24a:	06 c0       	rjmp	.+12     	; 0x258 <APP_terminalPanGet+0x30>
		}
		else
		{
			HUSART_sendSTRING((Uchar8_t*) "\n\rInvalid Pan Number - must contain Numbers only");
 24c:	87 e3       	ldi	r24, 0x37	; 55
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	0e 94 ce 02 	call	0x59c	; 0x59c <HUSART_sendSTRING>
			return PANGET_NOK;
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	0f c0       	rjmp	.+30     	; 0x276 <APP_terminalPanGet+0x4e>
en_terminalPanGetStatus_t APP_terminalPanGet(Uchar8_t* arr)
{
	Uchar8_t loc_counter=0;
	HUSART_sendSTRING((Uchar8_t*)"\n\rEnter Card Pan : ");
	HUSART_receiveSTRING(arr,20);
	while(arr[loc_counter] != null)
 258:	fe 01       	movw	r30, r28
 25a:	e9 0f       	add	r30, r25
 25c:	f1 1d       	adc	r31, r1
 25e:	80 81       	ld	r24, Z
 260:	81 11       	cpse	r24, r1
 262:	ef cf       	rjmp	.-34     	; 0x242 <APP_terminalPanGet+0x1a>
		{
			HUSART_sendSTRING((Uchar8_t*) "\n\rInvalid Pan Number - must contain Numbers only");
			return PANGET_NOK;
		}
	}
	if(loc_counter<16)
 264:	90 31       	cpi	r25, 0x10	; 16
 266:	30 f4       	brcc	.+12     	; 0x274 <APP_terminalPanGet+0x4c>
	{
	 HUSART_sendSTRING((Uchar8_t*) "\n\rInvalid Pan Number - must contain at least 16 numbers");
 268:	88 e6       	ldi	r24, 0x68	; 104
 26a:	91 e0       	ldi	r25, 0x01	; 1
 26c:	0e 94 ce 02 	call	0x59c	; 0x59c <HUSART_sendSTRING>
	 return PANGET_NOK;
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	01 c0       	rjmp	.+2      	; 0x276 <APP_terminalPanGet+0x4e>
	}
	return PANGET_OK;
 274:	81 e0       	ldi	r24, 0x01	; 1
}
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	08 95       	ret

0000027c <SaveCardData>:
 * \param Uchar8_t *CardPan :  Pointer From Uchar8_t Will Store The Address Of Array Of Char That Contain User Pan String
 * \param Uchar8_t *CardPin :  Pointer From Uchar8_t Will Store The Address Of Array Of Char That Contain User Pin String
 * \return EN_TerminalDataState : This Is Enum For Terminal Data State
 */
EN_TerminalDataState SaveCardData(Uchar8_t *CardPan,Uchar8_t *CardPin)
{
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
	EN_TerminalDataState ret = DATA_NSAVED; 
	if(CardPan == null || CardPin == null) // Check If The Pointers Is Equal Null Or Not Equal
 280:	00 97       	sbiw	r24, 0x00	; 0
 282:	71 f1       	breq	.+92     	; 0x2e0 <SaveCardData+0x64>
 284:	61 15       	cp	r22, r1
 286:	71 05       	cpc	r23, r1
 288:	69 f1       	breq	.+90     	; 0x2e4 <SaveCardData+0x68>
 28a:	eb 01       	movw	r28, r22
 28c:	bc 01       	movw	r22, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28e:	8f e4       	ldi	r24, 0x4F	; 79
 290:	93 ec       	ldi	r25, 0xC3	; 195
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <SaveCardData+0x16>
 296:	00 c0       	rjmp	.+0      	; 0x298 <SaveCardData+0x1c>
 298:	00 00       	nop
		ret = DATA_NSAVED; // If Equal Null Then Return DATA_NSAVED From Terminal Data State Enum
	}
	else
	{
		_delay_ms(200);
		eeprom_write_string(PAN_PAGE,CardPan);// Call This Function To Write In The EEPROM And Give To It The Address & Pointer Point To The Pan Array 
 29a:	80 e6       	ldi	r24, 0x60	; 96
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 27 02 	call	0x44e	; 0x44e <eeprom_write_string>
 2a2:	8f e4       	ldi	r24, 0x4F	; 79
 2a4:	93 ec       	ldi	r25, 0xC3	; 195
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <SaveCardData+0x2a>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <SaveCardData+0x30>
 2ac:	00 00       	nop
		_delay_ms(200);
		eeprom_write_string(PIN_PAGE,CardPin);// Call This Function To Write In The EEPROM And Give To It The Address & Pointer Point To The Pin Array
 2ae:	be 01       	movw	r22, r28
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	0e 94 27 02 	call	0x44e	; 0x44e <eeprom_write_string>
 2b8:	8f e4       	ldi	r24, 0x4F	; 79
 2ba:	93 ec       	ldi	r25, 0xC3	; 195
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <SaveCardData+0x40>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <SaveCardData+0x46>
 2c2:	00 00       	nop
		_delay_ms(200);
		eeprom_write_string(FLAG_PAGE, (Uchar8_t*)"1");// Call This Function To Write In The EEPROM And Give To It The Address & The Data 
 2c4:	60 ea       	ldi	r22, 0xA0	; 160
 2c6:	71 e0       	ldi	r23, 0x01	; 1
 2c8:	80 e2       	ldi	r24, 0x20	; 32
 2ca:	91 e0       	ldi	r25, 0x01	; 1
 2cc:	0e 94 27 02 	call	0x44e	; 0x44e <eeprom_write_string>
 2d0:	8f e4       	ldi	r24, 0x4F	; 79
 2d2:	93 ec       	ldi	r25, 0xC3	; 195
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <SaveCardData+0x58>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <SaveCardData+0x5e>
 2da:	00 00       	nop
		_delay_ms(200);
		ret = DATA_SAVED;//Return DATA_NSAVED From Terminal Data State 
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	03 c0       	rjmp	.+6      	; 0x2e6 <SaveCardData+0x6a>
EN_TerminalDataState SaveCardData(Uchar8_t *CardPan,Uchar8_t *CardPin)
{
	EN_TerminalDataState ret = DATA_NSAVED; 
	if(CardPan == null || CardPin == null) // Check If The Pointers Is Equal Null Or Not Equal
	{
		ret = DATA_NSAVED; // If Equal Null Then Return DATA_NSAVED From Terminal Data State Enum
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	01 c0       	rjmp	.+2      	; 0x2e6 <SaveCardData+0x6a>
 2e4:	81 e0       	ldi	r24, 0x01	; 1
		_delay_ms(200);
		ret = DATA_SAVED;//Return DATA_NSAVED From Terminal Data State 
	}
	
	return ret;
}
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	08 95       	ret

000002ec <ReadCardData>:
 * \param Uchar8_t *CardPan :  Pointer From Uchar8_t Will Store The Address Of Array Of Char That Function Will Return User Pan String In It
 * \param Uchar8_t *CardPin :  Pointer From Uchar8_t Will Store The Address Of Array Of Char That Function Will Return User Pin String In It
 * \return EN_TerminalDataState : This Is Enum For Terminal Data State 
 */
EN_TerminalDataState ReadCardData(Uchar8_t *CardPan,Uchar8_t *CardPin)
{
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
		EN_TerminalDataState ret = DATA_NREAD;
		
		if(CardPan == null || CardPin == null)// Check If The Pointers Is Equal Null Or Not Equal
 2f0:	00 97       	sbiw	r24, 0x00	; 0
 2f2:	e1 f0       	breq	.+56     	; 0x32c <ReadCardData+0x40>
 2f4:	61 15       	cp	r22, r1
 2f6:	71 05       	cpc	r23, r1
 2f8:	d9 f0       	breq	.+54     	; 0x330 <ReadCardData+0x44>
 2fa:	eb 01       	movw	r28, r22
 2fc:	bc 01       	movw	r22, r24
		{
			ret = DATA_NREAD;// If Equal Null Then Return DATA_NREAD From Terminal Data State Enum
		}
		else
		{			
			eeprom_read_string(PAN_PAGE , CardPan);// Call This Function To Read From The EEPROM And Give To It The Address & Pointer Point To The Pan Array 
 2fe:	80 e6       	ldi	r24, 0x60	; 96
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 52 02 	call	0x4a4	; 0x4a4 <eeprom_read_string>
 306:	8f e4       	ldi	r24, 0x4F	; 79
 308:	93 ec       	ldi	r25, 0xC3	; 195
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <ReadCardData+0x1e>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <ReadCardData+0x24>
 310:	00 00       	nop
			_delay_ms(200);
			eeprom_read_string(PIN_PAGE , CardPin);// Call This Function To Read From The EEPROM And Give To It The Address & Pointer Point To The Pin Array
 312:	be 01       	movw	r22, r28
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	0e 94 52 02 	call	0x4a4	; 0x4a4 <eeprom_read_string>
 31c:	8f e4       	ldi	r24, 0x4F	; 79
 31e:	93 ec       	ldi	r25, 0xC3	; 195
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <ReadCardData+0x34>
 324:	00 c0       	rjmp	.+0      	; 0x326 <ReadCardData+0x3a>
 326:	00 00       	nop
			_delay_ms(200);
			ret = DATA_READ;//Return DATA_READ From Terminal Data State 
 328:	82 e0       	ldi	r24, 0x02	; 2
 32a:	03 c0       	rjmp	.+6      	; 0x332 <ReadCardData+0x46>
{
		EN_TerminalDataState ret = DATA_NREAD;
		
		if(CardPan == null || CardPin == null)// Check If The Pointers Is Equal Null Or Not Equal
		{
			ret = DATA_NREAD;// If Equal Null Then Return DATA_NREAD From Terminal Data State Enum
 32c:	83 e0       	ldi	r24, 0x03	; 3
 32e:	01 c0       	rjmp	.+2      	; 0x332 <ReadCardData+0x46>
 330:	83 e0       	ldi	r24, 0x03	; 3
			eeprom_read_string(PIN_PAGE , CardPin);// Call This Function To Read From The EEPROM And Give To It The Address & Pointer Point To The Pin Array
			_delay_ms(200);
			ret = DATA_READ;//Return DATA_READ From Terminal Data State 
		}
		return ret;
}
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	08 95       	ret

00000338 <CARD_MatchPINs>:

en_CardPinMatchError_t CARD_MatchPINs()
{
 338:	1f 93       	push	r17
 33a:	cf 93       	push	r28
 33c:	df 93       	push	r29
 33e:	cd b7       	in	r28, 0x3d	; 61
 340:	de b7       	in	r29, 0x3e	; 62
 342:	2a 97       	sbiw	r28, 0x0a	; 10
 344:	0f b6       	in	r0, 0x3f	; 63
 346:	f8 94       	cli
 348:	de bf       	out	0x3e, r29	; 62
 34a:	0f be       	out	0x3f, r0	; 63
 34c:	cd bf       	out	0x3d, r28	; 61
	Uchar8_t PIN_Confirm[10], u8_l_PINiterator;
	Uchar8_t u8_l_ValidatePIN, u8_l_ValidateConfirmPIN;
	
	/* Get PIN from user */
	HUSART_sendSTRING( (Uchar8_t*) "\n\rEnter your PIN : ");
 34e:	82 ea       	ldi	r24, 0xA2	; 162
 350:	91 e0       	ldi	r25, 0x01	; 1
 352:	0e 94 ce 02 	call	0x59c	; 0x59c <HUSART_sendSTRING>
	u8_l_ValidatePIN = APP_terminalPinGet(pin_arr);
 356:	84 e7       	ldi	r24, 0x74	; 116
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <APP_terminalPinGet>
 35e:	18 2f       	mov	r17, r24
	if(u8_l_ValidatePIN == PINGET_NOK) return PIN_Match_NOK;
 360:	88 23       	and	r24, r24
 362:	71 f1       	breq	.+92     	; 0x3c0 <CARD_MatchPINs+0x88>
	/* Get PIN again for Confirmation */
	HUSART_sendSTRING((Uchar8_t *)"\n\rConfirm Your PIN : ");
 364:	86 eb       	ldi	r24, 0xB6	; 182
 366:	91 e0       	ldi	r25, 0x01	; 1
 368:	0e 94 ce 02 	call	0x59c	; 0x59c <HUSART_sendSTRING>
	u8_l_ValidateConfirmPIN = APP_terminalPinGet(PIN_Confirm);
 36c:	ce 01       	movw	r24, r28
 36e:	01 96       	adiw	r24, 0x01	; 1
 370:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <APP_terminalPinGet>
	
	if((PINGET_OK == u8_l_ValidatePIN) && (PINGET_OK == u8_l_ValidateConfirmPIN))
 374:	11 30       	cpi	r17, 0x01	; 1
 376:	31 f5       	brne	.+76     	; 0x3c4 <CARD_MatchPINs+0x8c>
 378:	81 30       	cpi	r24, 0x01	; 1
 37a:	c9 f0       	breq	.+50     	; 0x3ae <CARD_MatchPINs+0x76>
		
		HUSART_sendSTRING((Uchar8_t *)"\n\rPin Matched");
		return PIN_Match_OK;
	}
	
	return PIN_Match_NOK;
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	23 c0       	rjmp	.+70     	; 0x3c6 <CARD_MatchPINs+0x8e>
	if((PINGET_OK == u8_l_ValidatePIN) && (PINGET_OK == u8_l_ValidateConfirmPIN))
	{
		/* Check if the user entered same PIN both times */
		for(u8_l_PINiterator=0; u8_l_PINiterator<PIN_LENGTH; u8_l_PINiterator++)
		{
			if(pin_arr[u8_l_PINiterator] != PIN_Confirm[u8_l_PINiterator])
 380:	82 2f       	mov	r24, r18
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	fc 01       	movw	r30, r24
 386:	ec 58       	subi	r30, 0x8C	; 140
 388:	ff 4f       	sbci	r31, 0xFF	; 255
 38a:	30 81       	ld	r19, Z
 38c:	e1 e0       	ldi	r30, 0x01	; 1
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	ec 0f       	add	r30, r28
 392:	fd 1f       	adc	r31, r29
 394:	e8 0f       	add	r30, r24
 396:	f9 1f       	adc	r31, r25
 398:	80 81       	ld	r24, Z
 39a:	38 17       	cp	r19, r24
 39c:	31 f0       	breq	.+12     	; 0x3aa <CARD_MatchPINs+0x72>
			{
				HUSART_sendSTRING((Uchar8_t *)"\n\rPin Not Matched");
 39e:	8c ec       	ldi	r24, 0xCC	; 204
 3a0:	91 e0       	ldi	r25, 0x01	; 1
 3a2:	0e 94 ce 02 	call	0x59c	; 0x59c <HUSART_sendSTRING>
				return PIN_Match_NOK;
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	0e c0       	rjmp	.+28     	; 0x3c6 <CARD_MatchPINs+0x8e>
	u8_l_ValidateConfirmPIN = APP_terminalPinGet(PIN_Confirm);
	
	if((PINGET_OK == u8_l_ValidatePIN) && (PINGET_OK == u8_l_ValidateConfirmPIN))
	{
		/* Check if the user entered same PIN both times */
		for(u8_l_PINiterator=0; u8_l_PINiterator<PIN_LENGTH; u8_l_PINiterator++)
 3aa:	2f 5f       	subi	r18, 0xFF	; 255
 3ac:	01 c0       	rjmp	.+2      	; 0x3b0 <CARD_MatchPINs+0x78>
 3ae:	20 e0       	ldi	r18, 0x00	; 0
 3b0:	25 30       	cpi	r18, 0x05	; 5
 3b2:	30 f3       	brcs	.-52     	; 0x380 <CARD_MatchPINs+0x48>
				HUSART_sendSTRING((Uchar8_t *)"\n\rPin Not Matched");
				return PIN_Match_NOK;
			}
		}
		
		HUSART_sendSTRING((Uchar8_t *)"\n\rPin Matched");
 3b4:	8e ed       	ldi	r24, 0xDE	; 222
 3b6:	91 e0       	ldi	r25, 0x01	; 1
 3b8:	0e 94 ce 02 	call	0x59c	; 0x59c <HUSART_sendSTRING>
		return PIN_Match_OK;
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	03 c0       	rjmp	.+6      	; 0x3c6 <CARD_MatchPINs+0x8e>
	Uchar8_t u8_l_ValidatePIN, u8_l_ValidateConfirmPIN;
	
	/* Get PIN from user */
	HUSART_sendSTRING( (Uchar8_t*) "\n\rEnter your PIN : ");
	u8_l_ValidatePIN = APP_terminalPinGet(pin_arr);
	if(u8_l_ValidatePIN == PINGET_NOK) return PIN_Match_NOK;
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	01 c0       	rjmp	.+2      	; 0x3c6 <CARD_MatchPINs+0x8e>
		
		HUSART_sendSTRING((Uchar8_t *)"\n\rPin Matched");
		return PIN_Match_OK;
	}
	
	return PIN_Match_NOK;
 3c4:	80 e0       	ldi	r24, 0x00	; 0
}
 3c6:	2a 96       	adiw	r28, 0x0a	; 10
 3c8:	0f b6       	in	r0, 0x3f	; 63
 3ca:	f8 94       	cli
 3cc:	de bf       	out	0x3e, r29	; 62
 3ce:	0f be       	out	0x3f, r0	; 63
 3d0:	cd bf       	out	0x3d, r28	; 61
 3d2:	df 91       	pop	r29
 3d4:	cf 91       	pop	r28
 3d6:	1f 91       	pop	r17
 3d8:	08 95       	ret

000003da <eeprom_init>:
*
* \return void
*/
void eeprom_init(void)
{
	i2c_init_master(); // call function that init I2c Master
 3da:	0e 94 59 03 	call	0x6b2	; 0x6b2 <i2c_init_master>
 3de:	08 95       	ret

000003e0 <eeprom_write_byte>:
*		 : Uchar8_t data : This Is Data That Will Be Write	
*
* \return void
*/
void eeprom_write_byte(Uint16_t address, Uchar8_t data)  
{
 3e0:	1f 93       	push	r17
 3e2:	cf 93       	push	r28
 3e4:	df 93       	push	r29
 3e6:	d8 2f       	mov	r29, r24
 3e8:	19 2f       	mov	r17, r25
 3ea:	c6 2f       	mov	r28, r22
	
	i2c_start(); // Send Start Bit On I2c
 3ec:	0e 94 67 03 	call	0x6ce	; 0x6ce <i2c_start>
	i2c_send_slave_address_with_write_req(0x50);// Send Slave Address With Write Bit On I2c
 3f0:	80 e5       	ldi	r24, 0x50	; 80
 3f2:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <i2c_send_slave_address_with_write_req>
	i2c_write_byte(address >> 8); // Write Byte Contain Device Address Shifted By 8 On I2c
 3f6:	81 2f       	mov	r24, r17
 3f8:	0e 94 99 03 	call	0x732	; 0x732 <i2c_write_byte>
	i2c_write_byte(address); // Write Byte Contain Device Address On I2c
 3fc:	8d 2f       	mov	r24, r29
 3fe:	0e 94 99 03 	call	0x732	; 0x732 <i2c_write_byte>
	i2c_write_byte(data); // Write Byte Contain Data On I2c
 402:	8c 2f       	mov	r24, r28
 404:	0e 94 99 03 	call	0x732	; 0x732 <i2c_write_byte>
	i2c_stop(); // Send Stop Bit On I2c
 408:	0e 94 a8 03 	call	0x750	; 0x750 <i2c_stop>
}
 40c:	df 91       	pop	r29
 40e:	cf 91       	pop	r28
 410:	1f 91       	pop	r17
 412:	08 95       	ret

00000414 <eeprom_read_byte>:
* \param : Uint16_t address : This Is Device Address	
*
* \return Uchar8_t : Function Will Return Uchar8_t Contain The Data
*/
Uchar8_t eeprom_read_byte(Uint16_t address)
{
 414:	cf 93       	push	r28
 416:	df 93       	push	r29
 418:	c8 2f       	mov	r28, r24
 41a:	d9 2f       	mov	r29, r25
	Uchar8_t data = 0;
	i2c_start();// Send Start Bit On I2c
 41c:	0e 94 67 03 	call	0x6ce	; 0x6ce <i2c_start>
	i2c_send_slave_address_with_write_req(0x50);// Send Slave Address With Write Bit On I2c
 420:	80 e5       	ldi	r24, 0x50	; 80
 422:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <i2c_send_slave_address_with_write_req>
	i2c_write_byte(address >> 8);// Write Byte Contain Device Address Shifted By 8 On I2c
 426:	8d 2f       	mov	r24, r29
 428:	0e 94 99 03 	call	0x732	; 0x732 <i2c_write_byte>
	i2c_write_byte(address & 0xFF);// Write Byte Contain Device Address On I2c
 42c:	8c 2f       	mov	r24, r28
 42e:	0e 94 99 03 	call	0x732	; 0x732 <i2c_write_byte>
	i2c_repeated_start();// Send Repeated Start Bit On I2c
 432:	0e 94 71 03 	call	0x6e2	; 0x6e2 <i2c_repeated_start>
	i2c_send_slave_address_with_read_req(0x50);// Send Slave Address With Read Bit On I2c
 436:	80 e5       	ldi	r24, 0x50	; 80
 438:	0e 94 8a 03 	call	0x714	; 0x714 <i2c_send_slave_address_with_read_req>
	data = i2c_read_byte_nack();// Read Byte Contain Data On I2c With No Ack
 43c:	0e 94 ab 03 	call	0x756	; 0x756 <i2c_read_byte_nack>
 440:	c8 2f       	mov	r28, r24
	i2c_stop();// Send Stop Bit On I2c
 442:	0e 94 a8 03 	call	0x750	; 0x750 <i2c_stop>
	return data;//Return The Data That Been Read 
}
 446:	8c 2f       	mov	r24, r28
 448:	df 91       	pop	r29
 44a:	cf 91       	pop	r28
 44c:	08 95       	ret

0000044e <eeprom_write_string>:
* \param : Uint16_t address : This Is Device Address
*		 : Uchar8_t *str	: This Pointer Will Store The Address Of The Array Of The Chars
* \return  Void
*/
void eeprom_write_string(Uint16_t Copy_u8Address, const Uchar8_t* str)
{
 44e:	ef 92       	push	r14
 450:	ff 92       	push	r15
 452:	0f 93       	push	r16
 454:	1f 93       	push	r17
 456:	cf 93       	push	r28
 458:	7b 01       	movw	r14, r22
	Uchar8_t i = 0;
 45a:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[i] != '\0') // Loop Until The End Of The String
 45c:	0e c0       	rjmp	.+28     	; 0x47a <eeprom_write_string+0x2c>
 45e:	a3 ed       	ldi	r26, 0xD3	; 211
 460:	b0 e3       	ldi	r27, 0x30	; 48
 462:	11 97       	sbiw	r26, 0x01	; 1
 464:	f1 f7       	brne	.-4      	; 0x462 <eeprom_write_string+0x14>
 466:	00 c0       	rjmp	.+0      	; 0x468 <eeprom_write_string+0x1a>
 468:	00 00       	nop
	{
		_delay_ms(50);
		eeprom_write_byte(Copy_u8Address++,str[i++]);//Call This Function To Write Char In EEPROM And Increment The Address And Index
 46a:	cf 5f       	subi	r28, 0xFF	; 255
 46c:	8c 01       	movw	r16, r24
 46e:	0f 5f       	subi	r16, 0xFF	; 255
 470:	1f 4f       	sbci	r17, 0xFF	; 255
 472:	60 81       	ld	r22, Z
 474:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <eeprom_write_byte>
 478:	c8 01       	movw	r24, r16
* \return  Void
*/
void eeprom_write_string(Uint16_t Copy_u8Address, const Uchar8_t* str)
{
	Uchar8_t i = 0;
	while(str[i] != '\0') // Loop Until The End Of The String
 47a:	f7 01       	movw	r30, r14
 47c:	ec 0f       	add	r30, r28
 47e:	f1 1d       	adc	r31, r1
 480:	20 81       	ld	r18, Z
 482:	21 11       	cpse	r18, r1
 484:	ec cf       	rjmp	.-40     	; 0x45e <eeprom_write_string+0x10>
 486:	e3 ed       	ldi	r30, 0xD3	; 211
 488:	f0 e3       	ldi	r31, 0x30	; 48
 48a:	31 97       	sbiw	r30, 0x01	; 1
 48c:	f1 f7       	brne	.-4      	; 0x48a <eeprom_write_string+0x3c>
 48e:	00 c0       	rjmp	.+0      	; 0x490 <eeprom_write_string+0x42>
 490:	00 00       	nop
	{
		_delay_ms(50);
		eeprom_write_byte(Copy_u8Address++,str[i++]);//Call This Function To Write Char In EEPROM And Increment The Address And Index
	}
	_delay_ms(50);
	eeprom_write_byte(Copy_u8Address++,'\0');//Call This Function To Write Null After The Last Char Of The String To Know Where The String Is End
 492:	60 e0       	ldi	r22, 0x00	; 0
 494:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <eeprom_write_byte>
}
 498:	cf 91       	pop	r28
 49a:	1f 91       	pop	r17
 49c:	0f 91       	pop	r16
 49e:	ff 90       	pop	r15
 4a0:	ef 90       	pop	r14
 4a2:	08 95       	ret

000004a4 <eeprom_read_string>:
* \param : Uint16_t address : This Is Device Address
*		 : Uchar8_t *str	: This Pointer Will Store The Address Of The Array Of The Chars That Will Return String In It
* \return  Void
*/
void eeprom_read_string(Uint16_t Copy_u8Address, Uchar8_t* str)
{
 4a4:	cf 92       	push	r12
 4a6:	df 92       	push	r13
 4a8:	ef 92       	push	r14
 4aa:	ff 92       	push	r15
 4ac:	0f 93       	push	r16
 4ae:	1f 93       	push	r17
 4b0:	cf 93       	push	r28
 4b2:	6b 01       	movw	r12, r22
	Uchar8_t len = 0;
 4b4:	c0 e0       	ldi	r28, 0x00	; 0
 4b6:	e3 ed       	ldi	r30, 0xD3	; 211
 4b8:	f0 e3       	ldi	r31, 0x30	; 48
 4ba:	31 97       	sbiw	r30, 0x01	; 1
 4bc:	f1 f7       	brne	.-4      	; 0x4ba <eeprom_read_string+0x16>
 4be:	00 c0       	rjmp	.+0      	; 0x4c0 <eeprom_read_string+0x1c>
 4c0:	00 00       	nop
	do
	{
		_delay_ms(50);
		str[len] = eeprom_read_byte(Copy_u8Address++);//Call This Function To Read Char From EEPROM And Increment The Address And Index
 4c2:	76 01       	movw	r14, r12
 4c4:	ec 0e       	add	r14, r28
 4c6:	f1 1c       	adc	r15, r1
 4c8:	8c 01       	movw	r16, r24
 4ca:	0f 5f       	subi	r16, 0xFF	; 255
 4cc:	1f 4f       	sbci	r17, 0xFF	; 255
 4ce:	0e 94 0a 02 	call	0x414	; 0x414 <eeprom_read_byte>
 4d2:	28 2f       	mov	r18, r24
 4d4:	f7 01       	movw	r30, r14
 4d6:	80 83       	st	Z, r24
	}
	while(str[len++] != '\0');// Loop Until The End Of The String
 4d8:	cf 5f       	subi	r28, 0xFF	; 255
{
	Uchar8_t len = 0;
	do
	{
		_delay_ms(50);
		str[len] = eeprom_read_byte(Copy_u8Address++);//Call This Function To Read Char From EEPROM And Increment The Address And Index
 4da:	c8 01       	movw	r24, r16
	}
	while(str[len++] != '\0');// Loop Until The End Of The String
 4dc:	21 11       	cpse	r18, r1
 4de:	eb cf       	rjmp	.-42     	; 0x4b6 <eeprom_read_string+0x12>
}
 4e0:	cf 91       	pop	r28
 4e2:	1f 91       	pop	r17
 4e4:	0f 91       	pop	r16
 4e6:	ff 90       	pop	r15
 4e8:	ef 90       	pop	r14
 4ea:	df 90       	pop	r13
 4ec:	cf 90       	pop	r12
 4ee:	08 95       	ret

000004f0 <HSPI_SlaveInit>:
	{
		return HSPI_NOK;
	}
	
	return HSPI_OK;
}
 4f0:	60 e0       	ldi	r22, 0x00	; 0
 4f2:	8d e0       	ldi	r24, 0x0D	; 13
 4f4:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <DIO_s8SETPinDir>
 4f8:	60 e0       	ldi	r22, 0x00	; 0
 4fa:	8f e0       	ldi	r24, 0x0F	; 15
 4fc:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <DIO_s8SETPinDir>
 500:	60 e0       	ldi	r22, 0x00	; 0
 502:	8c e0       	ldi	r24, 0x0C	; 12
 504:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <DIO_s8SETPinDir>
 508:	61 e0       	ldi	r22, 0x01	; 1
 50a:	8c e0       	ldi	r24, 0x0C	; 12
 50c:	0e 94 19 03 	call	0x632	; 0x632 <DIO_s8SETPinVal>
 510:	61 e0       	ldi	r22, 0x01	; 1
 512:	8e e0       	ldi	r24, 0x0E	; 14
 514:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <DIO_s8SETPinDir>
 518:	61 e0       	ldi	r22, 0x01	; 1
 51a:	88 e0       	ldi	r24, 0x08	; 8
 51c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <DIO_s8SETPinDir>
 520:	0e 94 b6 03 	call	0x76c	; 0x76c <SPI_SlaveInit>
 524:	61 e0       	ldi	r22, 0x01	; 1
 526:	8c e0       	ldi	r24, 0x0C	; 12
 528:	0e 94 19 03 	call	0x632	; 0x632 <DIO_s8SETPinVal>
 52c:	08 95       	ret

0000052e <HSPI_MasterTrigger>:
}

void HSPI_MasterTrigger(void)
{
	/* Send Request to Master */
	DIO_s8SETPinVal(SLAVE_SEND_REQUEST_PIN, HIGH);
 52e:	61 e0       	ldi	r22, 0x01	; 1
 530:	88 e0       	ldi	r24, 0x08	; 8
 532:	0e 94 19 03 	call	0x632	; 0x632 <DIO_s8SETPinVal>
 536:	83 ec       	ldi	r24, 0xC3	; 195
 538:	99 e0       	ldi	r25, 0x09	; 9
 53a:	01 97       	sbiw	r24, 0x01	; 1
 53c:	f1 f7       	brne	.-4      	; 0x53a <HSPI_MasterTrigger+0xc>
 53e:	00 c0       	rjmp	.+0      	; 0x540 <HSPI_MasterTrigger+0x12>
 540:	00 00       	nop
	_delay_ms(10);
	DIO_s8SETPinVal(SLAVE_SEND_REQUEST_PIN, LOW);
 542:	60 e0       	ldi	r22, 0x00	; 0
 544:	88 e0       	ldi	r24, 0x08	; 8
 546:	0e 94 19 03 	call	0x632	; 0x632 <DIO_s8SETPinVal>
 54a:	08 95       	ret

0000054c <HSPI_SlaveRequest>:
 * \return void
 */
void HSPI_SlaveRequest(Uchar8_t* pu8_a_dataPtr, Uchar8_t u8_a_DataSize)
{
	/* Reset transmission data index */
	u8_g_SlaveTxIndex = 0;
 54c:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <u8_g_SlaveTxIndex>
	
	/* Set global transmission data ptr to point to given data */
	pu8_g_SlaveTxPtr = pu8_a_dataPtr;
 550:	90 93 fd 01 	sts	0x01FD, r25	; 0x8001fd <pu8_g_SlaveTxPtr+0x1>
 554:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <pu8_g_SlaveTxPtr>
	
	u8_g_SlaveTxLen = u8_a_DataSize;
 558:	60 93 05 02 	sts	0x0205, r22	; 0x800205 <u8_g_SlaveTxLen>
	/* Set the Data register with value */
	//SPI_SetValue(pu8_g_SlaveTxPtr[u8_g_SlaveTxIndex++]);

	/* Send Request to Master */
	//DIO_s8TOGPinVal(SLAVE_SEND_REQUEST_PIN);
HSPI_MasterTrigger();
 55c:	0e 94 97 02 	call	0x52e	; 0x52e <HSPI_MasterTrigger>
 560:	08 95       	ret

00000562 <HSPI_SlaveSetData>:
}

void HSPI_SlaveSetData(Uchar8_t* pu8_a_dataPtr, Uchar8_t u8_a_DataSize)
{
	/* Reset transmission data index */
	u8_g_SlaveTxIndex = 0;
 562:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <u8_g_SlaveTxIndex>
	
	/* Set global transmission data ptr to point to given data */
	pu8_g_SlaveTxPtr = pu8_a_dataPtr;
 566:	90 93 fd 01 	sts	0x01FD, r25	; 0x8001fd <pu8_g_SlaveTxPtr+0x1>
 56a:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <pu8_g_SlaveTxPtr>
	
	u8_g_SlaveTxLen = u8_a_DataSize;
 56e:	60 93 05 02 	sts	0x0205, r22	; 0x800205 <u8_g_SlaveTxLen>
 572:	08 95       	ret

00000574 <HUSART_enInit>:
#include "husart.h"


EN_USART_ERROR HUSART_enInit(void)
{
	if(USART_init())return USART_NOT_OK;
 574:	0e 94 11 04 	call	0x822	; 0x822 <USART_init>
 578:	81 11       	cpse	r24, r1
 57a:	81 e0       	ldi	r24, 0x01	; 1
	return USART_OK;
}
 57c:	08 95       	ret

0000057e <HUSART_enSendData>:
EN_USART_ERROR HUSART_enSendData(Uchar8_t Copy_u8DataH)
{
	if(USART_sendData(Copy_u8DataH))return USART_NOT_OK;
 57e:	0e 94 1d 04 	call	0x83a	; 0x83a <USART_sendData>
 582:	81 11       	cpse	r24, r1
 584:	81 e0       	ldi	r24, 0x01	; 1
	return USART_OK;
}
 586:	08 95       	ret

00000588 <HUSART_enRecieveData>:
EN_USART_ERROR HUSART_enRecieveData(Uchar8_t* Ref_u8DataH)
{
 588:	cf 93       	push	r28
 58a:	df 93       	push	r29
 58c:	ec 01       	movw	r28, r24
	*Ref_u8DataH = USART_receiveData();
 58e:	0e 94 22 04 	call	0x844	; 0x844 <USART_receiveData>
 592:	88 83       	st	Y, r24
	return USART_OK;
}
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	df 91       	pop	r29
 598:	cf 91       	pop	r28
 59a:	08 95       	ret

0000059c <HUSART_sendSTRING>:

void HUSART_sendSTRING(Uchar8_t * Hstr)
{
	USART_sendSTRING(Hstr);
 59c:	0e 94 26 04 	call	0x84c	; 0x84c <USART_sendSTRING>
 5a0:	08 95       	ret

000005a2 <HUSART_receiveSTRING>:
}
void HUSART_receiveSTRING(Uchar8_t * Hstr ,Uchar8_t Hsize )
{
	USART_receiveSTRING(Hstr,Hsize);
 5a2:	0e 94 39 04 	call	0x872	; 0x872 <USART_receiveSTRING>
 5a6:	08 95       	ret

000005a8 <main>:
 */ 
#define F_CPU 8000000UL
#include "APP/app.h"
int main(void)
{
	APP_Init();
 5a8:	0e 94 49 00 	call	0x92	; 0x92 <APP_Init>
    while (1) 
    {
      APP_Start();
 5ac:	0e 94 51 00 	call	0xa2	; 0xa2 <APP_Start>
 5b0:	fd cf       	rjmp	.-6      	; 0x5ac <main+0x4>

000005b2 <DIO_s8SETPinDir>:
{
	Uchar8_t errStatus = E_OK;
	Uchar8_t portID;
	Uchar8_t pinID;

	if (enPinCopy < PIN_INVALID && enPortDir< DIR_INVALID)
 5b2:	80 32       	cpi	r24, 0x20	; 32
 5b4:	c0 f5       	brcc	.+112    	; 0x626 <DIO_s8SETPinDir+0x74>
 5b6:	62 30       	cpi	r22, 0x02	; 2
 5b8:	c0 f5       	brcc	.+112    	; 0x62a <DIO_s8SETPinDir+0x78>
	{
		portID = enPinCopy/8;
 5ba:	e8 2f       	mov	r30, r24
 5bc:	e6 95       	lsr	r30
 5be:	e6 95       	lsr	r30
 5c0:	e6 95       	lsr	r30
		pinID  = enPinCopy%8;
 5c2:	87 70       	andi	r24, 0x07	; 7

		if (enPortDir == INPUT)
 5c4:	61 11       	cpse	r22, r1
 5c6:	17 c0       	rjmp	.+46     	; 0x5f6 <DIO_s8SETPinDir+0x44>
		{
			CLEAR_BIT(*ddrReg[portID],pinID);
 5c8:	f0 e0       	ldi	r31, 0x00	; 0
 5ca:	ee 0f       	add	r30, r30
 5cc:	ff 1f       	adc	r31, r31
 5ce:	e7 58       	subi	r30, 0x87	; 135
 5d0:	ff 4f       	sbci	r31, 0xFF	; 255
 5d2:	01 90       	ld	r0, Z+
 5d4:	f0 81       	ld	r31, Z
 5d6:	e0 2d       	mov	r30, r0
 5d8:	40 81       	ld	r20, Z
 5da:	21 e0       	ldi	r18, 0x01	; 1
 5dc:	30 e0       	ldi	r19, 0x00	; 0
 5de:	b9 01       	movw	r22, r18
 5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <DIO_s8SETPinDir+0x34>
 5e2:	66 0f       	add	r22, r22
 5e4:	77 1f       	adc	r23, r23
 5e6:	8a 95       	dec	r24
 5e8:	e2 f7       	brpl	.-8      	; 0x5e2 <DIO_s8SETPinDir+0x30>
 5ea:	cb 01       	movw	r24, r22
 5ec:	80 95       	com	r24
 5ee:	84 23       	and	r24, r20
 5f0:	80 83       	st	Z, r24



Uchar8_t DIO_s8SETPinDir (enu_pin enPinCopy, enu_dir enPortDir)
{
	Uchar8_t errStatus = E_OK;
 5f2:	80 e0       	ldi	r24, 0x00	; 0
 5f4:	08 95       	ret

		if (enPortDir == INPUT)
		{
			CLEAR_BIT(*ddrReg[portID],pinID);
		}
		else if(enPortDir == OUTPUT)
 5f6:	61 30       	cpi	r22, 0x01	; 1
 5f8:	d1 f4       	brne	.+52     	; 0x62e <DIO_s8SETPinDir+0x7c>
		{
			SET_BIT(*ddrReg[portID],pinID);
 5fa:	f0 e0       	ldi	r31, 0x00	; 0
 5fc:	ee 0f       	add	r30, r30
 5fe:	ff 1f       	adc	r31, r31
 600:	e7 58       	subi	r30, 0x87	; 135
 602:	ff 4f       	sbci	r31, 0xFF	; 255
 604:	01 90       	ld	r0, Z+
 606:	f0 81       	ld	r31, Z
 608:	e0 2d       	mov	r30, r0
 60a:	40 81       	ld	r20, Z
 60c:	21 e0       	ldi	r18, 0x01	; 1
 60e:	30 e0       	ldi	r19, 0x00	; 0
 610:	b9 01       	movw	r22, r18
 612:	02 c0       	rjmp	.+4      	; 0x618 <DIO_s8SETPinDir+0x66>
 614:	66 0f       	add	r22, r22
 616:	77 1f       	adc	r23, r23
 618:	8a 95       	dec	r24
 61a:	e2 f7       	brpl	.-8      	; 0x614 <DIO_s8SETPinDir+0x62>
 61c:	cb 01       	movw	r24, r22
 61e:	84 2b       	or	r24, r20
 620:	80 83       	st	Z, r24



Uchar8_t DIO_s8SETPinDir (enu_pin enPinCopy, enu_dir enPortDir)
{
	Uchar8_t errStatus = E_OK;
 622:	80 e0       	ldi	r24, 0x00	; 0
 624:	08 95       	ret
			/* do nothing */
		}
	}
	else
	{
		errStatus = E_NOK;
 626:	8f ef       	ldi	r24, 0xFF	; 255
 628:	08 95       	ret
 62a:	8f ef       	ldi	r24, 0xFF	; 255
 62c:	08 95       	ret



Uchar8_t DIO_s8SETPinDir (enu_pin enPinCopy, enu_dir enPortDir)
{
	Uchar8_t errStatus = E_OK;
 62e:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		errStatus = E_NOK;
	}
	return errStatus;
}
 630:	08 95       	ret

00000632 <DIO_s8SETPinVal>:
{
	Uchar8_t errStatus = E_OK;
	Uchar8_t portID;
	Uchar8_t pinID;

	if (enPinCopy < PIN_INVALID && enPortVal< VAL_INVALID)
 632:	80 32       	cpi	r24, 0x20	; 32
 634:	c0 f5       	brcc	.+112    	; 0x6a6 <DIO_s8SETPinVal+0x74>
 636:	62 30       	cpi	r22, 0x02	; 2
 638:	c0 f5       	brcc	.+112    	; 0x6aa <DIO_s8SETPinVal+0x78>
	{
		portID = enPinCopy/8;
 63a:	e8 2f       	mov	r30, r24
 63c:	e6 95       	lsr	r30
 63e:	e6 95       	lsr	r30
 640:	e6 95       	lsr	r30
		pinID  = enPinCopy%8;
 642:	87 70       	andi	r24, 0x07	; 7

		if (enPortVal == LOW)
 644:	61 11       	cpse	r22, r1
 646:	17 c0       	rjmp	.+46     	; 0x676 <DIO_s8SETPinVal+0x44>
		{
			CLEAR_BIT(*portReg[portID],pinID);
 648:	f0 e0       	ldi	r31, 0x00	; 0
 64a:	ee 0f       	add	r30, r30
 64c:	ff 1f       	adc	r31, r31
 64e:	ef 57       	subi	r30, 0x7F	; 127
 650:	ff 4f       	sbci	r31, 0xFF	; 255
 652:	01 90       	ld	r0, Z+
 654:	f0 81       	ld	r31, Z
 656:	e0 2d       	mov	r30, r0
 658:	40 81       	ld	r20, Z
 65a:	21 e0       	ldi	r18, 0x01	; 1
 65c:	30 e0       	ldi	r19, 0x00	; 0
 65e:	b9 01       	movw	r22, r18
 660:	02 c0       	rjmp	.+4      	; 0x666 <DIO_s8SETPinVal+0x34>
 662:	66 0f       	add	r22, r22
 664:	77 1f       	adc	r23, r23
 666:	8a 95       	dec	r24
 668:	e2 f7       	brpl	.-8      	; 0x662 <DIO_s8SETPinVal+0x30>
 66a:	cb 01       	movw	r24, r22
 66c:	80 95       	com	r24
 66e:	84 23       	and	r24, r20
 670:	80 83       	st	Z, r24
}


Uchar8_t DIO_s8SETPinVal (enu_pin enPinCopy, enu_val enPortVal)
{
	Uchar8_t errStatus = E_OK;
 672:	80 e0       	ldi	r24, 0x00	; 0
 674:	08 95       	ret

		if (enPortVal == LOW)
		{
			CLEAR_BIT(*portReg[portID],pinID);
		}
		else if(enPortVal == HIGH)
 676:	61 30       	cpi	r22, 0x01	; 1
 678:	d1 f4       	brne	.+52     	; 0x6ae <DIO_s8SETPinVal+0x7c>
		{
			SET_BIT(*portReg[portID],pinID);
 67a:	f0 e0       	ldi	r31, 0x00	; 0
 67c:	ee 0f       	add	r30, r30
 67e:	ff 1f       	adc	r31, r31
 680:	ef 57       	subi	r30, 0x7F	; 127
 682:	ff 4f       	sbci	r31, 0xFF	; 255
 684:	01 90       	ld	r0, Z+
 686:	f0 81       	ld	r31, Z
 688:	e0 2d       	mov	r30, r0
 68a:	40 81       	ld	r20, Z
 68c:	21 e0       	ldi	r18, 0x01	; 1
 68e:	30 e0       	ldi	r19, 0x00	; 0
 690:	b9 01       	movw	r22, r18
 692:	02 c0       	rjmp	.+4      	; 0x698 <DIO_s8SETPinVal+0x66>
 694:	66 0f       	add	r22, r22
 696:	77 1f       	adc	r23, r23
 698:	8a 95       	dec	r24
 69a:	e2 f7       	brpl	.-8      	; 0x694 <DIO_s8SETPinVal+0x62>
 69c:	cb 01       	movw	r24, r22
 69e:	84 2b       	or	r24, r20
 6a0:	80 83       	st	Z, r24
}


Uchar8_t DIO_s8SETPinVal (enu_pin enPinCopy, enu_val enPortVal)
{
	Uchar8_t errStatus = E_OK;
 6a2:	80 e0       	ldi	r24, 0x00	; 0
 6a4:	08 95       	ret
			/* do nothing */
		}
	}
	else
	{
		errStatus = E_NOK;
 6a6:	8f ef       	ldi	r24, 0xFF	; 255
 6a8:	08 95       	ret
 6aa:	8f ef       	ldi	r24, 0xFF	; 255
 6ac:	08 95       	ret
}


Uchar8_t DIO_s8SETPinVal (enu_pin enPinCopy, enu_val enPortVal)
{
	Uchar8_t errStatus = E_OK;
 6ae:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		errStatus = E_NOK;
	}
	return errStatus;
}
 6b0:	08 95       	ret

000006b2 <i2c_init_master>:
	SET_BIT(TWCR, TWEN);
	/* Waiting for TWINT flag to be set */
	while ( !(GET_BIT(TWCR,TWINT)) );
	/* Waiting if this condition becoming true */
	while ( (TWSR & 0xF8) != SLAVE_BYTE_TRANSMITTED );
}
 6b2:	81 b1       	in	r24, 0x01	; 1
 6b4:	8e 7f       	andi	r24, 0xFE	; 254
 6b6:	81 b9       	out	0x01, r24	; 1
 6b8:	81 b1       	in	r24, 0x01	; 1
 6ba:	8d 7f       	andi	r24, 0xFD	; 253
 6bc:	81 b9       	out	0x01, r24	; 1
 6be:	82 e0       	ldi	r24, 0x02	; 2
 6c0:	80 b9       	out	0x00, r24	; 0
 6c2:	80 ea       	ldi	r24, 0xA0	; 160
 6c4:	82 b9       	out	0x02, r24	; 2
 6c6:	86 b7       	in	r24, 0x36	; 54
 6c8:	84 60       	ori	r24, 0x04	; 4
 6ca:	86 bf       	out	0x36, r24	; 54
 6cc:	08 95       	ret

000006ce <i2c_start>:
 6ce:	84 ea       	ldi	r24, 0xA4	; 164
 6d0:	86 bf       	out	0x36, r24	; 54
 6d2:	06 b6       	in	r0, 0x36	; 54
 6d4:	07 fe       	sbrs	r0, 7
 6d6:	fd cf       	rjmp	.-6      	; 0x6d2 <i2c_start+0x4>
 6d8:	81 b1       	in	r24, 0x01	; 1
 6da:	88 7f       	andi	r24, 0xF8	; 248
 6dc:	88 30       	cpi	r24, 0x08	; 8
 6de:	e1 f7       	brne	.-8      	; 0x6d8 <i2c_start+0xa>
 6e0:	08 95       	ret

000006e2 <i2c_repeated_start>:
 6e2:	84 ea       	ldi	r24, 0xA4	; 164
 6e4:	86 bf       	out	0x36, r24	; 54
 6e6:	06 b6       	in	r0, 0x36	; 54
 6e8:	07 fe       	sbrs	r0, 7
 6ea:	fd cf       	rjmp	.-6      	; 0x6e6 <i2c_repeated_start+0x4>
 6ec:	81 b1       	in	r24, 0x01	; 1
 6ee:	88 7f       	andi	r24, 0xF8	; 248
 6f0:	80 31       	cpi	r24, 0x10	; 16
 6f2:	e1 f7       	brne	.-8      	; 0x6ec <i2c_repeated_start+0xa>
 6f4:	08 95       	ret

000006f6 <i2c_send_slave_address_with_write_req>:
 6f6:	88 0f       	add	r24, r24
 6f8:	83 b9       	out	0x03, r24	; 3
 6fa:	83 b1       	in	r24, 0x03	; 3
 6fc:	8e 7f       	andi	r24, 0xFE	; 254
 6fe:	83 b9       	out	0x03, r24	; 3
 700:	84 e8       	ldi	r24, 0x84	; 132
 702:	86 bf       	out	0x36, r24	; 54
 704:	06 b6       	in	r0, 0x36	; 54
 706:	07 fe       	sbrs	r0, 7
 708:	fd cf       	rjmp	.-6      	; 0x704 <i2c_send_slave_address_with_write_req+0xe>
 70a:	81 b1       	in	r24, 0x01	; 1
 70c:	88 7f       	andi	r24, 0xF8	; 248
 70e:	88 31       	cpi	r24, 0x18	; 24
 710:	e1 f7       	brne	.-8      	; 0x70a <i2c_send_slave_address_with_write_req+0x14>
 712:	08 95       	ret

00000714 <i2c_send_slave_address_with_read_req>:
 714:	88 0f       	add	r24, r24
 716:	83 b9       	out	0x03, r24	; 3
 718:	83 b1       	in	r24, 0x03	; 3
 71a:	81 60       	ori	r24, 0x01	; 1
 71c:	83 b9       	out	0x03, r24	; 3
 71e:	84 e8       	ldi	r24, 0x84	; 132
 720:	86 bf       	out	0x36, r24	; 54
 722:	06 b6       	in	r0, 0x36	; 54
 724:	07 fe       	sbrs	r0, 7
 726:	fd cf       	rjmp	.-6      	; 0x722 <i2c_send_slave_address_with_read_req+0xe>
 728:	81 b1       	in	r24, 0x01	; 1
 72a:	88 7f       	andi	r24, 0xF8	; 248
 72c:	80 34       	cpi	r24, 0x40	; 64
 72e:	e1 f7       	brne	.-8      	; 0x728 <i2c_send_slave_address_with_read_req+0x14>
 730:	08 95       	ret

00000732 <i2c_write_byte>:
 732:	83 b9       	out	0x03, r24	; 3
 734:	86 b7       	in	r24, 0x36	; 54
 736:	80 68       	ori	r24, 0x80	; 128
 738:	86 bf       	out	0x36, r24	; 54
 73a:	86 b7       	in	r24, 0x36	; 54
 73c:	84 60       	ori	r24, 0x04	; 4
 73e:	86 bf       	out	0x36, r24	; 54
 740:	06 b6       	in	r0, 0x36	; 54
 742:	07 fe       	sbrs	r0, 7
 744:	fd cf       	rjmp	.-6      	; 0x740 <i2c_write_byte+0xe>
 746:	81 b1       	in	r24, 0x01	; 1
 748:	88 7f       	andi	r24, 0xF8	; 248
 74a:	88 32       	cpi	r24, 0x28	; 40
 74c:	e1 f7       	brne	.-8      	; 0x746 <i2c_write_byte+0x14>
 74e:	08 95       	ret

00000750 <i2c_stop>:
 750:	84 e9       	ldi	r24, 0x94	; 148
 752:	86 bf       	out	0x36, r24	; 54
 754:	08 95       	ret

00000756 <i2c_read_byte_nack>:


Uchar8_t i2c_read_byte_nack(void)
{
	/* Clear TWINT flag */
	SET_BIT(TWCR, TWINT);
 756:	86 b7       	in	r24, 0x36	; 54
 758:	80 68       	ori	r24, 0x80	; 128
 75a:	86 bf       	out	0x36, r24	; 54

	/* Enable I2C peripheral */
	SET_BIT(TWCR, TWEN);
 75c:	86 b7       	in	r24, 0x36	; 54
 75e:	84 60       	ori	r24, 0x04	; 4
 760:	86 bf       	out	0x36, r24	; 54
	
	/* Waiting for TWINT flag to be set */
	while ( !(GET_BIT(TWCR,TWINT)) );
 762:	06 b6       	in	r0, 0x36	; 54
 764:	07 fe       	sbrs	r0, 7
 766:	fd cf       	rjmp	.-6      	; 0x762 <i2c_read_byte_nack+0xc>

	return TWDR;
 768:	83 b1       	in	r24, 0x03	; 3
}
 76a:	08 95       	ret

0000076c <SPI_SlaveInit>:
	{
		return SPI_NOK;
	}
	
	return SPI_OK;
}
 76c:	8d b1       	in	r24, 0x0d	; 13
 76e:	8f 7e       	andi	r24, 0xEF	; 239
 770:	8d b9       	out	0x0d, r24	; 13
 772:	8d b1       	in	r24, 0x0d	; 13
 774:	87 7f       	andi	r24, 0xF7	; 247
 776:	8d b9       	out	0x0d, r24	; 13
 778:	8d b1       	in	r24, 0x0d	; 13
 77a:	8b 7f       	andi	r24, 0xFB	; 251
 77c:	8d b9       	out	0x0d, r24	; 13
 77e:	8d b1       	in	r24, 0x0d	; 13
 780:	80 68       	ori	r24, 0x80	; 128
 782:	8d b9       	out	0x0d, r24	; 13
 784:	8d b1       	in	r24, 0x0d	; 13
 786:	80 64       	ori	r24, 0x40	; 64
 788:	8d b9       	out	0x0d, r24	; 13
 78a:	08 95       	ret

0000078c <__vector_12>:

/*************************************************************************************************************
 * 													  ISRs
 ************************************************************************************************************/
ISR(SPI_STC_INT)
{
 78c:	1f 92       	push	r1
 78e:	0f 92       	push	r0
 790:	0f b6       	in	r0, 0x3f	; 63
 792:	0f 92       	push	r0
 794:	11 24       	eor	r1, r1
 796:	2f 93       	push	r18
 798:	3f 93       	push	r19
 79a:	8f 93       	push	r24
 79c:	9f 93       	push	r25
 79e:	ef 93       	push	r30
 7a0:	ff 93       	push	r31
	/*------------------------ Reception ------------------------*/
	u8_g_SlaveReceive = SPDR;
 7a2:	8f b1       	in	r24, 0x0f	; 15
 7a4:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <u8_g_SlaveReceive>
	//DIO_s8SETPortVal(DIO_PORTA, u8_g_SlaveReceive);
	
	/* If Max size is exceeded, start overriding data */
	if(u8_g_SlaveRxIndex == SPI_BUFFER_SIZE) u8_g_SlaveRxIndex = 0;
 7a8:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <u8_g_SlaveRxIndex>
 7ac:	9f 30       	cpi	r25, 0x0F	; 15
 7ae:	11 f4       	brne	.+4      	; 0x7b4 <__vector_12+0x28>
 7b0:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <u8_g_SlaveRxIndex>
	if(u8_g_SlaveReceive != DATA_END)
 7b4:	83 32       	cpi	r24, 0x23	; 35
 7b6:	59 f0       	breq	.+22     	; 0x7ce <__vector_12+0x42>
	{
		/* Store received byte in buffer */
		arr_g_SlaveRxBuffer[u8_g_SlaveRxIndex] = u8_g_SlaveReceive;
 7b8:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <u8_g_SlaveRxIndex>
 7bc:	e9 2f       	mov	r30, r25
 7be:	f0 e0       	ldi	r31, 0x00	; 0
 7c0:	e3 51       	subi	r30, 0x13	; 19
 7c2:	fe 4f       	sbci	r31, 0xFE	; 254
 7c4:	80 83       	st	Z, r24
		u8_g_SlaveRxIndex++;
 7c6:	9f 5f       	subi	r25, 0xFF	; 255
 7c8:	90 93 fe 01 	sts	0x01FE, r25	; 0x8001fe <u8_g_SlaveRxIndex>
 7cc:	04 c0       	rjmp	.+8      	; 0x7d6 <__vector_12+0x4a>
	}
	else
	{	// Get the number of received bytes
		u8_g_SlaveRxLen = u8_g_SlaveRxIndex;
 7ce:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <u8_g_SlaveRxIndex>
 7d2:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <u8_g_SlaveRxLen>
	}
	
	/*------------------------- Sending -------------------------*/
	//u8_g_SlaveTxIndex++;
	if((u8_g_SlaveTxIndex < u8_g_SlaveTxLen) && (pu8_g_SlaveTxPtr != null))
 7d6:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <u8_g_SlaveTxIndex>
 7da:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <u8_g_SlaveTxLen>
 7de:	89 17       	cp	r24, r25
 7e0:	88 f4       	brcc	.+34     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7e2:	20 91 fc 01 	lds	r18, 0x01FC	; 0x8001fc <pu8_g_SlaveTxPtr>
 7e6:	30 91 fd 01 	lds	r19, 0x01FD	; 0x8001fd <pu8_g_SlaveTxPtr+0x1>
 7ea:	21 15       	cp	r18, r1
 7ec:	31 05       	cpc	r19, r1
 7ee:	51 f0       	breq	.+20     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
	{
		SPDR = pu8_g_SlaveTxPtr[u8_g_SlaveTxIndex++];
 7f0:	91 e0       	ldi	r25, 0x01	; 1
 7f2:	98 0f       	add	r25, r24
 7f4:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <u8_g_SlaveTxIndex>
 7f8:	f9 01       	movw	r30, r18
 7fa:	e8 0f       	add	r30, r24
 7fc:	f1 1d       	adc	r31, r1
 7fe:	80 81       	ld	r24, Z
 800:	8f b9       	out	0x0f, r24	; 15
 802:	04 c0       	rjmp	.+8      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
	}
	else if(u8_g_SlaveTxIndex >= u8_g_SlaveTxLen)
 804:	89 17       	cp	r24, r25
 806:	10 f0       	brcs	.+4      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
	{
		SPDR = DATA_END;
 808:	83 e2       	ldi	r24, 0x23	; 35
 80a:	8f b9       	out	0x0f, r24	; 15
	}
 80c:	ff 91       	pop	r31
 80e:	ef 91       	pop	r30
 810:	9f 91       	pop	r25
 812:	8f 91       	pop	r24
 814:	3f 91       	pop	r19
 816:	2f 91       	pop	r18
 818:	0f 90       	pop	r0
 81a:	0f be       	out	0x3f, r0	; 63
 81c:	0f 90       	pop	r0
 81e:	1f 90       	pop	r1
 820:	18 95       	reti

00000822 <USART_init>:
	CLEAR_BIT(UCSRB,UCSZ2);
	
	#elif USART_SET_DATA_SIZE == USART_DATA_SIZE_8
	SET_BIT(UCSRC,UCSZ0);
	SET_BIT(UCSRC,UCSZ1);
	CLEAR_BIT(UCSRB,UCSZ2);
 822:	8a b1       	in	r24, 0x0a	; 10
 824:	8b 7f       	andi	r24, 0xFB	; 251
	
	#endif
	
	/* select USART Speed (Normal,Double) */
	#if USART_SET_SPEED == USART_NORMAL_SPEED
	CLEAR_BIT(UCSRA,U2X);
 826:	9b b1       	in	r25, 0x0b	; 11
 828:	9d 7f       	andi	r25, 0xFD	; 253
 82a:	9b b9       	out	0x0b, r25	; 11
	return USART_NOT_OK;
	
	#endif
	/* Enable Transmit and receive bits in UCSRB*/
	SET_BIT(UCSRB,RXEN);
	SET_BIT(UCSRB,TXEN);
 82c:	88 61       	ori	r24, 0x18	; 24
 82e:	8a b9       	out	0x0a, r24	; 10
	
	/* assign UBRRL and UBRRH with calculated BAUD_PRESCALLER */
	UBRRL = BAUD_PRESCALLER;
 830:	83 e3       	ldi	r24, 0x33	; 51
 832:	89 b9       	out	0x09, r24	; 9
	UBRRH = (BAUD_PRESCALLER>>8);
 834:	10 bc       	out	0x20, r1	; 32
	
   return USART_OK;
}
 836:	80 e0       	ldi	r24, 0x00	; 0
 838:	08 95       	ret

0000083a <USART_sendData>:
EN_USART_ERROR USART_sendData(Uchar8_t data)
{
	// WAIT UNTIL ISEMPTY FLAG IS SET
	while(!GET_BIT(UCSRA,UDRE));
 83a:	5d 9b       	sbis	0x0b, 5	; 11
 83c:	fe cf       	rjmp	.-4      	; 0x83a <USART_sendData>
	
	// assign data to UDR register to be sent
	UDR = data;
 83e:	8c b9       	out	0x0c, r24	; 12
	
	return USART_OK;
}
 840:	80 e0       	ldi	r24, 0x00	; 0
 842:	08 95       	ret

00000844 <USART_receiveData>:
Uchar8_t USART_receiveData(void)
{
	// WAIT UNTIL Recieve FLAG IS SET
	while(!GET_BIT(UCSRA,RXC));
 844:	5f 9b       	sbis	0x0b, 7	; 11
 846:	fe cf       	rjmp	.-4      	; 0x844 <USART_receiveData>
	return UDR;
}
 848:	8c b1       	in	r24, 0x0c	; 12
 84a:	08 95       	ret

0000084c <USART_sendSTRING>:
void USART_sendSTRING(Uchar8_t * str)
{
 84c:	0f 93       	push	r16
 84e:	1f 93       	push	r17
 850:	cf 93       	push	r28
 852:	8c 01       	movw	r16, r24
	Uchar8_t COUNTER = 0;
 854:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[COUNTER] != null)
 856:	03 c0       	rjmp	.+6      	; 0x85e <USART_sendSTRING+0x12>
	{
		USART_sendData(str[COUNTER]);
 858:	0e 94 1d 04 	call	0x83a	; 0x83a <USART_sendData>
		COUNTER++;
 85c:	cf 5f       	subi	r28, 0xFF	; 255
	return UDR;
}
void USART_sendSTRING(Uchar8_t * str)
{
	Uchar8_t COUNTER = 0;
	while(str[COUNTER] != null)
 85e:	f8 01       	movw	r30, r16
 860:	ec 0f       	add	r30, r28
 862:	f1 1d       	adc	r31, r1
 864:	80 81       	ld	r24, Z
 866:	81 11       	cpse	r24, r1
 868:	f7 cf       	rjmp	.-18     	; 0x858 <USART_sendSTRING+0xc>
	{
		USART_sendData(str[COUNTER]);
		COUNTER++;
	}
}
 86a:	cf 91       	pop	r28
 86c:	1f 91       	pop	r17
 86e:	0f 91       	pop	r16
 870:	08 95       	ret

00000872 <USART_receiveSTRING>:
void USART_receiveSTRING(Uchar8_t * str ,Uchar8_t size )
{
 872:	0f 93       	push	r16
 874:	1f 93       	push	r17
 876:	cf 93       	push	r28
 878:	df 93       	push	r29
 87a:	8c 01       	movw	r16, r24
 87c:	d6 2f       	mov	r29, r22
	Uchar8_t COUNTER = 0;
 87e:	c0 e0       	ldi	r28, 0x00	; 0
	while(COUNTER < size-1)
 880:	0b c0       	rjmp	.+22     	; 0x898 <USART_receiveSTRING+0x26>
	{
		
		str[COUNTER]= USART_receiveData();
 882:	0e 94 22 04 	call	0x844	; 0x844 <USART_receiveData>
 886:	f8 01       	movw	r30, r16
 888:	ec 0f       	add	r30, r28
 88a:	f1 1d       	adc	r31, r1
 88c:	80 83       	st	Z, r24
		if(str[COUNTER] == ENTER_KEY)break;
 88e:	8d 30       	cpi	r24, 0x0D	; 13
 890:	59 f0       	breq	.+22     	; 0x8a8 <USART_receiveSTRING+0x36>
		USART_sendData(str[COUNTER]);
 892:	0e 94 1d 04 	call	0x83a	; 0x83a <USART_sendData>
		COUNTER++;
 896:	cf 5f       	subi	r28, 0xFF	; 255
	}
}
void USART_receiveSTRING(Uchar8_t * str ,Uchar8_t size )
{
	Uchar8_t COUNTER = 0;
	while(COUNTER < size-1)
 898:	2c 2f       	mov	r18, r28
 89a:	30 e0       	ldi	r19, 0x00	; 0
 89c:	8d 2f       	mov	r24, r29
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	01 97       	sbiw	r24, 0x01	; 1
 8a2:	28 17       	cp	r18, r24
 8a4:	39 07       	cpc	r19, r25
 8a6:	6c f3       	brlt	.-38     	; 0x882 <USART_receiveSTRING+0x10>
		str[COUNTER]= USART_receiveData();
		if(str[COUNTER] == ENTER_KEY)break;
		USART_sendData(str[COUNTER]);
		COUNTER++;
	}
	str[COUNTER] = null;
 8a8:	f8 01       	movw	r30, r16
 8aa:	ec 0f       	add	r30, r28
 8ac:	f1 1d       	adc	r31, r1
 8ae:	10 82       	st	Z, r1
}
 8b0:	df 91       	pop	r29
 8b2:	cf 91       	pop	r28
 8b4:	1f 91       	pop	r17
 8b6:	0f 91       	pop	r16
 8b8:	08 95       	ret

000008ba <_exit>:
 8ba:	f8 94       	cli

000008bc <__stop_program>:
 8bc:	ff cf       	rjmp	.-2      	; 0x8bc <__stop_program>
